
workable.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002ae  00800100  000023d8  0000246c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000023d8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002a  008003ae  008003ae  0000271a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000271a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002778  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  000027b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a7d  00000000  00000000  000028c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000094d  00000000  00000000  00004345  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f81  00000000  00000000  00004c92  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000350  00000000  00000000  00005c14  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008f9  00000000  00000000  00005f64  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000118b  00000000  00000000  0000685d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  000079e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ba 00 	jmp	0x174	; 0x174 <__ctors_end>
       4:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
       8:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
       c:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
      10:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
      14:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
      18:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
      1c:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
      20:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
      24:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
      28:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
      2c:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
      30:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
      34:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
      38:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
      3c:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
      40:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
      44:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
      48:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
      4c:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
      50:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
      54:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
      58:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
      5c:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
      60:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
      64:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
      68:	aa 04       	cpc	r10, r10
      6a:	c8 04       	cpc	r12, r8
      6c:	e6 04       	cpc	r14, r6
      6e:	04 05       	cpc	r16, r4
      70:	22 05       	cpc	r18, r2
      72:	c0 05       	cpc	r28, r0
      74:	fc 06       	cpc	r15, r28
      76:	1b 06       	cpc	r1, r27
      78:	2a 06       	cpc	r2, r26

0000007a <__trampolines_end>:
      7a:	00 40       	sbci	r16, 0x00	; 0
      7c:	7a 10       	cpse	r7, r10
      7e:	f3 5a       	subi	r31, 0xA3	; 163
      80:	00 a0       	ldd	r0, Z+32	; 0x20
      82:	72 4e       	sbci	r23, 0xE2	; 226
      84:	18 09       	sbc	r17, r8
      86:	00 10       	cpse	r0, r0
      88:	a5 d4       	rcall	.+2378   	; 0x9d4 <ui_show_display+0xc4>
      8a:	e8 00       	.word	0x00e8	; ????
      8c:	00 e8       	ldi	r16, 0x80	; 128
      8e:	76 48       	sbci	r23, 0x86	; 134
      90:	17 00       	.word	0x0017	; ????
      92:	00 e4       	ldi	r16, 0x40	; 64
      94:	0b 54       	subi	r16, 0x4B	; 75
      96:	02 00       	.word	0x0002	; ????
      98:	00 ca       	rjmp	.-3072   	; 0xfffff49a <__eeprom_end+0xff7ef49a>
      9a:	9a 3b       	cpi	r25, 0xBA	; 186
      9c:	00 00       	nop
      9e:	00 e1       	ldi	r16, 0x10	; 16
      a0:	f5 05       	cpc	r31, r5
      a2:	00 00       	nop
      a4:	80 96       	adiw	r24, 0x20	; 32
      a6:	98 00       	.word	0x0098	; ????
      a8:	00 00       	nop
      aa:	40 42       	sbci	r20, 0x20	; 32
      ac:	0f 00       	.word	0x000f	; ????
      ae:	00 00       	nop
      b0:	a0 86       	std	Z+8, r10	; 0x08
      b2:	01 00       	.word	0x0001	; ????
      b4:	00 00       	nop
      b6:	10 27       	eor	r17, r16
      b8:	00 00       	nop
      ba:	00 00       	nop
      bc:	e8 03       	fmulsu	r22, r16
      be:	00 00       	nop
      c0:	00 00       	nop
      c2:	64 00       	.word	0x0064	; ????
      c4:	00 00       	nop
      c6:	00 00       	nop
      c8:	0a 00       	.word	0x000a	; ????
      ca:	00 00       	nop
      cc:	00 00       	nop
      ce:	01 00       	.word	0x0001	; ????
      d0:	00 00       	nop
      d2:	00 00       	nop
      d4:	2c 76       	andi	r18, 0x6C	; 108
      d6:	d8 88       	ldd	r13, Y+16	; 0x10
      d8:	dc 67       	ori	r29, 0x7C	; 124
      da:	4f 08       	sbc	r4, r15
      dc:	23 df       	rcall	.-442    	; 0xffffff24 <__eeprom_end+0xff7eff24>
      de:	c1 df       	rcall	.-126    	; 0x62 <__SREG__+0x23>
      e0:	ae 59       	subi	r26, 0x9E	; 158
      e2:	e1 b1       	in	r30, 0x01	; 1
      e4:	b7 96       	adiw	r30, 0x27	; 39
      e6:	e5 e3       	ldi	r30, 0x35	; 53
      e8:	e4 53       	subi	r30, 0x34	; 52
      ea:	c6 3a       	cpi	r28, 0xA6	; 166
      ec:	e6 51       	subi	r30, 0x16	; 22
      ee:	99 76       	andi	r25, 0x69	; 105
      f0:	96 e8       	ldi	r25, 0x86	; 134
      f2:	e6 c2       	rjmp	.+1484   	; 0x6c0 <display_set+0xd4>
      f4:	84 26       	eor	r8, r20
      f6:	eb 89       	ldd	r30, Y+19	; 0x13
      f8:	8c 9b       	sbis	0x11, 4	; 17
      fa:	62 ed       	ldi	r22, 0xD2	; 210
      fc:	40 7c       	andi	r20, 0xC0	; 192
      fe:	6f fc       	.word	0xfc6f	; ????
     100:	ef bc       	out	0x2f, r14	; 47
     102:	9c 9f       	mul	r25, r28
     104:	40 f2       	brcs	.-112    	; 0x96 <__trampolines_end+0x1c>
     106:	ba a5       	ldd	r27, Y+42	; 0x2a
     108:	6f a5       	ldd	r22, Y+47	; 0x2f
     10a:	f4 90       	lpm	r15, Z
     10c:	05 5a       	subi	r16, 0xA5	; 165
     10e:	2a f7       	brpl	.-54     	; 0xda <__trampolines_end+0x60>
     110:	5c 93       	st	X, r21
     112:	6b 6c       	ori	r22, 0xCB	; 203
     114:	f9 67       	ori	r31, 0x79	; 121
     116:	6d c1       	rjmp	.+730    	; 0x3f2 <DS18B20_reset+0x1a>
     118:	1b fc       	.word	0xfc1b	; ????
     11a:	e0 e4       	ldi	r30, 0x40	; 64
     11c:	0d 47       	sbci	r16, 0x7D	; 125
     11e:	fe f5       	brtc	.+126    	; 0x19e <.do_clear_bss_loop>
     120:	20 e6       	ldi	r18, 0x60	; 96
     122:	b5 00       	.word	0x00b5	; ????
     124:	d0 ed       	ldi	r29, 0xD0	; 208
     126:	90 2e       	mov	r9, r16
     128:	03 00       	.word	0x0003	; ????
     12a:	94 35       	cpi	r25, 0x54	; 84
     12c:	77 05       	cpc	r23, r7
     12e:	00 80       	ld	r0, Z
     130:	84 1e       	adc	r8, r20
     132:	08 00       	.word	0x0008	; ????
     134:	00 20       	and	r0, r0
     136:	4e 0a       	sbc	r4, r30
     138:	00 00       	nop
     13a:	00 c8       	rjmp	.-4096   	; 0xfffff13c <__eeprom_end+0xff7ef13c>
     13c:	0c 33       	cpi	r16, 0x3C	; 60
     13e:	33 33       	cpi	r19, 0x33	; 51
     140:	33 0f       	add	r19, r19
     142:	98 6e       	ori	r25, 0xE8	; 232
     144:	12 83       	std	Z+2, r17	; 0x02
     146:	11 41       	sbci	r17, 0x11	; 17
     148:	ef 8d       	ldd	r30, Y+31	; 0x1f
     14a:	21 14       	cp	r2, r1
     14c:	89 3b       	cpi	r24, 0xB9	; 185
     14e:	e6 55       	subi	r30, 0x56	; 86
     150:	16 cf       	rjmp	.-468    	; 0xffffff7e <__eeprom_end+0xff7eff7e>
     152:	fe e6       	ldi	r31, 0x6E	; 110
     154:	db 18       	sub	r13, r11
     156:	d1 84       	ldd	r13, Z+9	; 0x09
     158:	4b 38       	cpi	r20, 0x8B	; 139
     15a:	1b f7       	brvc	.-58     	; 0x122 <__trampolines_end+0xa8>
     15c:	7c 1d       	adc	r23, r12
     15e:	90 1d       	adc	r25, r0
     160:	a4 bb       	out	0x14, r26	; 20
     162:	e4 24       	eor	r14, r4
     164:	20 32       	cpi	r18, 0x20	; 32
     166:	84 72       	andi	r24, 0x24	; 36
     168:	5e 22       	and	r5, r30
     16a:	81 00       	.word	0x0081	; ????
     16c:	c9 f1       	breq	.+114    	; 0x1e0 <format_float+0x2e>
     16e:	24 ec       	ldi	r18, 0xC4	; 196
     170:	a1 e5       	ldi	r26, 0x51	; 81
     172:	3d 27       	eor	r19, r29

00000174 <__ctors_end>:
     174:	11 24       	eor	r1, r1
     176:	1f be       	out	0x3f, r1	; 63
     178:	cf ef       	ldi	r28, 0xFF	; 255
     17a:	d8 e0       	ldi	r29, 0x08	; 8
     17c:	de bf       	out	0x3e, r29	; 62
     17e:	cd bf       	out	0x3d, r28	; 61

00000180 <__do_copy_data>:
     180:	13 e0       	ldi	r17, 0x03	; 3
     182:	a0 e0       	ldi	r26, 0x00	; 0
     184:	b1 e0       	ldi	r27, 0x01	; 1
     186:	e8 ed       	ldi	r30, 0xD8	; 216
     188:	f3 e2       	ldi	r31, 0x23	; 35
     18a:	02 c0       	rjmp	.+4      	; 0x190 <__do_copy_data+0x10>
     18c:	05 90       	lpm	r0, Z+
     18e:	0d 92       	st	X+, r0
     190:	ae 3a       	cpi	r26, 0xAE	; 174
     192:	b1 07       	cpc	r27, r17
     194:	d9 f7       	brne	.-10     	; 0x18c <__do_copy_data+0xc>

00000196 <__do_clear_bss>:
     196:	23 e0       	ldi	r18, 0x03	; 3
     198:	ae ea       	ldi	r26, 0xAE	; 174
     19a:	b3 e0       	ldi	r27, 0x03	; 3
     19c:	01 c0       	rjmp	.+2      	; 0x1a0 <.do_clear_bss_start>

0000019e <.do_clear_bss_loop>:
     19e:	1d 92       	st	X+, r1

000001a0 <.do_clear_bss_start>:
     1a0:	a8 3d       	cpi	r26, 0xD8	; 216
     1a2:	b2 07       	cpc	r27, r18
     1a4:	e1 f7       	brne	.-8      	; 0x19e <.do_clear_bss_loop>
     1a6:	0e 94 ab 09 	call	0x1356	; 0x1356 <main>
     1aa:	0c 94 ea 11 	jmp	0x23d4	; 0x23d4 <_exit>

000001ae <__bad_interrupt>:
     1ae:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001b2 <format_float>:
{
    while (*str)
    {
        LCD_1602A_load_data(*str++);
    }
}
     1b2:	af 92       	push	r10
     1b4:	bf 92       	push	r11
     1b6:	cf 92       	push	r12
     1b8:	df 92       	push	r13
     1ba:	ef 92       	push	r14
     1bc:	ff 92       	push	r15
     1be:	0f 93       	push	r16
     1c0:	1f 93       	push	r17
     1c2:	cf 93       	push	r28
     1c4:	df 93       	push	r29
     1c6:	cd b7       	in	r28, 0x3d	; 61
     1c8:	de b7       	in	r29, 0x3e	; 62
     1ca:	68 97       	sbiw	r28, 0x18	; 24
     1cc:	0f b6       	in	r0, 0x3f	; 63
     1ce:	f8 94       	cli
     1d0:	de bf       	out	0x3e, r29	; 62
     1d2:	0f be       	out	0x3f, r0	; 63
     1d4:	cd bf       	out	0x3d, r28	; 61
     1d6:	d8 2e       	mov	r13, r24
     1d8:	c9 2e       	mov	r12, r25
     1da:	b6 2e       	mov	r11, r22
     1dc:	a7 2e       	mov	r10, r23
     1de:	ca 01       	movw	r24, r20
     1e0:	b9 01       	movw	r22, r18
     1e2:	20 2f       	mov	r18, r16
     1e4:	8e 01       	movw	r16, r28
     1e6:	0f 5f       	subi	r16, 0xFF	; 255
     1e8:	1f 4f       	sbci	r17, 0xFF	; 255
     1ea:	40 e0       	ldi	r20, 0x00	; 0
     1ec:	0e 94 a0 0c 	call	0x1940	; 0x1940 <dtostrf>
     1f0:	e1 14       	cp	r14, r1
     1f2:	f1 04       	cpc	r15, r1
     1f4:	c1 f0       	breq	.+48     	; 0x226 <format_float+0x74>
     1f6:	f7 01       	movw	r30, r14
     1f8:	80 81       	ld	r24, Z
     1fa:	88 23       	and	r24, r24
     1fc:	a1 f0       	breq	.+40     	; 0x226 <format_float+0x74>
     1fe:	ff 92       	push	r15
     200:	ef 92       	push	r14
     202:	1f 93       	push	r17
     204:	0f 93       	push	r16
     206:	80 e7       	ldi	r24, 0x70	; 112
     208:	91 e0       	ldi	r25, 0x01	; 1
     20a:	9f 93       	push	r25
     20c:	8f 93       	push	r24
     20e:	af 92       	push	r10
     210:	bf 92       	push	r11
     212:	cf 92       	push	r12
     214:	df 92       	push	r13
     216:	0e 94 c0 0c 	call	0x1980	; 0x1980 <snprintf>
     21a:	0f b6       	in	r0, 0x3f	; 63
     21c:	f8 94       	cli
     21e:	de bf       	out	0x3e, r29	; 62
     220:	0f be       	out	0x3f, r0	; 63
     222:	cd bf       	out	0x3d, r28	; 61
     224:	13 c0       	rjmp	.+38     	; 0x24c <format_float+0x9a>
     226:	ce 01       	movw	r24, r28
     228:	01 96       	adiw	r24, 0x01	; 1
     22a:	9f 93       	push	r25
     22c:	8f 93       	push	r24
     22e:	83 e7       	ldi	r24, 0x73	; 115
     230:	91 e0       	ldi	r25, 0x01	; 1
     232:	9f 93       	push	r25
     234:	8f 93       	push	r24
     236:	af 92       	push	r10
     238:	bf 92       	push	r11
     23a:	cf 92       	push	r12
     23c:	df 92       	push	r13
     23e:	0e 94 c0 0c 	call	0x1980	; 0x1980 <snprintf>
     242:	0f b6       	in	r0, 0x3f	; 63
     244:	f8 94       	cli
     246:	de bf       	out	0x3e, r29	; 62
     248:	0f be       	out	0x3f, r0	; 63
     24a:	cd bf       	out	0x3d, r28	; 61
     24c:	68 96       	adiw	r28, 0x18	; 24
     24e:	0f b6       	in	r0, 0x3f	; 63
     250:	f8 94       	cli
     252:	de bf       	out	0x3e, r29	; 62
     254:	0f be       	out	0x3f, r0	; 63
     256:	cd bf       	out	0x3d, r28	; 61
     258:	df 91       	pop	r29
     25a:	cf 91       	pop	r28
     25c:	1f 91       	pop	r17
     25e:	0f 91       	pop	r16
     260:	ff 90       	pop	r15
     262:	ef 90       	pop	r14
     264:	df 90       	pop	r13
     266:	cf 90       	pop	r12
     268:	bf 90       	pop	r11
     26a:	af 90       	pop	r10
     26c:	08 95       	ret

0000026e <LED_SYSTEM_ACTIVE_INIT>:
     26e:	87 b1       	in	r24, 0x07	; 7
     270:	82 60       	ori	r24, 0x02	; 2
     272:	87 b9       	out	0x07, r24	; 7
     274:	88 b1       	in	r24, 0x08	; 8
     276:	8d 7f       	andi	r24, 0xFD	; 253
     278:	88 b9       	out	0x08, r24	; 8
     27a:	08 95       	ret

0000027c <LED_system_active_off>:
     27c:	88 b1       	in	r24, 0x08	; 8
     27e:	8d 7f       	andi	r24, 0xFD	; 253
     280:	88 b9       	out	0x08, r24	; 8
     282:	08 95       	ret

00000284 <LED_system_active_on>:
     284:	88 b1       	in	r24, 0x08	; 8
     286:	82 60       	ori	r24, 0x02	; 2
     288:	88 b9       	out	0x08, r24	; 8
     28a:	08 95       	ret

0000028c <LCD_1602A_latch>:
     28c:	85 b1       	in	r24, 0x05	; 5
     28e:	82 60       	ori	r24, 0x02	; 2
     290:	85 b9       	out	0x05, r24	; 5
     292:	85 e0       	ldi	r24, 0x05	; 5
     294:	8a 95       	dec	r24
     296:	f1 f7       	brne	.-4      	; 0x294 <LCD_1602A_latch+0x8>
     298:	00 00       	nop
     29a:	85 b1       	in	r24, 0x05	; 5
     29c:	8d 7f       	andi	r24, 0xFD	; 253
     29e:	85 b9       	out	0x05, r24	; 5
     2a0:	8f e8       	ldi	r24, 0x8F	; 143
     2a2:	91 e0       	ldi	r25, 0x01	; 1
     2a4:	01 97       	sbiw	r24, 0x01	; 1
     2a6:	f1 f7       	brne	.-4      	; 0x2a4 <LCD_1602A_latch+0x18>
     2a8:	00 c0       	rjmp	.+0      	; 0x2aa <LCD_1602A_latch+0x1e>
     2aa:	00 00       	nop
     2ac:	08 95       	ret

000002ae <LCD_1602A_send_nibble>:
     2ae:	9b b1       	in	r25, 0x0b	; 11
     2b0:	9f 70       	andi	r25, 0x0F	; 15
     2b2:	9b b9       	out	0x0b, r25	; 11
     2b4:	80 ff       	sbrs	r24, 0
     2b6:	03 c0       	rjmp	.+6      	; 0x2be <LCD_1602A_send_nibble+0x10>
     2b8:	9b b1       	in	r25, 0x0b	; 11
     2ba:	90 61       	ori	r25, 0x10	; 16
     2bc:	9b b9       	out	0x0b, r25	; 11
     2be:	81 ff       	sbrs	r24, 1
     2c0:	03 c0       	rjmp	.+6      	; 0x2c8 <LCD_1602A_send_nibble+0x1a>
     2c2:	9b b1       	in	r25, 0x0b	; 11
     2c4:	90 62       	ori	r25, 0x20	; 32
     2c6:	9b b9       	out	0x0b, r25	; 11
     2c8:	82 ff       	sbrs	r24, 2
     2ca:	03 c0       	rjmp	.+6      	; 0x2d2 <LCD_1602A_send_nibble+0x24>
     2cc:	9b b1       	in	r25, 0x0b	; 11
     2ce:	90 64       	ori	r25, 0x40	; 64
     2d0:	9b b9       	out	0x0b, r25	; 11
     2d2:	83 ff       	sbrs	r24, 3
     2d4:	03 c0       	rjmp	.+6      	; 0x2dc <LCD_1602A_send_nibble+0x2e>
     2d6:	8b b1       	in	r24, 0x0b	; 11
     2d8:	80 68       	ori	r24, 0x80	; 128
     2da:	8b b9       	out	0x0b, r24	; 11
     2dc:	0e 94 46 01 	call	0x28c	; 0x28c <LCD_1602A_latch>
     2e0:	08 95       	ret

000002e2 <LCD_1602A_load_command>:
     2e2:	cf 93       	push	r28
     2e4:	c8 2f       	mov	r28, r24
     2e6:	85 b1       	in	r24, 0x05	; 5
     2e8:	8e 7f       	andi	r24, 0xFE	; 254
     2ea:	85 b9       	out	0x05, r24	; 5
     2ec:	8c 2f       	mov	r24, r28
     2ee:	82 95       	swap	r24
     2f0:	8f 70       	andi	r24, 0x0F	; 15
     2f2:	0e 94 57 01 	call	0x2ae	; 0x2ae <LCD_1602A_send_nibble>
     2f6:	8c 2f       	mov	r24, r28
     2f8:	8f 70       	andi	r24, 0x0F	; 15
     2fa:	0e 94 57 01 	call	0x2ae	; 0x2ae <LCD_1602A_send_nibble>
     2fe:	cf 91       	pop	r28
     300:	08 95       	ret

00000302 <LCD_1602A_load_data>:
     302:	cf 93       	push	r28
     304:	c8 2f       	mov	r28, r24
     306:	85 b1       	in	r24, 0x05	; 5
     308:	81 60       	ori	r24, 0x01	; 1
     30a:	85 b9       	out	0x05, r24	; 5
     30c:	8c 2f       	mov	r24, r28
     30e:	82 95       	swap	r24
     310:	8f 70       	andi	r24, 0x0F	; 15
     312:	0e 94 57 01 	call	0x2ae	; 0x2ae <LCD_1602A_send_nibble>
     316:	8c 2f       	mov	r24, r28
     318:	8f 70       	andi	r24, 0x0F	; 15
     31a:	0e 94 57 01 	call	0x2ae	; 0x2ae <LCD_1602A_send_nibble>
     31e:	cf 91       	pop	r28
     320:	08 95       	ret

00000322 <LCD_1602A_create_char>:

void LCD_1602A_create_char(uint8_t location, uint8_t charmap[])
{
     322:	0f 93       	push	r16
     324:	1f 93       	push	r17
     326:	cf 93       	push	r28
     328:	8b 01       	movw	r16, r22
    location &= 0x07;                               // only 0–7 valid
     32a:	87 70       	andi	r24, 0x07	; 7
    LCD_1602A_load_command(0x40 | (location << 3)); // Set CGRAM address
     32c:	90 e0       	ldi	r25, 0x00	; 0
     32e:	88 0f       	add	r24, r24
     330:	99 1f       	adc	r25, r25
     332:	88 0f       	add	r24, r24
     334:	99 1f       	adc	r25, r25
     336:	88 0f       	add	r24, r24
     338:	99 1f       	adc	r25, r25
     33a:	80 64       	ori	r24, 0x40	; 64
     33c:	0e 94 71 01 	call	0x2e2	; 0x2e2 <LCD_1602A_load_command>

    for (uint8_t i = 0; i < 8; i++)
     340:	c0 e0       	ldi	r28, 0x00	; 0
     342:	07 c0       	rjmp	.+14     	; 0x352 <LCD_1602A_create_char+0x30>
    {
        LCD_1602A_load_data(charmap[i]); // write pixel pattern
     344:	f8 01       	movw	r30, r16
     346:	ec 0f       	add	r30, r28
     348:	f1 1d       	adc	r31, r1
     34a:	80 81       	ld	r24, Z
     34c:	0e 94 81 01 	call	0x302	; 0x302 <LCD_1602A_load_data>
void LCD_1602A_create_char(uint8_t location, uint8_t charmap[])
{
    location &= 0x07;                               // only 0–7 valid
    LCD_1602A_load_command(0x40 | (location << 3)); // Set CGRAM address

    for (uint8_t i = 0; i < 8; i++)
     350:	cf 5f       	subi	r28, 0xFF	; 255
     352:	c8 30       	cpi	r28, 0x08	; 8
     354:	b8 f3       	brcs	.-18     	; 0x344 <LCD_1602A_create_char+0x22>
    {
        LCD_1602A_load_data(charmap[i]); // write pixel pattern
    }

    // Return to DDRAM (display memory)
    LCD_1602A_load_command(0x80);
     356:	80 e8       	ldi	r24, 0x80	; 128
     358:	0e 94 71 01 	call	0x2e2	; 0x2e2 <LCD_1602A_load_command>
}
     35c:	cf 91       	pop	r28
     35e:	1f 91       	pop	r17
     360:	0f 91       	pop	r16
     362:	08 95       	ret

00000364 <LCD_1602A_init>:
    params: void
    returns: void
*/
void LCD_1602A_init(void)
{
    LCD_1602A_CTRL_DDR |= (1 << LCD_1602A_RS) | (1 << LCD_1602A_EN);
     364:	84 b1       	in	r24, 0x04	; 4
     366:	83 60       	ori	r24, 0x03	; 3
     368:	84 b9       	out	0x04, r24	; 4
    LCD_1602A_DATA_DDR |= (1 << LCD_1602A_D4) | (1 << LCD_1602A_D5) | (1 << LCD_1602A_D6) | (1 << LCD_1602A_D7);
     36a:	8a b1       	in	r24, 0x0a	; 10
     36c:	80 6f       	ori	r24, 0xF0	; 240
     36e:	8a b9       	out	0x0a, r24	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     370:	2f ef       	ldi	r18, 0xFF	; 255
     372:	89 ef       	ldi	r24, 0xF9	; 249
     374:	90 e0       	ldi	r25, 0x00	; 0
     376:	21 50       	subi	r18, 0x01	; 1
     378:	80 40       	sbci	r24, 0x00	; 0
     37a:	90 40       	sbci	r25, 0x00	; 0
     37c:	e1 f7       	brne	.-8      	; 0x376 <LCD_1602A_init+0x12>
     37e:	00 c0       	rjmp	.+0      	; 0x380 <LCD_1602A_init+0x1c>
     380:	00 00       	nop

    _delay_ms(20); // Wait for LCD power up
    LCD_1602A_send_nibble(DISPLAY_WAIT_POWER_UP);
     382:	83 e0       	ldi	r24, 0x03	; 3
     384:	0e 94 57 01 	call	0x2ae	; 0x2ae <LCD_1602A_send_nibble>
     388:	8f e1       	ldi	r24, 0x1F	; 31
     38a:	9e e4       	ldi	r25, 0x4E	; 78
     38c:	01 97       	sbiw	r24, 0x01	; 1
     38e:	f1 f7       	brne	.-4      	; 0x38c <LCD_1602A_init+0x28>
     390:	00 c0       	rjmp	.+0      	; 0x392 <LCD_1602A_init+0x2e>
     392:	00 00       	nop
    _delay_ms(5);
    LCD_1602A_send_nibble(DISPLAY_WAIT_POWER_UP);
     394:	83 e0       	ldi	r24, 0x03	; 3
     396:	0e 94 57 01 	call	0x2ae	; 0x2ae <LCD_1602A_send_nibble>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     39a:	87 e5       	ldi	r24, 0x57	; 87
     39c:	92 e0       	ldi	r25, 0x02	; 2
     39e:	01 97       	sbiw	r24, 0x01	; 1
     3a0:	f1 f7       	brne	.-4      	; 0x39e <LCD_1602A_init+0x3a>
     3a2:	00 c0       	rjmp	.+0      	; 0x3a4 <LCD_1602A_init+0x40>
     3a4:	00 00       	nop
    _delay_us(150);
    LCD_1602A_send_nibble(DISPLAY_WAIT_POWER_UP);
     3a6:	83 e0       	ldi	r24, 0x03	; 3
     3a8:	0e 94 57 01 	call	0x2ae	; 0x2ae <LCD_1602A_send_nibble>

    LCD_1602A_send_nibble(DISPLAY_4_BIT_MODE); // Switch to 4-bit mode
     3ac:	82 e0       	ldi	r24, 0x02	; 2
     3ae:	0e 94 57 01 	call	0x2ae	; 0x2ae <LCD_1602A_send_nibble>

    LCD_1602A_load_command(DISPLAY_FUNCTION_SET_4BIT_2LINE);
     3b2:	88 e2       	ldi	r24, 0x28	; 40
     3b4:	0e 94 71 01 	call	0x2e2	; 0x2e2 <LCD_1602A_load_command>
    LCD_1602A_load_command(DISPLAY_DISPLAY_ON_CURSOR_OFF);
     3b8:	8c e0       	ldi	r24, 0x0C	; 12
     3ba:	0e 94 71 01 	call	0x2e2	; 0x2e2 <LCD_1602A_load_command>
    LCD_1602A_load_command(DISPLAY_ENTRY_MODE_SET);
     3be:	86 e0       	ldi	r24, 0x06	; 6
     3c0:	0e 94 71 01 	call	0x2e2	; 0x2e2 <LCD_1602A_load_command>
    LCD_1602A_load_command(DISPLAY_CLEAR_SCREEN);
     3c4:	81 e0       	ldi	r24, 0x01	; 1
     3c6:	0e 94 71 01 	call	0x2e2	; 0x2e2 <LCD_1602A_load_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3ca:	8f e3       	ldi	r24, 0x3F	; 63
     3cc:	9f e1       	ldi	r25, 0x1F	; 31
     3ce:	01 97       	sbiw	r24, 0x01	; 1
     3d0:	f1 f7       	brne	.-4      	; 0x3ce <LCD_1602A_init+0x6a>
     3d2:	00 c0       	rjmp	.+0      	; 0x3d4 <LCD_1602A_init+0x70>
     3d4:	00 00       	nop
     3d6:	08 95       	ret

000003d8 <DS18B20_reset>:
    params: void
    returns: uint8_t - 1 if presence pulse detected, 0 otherwise
*/
uint8_t DS18B20_reset(void)
{
    DS18B20_OUTPUT();
     3d8:	87 b1       	in	r24, 0x07	; 7
     3da:	81 60       	ori	r24, 0x01	; 1
     3dc:	87 b9       	out	0x07, r24	; 7
    DS18B20_LOW();
     3de:	88 b1       	in	r24, 0x08	; 8
     3e0:	8e 7f       	andi	r24, 0xFE	; 254
     3e2:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3e4:	8f e7       	ldi	r24, 0x7F	; 127
     3e6:	97 e0       	ldi	r25, 0x07	; 7
     3e8:	01 97       	sbiw	r24, 0x01	; 1
     3ea:	f1 f7       	brne	.-4      	; 0x3e8 <DS18B20_reset+0x10>
     3ec:	00 c0       	rjmp	.+0      	; 0x3ee <DS18B20_reset+0x16>
     3ee:	00 00       	nop
    _delay_us(480);
    DS18B20_INPUT();
     3f0:	87 b1       	in	r24, 0x07	; 7
     3f2:	8e 7f       	andi	r24, 0xFE	; 254
     3f4:	87 b9       	out	0x07, r24	; 7
     3f6:	ef ee       	ldi	r30, 0xEF	; 239
     3f8:	f0 e0       	ldi	r31, 0x00	; 0
     3fa:	31 97       	sbiw	r30, 0x01	; 1
     3fc:	f1 f7       	brne	.-4      	; 0x3fa <DS18B20_reset+0x22>
     3fe:	00 c0       	rjmp	.+0      	; 0x400 <__EEPROM_REGION_LENGTH__>
     400:	00 00       	nop
    _delay_us(60);

    uint8_t presence = !(DS18B20_PIN & (1 << DS18B20_DQ));
     402:	96 b1       	in	r25, 0x06	; 6
     404:	81 e0       	ldi	r24, 0x01	; 1
     406:	89 27       	eor	r24, r25
     408:	81 70       	andi	r24, 0x01	; 1
     40a:	ef e8       	ldi	r30, 0x8F	; 143
     40c:	f6 e0       	ldi	r31, 0x06	; 6
     40e:	31 97       	sbiw	r30, 0x01	; 1
     410:	f1 f7       	brne	.-4      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
     412:	00 c0       	rjmp	.+0      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
     414:	00 00       	nop
    _delay_us(420);
    return presence;
}
     416:	08 95       	ret

00000418 <DS18B20_write_bit>:
    params: uint8_t bit - the bit to write (0 or 1)
    returns: void
*/
void DS18B20_write_bit(uint8_t bit)
{
    DS18B20_OUTPUT();
     418:	97 b1       	in	r25, 0x07	; 7
     41a:	91 60       	ori	r25, 0x01	; 1
     41c:	97 b9       	out	0x07, r25	; 7
    DS18B20_LOW();
     41e:	98 b1       	in	r25, 0x08	; 8
     420:	9e 7f       	andi	r25, 0xFE	; 254
     422:	98 b9       	out	0x08, r25	; 8
    if (bit)
     424:	88 23       	and	r24, r24
     426:	71 f0       	breq	.+28     	; 0x444 <DS18B20_write_bit+0x2c>
     428:	85 e0       	ldi	r24, 0x05	; 5
     42a:	8a 95       	dec	r24
     42c:	f1 f7       	brne	.-4      	; 0x42a <DS18B20_write_bit+0x12>
     42e:	00 00       	nop
    {
        _delay_us(1);
        DS18B20_INPUT();
     430:	87 b1       	in	r24, 0x07	; 7
     432:	8e 7f       	andi	r24, 0xFE	; 254
     434:	87 b9       	out	0x07, r24	; 7
     436:	8f ee       	ldi	r24, 0xEF	; 239
     438:	90 e0       	ldi	r25, 0x00	; 0
     43a:	01 97       	sbiw	r24, 0x01	; 1
     43c:	f1 f7       	brne	.-4      	; 0x43a <DS18B20_write_bit+0x22>
     43e:	00 c0       	rjmp	.+0      	; 0x440 <DS18B20_write_bit+0x28>
     440:	00 00       	nop
     442:	08 95       	ret
     444:	8f ee       	ldi	r24, 0xEF	; 239
     446:	90 e0       	ldi	r25, 0x00	; 0
     448:	01 97       	sbiw	r24, 0x01	; 1
     44a:	f1 f7       	brne	.-4      	; 0x448 <DS18B20_write_bit+0x30>
     44c:	00 c0       	rjmp	.+0      	; 0x44e <DS18B20_write_bit+0x36>
     44e:	00 00       	nop
        _delay_us(60);
    }
    else
    {
        _delay_us(60);
        DS18B20_INPUT();
     450:	87 b1       	in	r24, 0x07	; 7
     452:	8e 7f       	andi	r24, 0xFE	; 254
     454:	87 b9       	out	0x07, r24	; 7
     456:	08 95       	ret

00000458 <DS18B20_write_byte>:
    write a byte to the DS18B20 sensor
    params: uint8_t data - the byte to write
    returns: void
*/
void DS18B20_write_byte(uint8_t data)
{
     458:	cf 93       	push	r28
     45a:	df 93       	push	r29
     45c:	d8 2f       	mov	r29, r24
    for (uint8_t i = 0; i < 8; i++)
     45e:	c0 e0       	ldi	r28, 0x00	; 0
     460:	06 c0       	rjmp	.+12     	; 0x46e <DS18B20_write_byte+0x16>
    {
        DS18B20_write_bit(data & 0x01);
     462:	8d 2f       	mov	r24, r29
     464:	81 70       	andi	r24, 0x01	; 1
     466:	0e 94 0c 02 	call	0x418	; 0x418 <DS18B20_write_bit>
        data >>= 1;
     46a:	d6 95       	lsr	r29
    params: uint8_t data - the byte to write
    returns: void
*/
void DS18B20_write_byte(uint8_t data)
{
    for (uint8_t i = 0; i < 8; i++)
     46c:	cf 5f       	subi	r28, 0xFF	; 255
     46e:	c8 30       	cpi	r28, 0x08	; 8
     470:	c0 f3       	brcs	.-16     	; 0x462 <DS18B20_write_byte+0xa>
    {
        DS18B20_write_bit(data & 0x01);
        data >>= 1;
    }
}
     472:	df 91       	pop	r29
     474:	cf 91       	pop	r28
     476:	08 95       	ret

00000478 <DS18B20_read_bit>:
    returns: uint8_t - the bit read (0 or 1)
*/
uint8_t DS18B20_read_bit(void)
{
    uint8_t bit;
    DS18B20_OUTPUT();
     478:	87 b1       	in	r24, 0x07	; 7
     47a:	81 60       	ori	r24, 0x01	; 1
     47c:	87 b9       	out	0x07, r24	; 7
    DS18B20_LOW();
     47e:	88 b1       	in	r24, 0x08	; 8
     480:	8e 7f       	andi	r24, 0xFE	; 254
     482:	88 b9       	out	0x08, r24	; 8
     484:	8a e0       	ldi	r24, 0x0A	; 10
     486:	8a 95       	dec	r24
     488:	f1 f7       	brne	.-4      	; 0x486 <DS18B20_read_bit+0xe>
     48a:	00 c0       	rjmp	.+0      	; 0x48c <DS18B20_read_bit+0x14>
    _delay_us(2);
    DS18B20_INPUT();
     48c:	87 b1       	in	r24, 0x07	; 7
     48e:	8e 7f       	andi	r24, 0xFE	; 254
     490:	87 b9       	out	0x07, r24	; 7
     492:	e5 e3       	ldi	r30, 0x35	; 53
     494:	ea 95       	dec	r30
     496:	f1 f7       	brne	.-4      	; 0x494 <DS18B20_read_bit+0x1c>
     498:	00 00       	nop
    _delay_us(10);
    bit = (DS18B20_PIN & (1 << DS18B20_DQ)) ? 1 : 0;
     49a:	86 b1       	in	r24, 0x06	; 6
     49c:	81 70       	andi	r24, 0x01	; 1
     49e:	e7 ec       	ldi	r30, 0xC7	; 199
     4a0:	f0 e0       	ldi	r31, 0x00	; 0
     4a2:	31 97       	sbiw	r30, 0x01	; 1
     4a4:	f1 f7       	brne	.-4      	; 0x4a2 <DS18B20_read_bit+0x2a>
     4a6:	00 c0       	rjmp	.+0      	; 0x4a8 <DS18B20_read_bit+0x30>
     4a8:	00 00       	nop
    _delay_us(50);
    return bit;
}
     4aa:	08 95       	ret

000004ac <DS18B20_read_byte>:
    read a byte from the DS18B20 sensor
    params: void
    returns: uint8_t - the byte read
*/
uint8_t DS18B20_read_byte(void)
{
     4ac:	cf 93       	push	r28
     4ae:	df 93       	push	r29
    uint8_t data = 0;
    for (uint8_t i = 0; i < 8; i++)
     4b0:	c0 e0       	ldi	r28, 0x00	; 0
    params: void
    returns: uint8_t - the byte read
*/
uint8_t DS18B20_read_byte(void)
{
    uint8_t data = 0;
     4b2:	d0 e0       	ldi	r29, 0x00	; 0
    for (uint8_t i = 0; i < 8; i++)
     4b4:	06 c0       	rjmp	.+12     	; 0x4c2 <DS18B20_read_byte+0x16>
    {
        data >>= 1;
     4b6:	d6 95       	lsr	r29
        if (DS18B20_read_bit())
     4b8:	0e 94 3c 02 	call	0x478	; 0x478 <DS18B20_read_bit>
     4bc:	81 11       	cpse	r24, r1
            data |= 0x80;
     4be:	d0 68       	ori	r29, 0x80	; 128
    returns: uint8_t - the byte read
*/
uint8_t DS18B20_read_byte(void)
{
    uint8_t data = 0;
    for (uint8_t i = 0; i < 8; i++)
     4c0:	cf 5f       	subi	r28, 0xFF	; 255
     4c2:	c8 30       	cpi	r28, 0x08	; 8
     4c4:	c0 f3       	brcs	.-16     	; 0x4b6 <DS18B20_read_byte+0xa>
        data >>= 1;
        if (DS18B20_read_bit())
            data |= 0x80;
    }
    return data;
}
     4c6:	8d 2f       	mov	r24, r29
     4c8:	df 91       	pop	r29
     4ca:	cf 91       	pop	r28
     4cc:	08 95       	ret

000004ce <DS18B20_read_temperature>:
    read temperature from the DS18B20 sensor
    params: void
    returns: float - the temperature in degrees Celsius
*/
float DS18B20_read_temperature(void)
{
     4ce:	cf 93       	push	r28
    uint8_t temp_l, temp_h;
    int16_t temp;

    DS18B20_reset();
     4d0:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <DS18B20_reset>
    DS18B20_write_byte(0xCC);
     4d4:	8c ec       	ldi	r24, 0xCC	; 204
     4d6:	0e 94 2c 02 	call	0x458	; 0x458 <DS18B20_write_byte>
    DS18B20_write_byte(0x44);
     4da:	84 e4       	ldi	r24, 0x44	; 68
     4dc:	0e 94 2c 02 	call	0x458	; 0x458 <DS18B20_write_byte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4e0:	2f ef       	ldi	r18, 0xFF	; 255
     4e2:	8e e9       	ldi	r24, 0x9E	; 158
     4e4:	94 e2       	ldi	r25, 0x24	; 36
     4e6:	21 50       	subi	r18, 0x01	; 1
     4e8:	80 40       	sbci	r24, 0x00	; 0
     4ea:	90 40       	sbci	r25, 0x00	; 0
     4ec:	e1 f7       	brne	.-8      	; 0x4e6 <DS18B20_read_temperature+0x18>
     4ee:	00 c0       	rjmp	.+0      	; 0x4f0 <DS18B20_read_temperature+0x22>
     4f0:	00 00       	nop
    _delay_ms(750);

    DS18B20_reset();
     4f2:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <DS18B20_reset>
    DS18B20_write_byte(0xCC);
     4f6:	8c ec       	ldi	r24, 0xCC	; 204
     4f8:	0e 94 2c 02 	call	0x458	; 0x458 <DS18B20_write_byte>
    DS18B20_write_byte(0xBE);
     4fc:	8e eb       	ldi	r24, 0xBE	; 190
     4fe:	0e 94 2c 02 	call	0x458	; 0x458 <DS18B20_write_byte>

    temp_l = DS18B20_read_byte();
     502:	0e 94 56 02 	call	0x4ac	; 0x4ac <DS18B20_read_byte>
     506:	c8 2f       	mov	r28, r24
    temp_h = DS18B20_read_byte();
     508:	0e 94 56 02 	call	0x4ac	; 0x4ac <DS18B20_read_byte>

    temp = (temp_h << 8) | temp_l;
     50c:	68 2f       	mov	r22, r24
     50e:	70 e0       	ldi	r23, 0x00	; 0
     510:	76 2f       	mov	r23, r22
     512:	66 27       	eor	r22, r22
     514:	6c 2b       	or	r22, r28

    return (float)temp / 16.0;
     516:	07 2e       	mov	r0, r23
     518:	00 0c       	add	r0, r0
     51a:	88 0b       	sbc	r24, r24
     51c:	99 0b       	sbc	r25, r25
     51e:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <__floatsisf>
     522:	20 e0       	ldi	r18, 0x00	; 0
     524:	30 e0       	ldi	r19, 0x00	; 0
     526:	40 e8       	ldi	r20, 0x80	; 128
     528:	5d e3       	ldi	r21, 0x3D	; 61
     52a:	0e 94 2d 0c 	call	0x185a	; 0x185a <__mulsf3>
}
     52e:	cf 91       	pop	r28
     530:	08 95       	ret

00000532 <HCSR04_init>:
    params: void
    returns: void
*/
void HCSR04_init(void)
{
    HCSR04_TRIG_DDR |= (1 << HCSR04_TRIG_PIN);
     532:	8a b1       	in	r24, 0x0a	; 10
     534:	84 60       	ori	r24, 0x04	; 4
     536:	8a b9       	out	0x0a, r24	; 10
    HCSR04_ECHO_DDR &= ~(1 << HCSR04_ECHO_PIN);
     538:	8a b1       	in	r24, 0x0a	; 10
     53a:	87 7f       	andi	r24, 0xF7	; 247
     53c:	8a b9       	out	0x0a, r24	; 10
     53e:	08 95       	ret

00000540 <HCSR04_trigger>:
    params: void
    returns: void
*/
void HCSR04_trigger(void)
{
    HCSR04_TRIG_PORT &= ~(1 << HCSR04_TRIG_PIN);
     540:	8b b1       	in	r24, 0x0b	; 11
     542:	8b 7f       	andi	r24, 0xFB	; 251
     544:	8b b9       	out	0x0b, r24	; 11
     546:	2f ef       	ldi	r18, 0xFF	; 255
     548:	87 e8       	ldi	r24, 0x87	; 135
     54a:	93 e1       	ldi	r25, 0x13	; 19
     54c:	21 50       	subi	r18, 0x01	; 1
     54e:	80 40       	sbci	r24, 0x00	; 0
     550:	90 40       	sbci	r25, 0x00	; 0
     552:	e1 f7       	brne	.-8      	; 0x54c <HCSR04_trigger+0xc>
     554:	00 c0       	rjmp	.+0      	; 0x556 <HCSR04_trigger+0x16>
     556:	00 00       	nop
    _delay_ms(400);
    HCSR04_TRIG_PORT |= (1 << HCSR04_TRIG_PIN);
     558:	8b b1       	in	r24, 0x0b	; 11
     55a:	84 60       	ori	r24, 0x04	; 4
     55c:	8b b9       	out	0x0b, r24	; 11
     55e:	2f ef       	ldi	r18, 0xFF	; 255
     560:	87 e8       	ldi	r24, 0x87	; 135
     562:	93 e1       	ldi	r25, 0x13	; 19
     564:	21 50       	subi	r18, 0x01	; 1
     566:	80 40       	sbci	r24, 0x00	; 0
     568:	90 40       	sbci	r25, 0x00	; 0
     56a:	e1 f7       	brne	.-8      	; 0x564 <HCSR04_trigger+0x24>
     56c:	00 c0       	rjmp	.+0      	; 0x56e <HCSR04_trigger+0x2e>
     56e:	00 00       	nop
    _delay_ms(400);
    HCSR04_TRIG_PORT &= ~(1 << HCSR04_TRIG_PIN);
     570:	8b b1       	in	r24, 0x0b	; 11
     572:	8b 7f       	andi	r24, 0xFB	; 251
     574:	8b b9       	out	0x0b, r24	; 11
     576:	08 95       	ret

00000578 <HCSR04_read>:
*/
uint16_t HCSR04_read(void)
{
    uint32_t count = 0;

    while (!(HCSR04_ECHO_DEF_PIN & (1 << HCSR04_ECHO_PIN)));
     578:	4b 9b       	sbis	0x09, 3	; 9
     57a:	fe cf       	rjmp	.-4      	; 0x578 <HCSR04_read>
     57c:	60 e0       	ldi	r22, 0x00	; 0
     57e:	70 e0       	ldi	r23, 0x00	; 0
     580:	cb 01       	movw	r24, r22
     582:	08 c0       	rjmp	.+16     	; 0x594 <HCSR04_read+0x1c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     584:	25 e0       	ldi	r18, 0x05	; 5
     586:	2a 95       	dec	r18
     588:	f1 f7       	brne	.-4      	; 0x586 <HCSR04_read+0xe>
     58a:	00 00       	nop

    while (HCSR04_ECHO_DEF_PIN & (1 << HCSR04_ECHO_PIN))
    {
        _delay_us(1);
        count++;
     58c:	6f 5f       	subi	r22, 0xFF	; 255
     58e:	7f 4f       	sbci	r23, 0xFF	; 255
     590:	8f 4f       	sbci	r24, 0xFF	; 255
     592:	9f 4f       	sbci	r25, 0xFF	; 255
{
    uint32_t count = 0;

    while (!(HCSR04_ECHO_DEF_PIN & (1 << HCSR04_ECHO_PIN)));

    while (HCSR04_ECHO_DEF_PIN & (1 << HCSR04_ECHO_PIN))
     594:	4b 99       	sbic	0x09, 3	; 9
     596:	f6 cf       	rjmp	.-20     	; 0x584 <HCSR04_read+0xc>
    {
        _delay_us(1);
        count++;
    }

    return (uint16_t)(count / 58.0);
     598:	0e 94 76 0b 	call	0x16ec	; 0x16ec <__floatunsisf>
     59c:	20 e0       	ldi	r18, 0x00	; 0
     59e:	30 e0       	ldi	r19, 0x00	; 0
     5a0:	48 e6       	ldi	r20, 0x68	; 104
     5a2:	52 e4       	ldi	r21, 0x42	; 66
     5a4:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <__divsf3>
     5a8:	0e 94 47 0b 	call	0x168e	; 0x168e <__fixunssfsi>
}
     5ac:	cb 01       	movw	r24, r22
     5ae:	08 95       	ret

000005b0 <HCSR04_get_distance>:
    params: void
    returns: uint16_t - the distance in centimeters
*/
uint16_t HCSR04_get_distance(void)
{
    HCSR04_trigger();
     5b0:	0e 94 a0 02 	call	0x540	; 0x540 <HCSR04_trigger>
    return HCSR04_read();
     5b4:	0e 94 bc 02 	call	0x578	; 0x578 <HCSR04_read>
}
     5b8:	08 95       	ret

000005ba <KEYPAD_init>:
    params: void
    returns: void
*/
void KEYPAD_init(void)
{
    KEYPAD_DDR &= ~((1 << KEYPAD_KEY_1) | (1 << KEYPAD_KEY_2) | (1 << KEYPAD_KEY_3) | (1 << KEYPAD_KEY_4));
     5ba:	84 b1       	in	r24, 0x04	; 4
     5bc:	83 7c       	andi	r24, 0xC3	; 195
     5be:	84 b9       	out	0x04, r24	; 4
    KEYPAD_PORT |= (1 << KEYPAD_KEY_1) | (1 << KEYPAD_KEY_2) | (1 << KEYPAD_KEY_3) | (1 << KEYPAD_KEY_4);
     5c0:	85 b1       	in	r24, 0x05	; 5
     5c2:	8c 63       	ori	r24, 0x3C	; 60
     5c4:	85 b9       	out	0x05, r24	; 5
     5c6:	08 95       	ret

000005c8 <KEYPAD_read>:
    params: void
    returns: uint8_t - the key number (1-4) or KEYPAD_NO_KEY if no key is pressed
*/
uint8_t KEYPAD_read(void)
{
    if (!(KEYPAD_PIN & (1 << KEYPAD_KEY_1))) return 1;
     5c8:	1a 9b       	sbis	0x03, 2	; 3
     5ca:	08 c0       	rjmp	.+16     	; 0x5dc <KEYPAD_read+0x14>
    if (!(KEYPAD_PIN & (1 << KEYPAD_KEY_2))) return 2;
     5cc:	1b 9b       	sbis	0x03, 3	; 3
     5ce:	08 c0       	rjmp	.+16     	; 0x5e0 <KEYPAD_read+0x18>
    if (!(KEYPAD_PIN & (1 << KEYPAD_KEY_3))) return 3;
     5d0:	1c 9b       	sbis	0x03, 4	; 3
     5d2:	08 c0       	rjmp	.+16     	; 0x5e4 <KEYPAD_read+0x1c>
    if (!(KEYPAD_PIN & (1 << KEYPAD_KEY_4))) return 4;
     5d4:	1d 99       	sbic	0x03, 5	; 3
     5d6:	08 c0       	rjmp	.+16     	; 0x5e8 <KEYPAD_read+0x20>
     5d8:	84 e0       	ldi	r24, 0x04	; 4
     5da:	08 95       	ret
    params: void
    returns: uint8_t - the key number (1-4) or KEYPAD_NO_KEY if no key is pressed
*/
uint8_t KEYPAD_read(void)
{
    if (!(KEYPAD_PIN & (1 << KEYPAD_KEY_1))) return 1;
     5dc:	81 e0       	ldi	r24, 0x01	; 1
     5de:	08 95       	ret
    if (!(KEYPAD_PIN & (1 << KEYPAD_KEY_2))) return 2;
     5e0:	82 e0       	ldi	r24, 0x02	; 2
     5e2:	08 95       	ret
    if (!(KEYPAD_PIN & (1 << KEYPAD_KEY_3))) return 3;
     5e4:	83 e0       	ldi	r24, 0x03	; 3
     5e6:	08 95       	ret
    if (!(KEYPAD_PIN & (1 << KEYPAD_KEY_4))) return 4;
    return KEYPAD_NO_KEY;
     5e8:	85 e0       	ldi	r24, 0x05	; 5
}
     5ea:	08 95       	ret

000005ec <display_set>:
    params: const unsigned char* title - title string (max 12 chars)
            const unsigned char* data - data string (max 16 chars)
    returns: void
*/
void display_set(const unsigned char *title, const unsigned char *data)
{
     5ec:	0f 93       	push	r16
     5ee:	1f 93       	push	r17
     5f0:	cf 93       	push	r28
     5f2:	df 93       	push	r29
     5f4:	cd b7       	in	r28, 0x3d	; 61
     5f6:	de b7       	in	r29, 0x3e	; 62
     5f8:	ec 97       	sbiw	r28, 0x3c	; 60
     5fa:	0f b6       	in	r0, 0x3f	; 63
     5fc:	f8 94       	cli
     5fe:	de bf       	out	0x3e, r29	; 62
     600:	0f be       	out	0x3f, r0	; 63
     602:	cd bf       	out	0x3d, r28	; 61
     604:	dc 01       	movw	r26, r24
     606:	8b 01       	movw	r16, r22
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     608:	8f e3       	ldi	r24, 0x3F	; 63
     60a:	9f e1       	ldi	r25, 0x1F	; 31
     60c:	01 97       	sbiw	r24, 0x01	; 1
     60e:	f1 f7       	brne	.-4      	; 0x60c <display_set+0x20>
     610:	00 c0       	rjmp	.+0      	; 0x612 <display_set+0x26>
     612:	00 00       	nop

    unsigned char line1[12];
    unsigned char line2[16];

    // prepare line1: copy up to 12 chars from title, pad with spaces
    int i = 0;
     614:	20 e0       	ldi	r18, 0x00	; 0
     616:	30 e0       	ldi	r19, 0x00	; 0
    for (; i < 12 && *title; ++i)
     618:	0a c0       	rjmp	.+20     	; 0x62e <display_set+0x42>
        line1[i] = *title++;
     61a:	11 96       	adiw	r26, 0x01	; 1
     61c:	e1 e0       	ldi	r30, 0x01	; 1
     61e:	f0 e0       	ldi	r31, 0x00	; 0
     620:	ec 0f       	add	r30, r28
     622:	fd 1f       	adc	r31, r29
     624:	e2 0f       	add	r30, r18
     626:	f3 1f       	adc	r31, r19
     628:	80 83       	st	Z, r24
    unsigned char line1[12];
    unsigned char line2[16];

    // prepare line1: copy up to 12 chars from title, pad with spaces
    int i = 0;
    for (; i < 12 && *title; ++i)
     62a:	2f 5f       	subi	r18, 0xFF	; 255
     62c:	3f 4f       	sbci	r19, 0xFF	; 255
     62e:	2c 30       	cpi	r18, 0x0C	; 12
     630:	31 05       	cpc	r19, r1
     632:	74 f4       	brge	.+28     	; 0x650 <display_set+0x64>
     634:	8c 91       	ld	r24, X
     636:	81 11       	cpse	r24, r1
     638:	f0 cf       	rjmp	.-32     	; 0x61a <display_set+0x2e>
     63a:	0a c0       	rjmp	.+20     	; 0x650 <display_set+0x64>
        line1[i] = *title++;

    for (; i < 12; ++i)
        line1[i] = ' ';
     63c:	e1 e0       	ldi	r30, 0x01	; 1
     63e:	f0 e0       	ldi	r31, 0x00	; 0
     640:	ec 0f       	add	r30, r28
     642:	fd 1f       	adc	r31, r29
     644:	e2 0f       	add	r30, r18
     646:	f3 1f       	adc	r31, r19
     648:	80 e2       	ldi	r24, 0x20	; 32
     64a:	80 83       	st	Z, r24
    // prepare line1: copy up to 12 chars from title, pad with spaces
    int i = 0;
    for (; i < 12 && *title; ++i)
        line1[i] = *title++;

    for (; i < 12; ++i)
     64c:	2f 5f       	subi	r18, 0xFF	; 255
     64e:	3f 4f       	sbci	r19, 0xFF	; 255
     650:	2c 30       	cpi	r18, 0x0C	; 12
     652:	31 05       	cpc	r19, r1
     654:	9c f3       	brlt	.-26     	; 0x63c <display_set+0x50>
        line1[i] = ' ';

    uint8_t arrow_down[8] = {
     656:	88 e0       	ldi	r24, 0x08	; 8
     658:	e0 e5       	ldi	r30, 0x50	; 80
     65a:	f1 e0       	ldi	r31, 0x01	; 1
     65c:	de 01       	movw	r26, r28
     65e:	5d 96       	adiw	r26, 0x1d	; 29
     660:	01 90       	ld	r0, Z+
     662:	0d 92       	st	X+, r0
     664:	8a 95       	dec	r24
     666:	e1 f7       	brne	.-8      	; 0x660 <display_set+0x74>
        0x0E,
        0x04,
        0x00
    };

    uint8_t arrow_up[8] = {
     668:	88 e0       	ldi	r24, 0x08	; 8
     66a:	e8 e5       	ldi	r30, 0x58	; 88
     66c:	f1 e0       	ldi	r31, 0x01	; 1
     66e:	de 01       	movw	r26, r28
     670:	95 96       	adiw	r26, 0x25	; 37
     672:	01 90       	ld	r0, Z+
     674:	0d 92       	st	X+, r0
     676:	8a 95       	dec	r24
     678:	e1 f7       	brne	.-8      	; 0x672 <display_set+0x86>
        0x04,
        0x04,
        0x00
    };

    uint8_t arrow_right[8] = {
     67a:	88 e0       	ldi	r24, 0x08	; 8
     67c:	e0 e6       	ldi	r30, 0x60	; 96
     67e:	f1 e0       	ldi	r31, 0x01	; 1
     680:	de 01       	movw	r26, r28
     682:	9d 96       	adiw	r26, 0x2d	; 45
     684:	01 90       	ld	r0, Z+
     686:	0d 92       	st	X+, r0
     688:	8a 95       	dec	r24
     68a:	e1 f7       	brne	.-8      	; 0x684 <display_set+0x98>
        0x04,
        0x00,
        0x00
    };

    uint8_t arrow_left[8] = {
     68c:	88 e0       	ldi	r24, 0x08	; 8
     68e:	e8 e6       	ldi	r30, 0x68	; 104
     690:	f1 e0       	ldi	r31, 0x01	; 1
     692:	de 01       	movw	r26, r28
     694:	d5 96       	adiw	r26, 0x35	; 53
     696:	01 90       	ld	r0, Z+
     698:	0d 92       	st	X+, r0
     69a:	8a 95       	dec	r24
     69c:	e1 f7       	brne	.-8      	; 0x696 <display_set+0xaa>
        0x04,
        0x00,
        0x00
    };

    LCD_1602A_create_char(0, arrow_down); // store at location 0
     69e:	be 01       	movw	r22, r28
     6a0:	63 5e       	subi	r22, 0xE3	; 227
     6a2:	7f 4f       	sbci	r23, 0xFF	; 255
     6a4:	80 e0       	ldi	r24, 0x00	; 0
     6a6:	0e 94 91 01 	call	0x322	; 0x322 <LCD_1602A_create_char>
    LCD_1602A_create_char(1, arrow_up);   // store at location 1
     6aa:	be 01       	movw	r22, r28
     6ac:	6b 5d       	subi	r22, 0xDB	; 219
     6ae:	7f 4f       	sbci	r23, 0xFF	; 255
     6b0:	81 e0       	ldi	r24, 0x01	; 1
     6b2:	0e 94 91 01 	call	0x322	; 0x322 <LCD_1602A_create_char>
    LCD_1602A_create_char(2, arrow_left);   // store at location 2
     6b6:	be 01       	movw	r22, r28
     6b8:	6b 5c       	subi	r22, 0xCB	; 203
     6ba:	7f 4f       	sbci	r23, 0xFF	; 255
     6bc:	82 e0       	ldi	r24, 0x02	; 2
     6be:	0e 94 91 01 	call	0x322	; 0x322 <LCD_1602A_create_char>
    LCD_1602A_create_char(3, arrow_right);   // store at location 3
     6c2:	be 01       	movw	r22, r28
     6c4:	63 5d       	subi	r22, 0xD3	; 211
     6c6:	7f 4f       	sbci	r23, 0xFF	; 255
     6c8:	83 e0       	ldi	r24, 0x03	; 3
     6ca:	0e 94 91 01 	call	0x322	; 0x322 <LCD_1602A_create_char>

    // prepare line2: copy up to 16 chars from data, pad with spaces
    i = 0;
     6ce:	80 e0       	ldi	r24, 0x00	; 0
     6d0:	90 e0       	ldi	r25, 0x00	; 0
    for (; i < 16 && *data; ++i)
     6d2:	0a c0       	rjmp	.+20     	; 0x6e8 <display_set+0xfc>
        line2[i] = *data++;
     6d4:	0f 5f       	subi	r16, 0xFF	; 255
     6d6:	1f 4f       	sbci	r17, 0xFF	; 255
     6d8:	ed e0       	ldi	r30, 0x0D	; 13
     6da:	f0 e0       	ldi	r31, 0x00	; 0
     6dc:	ec 0f       	add	r30, r28
     6de:	fd 1f       	adc	r31, r29
     6e0:	e8 0f       	add	r30, r24
     6e2:	f9 1f       	adc	r31, r25
     6e4:	20 83       	st	Z, r18
    LCD_1602A_create_char(2, arrow_left);   // store at location 2
    LCD_1602A_create_char(3, arrow_right);   // store at location 3

    // prepare line2: copy up to 16 chars from data, pad with spaces
    i = 0;
    for (; i < 16 && *data; ++i)
     6e6:	01 96       	adiw	r24, 0x01	; 1
     6e8:	80 31       	cpi	r24, 0x10	; 16
     6ea:	91 05       	cpc	r25, r1
     6ec:	74 f4       	brge	.+28     	; 0x70a <display_set+0x11e>
     6ee:	f8 01       	movw	r30, r16
     6f0:	20 81       	ld	r18, Z
     6f2:	21 11       	cpse	r18, r1
     6f4:	ef cf       	rjmp	.-34     	; 0x6d4 <display_set+0xe8>
     6f6:	09 c0       	rjmp	.+18     	; 0x70a <display_set+0x11e>
        line2[i] = *data++;

    // LCD_1602A_load_data(0);

    for (; i < 16; ++i)
        line2[i] = ' ';
     6f8:	ed e0       	ldi	r30, 0x0D	; 13
     6fa:	f0 e0       	ldi	r31, 0x00	; 0
     6fc:	ec 0f       	add	r30, r28
     6fe:	fd 1f       	adc	r31, r29
     700:	e8 0f       	add	r30, r24
     702:	f9 1f       	adc	r31, r25
     704:	20 e2       	ldi	r18, 0x20	; 32
     706:	20 83       	st	Z, r18
    for (; i < 16 && *data; ++i)
        line2[i] = *data++;

    // LCD_1602A_load_data(0);

    for (; i < 16; ++i)
     708:	01 96       	adiw	r24, 0x01	; 1
     70a:	80 31       	cpi	r24, 0x10	; 16
     70c:	91 05       	cpc	r25, r1
     70e:	a4 f3       	brlt	.-24     	; 0x6f8 <display_set+0x10c>
        line2[i] = ' ';

    // reset cursor to first line and write 12 chars
    LCD_1602A_load_command(DISPLAY_SET_CURSOR_LINE_1);
     710:	80 e8       	ldi	r24, 0x80	; 128
     712:	0e 94 71 01 	call	0x2e2	; 0x2e2 <LCD_1602A_load_command>
    for (i = 0; i < 12; ++i)
     716:	00 e0       	ldi	r16, 0x00	; 0
     718:	10 e0       	ldi	r17, 0x00	; 0
     71a:	0b c0       	rjmp	.+22     	; 0x732 <display_set+0x146>
    {
        LCD_1602A_load_data(line1[i]);
     71c:	e1 e0       	ldi	r30, 0x01	; 1
     71e:	f0 e0       	ldi	r31, 0x00	; 0
     720:	ec 0f       	add	r30, r28
     722:	fd 1f       	adc	r31, r29
     724:	e0 0f       	add	r30, r16
     726:	f1 1f       	adc	r31, r17
     728:	80 81       	ld	r24, Z
     72a:	0e 94 81 01 	call	0x302	; 0x302 <LCD_1602A_load_data>
    for (; i < 16; ++i)
        line2[i] = ' ';

    // reset cursor to first line and write 12 chars
    LCD_1602A_load_command(DISPLAY_SET_CURSOR_LINE_1);
    for (i = 0; i < 12; ++i)
     72e:	0f 5f       	subi	r16, 0xFF	; 255
     730:	1f 4f       	sbci	r17, 0xFF	; 255
     732:	0c 30       	cpi	r16, 0x0C	; 12
     734:	11 05       	cpc	r17, r1
     736:	94 f3       	brlt	.-28     	; 0x71c <display_set+0x130>
    {
        LCD_1602A_load_data(line1[i]);
    }

    LCD_1602A_load_data(2);
     738:	82 e0       	ldi	r24, 0x02	; 2
     73a:	0e 94 81 01 	call	0x302	; 0x302 <LCD_1602A_load_data>
    LCD_1602A_load_data(0);
     73e:	80 e0       	ldi	r24, 0x00	; 0
     740:	0e 94 81 01 	call	0x302	; 0x302 <LCD_1602A_load_data>
    LCD_1602A_load_data(1);
     744:	81 e0       	ldi	r24, 0x01	; 1
     746:	0e 94 81 01 	call	0x302	; 0x302 <LCD_1602A_load_data>
    LCD_1602A_load_data(3);
     74a:	83 e0       	ldi	r24, 0x03	; 3
     74c:	0e 94 81 01 	call	0x302	; 0x302 <LCD_1602A_load_data>

    // reset cursor to second line and write 16 chars
    LCD_1602A_load_command(DISPLAY_SET_CURSOR_LINE_2);
     750:	80 ec       	ldi	r24, 0xC0	; 192
     752:	0e 94 71 01 	call	0x2e2	; 0x2e2 <LCD_1602A_load_command>
    for (i = 0; i < 16; ++i)
     756:	00 e0       	ldi	r16, 0x00	; 0
     758:	10 e0       	ldi	r17, 0x00	; 0
     75a:	0b c0       	rjmp	.+22     	; 0x772 <display_set+0x186>
    {
        LCD_1602A_load_data(line2[i]);
     75c:	ed e0       	ldi	r30, 0x0D	; 13
     75e:	f0 e0       	ldi	r31, 0x00	; 0
     760:	ec 0f       	add	r30, r28
     762:	fd 1f       	adc	r31, r29
     764:	e0 0f       	add	r30, r16
     766:	f1 1f       	adc	r31, r17
     768:	80 81       	ld	r24, Z
     76a:	0e 94 81 01 	call	0x302	; 0x302 <LCD_1602A_load_data>
    LCD_1602A_load_data(1);
    LCD_1602A_load_data(3);

    // reset cursor to second line and write 16 chars
    LCD_1602A_load_command(DISPLAY_SET_CURSOR_LINE_2);
    for (i = 0; i < 16; ++i)
     76e:	0f 5f       	subi	r16, 0xFF	; 255
     770:	1f 4f       	sbci	r17, 0xFF	; 255
     772:	00 31       	cpi	r16, 0x10	; 16
     774:	11 05       	cpc	r17, r1
     776:	94 f3       	brlt	.-28     	; 0x75c <display_set+0x170>
    {
        LCD_1602A_load_data(line2[i]);
    }
}
     778:	ec 96       	adiw	r28, 0x3c	; 60
     77a:	0f b6       	in	r0, 0x3f	; 63
     77c:	f8 94       	cli
     77e:	de bf       	out	0x3e, r29	; 62
     780:	0f be       	out	0x3f, r0	; 63
     782:	cd bf       	out	0x3d, r28	; 61
     784:	df 91       	pop	r29
     786:	cf 91       	pop	r28
     788:	1f 91       	pop	r17
     78a:	0f 91       	pop	r16
     78c:	08 95       	ret

0000078e <get_tank_capacity>:
    get the tank capacity based on sonar distance measurement
    params: void
    returns: float - the tank capacity in liters
*/
float get_tank_capacity()
{
     78e:	cf 92       	push	r12
     790:	df 92       	push	r13
     792:	ef 92       	push	r14
     794:	ff 92       	push	r15
    uint16_t water_depth = HCSR04_get_distance();
     796:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <HCSR04_get_distance>
    water_depth *= 1.5; // convert to float
     79a:	bc 01       	movw	r22, r24
     79c:	80 e0       	ldi	r24, 0x00	; 0
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	0e 94 76 0b 	call	0x16ec	; 0x16ec <__floatunsisf>
     7a4:	20 e0       	ldi	r18, 0x00	; 0
     7a6:	30 e0       	ldi	r19, 0x00	; 0
     7a8:	40 ec       	ldi	r20, 0xC0	; 192
     7aa:	5f e3       	ldi	r21, 0x3F	; 63
     7ac:	0e 94 2d 0c 	call	0x185a	; 0x185a <__mulsf3>
     7b0:	0e 94 47 0b 	call	0x168e	; 0x168e <__fixunssfsi>

    float water_height = TANK_HEIGHT_IN_CM - water_depth;
     7b4:	80 e0       	ldi	r24, 0x00	; 0
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	0e 94 76 0b 	call	0x16ec	; 0x16ec <__floatunsisf>
     7bc:	9b 01       	movw	r18, r22
     7be:	ac 01       	movw	r20, r24
     7c0:	6a e9       	ldi	r22, 0x9A	; 154
     7c2:	79 e9       	ldi	r23, 0x99	; 153
     7c4:	89 e7       	ldi	r24, 0x79	; 121
     7c6:	91 e4       	ldi	r25, 0x41	; 65
     7c8:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <__subsf3>

    // // The following formula assumes the tank is a perfect cylinder: V = π * r^2 * h
    float volume = (PI * ((float)TANK_RADIUS_IN_CM * (float)TANK_RADIUS_IN_CM) * water_height) / 1000.0; // convert cm^3 to liters
     7cc:	20 ed       	ldi	r18, 0xD0	; 208
     7ce:	3f e0       	ldi	r19, 0x0F	; 15
     7d0:	49 e4       	ldi	r20, 0x49	; 73
     7d2:	53 e4       	ldi	r21, 0x43	; 67
     7d4:	0e 94 2d 0c 	call	0x185a	; 0x185a <__mulsf3>
     7d8:	20 e0       	ldi	r18, 0x00	; 0
     7da:	30 e0       	ldi	r19, 0x00	; 0
     7dc:	4a e7       	ldi	r20, 0x7A	; 122
     7de:	54 e4       	ldi	r21, 0x44	; 68
     7e0:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <__divsf3>
     7e4:	6b 01       	movw	r12, r22
     7e6:	7c 01       	movw	r14, r24
    if (volume < 0.0) {
     7e8:	20 e0       	ldi	r18, 0x00	; 0
     7ea:	30 e0       	ldi	r19, 0x00	; 0
     7ec:	a9 01       	movw	r20, r18
     7ee:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <__cmpsf2>
     7f2:	88 23       	and	r24, r24
     7f4:	1c f4       	brge	.+6      	; 0x7fc <get_tank_capacity+0x6e>
        volume = 0.0;
     7f6:	c1 2c       	mov	r12, r1
     7f8:	d1 2c       	mov	r13, r1
     7fa:	76 01       	movw	r14, r12
    }
    return volume;
}
     7fc:	c7 01       	movw	r24, r14
     7fe:	b6 01       	movw	r22, r12
     800:	ff 90       	pop	r15
     802:	ef 90       	pop	r14
     804:	df 90       	pop	r13
     806:	cf 90       	pop	r12
     808:	08 95       	ret

0000080a <get_refill_rate>:
    get the refill rate based on tank capacity change over time
    params: void
    returns: float - the refill rate in liters per minute
*/
float get_refill_rate()
{
     80a:	8f 92       	push	r8
     80c:	9f 92       	push	r9
     80e:	af 92       	push	r10
     810:	bf 92       	push	r11
     812:	cf 92       	push	r12
     814:	df 92       	push	r13
     816:	ef 92       	push	r14
     818:	ff 92       	push	r15
    float capacity_at_start = get_tank_capacity();
     81a:	0e 94 c7 03 	call	0x78e	; 0x78e <get_tank_capacity>
     81e:	4b 01       	movw	r8, r22
     820:	5c 01       	movw	r10, r24
     822:	2f ef       	ldi	r18, 0xFF	; 255
     824:	87 ea       	ldi	r24, 0xA7	; 167
     826:	91 e6       	ldi	r25, 0x61	; 97
     828:	21 50       	subi	r18, 0x01	; 1
     82a:	80 40       	sbci	r24, 0x00	; 0
     82c:	90 40       	sbci	r25, 0x00	; 0
     82e:	e1 f7       	brne	.-8      	; 0x828 <get_refill_rate+0x1e>
     830:	00 c0       	rjmp	.+0      	; 0x832 <get_refill_rate+0x28>
     832:	00 00       	nop
    _delay_ms(2000);
    float capacity_at_end = get_tank_capacity();
     834:	0e 94 c7 03 	call	0x78e	; 0x78e <get_tank_capacity>
     838:	6b 01       	movw	r12, r22
     83a:	7c 01       	movw	r14, r24

    if (capacity_at_end < capacity_at_start) {
     83c:	9b 01       	movw	r18, r22
     83e:	ac 01       	movw	r20, r24
     840:	c5 01       	movw	r24, r10
     842:	b4 01       	movw	r22, r8
     844:	0e 94 28 0c 	call	0x1850	; 0x1850 <__gesf2>
     848:	18 16       	cp	r1, r24
     84a:	9c f0       	brlt	.+38     	; 0x872 <get_refill_rate+0x68>
        return 0.0; // no refill detected
    }

    float refill_rate_per_second = (capacity_at_end - capacity_at_start) / 2.0;
     84c:	a5 01       	movw	r20, r10
     84e:	94 01       	movw	r18, r8
     850:	c7 01       	movw	r24, r14
     852:	b6 01       	movw	r22, r12
     854:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <__subsf3>
     858:	20 e0       	ldi	r18, 0x00	; 0
     85a:	30 e0       	ldi	r19, 0x00	; 0
     85c:	40 e0       	ldi	r20, 0x00	; 0
     85e:	5f e3       	ldi	r21, 0x3F	; 63
     860:	0e 94 2d 0c 	call	0x185a	; 0x185a <__mulsf3>

    return refill_rate_per_second * 60.0; // convert to liters per minute
     864:	20 e0       	ldi	r18, 0x00	; 0
     866:	30 e0       	ldi	r19, 0x00	; 0
     868:	40 e7       	ldi	r20, 0x70	; 112
     86a:	52 e4       	ldi	r21, 0x42	; 66
     86c:	0e 94 2d 0c 	call	0x185a	; 0x185a <__mulsf3>
     870:	03 c0       	rjmp	.+6      	; 0x878 <get_refill_rate+0x6e>
    float capacity_at_start = get_tank_capacity();
    _delay_ms(2000);
    float capacity_at_end = get_tank_capacity();

    if (capacity_at_end < capacity_at_start) {
        return 0.0; // no refill detected
     872:	60 e0       	ldi	r22, 0x00	; 0
     874:	70 e0       	ldi	r23, 0x00	; 0
     876:	cb 01       	movw	r24, r22
    }

    float refill_rate_per_second = (capacity_at_end - capacity_at_start) / 2.0;

    return refill_rate_per_second * 60.0; // convert to liters per minute
}
     878:	ff 90       	pop	r15
     87a:	ef 90       	pop	r14
     87c:	df 90       	pop	r13
     87e:	cf 90       	pop	r12
     880:	bf 90       	pop	r11
     882:	af 90       	pop	r10
     884:	9f 90       	pop	r9
     886:	8f 90       	pop	r8
     888:	08 95       	ret

0000088a <get_leak_rate>:
    get the leak rate based on tank capacity change over time
    params: void
    returns: float - the leak rate in liters per minute
*/
float get_leak_rate()
{
     88a:	8f 92       	push	r8
     88c:	9f 92       	push	r9
     88e:	af 92       	push	r10
     890:	bf 92       	push	r11
     892:	cf 92       	push	r12
     894:	df 92       	push	r13
     896:	ef 92       	push	r14
     898:	ff 92       	push	r15
    float capacity_at_start = get_tank_capacity();
     89a:	0e 94 c7 03 	call	0x78e	; 0x78e <get_tank_capacity>
     89e:	6b 01       	movw	r12, r22
     8a0:	7c 01       	movw	r14, r24
     8a2:	2f ef       	ldi	r18, 0xFF	; 255
     8a4:	87 ea       	ldi	r24, 0xA7	; 167
     8a6:	91 e6       	ldi	r25, 0x61	; 97
     8a8:	21 50       	subi	r18, 0x01	; 1
     8aa:	80 40       	sbci	r24, 0x00	; 0
     8ac:	90 40       	sbci	r25, 0x00	; 0
     8ae:	e1 f7       	brne	.-8      	; 0x8a8 <get_leak_rate+0x1e>
     8b0:	00 c0       	rjmp	.+0      	; 0x8b2 <get_leak_rate+0x28>
     8b2:	00 00       	nop
    _delay_ms(2000);
    float capacity_at_end = get_tank_capacity();
     8b4:	0e 94 c7 03 	call	0x78e	; 0x78e <get_tank_capacity>
     8b8:	4b 01       	movw	r8, r22
     8ba:	5c 01       	movw	r10, r24

    if (capacity_at_start < capacity_at_end) {
     8bc:	9b 01       	movw	r18, r22
     8be:	ac 01       	movw	r20, r24
     8c0:	c7 01       	movw	r24, r14
     8c2:	b6 01       	movw	r22, r12
     8c4:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <__cmpsf2>
     8c8:	88 23       	and	r24, r24
     8ca:	9c f0       	brlt	.+38     	; 0x8f2 <get_leak_rate+0x68>
        return 0.0; // no leak detected
    }
    float leak_rate_per_second = (capacity_at_start - capacity_at_end) / 2.0;
     8cc:	a5 01       	movw	r20, r10
     8ce:	94 01       	movw	r18, r8
     8d0:	c7 01       	movw	r24, r14
     8d2:	b6 01       	movw	r22, r12
     8d4:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <__subsf3>
     8d8:	20 e0       	ldi	r18, 0x00	; 0
     8da:	30 e0       	ldi	r19, 0x00	; 0
     8dc:	40 e0       	ldi	r20, 0x00	; 0
     8de:	5f e3       	ldi	r21, 0x3F	; 63
     8e0:	0e 94 2d 0c 	call	0x185a	; 0x185a <__mulsf3>

    return leak_rate_per_second * 60.0; // convert to liters per minute
     8e4:	20 e0       	ldi	r18, 0x00	; 0
     8e6:	30 e0       	ldi	r19, 0x00	; 0
     8e8:	40 e7       	ldi	r20, 0x70	; 112
     8ea:	52 e4       	ldi	r21, 0x42	; 66
     8ec:	0e 94 2d 0c 	call	0x185a	; 0x185a <__mulsf3>
     8f0:	03 c0       	rjmp	.+6      	; 0x8f8 <get_leak_rate+0x6e>
    float capacity_at_start = get_tank_capacity();
    _delay_ms(2000);
    float capacity_at_end = get_tank_capacity();

    if (capacity_at_start < capacity_at_end) {
        return 0.0; // no leak detected
     8f2:	60 e0       	ldi	r22, 0x00	; 0
     8f4:	70 e0       	ldi	r23, 0x00	; 0
     8f6:	cb 01       	movw	r24, r22
    }
    float leak_rate_per_second = (capacity_at_start - capacity_at_end) / 2.0;

    return leak_rate_per_second * 60.0; // convert to liters per minute
}
     8f8:	ff 90       	pop	r15
     8fa:	ef 90       	pop	r14
     8fc:	df 90       	pop	r13
     8fe:	cf 90       	pop	r12
     900:	bf 90       	pop	r11
     902:	af 90       	pop	r10
     904:	9f 90       	pop	r9
     906:	8f 90       	pop	r8
     908:	08 95       	ret

0000090a <get_soil_temperature>:

float get_soil_temperature()
{
    return DS18B20_read_temperature();
     90a:	0e 94 67 02 	call	0x4ce	; 0x4ce <DS18B20_read_temperature>
}
     90e:	08 95       	ret

00000910 <ui_show_display>:
    update the display based on the current active menu and hover indices
    params: void
    returns: void
*/
void ui_show_display(void)
{
     910:	ef 92       	push	r14
     912:	ff 92       	push	r15
     914:	0f 93       	push	r16
    if (active_menu_index == -1)
     916:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <active_menu_index>
     91a:	f0 91 21 01 	lds	r31, 0x0121	; 0x800121 <active_menu_index+0x1>
     91e:	ef 3f       	cpi	r30, 0xFF	; 255
     920:	2f ef       	ldi	r18, 0xFF	; 255
     922:	f2 07       	cpc	r31, r18
     924:	79 f4       	brne	.+30     	; 0x944 <ui_show_display+0x34>
    {
        display_set("MAIN MENU", MENU_BUFFER[menu_hover_index]);
     926:	e0 91 c6 03 	lds	r30, 0x03C6	; 0x8003c6 <menu_hover_index>
     92a:	f0 91 c7 03 	lds	r31, 0x03C7	; 0x8003c7 <menu_hover_index+0x1>
     92e:	ee 0f       	add	r30, r30
     930:	ff 1f       	adc	r31, r31
     932:	e0 5c       	subi	r30, 0xC0	; 192
     934:	fe 4f       	sbci	r31, 0xFE	; 254
     936:	60 81       	ld	r22, Z
     938:	71 81       	ldd	r23, Z+1	; 0x01
     93a:	87 e8       	ldi	r24, 0x87	; 135
     93c:	91 e0       	ldi	r25, 0x01	; 1
     93e:	0e 94 f6 02 	call	0x5ec	; 0x5ec <display_set>
     942:	60 c2       	rjmp	.+1216   	; 0xe04 <ui_show_display+0x4f4>
    }
    else
    {
        switch (active_menu_index)
     944:	e9 30       	cpi	r30, 0x09	; 9
     946:	f1 05       	cpc	r31, r1
     948:	08 f0       	brcs	.+2      	; 0x94c <ui_show_display+0x3c>
     94a:	56 c2       	rjmp	.+1196   	; 0xdf8 <ui_show_display+0x4e8>
     94c:	ec 5c       	subi	r30, 0xCC	; 204
     94e:	ff 4f       	sbci	r31, 0xFF	; 255
     950:	0c 94 9a 0c 	jmp	0x1934	; 0x1934 <__tablejump2__>
        {
        case 0:
            display_set("TANK CAPACITY", "Loading...");
     954:	61 e9       	ldi	r22, 0x91	; 145
     956:	71 e0       	ldi	r23, 0x01	; 1
     958:	8c e9       	ldi	r24, 0x9C	; 156
     95a:	91 e0       	ldi	r25, 0x01	; 1
     95c:	0e 94 f6 02 	call	0x5ec	; 0x5ec <display_set>
            format_float(buffer, sizeof(buffer), get_tank_capacity(), 1, "Ltrs");
     960:	0e 94 c7 03 	call	0x78e	; 0x78e <get_tank_capacity>
     964:	9b 01       	movw	r18, r22
     966:	ac 01       	movw	r20, r24
     968:	0f 2e       	mov	r0, r31
     96a:	fa ea       	ldi	r31, 0xAA	; 170
     96c:	ef 2e       	mov	r14, r31
     96e:	f1 e0       	ldi	r31, 0x01	; 1
     970:	ff 2e       	mov	r15, r31
     972:	f0 2d       	mov	r31, r0
     974:	01 e0       	ldi	r16, 0x01	; 1
     976:	60 e1       	ldi	r22, 0x10	; 16
     978:	70 e0       	ldi	r23, 0x00	; 0
     97a:	88 ec       	ldi	r24, 0xC8	; 200
     97c:	93 e0       	ldi	r25, 0x03	; 3
     97e:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <format_float>
            display_set("TANK CAPACITY", buffer);
     982:	68 ec       	ldi	r22, 0xC8	; 200
     984:	73 e0       	ldi	r23, 0x03	; 3
     986:	8c e9       	ldi	r24, 0x9C	; 156
     988:	91 e0       	ldi	r25, 0x01	; 1
     98a:	0e 94 f6 02 	call	0x5ec	; 0x5ec <display_set>
            break;
     98e:	3a c2       	rjmp	.+1140   	; 0xe04 <ui_show_display+0x4f4>
        case 1:
            display_set("REFILL RATE", "Loading...");
     990:	61 e9       	ldi	r22, 0x91	; 145
     992:	71 e0       	ldi	r23, 0x01	; 1
     994:	8f ea       	ldi	r24, 0xAF	; 175
     996:	91 e0       	ldi	r25, 0x01	; 1
     998:	0e 94 f6 02 	call	0x5ec	; 0x5ec <display_set>
            format_float(buffer, sizeof(buffer), get_refill_rate(), 1, "Ltrs per min");
     99c:	0e 94 05 04 	call	0x80a	; 0x80a <get_refill_rate>
     9a0:	9b 01       	movw	r18, r22
     9a2:	ac 01       	movw	r20, r24
     9a4:	0f 2e       	mov	r0, r31
     9a6:	fb eb       	ldi	r31, 0xBB	; 187
     9a8:	ef 2e       	mov	r14, r31
     9aa:	f1 e0       	ldi	r31, 0x01	; 1
     9ac:	ff 2e       	mov	r15, r31
     9ae:	f0 2d       	mov	r31, r0
     9b0:	01 e0       	ldi	r16, 0x01	; 1
     9b2:	60 e1       	ldi	r22, 0x10	; 16
     9b4:	70 e0       	ldi	r23, 0x00	; 0
     9b6:	88 ec       	ldi	r24, 0xC8	; 200
     9b8:	93 e0       	ldi	r25, 0x03	; 3
     9ba:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <format_float>
            display_set("REFILL RATE", buffer);
     9be:	68 ec       	ldi	r22, 0xC8	; 200
     9c0:	73 e0       	ldi	r23, 0x03	; 3
     9c2:	8f ea       	ldi	r24, 0xAF	; 175
     9c4:	91 e0       	ldi	r25, 0x01	; 1
     9c6:	0e 94 f6 02 	call	0x5ec	; 0x5ec <display_set>
            break;
     9ca:	1c c2       	rjmp	.+1080   	; 0xe04 <ui_show_display+0x4f4>
        case 2:
            display_set("LEAKAGE RATE", "Loading...");
     9cc:	61 e9       	ldi	r22, 0x91	; 145
     9ce:	71 e0       	ldi	r23, 0x01	; 1
     9d0:	88 ec       	ldi	r24, 0xC8	; 200
     9d2:	91 e0       	ldi	r25, 0x01	; 1
     9d4:	0e 94 f6 02 	call	0x5ec	; 0x5ec <display_set>
            format_float(buffer, sizeof(buffer), get_leak_rate(), 1, "Ltrs per min");
     9d8:	0e 94 45 04 	call	0x88a	; 0x88a <get_leak_rate>
     9dc:	9b 01       	movw	r18, r22
     9de:	ac 01       	movw	r20, r24
     9e0:	0f 2e       	mov	r0, r31
     9e2:	fb eb       	ldi	r31, 0xBB	; 187
     9e4:	ef 2e       	mov	r14, r31
     9e6:	f1 e0       	ldi	r31, 0x01	; 1
     9e8:	ff 2e       	mov	r15, r31
     9ea:	f0 2d       	mov	r31, r0
     9ec:	01 e0       	ldi	r16, 0x01	; 1
     9ee:	60 e1       	ldi	r22, 0x10	; 16
     9f0:	70 e0       	ldi	r23, 0x00	; 0
     9f2:	88 ec       	ldi	r24, 0xC8	; 200
     9f4:	93 e0       	ldi	r25, 0x03	; 3
     9f6:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <format_float>
            display_set("LEAKAGE RATE", buffer);
     9fa:	68 ec       	ldi	r22, 0xC8	; 200
     9fc:	73 e0       	ldi	r23, 0x03	; 3
     9fe:	88 ec       	ldi	r24, 0xC8	; 200
     a00:	91 e0       	ldi	r25, 0x01	; 1
     a02:	0e 94 f6 02 	call	0x5ec	; 0x5ec <display_set>
            break;
     a06:	fe c1       	rjmp	.+1020   	; 0xe04 <ui_show_display+0x4f4>
        case 3:
            display_set("SOIL TEMPERATURE", "Loading...");
     a08:	61 e9       	ldi	r22, 0x91	; 145
     a0a:	71 e0       	ldi	r23, 0x01	; 1
     a0c:	85 ed       	ldi	r24, 0xD5	; 213
     a0e:	91 e0       	ldi	r25, 0x01	; 1
     a10:	0e 94 f6 02 	call	0x5ec	; 0x5ec <display_set>
            format_float(buffer, sizeof(buffer), get_soil_temperature(), 1, "degrees");
     a14:	0e 94 85 04 	call	0x90a	; 0x90a <get_soil_temperature>
     a18:	9b 01       	movw	r18, r22
     a1a:	ac 01       	movw	r20, r24
     a1c:	0f 2e       	mov	r0, r31
     a1e:	f6 ee       	ldi	r31, 0xE6	; 230
     a20:	ef 2e       	mov	r14, r31
     a22:	f1 e0       	ldi	r31, 0x01	; 1
     a24:	ff 2e       	mov	r15, r31
     a26:	f0 2d       	mov	r31, r0
     a28:	01 e0       	ldi	r16, 0x01	; 1
     a2a:	60 e1       	ldi	r22, 0x10	; 16
     a2c:	70 e0       	ldi	r23, 0x00	; 0
     a2e:	88 ec       	ldi	r24, 0xC8	; 200
     a30:	93 e0       	ldi	r25, 0x03	; 3
     a32:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <format_float>
            display_set("SOIL TEMPERATURE", buffer);
     a36:	68 ec       	ldi	r22, 0xC8	; 200
     a38:	73 e0       	ldi	r23, 0x03	; 3
     a3a:	85 ed       	ldi	r24, 0xD5	; 213
     a3c:	91 e0       	ldi	r25, 0x01	; 1
     a3e:	0e 94 f6 02 	call	0x5ec	; 0x5ec <display_set>
            break;
     a42:	e0 c1       	rjmp	.+960    	; 0xe04 <ui_show_display+0x4f4>
        case 4:
            if (active_live_view_index == -1)
     a44:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <active_live_view_index>
     a48:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <active_live_view_index+0x1>
     a4c:	01 96       	adiw	r24, 0x01	; 1
     a4e:	79 f4       	brne	.+30     	; 0xa6e <ui_show_display+0x15e>
            {
                display_set("LIVE VIEW", LIVE_VIEW_BUFFER[live_view_hover_index]);
     a50:	e0 91 be 03 	lds	r30, 0x03BE	; 0x8003be <live_view_hover_index>
     a54:	f0 91 bf 03 	lds	r31, 0x03BF	; 0x8003bf <live_view_hover_index+0x1>
     a58:	ee 0f       	add	r30, r30
     a5a:	ff 1f       	adc	r31, r31
     a5c:	e8 5c       	subi	r30, 0xC8	; 200
     a5e:	fe 4f       	sbci	r31, 0xFE	; 254
     a60:	60 81       	ld	r22, Z
     a62:	71 81       	ldd	r23, Z+1	; 0x01
     a64:	8e ee       	ldi	r24, 0xEE	; 238
     a66:	91 e0       	ldi	r25, 0x01	; 1
     a68:	0e 94 f6 02 	call	0x5ec	; 0x5ec <display_set>
     a6c:	cb c1       	rjmp	.+918    	; 0xe04 <ui_show_display+0x4f4>
            }
            else
            {
                switch (live_view_hover_index)
     a6e:	80 91 be 03 	lds	r24, 0x03BE	; 0x8003be <live_view_hover_index>
     a72:	90 91 bf 03 	lds	r25, 0x03BF	; 0x8003bf <live_view_hover_index+0x1>
     a76:	81 30       	cpi	r24, 0x01	; 1
     a78:	91 05       	cpc	r25, r1
     a7a:	39 f1       	breq	.+78     	; 0xaca <ui_show_display+0x1ba>
     a7c:	1c f4       	brge	.+6      	; 0xa84 <ui_show_display+0x174>
     a7e:	89 2b       	or	r24, r25
     a80:	41 f0       	breq	.+16     	; 0xa92 <ui_show_display+0x182>
     a82:	77 c0       	rjmp	.+238    	; 0xb72 <ui_show_display+0x262>
     a84:	82 30       	cpi	r24, 0x02	; 2
     a86:	91 05       	cpc	r25, r1
     a88:	e1 f1       	breq	.+120    	; 0xb02 <ui_show_display+0x1f2>
     a8a:	03 97       	sbiw	r24, 0x03	; 3
     a8c:	09 f4       	brne	.+2      	; 0xa90 <ui_show_display+0x180>
     a8e:	55 c0       	rjmp	.+170    	; 0xb3a <ui_show_display+0x22a>
     a90:	70 c0       	rjmp	.+224    	; 0xb72 <ui_show_display+0x262>
                {
                case 0:
                    format_float(buffer, sizeof(buffer), current_tank_capacity, 1, "Ltrs");
     a92:	20 91 ba 03 	lds	r18, 0x03BA	; 0x8003ba <current_tank_capacity>
     a96:	30 91 bb 03 	lds	r19, 0x03BB	; 0x8003bb <current_tank_capacity+0x1>
     a9a:	40 91 bc 03 	lds	r20, 0x03BC	; 0x8003bc <current_tank_capacity+0x2>
     a9e:	50 91 bd 03 	lds	r21, 0x03BD	; 0x8003bd <current_tank_capacity+0x3>
     aa2:	0f 2e       	mov	r0, r31
     aa4:	fa ea       	ldi	r31, 0xAA	; 170
     aa6:	ef 2e       	mov	r14, r31
     aa8:	f1 e0       	ldi	r31, 0x01	; 1
     aaa:	ff 2e       	mov	r15, r31
     aac:	f0 2d       	mov	r31, r0
     aae:	01 e0       	ldi	r16, 0x01	; 1
     ab0:	60 e1       	ldi	r22, 0x10	; 16
     ab2:	70 e0       	ldi	r23, 0x00	; 0
     ab4:	88 ec       	ldi	r24, 0xC8	; 200
     ab6:	93 e0       	ldi	r25, 0x03	; 3
     ab8:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <format_float>
                    display_set("CAPACITY", buffer);
     abc:	68 ec       	ldi	r22, 0xC8	; 200
     abe:	73 e0       	ldi	r23, 0x03	; 3
     ac0:	81 ea       	ldi	r24, 0xA1	; 161
     ac2:	91 e0       	ldi	r25, 0x01	; 1
     ac4:	0e 94 f6 02 	call	0x5ec	; 0x5ec <display_set>
                    break;
     ac8:	9d c1       	rjmp	.+826    	; 0xe04 <ui_show_display+0x4f4>
                case 1:
                    format_float(buffer, sizeof(buffer), current_refill_rate, 1, "Ltrs per min");
     aca:	20 91 b6 03 	lds	r18, 0x03B6	; 0x8003b6 <current_refill_rate>
     ace:	30 91 b7 03 	lds	r19, 0x03B7	; 0x8003b7 <current_refill_rate+0x1>
     ad2:	40 91 b8 03 	lds	r20, 0x03B8	; 0x8003b8 <current_refill_rate+0x2>
     ad6:	50 91 b9 03 	lds	r21, 0x03B9	; 0x8003b9 <current_refill_rate+0x3>
     ada:	0f 2e       	mov	r0, r31
     adc:	fb eb       	ldi	r31, 0xBB	; 187
     ade:	ef 2e       	mov	r14, r31
     ae0:	f1 e0       	ldi	r31, 0x01	; 1
     ae2:	ff 2e       	mov	r15, r31
     ae4:	f0 2d       	mov	r31, r0
     ae6:	01 e0       	ldi	r16, 0x01	; 1
     ae8:	60 e1       	ldi	r22, 0x10	; 16
     aea:	70 e0       	ldi	r23, 0x00	; 0
     aec:	88 ec       	ldi	r24, 0xC8	; 200
     aee:	93 e0       	ldi	r25, 0x03	; 3
     af0:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <format_float>
                    display_set("REFILL RATE", buffer);
     af4:	68 ec       	ldi	r22, 0xC8	; 200
     af6:	73 e0       	ldi	r23, 0x03	; 3
     af8:	8f ea       	ldi	r24, 0xAF	; 175
     afa:	91 e0       	ldi	r25, 0x01	; 1
     afc:	0e 94 f6 02 	call	0x5ec	; 0x5ec <display_set>
                    break;
     b00:	81 c1       	rjmp	.+770    	; 0xe04 <ui_show_display+0x4f4>
                case 2:
                    format_float(buffer, sizeof(buffer), current_leak_rate, 1, "Ltrs per min");
     b02:	20 91 b2 03 	lds	r18, 0x03B2	; 0x8003b2 <current_leak_rate>
     b06:	30 91 b3 03 	lds	r19, 0x03B3	; 0x8003b3 <current_leak_rate+0x1>
     b0a:	40 91 b4 03 	lds	r20, 0x03B4	; 0x8003b4 <current_leak_rate+0x2>
     b0e:	50 91 b5 03 	lds	r21, 0x03B5	; 0x8003b5 <current_leak_rate+0x3>
     b12:	0f 2e       	mov	r0, r31
     b14:	fb eb       	ldi	r31, 0xBB	; 187
     b16:	ef 2e       	mov	r14, r31
     b18:	f1 e0       	ldi	r31, 0x01	; 1
     b1a:	ff 2e       	mov	r15, r31
     b1c:	f0 2d       	mov	r31, r0
     b1e:	01 e0       	ldi	r16, 0x01	; 1
     b20:	60 e1       	ldi	r22, 0x10	; 16
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	88 ec       	ldi	r24, 0xC8	; 200
     b26:	93 e0       	ldi	r25, 0x03	; 3
     b28:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <format_float>
                    display_set("LEAK RATE", buffer);
     b2c:	68 ec       	ldi	r22, 0xC8	; 200
     b2e:	73 e0       	ldi	r23, 0x03	; 3
     b30:	88 ef       	ldi	r24, 0xF8	; 248
     b32:	91 e0       	ldi	r25, 0x01	; 1
     b34:	0e 94 f6 02 	call	0x5ec	; 0x5ec <display_set>
                    break;
     b38:	65 c1       	rjmp	.+714    	; 0xe04 <ui_show_display+0x4f4>
                case 3:
                    format_float(buffer, sizeof(buffer), current_soil_temperature, 1, "degrees");
     b3a:	20 91 ae 03 	lds	r18, 0x03AE	; 0x8003ae <__data_end>
     b3e:	30 91 af 03 	lds	r19, 0x03AF	; 0x8003af <__data_end+0x1>
     b42:	40 91 b0 03 	lds	r20, 0x03B0	; 0x8003b0 <__data_end+0x2>
     b46:	50 91 b1 03 	lds	r21, 0x03B1	; 0x8003b1 <__data_end+0x3>
     b4a:	0f 2e       	mov	r0, r31
     b4c:	f6 ee       	ldi	r31, 0xE6	; 230
     b4e:	ef 2e       	mov	r14, r31
     b50:	f1 e0       	ldi	r31, 0x01	; 1
     b52:	ff 2e       	mov	r15, r31
     b54:	f0 2d       	mov	r31, r0
     b56:	01 e0       	ldi	r16, 0x01	; 1
     b58:	60 e1       	ldi	r22, 0x10	; 16
     b5a:	70 e0       	ldi	r23, 0x00	; 0
     b5c:	88 ec       	ldi	r24, 0xC8	; 200
     b5e:	93 e0       	ldi	r25, 0x03	; 3
     b60:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <format_float>
                    display_set("SOIL TEMP", buffer);
     b64:	68 ec       	ldi	r22, 0xC8	; 200
     b66:	73 e0       	ldi	r23, 0x03	; 3
     b68:	82 e0       	ldi	r24, 0x02	; 2
     b6a:	92 e0       	ldi	r25, 0x02	; 2
     b6c:	0e 94 f6 02 	call	0x5ec	; 0x5ec <display_set>
                    break;
     b70:	49 c1       	rjmp	.+658    	; 0xe04 <ui_show_display+0x4f4>
                default:
                    display_set("ERROR", "Invalid live view");
     b72:	6c e0       	ldi	r22, 0x0C	; 12
     b74:	72 e0       	ldi	r23, 0x02	; 2
     b76:	8e e1       	ldi	r24, 0x1E	; 30
     b78:	92 e0       	ldi	r25, 0x02	; 2
     b7a:	0e 94 f6 02 	call	0x5ec	; 0x5ec <display_set>
                    break;
     b7e:	42 c1       	rjmp	.+644    	; 0xe04 <ui_show_display+0x4f4>
                }
            }
            break;
        case 5:
            if (active_trigger_index == -1)
     b80:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <active_trigger_index>
     b84:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <active_trigger_index+0x1>
     b88:	8f 3f       	cpi	r24, 0xFF	; 255
     b8a:	2f ef       	ldi	r18, 0xFF	; 255
     b8c:	92 07       	cpc	r25, r18
     b8e:	79 f4       	brne	.+30     	; 0xbae <ui_show_display+0x29e>
            {
                display_set("TRIGGERS", TRIGGERS_BUFFER[trigger_hover_index]);
     b90:	e0 91 c4 03 	lds	r30, 0x03C4	; 0x8003c4 <trigger_hover_index>
     b94:	f0 91 c5 03 	lds	r31, 0x03C5	; 0x8003c5 <trigger_hover_index+0x1>
     b98:	ee 0f       	add	r30, r30
     b9a:	ff 1f       	adc	r31, r31
     b9c:	ec 5c       	subi	r30, 0xCC	; 204
     b9e:	fe 4f       	sbci	r31, 0xFE	; 254
     ba0:	60 81       	ld	r22, Z
     ba2:	71 81       	ldd	r23, Z+1	; 0x01
     ba4:	80 e9       	ldi	r24, 0x90	; 144
     ba6:	92 e0       	ldi	r25, 0x02	; 2
     ba8:	0e 94 f6 02 	call	0x5ec	; 0x5ec <display_set>
     bac:	2b c1       	rjmp	.+598    	; 0xe04 <ui_show_display+0x4f4>
            }
            else
            {
                switch (active_trigger_index)
     bae:	00 97       	sbiw	r24, 0x00	; 0
     bb0:	19 f0       	breq	.+6      	; 0xbb8 <ui_show_display+0x2a8>
     bb2:	01 97       	sbiw	r24, 0x01	; 1
     bb4:	e9 f0       	breq	.+58     	; 0xbf0 <ui_show_display+0x2e0>
     bb6:	38 c0       	rjmp	.+112    	; 0xc28 <ui_show_display+0x318>
                {
                case 0:
                    format_float(buffer, sizeof(buffer), MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER, 1, "Ltrs");
     bb8:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER>
     bbc:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x1>
     bc0:	40 91 18 01 	lds	r20, 0x0118	; 0x800118 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x2>
     bc4:	50 91 19 01 	lds	r21, 0x0119	; 0x800119 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x3>
     bc8:	0f 2e       	mov	r0, r31
     bca:	fa ea       	ldi	r31, 0xAA	; 170
     bcc:	ef 2e       	mov	r14, r31
     bce:	f1 e0       	ldi	r31, 0x01	; 1
     bd0:	ff 2e       	mov	r15, r31
     bd2:	f0 2d       	mov	r31, r0
     bd4:	01 e0       	ldi	r16, 0x01	; 1
     bd6:	60 e1       	ldi	r22, 0x10	; 16
     bd8:	70 e0       	ldi	r23, 0x00	; 0
     bda:	88 ec       	ldi	r24, 0xC8	; 200
     bdc:	93 e0       	ldi	r25, 0x03	; 3
     bde:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <format_float>
                    display_set("MIN CAPACITY", buffer);
     be2:	68 ec       	ldi	r22, 0xC8	; 200
     be4:	73 e0       	ldi	r23, 0x03	; 3
     be6:	84 e2       	ldi	r24, 0x24	; 36
     be8:	92 e0       	ldi	r25, 0x02	; 2
     bea:	0e 94 f6 02 	call	0x5ec	; 0x5ec <display_set>
                    break;
     bee:	0a c1       	rjmp	.+532    	; 0xe04 <ui_show_display+0x4f4>
                case 1:
                    format_float(buffer, sizeof(buffer), MAXIMUM_TEMPERATURE_BEFORE_PUMPING, 2, "degrees");
     bf0:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING>
     bf4:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x1>
     bf8:	40 91 14 01 	lds	r20, 0x0114	; 0x800114 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x2>
     bfc:	50 91 15 01 	lds	r21, 0x0115	; 0x800115 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x3>
     c00:	0f 2e       	mov	r0, r31
     c02:	f6 ee       	ldi	r31, 0xE6	; 230
     c04:	ef 2e       	mov	r14, r31
     c06:	f1 e0       	ldi	r31, 0x01	; 1
     c08:	ff 2e       	mov	r15, r31
     c0a:	f0 2d       	mov	r31, r0
     c0c:	02 e0       	ldi	r16, 0x02	; 2
     c0e:	60 e1       	ldi	r22, 0x10	; 16
     c10:	70 e0       	ldi	r23, 0x00	; 0
     c12:	88 ec       	ldi	r24, 0xC8	; 200
     c14:	93 e0       	ldi	r25, 0x03	; 3
     c16:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <format_float>
                    display_set("MAX TEMP", buffer);
     c1a:	68 ec       	ldi	r22, 0xC8	; 200
     c1c:	73 e0       	ldi	r23, 0x03	; 3
     c1e:	81 e3       	ldi	r24, 0x31	; 49
     c20:	92 e0       	ldi	r25, 0x02	; 2
     c22:	0e 94 f6 02 	call	0x5ec	; 0x5ec <display_set>
                    break;
     c26:	ee c0       	rjmp	.+476    	; 0xe04 <ui_show_display+0x4f4>
                default:
                    display_set("ERROR", "Invalid trigger");
     c28:	6a e3       	ldi	r22, 0x3A	; 58
     c2a:	72 e0       	ldi	r23, 0x02	; 2
     c2c:	8e e1       	ldi	r24, 0x1E	; 30
     c2e:	92 e0       	ldi	r25, 0x02	; 2
     c30:	0e 94 f6 02 	call	0x5ec	; 0x5ec <display_set>
                    break;
     c34:	e7 c0       	rjmp	.+462    	; 0xe04 <ui_show_display+0x4f4>
                }
            }
            break;

        case 7:
            display_set("MESSAGES", MESSAGES_BUFFER[message_hover_index]);
     c36:	e0 91 c0 03 	lds	r30, 0x03C0	; 0x8003c0 <message_hover_index>
     c3a:	f0 91 c1 03 	lds	r31, 0x03C1	; 0x8003c1 <message_hover_index+0x1>
     c3e:	ee 0f       	add	r30, r30
     c40:	ff 1f       	adc	r31, r31
     c42:	ee 5d       	subi	r30, 0xDE	; 222
     c44:	fe 4f       	sbci	r31, 0xFE	; 254
     c46:	60 81       	ld	r22, Z
     c48:	71 81       	ldd	r23, Z+1	; 0x01
     c4a:	8a e4       	ldi	r24, 0x4A	; 74
     c4c:	92 e0       	ldi	r25, 0x02	; 2
     c4e:	0e 94 f6 02 	call	0x5ec	; 0x5ec <display_set>
            break;
     c52:	d8 c0       	rjmp	.+432    	; 0xe04 <ui_show_display+0x4f4>
        case 8:
            if (active_config_index == -1)
     c54:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <active_config_index>
     c58:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <active_config_index+0x1>
     c5c:	8f 3f       	cpi	r24, 0xFF	; 255
     c5e:	2f ef       	ldi	r18, 0xFF	; 255
     c60:	92 07       	cpc	r25, r18
     c62:	79 f4       	brne	.+30     	; 0xc82 <ui_show_display+0x372>
            {
                display_set("CONFIG", CONFIG_BUFFER[config_hover_index]);
     c64:	e0 91 c2 03 	lds	r30, 0x03C2	; 0x8003c2 <config_hover_index>
     c68:	f0 91 c3 03 	lds	r31, 0x03C3	; 0x8003c3 <config_hover_index+0x1>
     c6c:	ee 0f       	add	r30, r30
     c6e:	ff 1f       	adc	r31, r31
     c70:	e6 5d       	subi	r30, 0xD6	; 214
     c72:	fe 4f       	sbci	r31, 0xFE	; 254
     c74:	60 81       	ld	r22, Z
     c76:	71 81       	ldd	r23, Z+1	; 0x01
     c78:	83 e5       	ldi	r24, 0x53	; 83
     c7a:	92 e0       	ldi	r25, 0x02	; 2
     c7c:	0e 94 f6 02 	call	0x5ec	; 0x5ec <display_set>
     c80:	c1 c0       	rjmp	.+386    	; 0xe04 <ui_show_display+0x4f4>
            }
            else
            {
                switch (active_config_index)
     c82:	82 30       	cpi	r24, 0x02	; 2
     c84:	91 05       	cpc	r25, r1
     c86:	09 f4       	brne	.+2      	; 0xc8a <ui_show_display+0x37a>
     c88:	46 c0       	rjmp	.+140    	; 0xd16 <ui_show_display+0x406>
     c8a:	2c f4       	brge	.+10     	; 0xc96 <ui_show_display+0x386>
     c8c:	00 97       	sbiw	r24, 0x00	; 0
     c8e:	59 f0       	breq	.+22     	; 0xca6 <ui_show_display+0x396>
     c90:	01 97       	sbiw	r24, 0x01	; 1
     c92:	29 f1       	breq	.+74     	; 0xcde <ui_show_display+0x3ce>
     c94:	aa c0       	rjmp	.+340    	; 0xdea <ui_show_display+0x4da>
     c96:	83 30       	cpi	r24, 0x03	; 3
     c98:	91 05       	cpc	r25, r1
     c9a:	09 f4       	brne	.+2      	; 0xc9e <ui_show_display+0x38e>
     c9c:	58 c0       	rjmp	.+176    	; 0xd4e <ui_show_display+0x43e>
     c9e:	04 97       	sbiw	r24, 0x04	; 4
     ca0:	09 f4       	brne	.+2      	; 0xca4 <ui_show_display+0x394>
     ca2:	7c c0       	rjmp	.+248    	; 0xd9c <ui_show_display+0x48c>
     ca4:	a2 c0       	rjmp	.+324    	; 0xdea <ui_show_display+0x4da>
                {
                case 0:
                    format_float(buffer, sizeof(buffer), STEP_SIZE_FOR_INCREMENTS, 1, "Units");
     ca6:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <STEP_SIZE_FOR_INCREMENTS>
     caa:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <STEP_SIZE_FOR_INCREMENTS+0x1>
     cae:	40 91 10 01 	lds	r20, 0x0110	; 0x800110 <STEP_SIZE_FOR_INCREMENTS+0x2>
     cb2:	50 91 11 01 	lds	r21, 0x0111	; 0x800111 <STEP_SIZE_FOR_INCREMENTS+0x3>
     cb6:	0f 2e       	mov	r0, r31
     cb8:	fa e5       	ldi	r31, 0x5A	; 90
     cba:	ef 2e       	mov	r14, r31
     cbc:	f2 e0       	ldi	r31, 0x02	; 2
     cbe:	ff 2e       	mov	r15, r31
     cc0:	f0 2d       	mov	r31, r0
     cc2:	01 e0       	ldi	r16, 0x01	; 1
     cc4:	60 e1       	ldi	r22, 0x10	; 16
     cc6:	70 e0       	ldi	r23, 0x00	; 0
     cc8:	88 ec       	ldi	r24, 0xC8	; 200
     cca:	93 e0       	ldi	r25, 0x03	; 3
     ccc:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <format_float>
                    display_set("STEP SIZE", buffer);
     cd0:	68 ec       	ldi	r22, 0xC8	; 200
     cd2:	73 e0       	ldi	r23, 0x03	; 3
     cd4:	80 e6       	ldi	r24, 0x60	; 96
     cd6:	92 e0       	ldi	r25, 0x02	; 2
     cd8:	0e 94 f6 02 	call	0x5ec	; 0x5ec <display_set>
                    break;
     cdc:	93 c0       	rjmp	.+294    	; 0xe04 <ui_show_display+0x4f4>
                case 1:
                    format_float(buffer, sizeof(buffer), PUMP_THRESHOLD, 1, "Ltrs");
     cde:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <PUMP_THRESHOLD>
     ce2:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <PUMP_THRESHOLD+0x1>
     ce6:	40 91 08 01 	lds	r20, 0x0108	; 0x800108 <PUMP_THRESHOLD+0x2>
     cea:	50 91 09 01 	lds	r21, 0x0109	; 0x800109 <PUMP_THRESHOLD+0x3>
     cee:	0f 2e       	mov	r0, r31
     cf0:	fa ea       	ldi	r31, 0xAA	; 170
     cf2:	ef 2e       	mov	r14, r31
     cf4:	f1 e0       	ldi	r31, 0x01	; 1
     cf6:	ff 2e       	mov	r15, r31
     cf8:	f0 2d       	mov	r31, r0
     cfa:	01 e0       	ldi	r16, 0x01	; 1
     cfc:	60 e1       	ldi	r22, 0x10	; 16
     cfe:	70 e0       	ldi	r23, 0x00	; 0
     d00:	88 ec       	ldi	r24, 0xC8	; 200
     d02:	93 e0       	ldi	r25, 0x03	; 3
     d04:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <format_float>
                    display_set("PUMP THRESHOLD", buffer);
     d08:	68 ec       	ldi	r22, 0xC8	; 200
     d0a:	73 e0       	ldi	r23, 0x03	; 3
     d0c:	8a e6       	ldi	r24, 0x6A	; 106
     d0e:	92 e0       	ldi	r25, 0x02	; 2
     d10:	0e 94 f6 02 	call	0x5ec	; 0x5ec <display_set>
                    break;
     d14:	77 c0       	rjmp	.+238    	; 0xe04 <ui_show_display+0x4f4>
                case 2:
                    format_float(buffer, sizeof(buffer), SPRAY_THRESHOLD, 1, "degrees");
     d16:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <SPRAY_THRESHOLD>
     d1a:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <SPRAY_THRESHOLD+0x1>
     d1e:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <SPRAY_THRESHOLD+0x2>
     d22:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <SPRAY_THRESHOLD+0x3>
     d26:	0f 2e       	mov	r0, r31
     d28:	f6 ee       	ldi	r31, 0xE6	; 230
     d2a:	ef 2e       	mov	r14, r31
     d2c:	f1 e0       	ldi	r31, 0x01	; 1
     d2e:	ff 2e       	mov	r15, r31
     d30:	f0 2d       	mov	r31, r0
     d32:	01 e0       	ldi	r16, 0x01	; 1
     d34:	60 e1       	ldi	r22, 0x10	; 16
     d36:	70 e0       	ldi	r23, 0x00	; 0
     d38:	88 ec       	ldi	r24, 0xC8	; 200
     d3a:	93 e0       	ldi	r25, 0x03	; 3
     d3c:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <format_float>
                    display_set("SPRAY THRESHOLD", buffer);
     d40:	68 ec       	ldi	r22, 0xC8	; 200
     d42:	73 e0       	ldi	r23, 0x03	; 3
     d44:	89 e7       	ldi	r24, 0x79	; 121
     d46:	92 e0       	ldi	r25, 0x02	; 2
     d48:	0e 94 f6 02 	call	0x5ec	; 0x5ec <display_set>
                    break;
     d4c:	5b c0       	rjmp	.+182    	; 0xe04 <ui_show_display+0x4f4>
                case 3:
                    snprintf(buffer, sizeof(buffer), "%s", ENABLE_TRIGGER_VALUE ? "Enabled" : "Disabled");
     d4e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <ENABLE_TRIGGER_VALUE>
     d52:	88 23       	and	r24, r24
     d54:	19 f0       	breq	.+6      	; 0xd5c <ui_show_display+0x44c>
     d56:	86 e7       	ldi	r24, 0x76	; 118
     d58:	91 e0       	ldi	r25, 0x01	; 1
     d5a:	02 c0       	rjmp	.+4      	; 0xd60 <ui_show_display+0x450>
     d5c:	8e e7       	ldi	r24, 0x7E	; 126
     d5e:	91 e0       	ldi	r25, 0x01	; 1
     d60:	9f 93       	push	r25
     d62:	8f 93       	push	r24
     d64:	83 e7       	ldi	r24, 0x73	; 115
     d66:	91 e0       	ldi	r25, 0x01	; 1
     d68:	9f 93       	push	r25
     d6a:	8f 93       	push	r24
     d6c:	1f 92       	push	r1
     d6e:	80 e1       	ldi	r24, 0x10	; 16
     d70:	8f 93       	push	r24
     d72:	88 ec       	ldi	r24, 0xC8	; 200
     d74:	93 e0       	ldi	r25, 0x03	; 3
     d76:	9f 93       	push	r25
     d78:	8f 93       	push	r24
     d7a:	0e 94 c0 0c 	call	0x1980	; 0x1980 <snprintf>
                    display_set("ENABLE TRIGGERS", buffer);
     d7e:	68 ec       	ldi	r22, 0xC8	; 200
     d80:	73 e0       	ldi	r23, 0x03	; 3
     d82:	89 e8       	ldi	r24, 0x89	; 137
     d84:	92 e0       	ldi	r25, 0x02	; 2
     d86:	0e 94 f6 02 	call	0x5ec	; 0x5ec <display_set>
                    break;
     d8a:	8d b7       	in	r24, 0x3d	; 61
     d8c:	9e b7       	in	r25, 0x3e	; 62
     d8e:	08 96       	adiw	r24, 0x08	; 8
     d90:	0f b6       	in	r0, 0x3f	; 63
     d92:	f8 94       	cli
     d94:	9e bf       	out	0x3e, r25	; 62
     d96:	0f be       	out	0x3f, r0	; 63
     d98:	8d bf       	out	0x3d, r24	; 61
     d9a:	34 c0       	rjmp	.+104    	; 0xe04 <ui_show_display+0x4f4>
                case 4:
                    snprintf(buffer, sizeof(buffer), "%s", ENABLE_ALERT_VALUE ? "Enabled" : "Disabled");
     d9c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     da0:	88 23       	and	r24, r24
     da2:	19 f0       	breq	.+6      	; 0xdaa <ui_show_display+0x49a>
     da4:	86 e7       	ldi	r24, 0x76	; 118
     da6:	91 e0       	ldi	r25, 0x01	; 1
     da8:	02 c0       	rjmp	.+4      	; 0xdae <ui_show_display+0x49e>
     daa:	8e e7       	ldi	r24, 0x7E	; 126
     dac:	91 e0       	ldi	r25, 0x01	; 1
     dae:	9f 93       	push	r25
     db0:	8f 93       	push	r24
     db2:	83 e7       	ldi	r24, 0x73	; 115
     db4:	91 e0       	ldi	r25, 0x01	; 1
     db6:	9f 93       	push	r25
     db8:	8f 93       	push	r24
     dba:	1f 92       	push	r1
     dbc:	80 e1       	ldi	r24, 0x10	; 16
     dbe:	8f 93       	push	r24
     dc0:	88 ec       	ldi	r24, 0xC8	; 200
     dc2:	93 e0       	ldi	r25, 0x03	; 3
     dc4:	9f 93       	push	r25
     dc6:	8f 93       	push	r24
     dc8:	0e 94 c0 0c 	call	0x1980	; 0x1980 <snprintf>
                    display_set("ENABLE ALERTS", buffer);
     dcc:	68 ec       	ldi	r22, 0xC8	; 200
     dce:	73 e0       	ldi	r23, 0x03	; 3
     dd0:	89 e9       	ldi	r24, 0x99	; 153
     dd2:	92 e0       	ldi	r25, 0x02	; 2
     dd4:	0e 94 f6 02 	call	0x5ec	; 0x5ec <display_set>
                    break;
     dd8:	8d b7       	in	r24, 0x3d	; 61
     dda:	9e b7       	in	r25, 0x3e	; 62
     ddc:	08 96       	adiw	r24, 0x08	; 8
     dde:	0f b6       	in	r0, 0x3f	; 63
     de0:	f8 94       	cli
     de2:	9e bf       	out	0x3e, r25	; 62
     de4:	0f be       	out	0x3f, r0	; 63
     de6:	8d bf       	out	0x3d, r24	; 61
     de8:	0d c0       	rjmp	.+26     	; 0xe04 <ui_show_display+0x4f4>
                default:
                    display_set("ERROR", "Invalid config");
     dea:	67 ea       	ldi	r22, 0xA7	; 167
     dec:	72 e0       	ldi	r23, 0x02	; 2
     dee:	8e e1       	ldi	r24, 0x1E	; 30
     df0:	92 e0       	ldi	r25, 0x02	; 2
     df2:	0e 94 f6 02 	call	0x5ec	; 0x5ec <display_set>
                    break;
     df6:	06 c0       	rjmp	.+12     	; 0xe04 <ui_show_display+0x4f4>
                }
            }
            break;

        default:
            display_set("ERROR", "Invalid menu");
     df8:	66 eb       	ldi	r22, 0xB6	; 182
     dfa:	72 e0       	ldi	r23, 0x02	; 2
     dfc:	8e e1       	ldi	r24, 0x1E	; 30
     dfe:	92 e0       	ldi	r25, 0x02	; 2
     e00:	0e 94 f6 02 	call	0x5ec	; 0x5ec <display_set>
            break;
        }
    }
}
     e04:	0f 91       	pop	r16
     e06:	ff 90       	pop	r15
     e08:	ef 90       	pop	r14
     e0a:	08 95       	ret

00000e0c <ui_process_key_command>:
    process a key command from the keypad and update the UI state
    params: uint8_t key - the key number (1-4)
    returns: void
*/
void ui_process_key_command (uint8_t key) {
    if (key == 1)
     e0c:	81 30       	cpi	r24, 0x01	; 1
     e0e:	a9 f5       	brne	.+106    	; 0xe7a <ui_process_key_command+0x6e>
    {
        if (active_menu_index == -1)
     e10:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <active_menu_index>
     e14:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <active_menu_index+0x1>
     e18:	01 96       	adiw	r24, 0x01	; 1
     e1a:	09 f4       	brne	.+2      	; 0xe1e <ui_process_key_command+0x12>
     e1c:	9b c2       	rjmp	.+1334   	; 0x1354 <ui_process_key_command+0x548>
        {
            return;
        }
        else
        {
            if (active_trigger_index != -1)
     e1e:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <active_trigger_index>
     e22:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <active_trigger_index+0x1>
     e26:	01 96       	adiw	r24, 0x01	; 1
     e28:	39 f0       	breq	.+14     	; 0xe38 <ui_process_key_command+0x2c>
            {
                active_trigger_index = -1;
     e2a:	8f ef       	ldi	r24, 0xFF	; 255
     e2c:	9f ef       	ldi	r25, 0xFF	; 255
     e2e:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <active_trigger_index+0x1>
     e32:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <active_trigger_index>
     e36:	08 95       	ret
            }
            else if (active_config_index != -1)
     e38:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <active_config_index>
     e3c:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <active_config_index+0x1>
     e40:	01 96       	adiw	r24, 0x01	; 1
     e42:	39 f0       	breq	.+14     	; 0xe52 <ui_process_key_command+0x46>
            {
                active_config_index = -1;
     e44:	8f ef       	ldi	r24, 0xFF	; 255
     e46:	9f ef       	ldi	r25, 0xFF	; 255
     e48:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <active_config_index+0x1>
     e4c:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <active_config_index>
     e50:	08 95       	ret
            }
            else if (active_live_view_index != -1)
     e52:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <active_live_view_index>
     e56:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <active_live_view_index+0x1>
     e5a:	01 96       	adiw	r24, 0x01	; 1
     e5c:	39 f0       	breq	.+14     	; 0xe6c <ui_process_key_command+0x60>
            {
                active_live_view_index = -1;
     e5e:	8f ef       	ldi	r24, 0xFF	; 255
     e60:	9f ef       	ldi	r25, 0xFF	; 255
     e62:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <active_live_view_index+0x1>
     e66:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <active_live_view_index>
     e6a:	08 95       	ret
            }
            else
            {
                active_menu_index = -1;
     e6c:	8f ef       	ldi	r24, 0xFF	; 255
     e6e:	9f ef       	ldi	r25, 0xFF	; 255
     e70:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <active_menu_index+0x1>
     e74:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <active_menu_index>
     e78:	08 95       	ret
            }
        }
    }
    else if (key == 2)
     e7a:	82 30       	cpi	r24, 0x02	; 2
     e7c:	09 f0       	breq	.+2      	; 0xe80 <ui_process_key_command+0x74>
     e7e:	0e c1       	rjmp	.+540    	; 0x109c <ui_process_key_command+0x290>
    {
        if (active_menu_index == -1)
     e80:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <active_menu_index>
     e84:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <active_menu_index+0x1>
     e88:	8f 3f       	cpi	r24, 0xFF	; 255
     e8a:	2f ef       	ldi	r18, 0xFF	; 255
     e8c:	92 07       	cpc	r25, r18
     e8e:	71 f4       	brne	.+28     	; 0xeac <ui_process_key_command+0xa0>
        {
            if (menu_hover_index < (sizeof(MENU_BUFFER)/sizeof(MENU_BUFFER[0]) - 1))
     e90:	80 91 c6 03 	lds	r24, 0x03C6	; 0x8003c6 <menu_hover_index>
     e94:	90 91 c7 03 	lds	r25, 0x03C7	; 0x8003c7 <menu_hover_index+0x1>
     e98:	87 30       	cpi	r24, 0x07	; 7
     e9a:	91 05       	cpc	r25, r1
     e9c:	08 f0       	brcs	.+2      	; 0xea0 <ui_process_key_command+0x94>
     e9e:	5a c2       	rjmp	.+1204   	; 0x1354 <ui_process_key_command+0x548>
                menu_hover_index++; // navigate downwards on the main menu
     ea0:	01 96       	adiw	r24, 0x01	; 1
     ea2:	90 93 c7 03 	sts	0x03C7, r25	; 0x8003c7 <menu_hover_index+0x1>
     ea6:	80 93 c6 03 	sts	0x03C6, r24	; 0x8003c6 <menu_hover_index>
     eaa:	08 95       	ret
        }
        else if (active_menu_index == 4)
     eac:	84 30       	cpi	r24, 0x04	; 4
     eae:	91 05       	cpc	r25, r1
     eb0:	71 f4       	brne	.+28     	; 0xece <ui_process_key_command+0xc2>
        {
            // user is in the live view menu
            if (live_view_hover_index < (sizeof(LIVE_VIEW_BUFFER)/sizeof(LIVE_VIEW_BUFFER[0]) - 1))
     eb2:	80 91 be 03 	lds	r24, 0x03BE	; 0x8003be <live_view_hover_index>
     eb6:	90 91 bf 03 	lds	r25, 0x03BF	; 0x8003bf <live_view_hover_index+0x1>
     eba:	83 30       	cpi	r24, 0x03	; 3
     ebc:	91 05       	cpc	r25, r1
     ebe:	08 f0       	brcs	.+2      	; 0xec2 <ui_process_key_command+0xb6>
     ec0:	49 c2       	rjmp	.+1170   	; 0x1354 <ui_process_key_command+0x548>
                live_view_hover_index++; // navigate downwards on the live view menu
     ec2:	01 96       	adiw	r24, 0x01	; 1
     ec4:	90 93 bf 03 	sts	0x03BF, r25	; 0x8003bf <live_view_hover_index+0x1>
     ec8:	80 93 be 03 	sts	0x03BE, r24	; 0x8003be <live_view_hover_index>
     ecc:	08 95       	ret
        }
        else if (active_menu_index == 5) 
     ece:	85 30       	cpi	r24, 0x05	; 5
     ed0:	91 05       	cpc	r25, r1
     ed2:	09 f0       	breq	.+2      	; 0xed6 <ui_process_key_command+0xca>
     ed4:	50 c0       	rjmp	.+160    	; 0xf76 <ui_process_key_command+0x16a>
        {
            // user is in the triggers menu
            if (active_trigger_index == -1)
     ed6:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <active_trigger_index>
     eda:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <active_trigger_index+0x1>
     ede:	8f 3f       	cpi	r24, 0xFF	; 255
     ee0:	2f ef       	ldi	r18, 0xFF	; 255
     ee2:	92 07       	cpc	r25, r18
     ee4:	69 f4       	brne	.+26     	; 0xf00 <ui_process_key_command+0xf4>
            {
                if (trigger_hover_index < (sizeof(TRIGGERS_BUFFER)/sizeof(TRIGGERS_BUFFER[0]) - 1))
     ee6:	80 91 c4 03 	lds	r24, 0x03C4	; 0x8003c4 <trigger_hover_index>
     eea:	90 91 c5 03 	lds	r25, 0x03C5	; 0x8003c5 <trigger_hover_index+0x1>
     eee:	00 97       	sbiw	r24, 0x00	; 0
     ef0:	09 f0       	breq	.+2      	; 0xef4 <ui_process_key_command+0xe8>
     ef2:	30 c2       	rjmp	.+1120   	; 0x1354 <ui_process_key_command+0x548>
                    trigger_hover_index++; // navigate downwards on the triggers menu
     ef4:	01 96       	adiw	r24, 0x01	; 1
     ef6:	90 93 c5 03 	sts	0x03C5, r25	; 0x8003c5 <trigger_hover_index+0x1>
     efa:	80 93 c4 03 	sts	0x03C4, r24	; 0x8003c4 <trigger_hover_index>
     efe:	08 95       	ret
            } else {
                switch (active_trigger_index) {
     f00:	00 97       	sbiw	r24, 0x00	; 0
     f02:	19 f0       	breq	.+6      	; 0xf0a <ui_process_key_command+0xfe>
     f04:	01 97       	sbiw	r24, 0x01	; 1
     f06:	e1 f0       	breq	.+56     	; 0xf40 <ui_process_key_command+0x134>
     f08:	08 95       	ret
                    case 0:
                        // adjust MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER - decrease
                        MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER -= STEP_SIZE_FOR_INCREMENTS;
     f0a:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <STEP_SIZE_FOR_INCREMENTS>
     f0e:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <STEP_SIZE_FOR_INCREMENTS+0x1>
     f12:	40 91 10 01 	lds	r20, 0x0110	; 0x800110 <STEP_SIZE_FOR_INCREMENTS+0x2>
     f16:	50 91 11 01 	lds	r21, 0x0111	; 0x800111 <STEP_SIZE_FOR_INCREMENTS+0x3>
     f1a:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER>
     f1e:	70 91 17 01 	lds	r23, 0x0117	; 0x800117 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x1>
     f22:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x2>
     f26:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x3>
     f2a:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <__subsf3>
     f2e:	60 93 16 01 	sts	0x0116, r22	; 0x800116 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER>
     f32:	70 93 17 01 	sts	0x0117, r23	; 0x800117 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x1>
     f36:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x2>
     f3a:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x3>
                        break;
     f3e:	08 95       	ret
                    case 1:
                        // adjust MAXIMUM_TEMPERATURE_BEFORE_PUMPING - decrease
                        MAXIMUM_TEMPERATURE_BEFORE_PUMPING -= STEP_SIZE_FOR_INCREMENTS;
     f40:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <STEP_SIZE_FOR_INCREMENTS>
     f44:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <STEP_SIZE_FOR_INCREMENTS+0x1>
     f48:	40 91 10 01 	lds	r20, 0x0110	; 0x800110 <STEP_SIZE_FOR_INCREMENTS+0x2>
     f4c:	50 91 11 01 	lds	r21, 0x0111	; 0x800111 <STEP_SIZE_FOR_INCREMENTS+0x3>
     f50:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING>
     f54:	70 91 13 01 	lds	r23, 0x0113	; 0x800113 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x1>
     f58:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x2>
     f5c:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x3>
     f60:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <__subsf3>
     f64:	60 93 12 01 	sts	0x0112, r22	; 0x800112 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING>
     f68:	70 93 13 01 	sts	0x0113, r23	; 0x800113 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x1>
     f6c:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x2>
     f70:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x3>
                        break;
     f74:	08 95       	ret
                    default:
                        break;
                }
            }
        }
        else if (active_menu_index == 6) {
     f76:	86 30       	cpi	r24, 0x06	; 6
     f78:	91 05       	cpc	r25, r1
     f7a:	71 f4       	brne	.+28     	; 0xf98 <ui_process_key_command+0x18c>
            if (message_hover_index < MSG_BUFFER_SIZE - 1)
     f7c:	80 91 c0 03 	lds	r24, 0x03C0	; 0x8003c0 <message_hover_index>
     f80:	90 91 c1 03 	lds	r25, 0x03C1	; 0x8003c1 <message_hover_index+0x1>
     f84:	83 30       	cpi	r24, 0x03	; 3
     f86:	91 05       	cpc	r25, r1
     f88:	0c f0       	brlt	.+2      	; 0xf8c <ui_process_key_command+0x180>
     f8a:	e4 c1       	rjmp	.+968    	; 0x1354 <ui_process_key_command+0x548>
                message_hover_index++;
     f8c:	01 96       	adiw	r24, 0x01	; 1
     f8e:	90 93 c1 03 	sts	0x03C1, r25	; 0x8003c1 <message_hover_index+0x1>
     f92:	80 93 c0 03 	sts	0x03C0, r24	; 0x8003c0 <message_hover_index>
     f96:	08 95       	ret
        }
        else if (active_menu_index == 7)
     f98:	07 97       	sbiw	r24, 0x07	; 7
     f9a:	09 f0       	breq	.+2      	; 0xf9e <ui_process_key_command+0x192>
     f9c:	db c1       	rjmp	.+950    	; 0x1354 <ui_process_key_command+0x548>
        {
            if (active_config_index == -1)
     f9e:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <active_config_index>
     fa2:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <active_config_index+0x1>
     fa6:	8f 3f       	cpi	r24, 0xFF	; 255
     fa8:	2f ef       	ldi	r18, 0xFF	; 255
     faa:	92 07       	cpc	r25, r18
     fac:	71 f4       	brne	.+28     	; 0xfca <ui_process_key_command+0x1be>
            {
                if (config_hover_index < (sizeof(CONFIG_BUFFER)/sizeof(CONFIG_BUFFER[0]) - 1))
     fae:	80 91 c2 03 	lds	r24, 0x03C2	; 0x8003c2 <config_hover_index>
     fb2:	90 91 c3 03 	lds	r25, 0x03C3	; 0x8003c3 <config_hover_index+0x1>
     fb6:	84 30       	cpi	r24, 0x04	; 4
     fb8:	91 05       	cpc	r25, r1
     fba:	08 f0       	brcs	.+2      	; 0xfbe <ui_process_key_command+0x1b2>
     fbc:	cb c1       	rjmp	.+918    	; 0x1354 <ui_process_key_command+0x548>
                    config_hover_index++; // navigate downwards on the config menu
     fbe:	01 96       	adiw	r24, 0x01	; 1
     fc0:	90 93 c3 03 	sts	0x03C3, r25	; 0x8003c3 <config_hover_index+0x1>
     fc4:	80 93 c2 03 	sts	0x03C2, r24	; 0x8003c2 <config_hover_index>
     fc8:	08 95       	ret
            } else {
                switch (active_config_index)
     fca:	82 30       	cpi	r24, 0x02	; 2
     fcc:	91 05       	cpc	r25, r1
     fce:	09 f4       	brne	.+2      	; 0xfd2 <ui_process_key_command+0x1c6>
     fd0:	44 c0       	rjmp	.+136    	; 0x105a <ui_process_key_command+0x24e>
     fd2:	2c f4       	brge	.+10     	; 0xfde <ui_process_key_command+0x1d2>
     fd4:	00 97       	sbiw	r24, 0x00	; 0
     fd6:	59 f0       	breq	.+22     	; 0xfee <ui_process_key_command+0x1e2>
     fd8:	01 97       	sbiw	r24, 0x01	; 1
     fda:	21 f1       	breq	.+72     	; 0x1024 <ui_process_key_command+0x218>
     fdc:	08 95       	ret
     fde:	83 30       	cpi	r24, 0x03	; 3
     fe0:	91 05       	cpc	r25, r1
     fe2:	09 f4       	brne	.+2      	; 0xfe6 <ui_process_key_command+0x1da>
     fe4:	55 c0       	rjmp	.+170    	; 0x1090 <ui_process_key_command+0x284>
     fe6:	04 97       	sbiw	r24, 0x04	; 4
     fe8:	09 f4       	brne	.+2      	; 0xfec <ui_process_key_command+0x1e0>
     fea:	55 c0       	rjmp	.+170    	; 0x1096 <ui_process_key_command+0x28a>
     fec:	08 95       	ret
                {
                case 0:
                    // adjust STEP_SIZE_FOR_INCREMENTS - decrease
                    STEP_SIZE_FOR_INCREMENTS -= STEP_INCREMENT;
     fee:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <STEP_INCREMENT>
     ff2:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <STEP_INCREMENT+0x1>
     ff6:	40 91 0c 01 	lds	r20, 0x010C	; 0x80010c <STEP_INCREMENT+0x2>
     ffa:	50 91 0d 01 	lds	r21, 0x010D	; 0x80010d <STEP_INCREMENT+0x3>
     ffe:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <STEP_SIZE_FOR_INCREMENTS>
    1002:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <STEP_SIZE_FOR_INCREMENTS+0x1>
    1006:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <STEP_SIZE_FOR_INCREMENTS+0x2>
    100a:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <STEP_SIZE_FOR_INCREMENTS+0x3>
    100e:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <__subsf3>
    1012:	60 93 0e 01 	sts	0x010E, r22	; 0x80010e <STEP_SIZE_FOR_INCREMENTS>
    1016:	70 93 0f 01 	sts	0x010F, r23	; 0x80010f <STEP_SIZE_FOR_INCREMENTS+0x1>
    101a:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <STEP_SIZE_FOR_INCREMENTS+0x2>
    101e:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <STEP_SIZE_FOR_INCREMENTS+0x3>
                    break;
    1022:	08 95       	ret
                case 1:
                    // adjust PUMP_THRESHOLD - decrease
                    PUMP_THRESHOLD -= STEP_SIZE_FOR_INCREMENTS;
    1024:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <STEP_SIZE_FOR_INCREMENTS>
    1028:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <STEP_SIZE_FOR_INCREMENTS+0x1>
    102c:	40 91 10 01 	lds	r20, 0x0110	; 0x800110 <STEP_SIZE_FOR_INCREMENTS+0x2>
    1030:	50 91 11 01 	lds	r21, 0x0111	; 0x800111 <STEP_SIZE_FOR_INCREMENTS+0x3>
    1034:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <PUMP_THRESHOLD>
    1038:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <PUMP_THRESHOLD+0x1>
    103c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <PUMP_THRESHOLD+0x2>
    1040:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <PUMP_THRESHOLD+0x3>
    1044:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <__subsf3>
    1048:	60 93 06 01 	sts	0x0106, r22	; 0x800106 <PUMP_THRESHOLD>
    104c:	70 93 07 01 	sts	0x0107, r23	; 0x800107 <PUMP_THRESHOLD+0x1>
    1050:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <PUMP_THRESHOLD+0x2>
    1054:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <PUMP_THRESHOLD+0x3>
                    break;
    1058:	08 95       	ret
                case 2:
                    // adjust SPRAY_THRESHOLD - decrease
                    SPRAY_THRESHOLD -= STEP_SIZE_FOR_INCREMENTS;
    105a:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <STEP_SIZE_FOR_INCREMENTS>
    105e:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <STEP_SIZE_FOR_INCREMENTS+0x1>
    1062:	40 91 10 01 	lds	r20, 0x0110	; 0x800110 <STEP_SIZE_FOR_INCREMENTS+0x2>
    1066:	50 91 11 01 	lds	r21, 0x0111	; 0x800111 <STEP_SIZE_FOR_INCREMENTS+0x3>
    106a:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <SPRAY_THRESHOLD>
    106e:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <SPRAY_THRESHOLD+0x1>
    1072:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <SPRAY_THRESHOLD+0x2>
    1076:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <SPRAY_THRESHOLD+0x3>
    107a:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <__subsf3>
    107e:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <SPRAY_THRESHOLD>
    1082:	70 93 03 01 	sts	0x0103, r23	; 0x800103 <SPRAY_THRESHOLD+0x1>
    1086:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <SPRAY_THRESHOLD+0x2>
    108a:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <SPRAY_THRESHOLD+0x3>
                    break;
    108e:	08 95       	ret
                case 3:
                    // adjust ENABLE_TRIGGER_VALUE - toggle
                    ENABLE_TRIGGER_VALUE = 0;
    1090:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <ENABLE_TRIGGER_VALUE>
                    break;
    1094:	08 95       	ret
                case 4:
                    // adjust ENABLE_ALERT_VALUE - toggle
                    ENABLE_ALERT_VALUE = 0;
    1096:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
                    break;
    109a:	08 95       	ret
                    break;
                }
            }
        }
    }
    else if (key == 3)
    109c:	83 30       	cpi	r24, 0x03	; 3
    109e:	09 f0       	breq	.+2      	; 0x10a2 <ui_process_key_command+0x296>
    10a0:	11 c1       	rjmp	.+546    	; 0x12c4 <ui_process_key_command+0x4b8>
    {
        if (active_menu_index == -1)
    10a2:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <active_menu_index>
    10a6:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <active_menu_index+0x1>
    10aa:	8f 3f       	cpi	r24, 0xFF	; 255
    10ac:	2f ef       	ldi	r18, 0xFF	; 255
    10ae:	92 07       	cpc	r25, r18
    10b0:	71 f4       	brne	.+28     	; 0x10ce <ui_process_key_command+0x2c2>
        {
            if (menu_hover_index > 0)
    10b2:	80 91 c6 03 	lds	r24, 0x03C6	; 0x8003c6 <menu_hover_index>
    10b6:	90 91 c7 03 	lds	r25, 0x03C7	; 0x8003c7 <menu_hover_index+0x1>
    10ba:	18 16       	cp	r1, r24
    10bc:	19 06       	cpc	r1, r25
    10be:	0c f0       	brlt	.+2      	; 0x10c2 <ui_process_key_command+0x2b6>
    10c0:	49 c1       	rjmp	.+658    	; 0x1354 <ui_process_key_command+0x548>
                menu_hover_index--;
    10c2:	01 97       	sbiw	r24, 0x01	; 1
    10c4:	90 93 c7 03 	sts	0x03C7, r25	; 0x8003c7 <menu_hover_index+0x1>
    10c8:	80 93 c6 03 	sts	0x03C6, r24	; 0x8003c6 <menu_hover_index>
    10cc:	08 95       	ret
        }
        else if (active_menu_index == 4)
    10ce:	84 30       	cpi	r24, 0x04	; 4
    10d0:	91 05       	cpc	r25, r1
    10d2:	71 f4       	brne	.+28     	; 0x10f0 <ui_process_key_command+0x2e4>
        {
            // user is in the live view menu
            if (live_view_hover_index > 0)
    10d4:	80 91 be 03 	lds	r24, 0x03BE	; 0x8003be <live_view_hover_index>
    10d8:	90 91 bf 03 	lds	r25, 0x03BF	; 0x8003bf <live_view_hover_index+0x1>
    10dc:	18 16       	cp	r1, r24
    10de:	19 06       	cpc	r1, r25
    10e0:	0c f0       	brlt	.+2      	; 0x10e4 <ui_process_key_command+0x2d8>
    10e2:	38 c1       	rjmp	.+624    	; 0x1354 <ui_process_key_command+0x548>
                live_view_hover_index--;
    10e4:	01 97       	sbiw	r24, 0x01	; 1
    10e6:	90 93 bf 03 	sts	0x03BF, r25	; 0x8003bf <live_view_hover_index+0x1>
    10ea:	80 93 be 03 	sts	0x03BE, r24	; 0x8003be <live_view_hover_index>
    10ee:	08 95       	ret
        }
        else if (active_menu_index == 5)
    10f0:	85 30       	cpi	r24, 0x05	; 5
    10f2:	91 05       	cpc	r25, r1
    10f4:	09 f0       	breq	.+2      	; 0x10f8 <ui_process_key_command+0x2ec>
    10f6:	51 c0       	rjmp	.+162    	; 0x119a <ui_process_key_command+0x38e>
        {
            if (active_trigger_index == -1)
    10f8:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <active_trigger_index>
    10fc:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <active_trigger_index+0x1>
    1100:	8f 3f       	cpi	r24, 0xFF	; 255
    1102:	2f ef       	ldi	r18, 0xFF	; 255
    1104:	92 07       	cpc	r25, r18
    1106:	71 f4       	brne	.+28     	; 0x1124 <ui_process_key_command+0x318>
            {
                if (trigger_hover_index > 0)
    1108:	80 91 c4 03 	lds	r24, 0x03C4	; 0x8003c4 <trigger_hover_index>
    110c:	90 91 c5 03 	lds	r25, 0x03C5	; 0x8003c5 <trigger_hover_index+0x1>
    1110:	18 16       	cp	r1, r24
    1112:	19 06       	cpc	r1, r25
    1114:	0c f0       	brlt	.+2      	; 0x1118 <ui_process_key_command+0x30c>
    1116:	1e c1       	rjmp	.+572    	; 0x1354 <ui_process_key_command+0x548>
                    trigger_hover_index--;
    1118:	01 97       	sbiw	r24, 0x01	; 1
    111a:	90 93 c5 03 	sts	0x03C5, r25	; 0x8003c5 <trigger_hover_index+0x1>
    111e:	80 93 c4 03 	sts	0x03C4, r24	; 0x8003c4 <trigger_hover_index>
    1122:	08 95       	ret
            } else {
                switch (active_trigger_index) {
    1124:	00 97       	sbiw	r24, 0x00	; 0
    1126:	19 f0       	breq	.+6      	; 0x112e <ui_process_key_command+0x322>
    1128:	01 97       	sbiw	r24, 0x01	; 1
    112a:	e1 f0       	breq	.+56     	; 0x1164 <ui_process_key_command+0x358>
    112c:	08 95       	ret
                    case 0:
                        // adjust MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER - decrease
                        MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER += STEP_SIZE_FOR_INCREMENTS;
    112e:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <STEP_SIZE_FOR_INCREMENTS>
    1132:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <STEP_SIZE_FOR_INCREMENTS+0x1>
    1136:	40 91 10 01 	lds	r20, 0x0110	; 0x800110 <STEP_SIZE_FOR_INCREMENTS+0x2>
    113a:	50 91 11 01 	lds	r21, 0x0111	; 0x800111 <STEP_SIZE_FOR_INCREMENTS+0x3>
    113e:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER>
    1142:	70 91 17 01 	lds	r23, 0x0117	; 0x800117 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x1>
    1146:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x2>
    114a:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x3>
    114e:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <__addsf3>
    1152:	60 93 16 01 	sts	0x0116, r22	; 0x800116 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER>
    1156:	70 93 17 01 	sts	0x0117, r23	; 0x800117 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x1>
    115a:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x2>
    115e:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x3>
                        break;
    1162:	08 95       	ret
                    case 1:
                        // adjust MAXIMUM_TEMPERATURE_BEFORE_PUMPING - decrease
                        MAXIMUM_TEMPERATURE_BEFORE_PUMPING += STEP_SIZE_FOR_INCREMENTS;
    1164:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <STEP_SIZE_FOR_INCREMENTS>
    1168:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <STEP_SIZE_FOR_INCREMENTS+0x1>
    116c:	40 91 10 01 	lds	r20, 0x0110	; 0x800110 <STEP_SIZE_FOR_INCREMENTS+0x2>
    1170:	50 91 11 01 	lds	r21, 0x0111	; 0x800111 <STEP_SIZE_FOR_INCREMENTS+0x3>
    1174:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING>
    1178:	70 91 13 01 	lds	r23, 0x0113	; 0x800113 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x1>
    117c:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x2>
    1180:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x3>
    1184:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <__addsf3>
    1188:	60 93 12 01 	sts	0x0112, r22	; 0x800112 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING>
    118c:	70 93 13 01 	sts	0x0113, r23	; 0x800113 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x1>
    1190:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x2>
    1194:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x3>
                        break;
    1198:	08 95       	ret
                    default:
                        break;
                }
            }
        } 
        else if (active_menu_index == 6) {
    119a:	86 30       	cpi	r24, 0x06	; 6
    119c:	91 05       	cpc	r25, r1
    119e:	71 f4       	brne	.+28     	; 0x11bc <ui_process_key_command+0x3b0>
            if (message_hover_index > 0)
    11a0:	80 91 c0 03 	lds	r24, 0x03C0	; 0x8003c0 <message_hover_index>
    11a4:	90 91 c1 03 	lds	r25, 0x03C1	; 0x8003c1 <message_hover_index+0x1>
    11a8:	18 16       	cp	r1, r24
    11aa:	19 06       	cpc	r1, r25
    11ac:	0c f0       	brlt	.+2      	; 0x11b0 <ui_process_key_command+0x3a4>
    11ae:	d2 c0       	rjmp	.+420    	; 0x1354 <ui_process_key_command+0x548>
                message_hover_index--;
    11b0:	01 97       	sbiw	r24, 0x01	; 1
    11b2:	90 93 c1 03 	sts	0x03C1, r25	; 0x8003c1 <message_hover_index+0x1>
    11b6:	80 93 c0 03 	sts	0x03C0, r24	; 0x8003c0 <message_hover_index>
    11ba:	08 95       	ret
        }
        else if (active_menu_index == 7)
    11bc:	07 97       	sbiw	r24, 0x07	; 7
    11be:	09 f0       	breq	.+2      	; 0x11c2 <ui_process_key_command+0x3b6>
    11c0:	c9 c0       	rjmp	.+402    	; 0x1354 <ui_process_key_command+0x548>
        {
            if (active_config_index == -1)
    11c2:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <active_config_index>
    11c6:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <active_config_index+0x1>
    11ca:	8f 3f       	cpi	r24, 0xFF	; 255
    11cc:	2f ef       	ldi	r18, 0xFF	; 255
    11ce:	92 07       	cpc	r25, r18
    11d0:	71 f4       	brne	.+28     	; 0x11ee <ui_process_key_command+0x3e2>
            {
                if (config_hover_index > 0)
    11d2:	80 91 c2 03 	lds	r24, 0x03C2	; 0x8003c2 <config_hover_index>
    11d6:	90 91 c3 03 	lds	r25, 0x03C3	; 0x8003c3 <config_hover_index+0x1>
    11da:	18 16       	cp	r1, r24
    11dc:	19 06       	cpc	r1, r25
    11de:	0c f0       	brlt	.+2      	; 0x11e2 <ui_process_key_command+0x3d6>
    11e0:	b9 c0       	rjmp	.+370    	; 0x1354 <ui_process_key_command+0x548>
                    config_hover_index--;
    11e2:	01 97       	sbiw	r24, 0x01	; 1
    11e4:	90 93 c3 03 	sts	0x03C3, r25	; 0x8003c3 <config_hover_index+0x1>
    11e8:	80 93 c2 03 	sts	0x03C2, r24	; 0x8003c2 <config_hover_index>
    11ec:	08 95       	ret
            } else {
            switch (active_config_index)
    11ee:	82 30       	cpi	r24, 0x02	; 2
    11f0:	91 05       	cpc	r25, r1
    11f2:	09 f4       	brne	.+2      	; 0x11f6 <ui_process_key_command+0x3ea>
    11f4:	44 c0       	rjmp	.+136    	; 0x127e <ui_process_key_command+0x472>
    11f6:	2c f4       	brge	.+10     	; 0x1202 <ui_process_key_command+0x3f6>
    11f8:	00 97       	sbiw	r24, 0x00	; 0
    11fa:	59 f0       	breq	.+22     	; 0x1212 <ui_process_key_command+0x406>
    11fc:	01 97       	sbiw	r24, 0x01	; 1
    11fe:	21 f1       	breq	.+72     	; 0x1248 <ui_process_key_command+0x43c>
    1200:	08 95       	ret
    1202:	83 30       	cpi	r24, 0x03	; 3
    1204:	91 05       	cpc	r25, r1
    1206:	09 f4       	brne	.+2      	; 0x120a <ui_process_key_command+0x3fe>
    1208:	55 c0       	rjmp	.+170    	; 0x12b4 <ui_process_key_command+0x4a8>
    120a:	04 97       	sbiw	r24, 0x04	; 4
    120c:	09 f4       	brne	.+2      	; 0x1210 <ui_process_key_command+0x404>
    120e:	56 c0       	rjmp	.+172    	; 0x12bc <ui_process_key_command+0x4b0>
    1210:	08 95       	ret
                {
                case 0:
                    // adjust STEP_SIZE_FOR_INCREMENTS - decrease
                    STEP_SIZE_FOR_INCREMENTS += STEP_INCREMENT;
    1212:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <STEP_INCREMENT>
    1216:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <STEP_INCREMENT+0x1>
    121a:	40 91 0c 01 	lds	r20, 0x010C	; 0x80010c <STEP_INCREMENT+0x2>
    121e:	50 91 0d 01 	lds	r21, 0x010D	; 0x80010d <STEP_INCREMENT+0x3>
    1222:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <STEP_SIZE_FOR_INCREMENTS>
    1226:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <STEP_SIZE_FOR_INCREMENTS+0x1>
    122a:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <STEP_SIZE_FOR_INCREMENTS+0x2>
    122e:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <STEP_SIZE_FOR_INCREMENTS+0x3>
    1232:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <__addsf3>
    1236:	60 93 0e 01 	sts	0x010E, r22	; 0x80010e <STEP_SIZE_FOR_INCREMENTS>
    123a:	70 93 0f 01 	sts	0x010F, r23	; 0x80010f <STEP_SIZE_FOR_INCREMENTS+0x1>
    123e:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <STEP_SIZE_FOR_INCREMENTS+0x2>
    1242:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <STEP_SIZE_FOR_INCREMENTS+0x3>
                    break;
    1246:	08 95       	ret
                case 1:
                    // adjust PUMP_THRESHOLD - decrease
                    PUMP_THRESHOLD += STEP_SIZE_FOR_INCREMENTS;
    1248:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <STEP_SIZE_FOR_INCREMENTS>
    124c:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <STEP_SIZE_FOR_INCREMENTS+0x1>
    1250:	40 91 10 01 	lds	r20, 0x0110	; 0x800110 <STEP_SIZE_FOR_INCREMENTS+0x2>
    1254:	50 91 11 01 	lds	r21, 0x0111	; 0x800111 <STEP_SIZE_FOR_INCREMENTS+0x3>
    1258:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <PUMP_THRESHOLD>
    125c:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <PUMP_THRESHOLD+0x1>
    1260:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <PUMP_THRESHOLD+0x2>
    1264:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <PUMP_THRESHOLD+0x3>
    1268:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <__addsf3>
    126c:	60 93 06 01 	sts	0x0106, r22	; 0x800106 <PUMP_THRESHOLD>
    1270:	70 93 07 01 	sts	0x0107, r23	; 0x800107 <PUMP_THRESHOLD+0x1>
    1274:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <PUMP_THRESHOLD+0x2>
    1278:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <PUMP_THRESHOLD+0x3>
                    break;
    127c:	08 95       	ret
                case 2:
                    // adjust SPRAY_THRESHOLD - decrease
                    SPRAY_THRESHOLD += STEP_SIZE_FOR_INCREMENTS;
    127e:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <STEP_SIZE_FOR_INCREMENTS>
    1282:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <STEP_SIZE_FOR_INCREMENTS+0x1>
    1286:	40 91 10 01 	lds	r20, 0x0110	; 0x800110 <STEP_SIZE_FOR_INCREMENTS+0x2>
    128a:	50 91 11 01 	lds	r21, 0x0111	; 0x800111 <STEP_SIZE_FOR_INCREMENTS+0x3>
    128e:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <SPRAY_THRESHOLD>
    1292:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <SPRAY_THRESHOLD+0x1>
    1296:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <SPRAY_THRESHOLD+0x2>
    129a:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <SPRAY_THRESHOLD+0x3>
    129e:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <__addsf3>
    12a2:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <SPRAY_THRESHOLD>
    12a6:	70 93 03 01 	sts	0x0103, r23	; 0x800103 <SPRAY_THRESHOLD+0x1>
    12aa:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <SPRAY_THRESHOLD+0x2>
    12ae:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <SPRAY_THRESHOLD+0x3>
                    break;
    12b2:	08 95       	ret
                case 3:
                    // adjust ENABLE_TRIGGER_VALUE - toggle
                    ENABLE_TRIGGER_VALUE = 1;
    12b4:	81 e0       	ldi	r24, 0x01	; 1
    12b6:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <ENABLE_TRIGGER_VALUE>
                    break;
    12ba:	08 95       	ret
                case 4:
                    // adjust ENABLE_ALERT_VALUE - toggle
                    ENABLE_ALERT_VALUE = 1;
    12bc:	81 e0       	ldi	r24, 0x01	; 1
    12be:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
                    break;
    12c2:	08 95       	ret
                    break;
                }
            }
        }
    }
    else if (key == 4)
    12c4:	84 30       	cpi	r24, 0x04	; 4
    12c6:	09 f0       	breq	.+2      	; 0x12ca <ui_process_key_command+0x4be>
    12c8:	45 c0       	rjmp	.+138    	; 0x1354 <ui_process_key_command+0x548>
    {
        if (active_menu_index == -1)
    12ca:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <active_menu_index>
    12ce:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <active_menu_index+0x1>
    12d2:	8f 3f       	cpi	r24, 0xFF	; 255
    12d4:	2f ef       	ldi	r18, 0xFF	; 255
    12d6:	92 07       	cpc	r25, r18
    12d8:	49 f4       	brne	.+18     	; 0x12ec <ui_process_key_command+0x4e0>
        {
            active_menu_index = menu_hover_index;
    12da:	80 91 c6 03 	lds	r24, 0x03C6	; 0x8003c6 <menu_hover_index>
    12de:	90 91 c7 03 	lds	r25, 0x03C7	; 0x8003c7 <menu_hover_index+0x1>
    12e2:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <active_menu_index+0x1>
    12e6:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <active_menu_index>
    12ea:	08 95       	ret
        }
        else if (active_menu_index == 4)
    12ec:	84 30       	cpi	r24, 0x04	; 4
    12ee:	91 05       	cpc	r25, r1
    12f0:	79 f4       	brne	.+30     	; 0x1310 <ui_process_key_command+0x504>
        {
            if (active_live_view_index == -1)
    12f2:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <active_live_view_index>
    12f6:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <active_live_view_index+0x1>
    12fa:	01 96       	adiw	r24, 0x01	; 1
    12fc:	59 f5       	brne	.+86     	; 0x1354 <ui_process_key_command+0x548>
            {
                active_live_view_index = live_view_hover_index;
    12fe:	80 91 be 03 	lds	r24, 0x03BE	; 0x8003be <live_view_hover_index>
    1302:	90 91 bf 03 	lds	r25, 0x03BF	; 0x8003bf <live_view_hover_index+0x1>
    1306:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <active_live_view_index+0x1>
    130a:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <active_live_view_index>
    130e:	08 95       	ret
            }
        }
        else if (active_menu_index == 5)
    1310:	85 30       	cpi	r24, 0x05	; 5
    1312:	91 05       	cpc	r25, r1
    1314:	79 f4       	brne	.+30     	; 0x1334 <ui_process_key_command+0x528>
        {
            if (active_trigger_index == -1)
    1316:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <active_trigger_index>
    131a:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <active_trigger_index+0x1>
    131e:	01 96       	adiw	r24, 0x01	; 1
    1320:	c9 f4       	brne	.+50     	; 0x1354 <ui_process_key_command+0x548>
            {
                active_trigger_index = trigger_hover_index;
    1322:	80 91 c4 03 	lds	r24, 0x03C4	; 0x8003c4 <trigger_hover_index>
    1326:	90 91 c5 03 	lds	r25, 0x03C5	; 0x8003c5 <trigger_hover_index+0x1>
    132a:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <active_trigger_index+0x1>
    132e:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <active_trigger_index>
    1332:	08 95       	ret
            }
        }
        else if (active_menu_index == 7)
    1334:	07 97       	sbiw	r24, 0x07	; 7
    1336:	71 f4       	brne	.+28     	; 0x1354 <ui_process_key_command+0x548>
        {
            if (active_config_index == -1)
    1338:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <active_config_index>
    133c:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <active_config_index+0x1>
    1340:	01 96       	adiw	r24, 0x01	; 1
    1342:	41 f4       	brne	.+16     	; 0x1354 <ui_process_key_command+0x548>
            {
                active_config_index = config_hover_index;
    1344:	80 91 c2 03 	lds	r24, 0x03C2	; 0x8003c2 <config_hover_index>
    1348:	90 91 c3 03 	lds	r25, 0x03C3	; 0x8003c3 <config_hover_index+0x1>
    134c:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <active_config_index+0x1>
    1350:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <active_config_index>
    1354:	08 95       	ret

00001356 <main>:
    }
}

int main(void)
{
    LCD_1602A_init();
    1356:	0e 94 b2 01 	call	0x364	; 0x364 <LCD_1602A_init>
    HCSR04_init();
    135a:	0e 94 99 02 	call	0x532	; 0x532 <HCSR04_init>
    KEYPAD_init();
    135e:	0e 94 dd 02 	call	0x5ba	; 0x5ba <KEYPAD_init>

    LED_SYSTEM_ACTIVE_INIT();
    1362:	0e 94 37 01 	call	0x26e	; 0x26e <LED_SYSTEM_ACTIVE_INIT>
    1366:	7a c0       	rjmp	.+244    	; 0x145c <main+0x106>
    while (1)
    {
        while (active_menu_index == 4 && active_live_view_index != -1)
        {
            // in live view, continuously update values
            LED_system_active_on();
    1368:	0e 94 42 01 	call	0x284	; 0x284 <LED_system_active_on>
            switch (live_view_hover_index)
    136c:	80 91 be 03 	lds	r24, 0x03BE	; 0x8003be <live_view_hover_index>
    1370:	90 91 bf 03 	lds	r25, 0x03BF	; 0x8003bf <live_view_hover_index+0x1>
    1374:	81 30       	cpi	r24, 0x01	; 1
    1376:	91 05       	cpc	r25, r1
    1378:	d9 f0       	breq	.+54     	; 0x13b0 <main+0x5a>
    137a:	1c f4       	brge	.+6      	; 0x1382 <main+0x2c>
    137c:	89 2b       	or	r24, r25
    137e:	39 f0       	breq	.+14     	; 0x138e <main+0x38>
    1380:	49 c0       	rjmp	.+146    	; 0x1414 <main+0xbe>
    1382:	82 30       	cpi	r24, 0x02	; 2
    1384:	91 05       	cpc	r25, r1
    1386:	29 f1       	breq	.+74     	; 0x13d2 <main+0x7c>
    1388:	03 97       	sbiw	r24, 0x03	; 3
    138a:	a1 f1       	breq	.+104    	; 0x13f4 <main+0x9e>
    138c:	43 c0       	rjmp	.+134    	; 0x1414 <main+0xbe>
            {
                case 0:
                    display_set("CAPACITY", "Updating...");
    138e:	63 ec       	ldi	r22, 0xC3	; 195
    1390:	72 e0       	ldi	r23, 0x02	; 2
    1392:	81 ea       	ldi	r24, 0xA1	; 161
    1394:	91 e0       	ldi	r25, 0x01	; 1
    1396:	0e 94 f6 02 	call	0x5ec	; 0x5ec <display_set>
                    current_tank_capacity = get_tank_capacity();
    139a:	0e 94 c7 03 	call	0x78e	; 0x78e <get_tank_capacity>
    139e:	60 93 ba 03 	sts	0x03BA, r22	; 0x8003ba <current_tank_capacity>
    13a2:	70 93 bb 03 	sts	0x03BB, r23	; 0x8003bb <current_tank_capacity+0x1>
    13a6:	80 93 bc 03 	sts	0x03BC, r24	; 0x8003bc <current_tank_capacity+0x2>
    13aa:	90 93 bd 03 	sts	0x03BD, r25	; 0x8003bd <current_tank_capacity+0x3>
                    break;
    13ae:	32 c0       	rjmp	.+100    	; 0x1414 <main+0xbe>
                case 1:
                    display_set("REFILL RATE", "Updating...");
    13b0:	63 ec       	ldi	r22, 0xC3	; 195
    13b2:	72 e0       	ldi	r23, 0x02	; 2
    13b4:	8f ea       	ldi	r24, 0xAF	; 175
    13b6:	91 e0       	ldi	r25, 0x01	; 1
    13b8:	0e 94 f6 02 	call	0x5ec	; 0x5ec <display_set>
                    current_refill_rate = get_refill_rate();
    13bc:	0e 94 05 04 	call	0x80a	; 0x80a <get_refill_rate>
    13c0:	60 93 b6 03 	sts	0x03B6, r22	; 0x8003b6 <current_refill_rate>
    13c4:	70 93 b7 03 	sts	0x03B7, r23	; 0x8003b7 <current_refill_rate+0x1>
    13c8:	80 93 b8 03 	sts	0x03B8, r24	; 0x8003b8 <current_refill_rate+0x2>
    13cc:	90 93 b9 03 	sts	0x03B9, r25	; 0x8003b9 <current_refill_rate+0x3>
                    break;
    13d0:	21 c0       	rjmp	.+66     	; 0x1414 <main+0xbe>
                case 2:
                    display_set("LEAK RATE", "Updating...");
    13d2:	63 ec       	ldi	r22, 0xC3	; 195
    13d4:	72 e0       	ldi	r23, 0x02	; 2
    13d6:	88 ef       	ldi	r24, 0xF8	; 248
    13d8:	91 e0       	ldi	r25, 0x01	; 1
    13da:	0e 94 f6 02 	call	0x5ec	; 0x5ec <display_set>
                    current_leak_rate = get_leak_rate();
    13de:	0e 94 45 04 	call	0x88a	; 0x88a <get_leak_rate>
    13e2:	60 93 b2 03 	sts	0x03B2, r22	; 0x8003b2 <current_leak_rate>
    13e6:	70 93 b3 03 	sts	0x03B3, r23	; 0x8003b3 <current_leak_rate+0x1>
    13ea:	80 93 b4 03 	sts	0x03B4, r24	; 0x8003b4 <current_leak_rate+0x2>
    13ee:	90 93 b5 03 	sts	0x03B5, r25	; 0x8003b5 <current_leak_rate+0x3>
                    break;
    13f2:	10 c0       	rjmp	.+32     	; 0x1414 <main+0xbe>

                case 3:
                    display_set("SOIL TEMP", "Updating...");
    13f4:	63 ec       	ldi	r22, 0xC3	; 195
    13f6:	72 e0       	ldi	r23, 0x02	; 2
    13f8:	82 e0       	ldi	r24, 0x02	; 2
    13fa:	92 e0       	ldi	r25, 0x02	; 2
    13fc:	0e 94 f6 02 	call	0x5ec	; 0x5ec <display_set>
                    current_soil_temperature = get_soil_temperature();
    1400:	0e 94 85 04 	call	0x90a	; 0x90a <get_soil_temperature>
    1404:	60 93 ae 03 	sts	0x03AE, r22	; 0x8003ae <__data_end>
    1408:	70 93 af 03 	sts	0x03AF, r23	; 0x8003af <__data_end+0x1>
    140c:	80 93 b0 03 	sts	0x03B0, r24	; 0x8003b0 <__data_end+0x2>
    1410:	90 93 b1 03 	sts	0x03B1, r25	; 0x8003b1 <__data_end+0x3>
                    break;
            }
            LED_system_active_off();
    1414:	0e 94 3e 01 	call	0x27c	; 0x27c <LED_system_active_off>

            ui_show_display();
    1418:	0e 94 88 04 	call	0x910	; 0x910 <ui_show_display>
    141c:	2f ef       	ldi	r18, 0xFF	; 255
    141e:	83 ed       	ldi	r24, 0xD3	; 211
    1420:	90 e3       	ldi	r25, 0x30	; 48
    1422:	21 50       	subi	r18, 0x01	; 1
    1424:	80 40       	sbci	r24, 0x00	; 0
    1426:	90 40       	sbci	r25, 0x00	; 0
    1428:	e1 f7       	brne	.-8      	; 0x1422 <main+0xcc>
    142a:	00 c0       	rjmp	.+0      	; 0x142c <main+0xd6>
    142c:	00 00       	nop
            _delay_ms(1000);

            if ((pressed_key = KEYPAD_read()) != KEYPAD_NO_KEY)
    142e:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <KEYPAD_read>
    1432:	c8 2f       	mov	r28, r24
    1434:	85 30       	cpi	r24, 0x05	; 5
    1436:	91 f0       	breq	.+36     	; 0x145c <main+0x106>
            {
                if (pressed_key == 1)
    1438:	81 30       	cpi	r24, 0x01	; 1
    143a:	41 f4       	brne	.+16     	; 0x144c <main+0xf6>
                {
                    // exit live view on key 1 press
                    active_menu_index = -1;
    143c:	8f ef       	ldi	r24, 0xFF	; 255
    143e:	9f ef       	ldi	r25, 0xFF	; 255
    1440:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <active_menu_index+0x1>
    1444:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <active_menu_index>
                    pressed_key = KEYPAD_NO_KEY;
    1448:	c5 e0       	ldi	r28, 0x05	; 5
                    break;
    144a:	15 c0       	rjmp	.+42     	; 0x1476 <main+0x120>
                }
                ui_process_key_command(pressed_key);
    144c:	0e 94 06 07 	call	0xe0c	; 0xe0c <ui_process_key_command>
                while (KEYPAD_read() != KEYPAD_NO_KEY); // wait until the key is released
    1450:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <KEYPAD_read>
    1454:	85 30       	cpi	r24, 0x05	; 5
    1456:	e1 f7       	brne	.-8      	; 0x1450 <main+0xfa>
    1458:	01 c0       	rjmp	.+2      	; 0x145c <main+0x106>
        {
            ui_process_key_command(pressed_key);
            while (KEYPAD_read() != KEYPAD_NO_KEY); // wait until the key is released
        }

        pressed_key = KEYPAD_NO_KEY;
    145a:	c5 e0       	ldi	r28, 0x05	; 5

    uint8_t pressed_key;

    while (1)
    {
        while (active_menu_index == 4 && active_live_view_index != -1)
    145c:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <active_menu_index>
    1460:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <active_menu_index+0x1>
    1464:	04 97       	sbiw	r24, 0x04	; 4
    1466:	39 f4       	brne	.+14     	; 0x1476 <main+0x120>
    1468:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <active_live_view_index>
    146c:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <active_live_view_index+0x1>
    1470:	01 96       	adiw	r24, 0x01	; 1
    1472:	09 f0       	breq	.+2      	; 0x1476 <main+0x120>
    1474:	79 cf       	rjmp	.-270    	; 0x1368 <main+0x12>
                ui_process_key_command(pressed_key);
                while (KEYPAD_read() != KEYPAD_NO_KEY); // wait until the key is released
            }
        }

        ui_show_display();
    1476:	0e 94 88 04 	call	0x910	; 0x910 <ui_show_display>
    147a:	8f ef       	ldi	r24, 0xFF	; 255
    147c:	99 ef       	ldi	r25, 0xF9	; 249
    147e:	20 e0       	ldi	r18, 0x00	; 0
    1480:	81 50       	subi	r24, 0x01	; 1
    1482:	90 40       	sbci	r25, 0x00	; 0
    1484:	20 40       	sbci	r18, 0x00	; 0
    1486:	e1 f7       	brne	.-8      	; 0x1480 <main+0x12a>
    1488:	00 c0       	rjmp	.+0      	; 0x148a <main+0x134>
    148a:	00 00       	nop
        _delay_ms(20);

        if (pressed_key == KEYPAD_NO_KEY) {
    148c:	c5 30       	cpi	r28, 0x05	; 5
    148e:	29 f4       	brne	.+10     	; 0x149a <main+0x144>
            while ((pressed_key = KEYPAD_read()) == KEYPAD_NO_KEY);
    1490:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <KEYPAD_read>
    1494:	c8 2f       	mov	r28, r24
    1496:	85 30       	cpi	r24, 0x05	; 5
    1498:	d9 f3       	breq	.-10     	; 0x1490 <main+0x13a>
    149a:	8f ef       	ldi	r24, 0xFF	; 255
    149c:	99 ef       	ldi	r25, 0xF9	; 249
    149e:	20 e0       	ldi	r18, 0x00	; 0
    14a0:	81 50       	subi	r24, 0x01	; 1
    14a2:	90 40       	sbci	r25, 0x00	; 0
    14a4:	20 40       	sbci	r18, 0x00	; 0
    14a6:	e1 f7       	brne	.-8      	; 0x14a0 <main+0x14a>
    14a8:	00 c0       	rjmp	.+0      	; 0x14aa <main+0x154>
    14aa:	00 00       	nop
        }
        
        _delay_ms(20);
        if (KEYPAD_read() == pressed_key)
    14ac:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <KEYPAD_read>
    14b0:	c8 13       	cpse	r28, r24
    14b2:	d3 cf       	rjmp	.-90     	; 0x145a <main+0x104>
        {
            ui_process_key_command(pressed_key);
    14b4:	8c 2f       	mov	r24, r28
    14b6:	0e 94 06 07 	call	0xe0c	; 0xe0c <ui_process_key_command>
            while (KEYPAD_read() != KEYPAD_NO_KEY); // wait until the key is released
    14ba:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <KEYPAD_read>
    14be:	85 30       	cpi	r24, 0x05	; 5
    14c0:	e1 f7       	brne	.-8      	; 0x14ba <main+0x164>
        }

        pressed_key = KEYPAD_NO_KEY;
    14c2:	c5 e0       	ldi	r28, 0x05	; 5
    14c4:	cb cf       	rjmp	.-106    	; 0x145c <main+0x106>

000014c6 <__subsf3>:
    14c6:	50 58       	subi	r21, 0x80	; 128

000014c8 <__addsf3>:
    14c8:	bb 27       	eor	r27, r27
    14ca:	aa 27       	eor	r26, r26
    14cc:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <__addsf3x>
    14d0:	0c 94 ee 0b 	jmp	0x17dc	; 0x17dc <__fp_round>
    14d4:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <__fp_pscA>
    14d8:	38 f0       	brcs	.+14     	; 0x14e8 <__addsf3+0x20>
    14da:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <__fp_pscB>
    14de:	20 f0       	brcs	.+8      	; 0x14e8 <__addsf3+0x20>
    14e0:	39 f4       	brne	.+14     	; 0x14f0 <__addsf3+0x28>
    14e2:	9f 3f       	cpi	r25, 0xFF	; 255
    14e4:	19 f4       	brne	.+6      	; 0x14ec <__addsf3+0x24>
    14e6:	26 f4       	brtc	.+8      	; 0x14f0 <__addsf3+0x28>
    14e8:	0c 94 dd 0b 	jmp	0x17ba	; 0x17ba <__fp_nan>
    14ec:	0e f4       	brtc	.+2      	; 0x14f0 <__addsf3+0x28>
    14ee:	e0 95       	com	r30
    14f0:	e7 fb       	bst	r30, 7
    14f2:	0c 94 d7 0b 	jmp	0x17ae	; 0x17ae <__fp_inf>

000014f6 <__addsf3x>:
    14f6:	e9 2f       	mov	r30, r25
    14f8:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <__fp_split3>
    14fc:	58 f3       	brcs	.-42     	; 0x14d4 <__addsf3+0xc>
    14fe:	ba 17       	cp	r27, r26
    1500:	62 07       	cpc	r22, r18
    1502:	73 07       	cpc	r23, r19
    1504:	84 07       	cpc	r24, r20
    1506:	95 07       	cpc	r25, r21
    1508:	20 f0       	brcs	.+8      	; 0x1512 <__addsf3x+0x1c>
    150a:	79 f4       	brne	.+30     	; 0x152a <__addsf3x+0x34>
    150c:	a6 f5       	brtc	.+104    	; 0x1576 <__addsf3x+0x80>
    150e:	0c 94 21 0c 	jmp	0x1842	; 0x1842 <__fp_zero>
    1512:	0e f4       	brtc	.+2      	; 0x1516 <__addsf3x+0x20>
    1514:	e0 95       	com	r30
    1516:	0b 2e       	mov	r0, r27
    1518:	ba 2f       	mov	r27, r26
    151a:	a0 2d       	mov	r26, r0
    151c:	0b 01       	movw	r0, r22
    151e:	b9 01       	movw	r22, r18
    1520:	90 01       	movw	r18, r0
    1522:	0c 01       	movw	r0, r24
    1524:	ca 01       	movw	r24, r20
    1526:	a0 01       	movw	r20, r0
    1528:	11 24       	eor	r1, r1
    152a:	ff 27       	eor	r31, r31
    152c:	59 1b       	sub	r21, r25
    152e:	99 f0       	breq	.+38     	; 0x1556 <__addsf3x+0x60>
    1530:	59 3f       	cpi	r21, 0xF9	; 249
    1532:	50 f4       	brcc	.+20     	; 0x1548 <__addsf3x+0x52>
    1534:	50 3e       	cpi	r21, 0xE0	; 224
    1536:	68 f1       	brcs	.+90     	; 0x1592 <__addsf3x+0x9c>
    1538:	1a 16       	cp	r1, r26
    153a:	f0 40       	sbci	r31, 0x00	; 0
    153c:	a2 2f       	mov	r26, r18
    153e:	23 2f       	mov	r18, r19
    1540:	34 2f       	mov	r19, r20
    1542:	44 27       	eor	r20, r20
    1544:	58 5f       	subi	r21, 0xF8	; 248
    1546:	f3 cf       	rjmp	.-26     	; 0x152e <__addsf3x+0x38>
    1548:	46 95       	lsr	r20
    154a:	37 95       	ror	r19
    154c:	27 95       	ror	r18
    154e:	a7 95       	ror	r26
    1550:	f0 40       	sbci	r31, 0x00	; 0
    1552:	53 95       	inc	r21
    1554:	c9 f7       	brne	.-14     	; 0x1548 <__addsf3x+0x52>
    1556:	7e f4       	brtc	.+30     	; 0x1576 <__addsf3x+0x80>
    1558:	1f 16       	cp	r1, r31
    155a:	ba 0b       	sbc	r27, r26
    155c:	62 0b       	sbc	r22, r18
    155e:	73 0b       	sbc	r23, r19
    1560:	84 0b       	sbc	r24, r20
    1562:	ba f0       	brmi	.+46     	; 0x1592 <__addsf3x+0x9c>
    1564:	91 50       	subi	r25, 0x01	; 1
    1566:	a1 f0       	breq	.+40     	; 0x1590 <__addsf3x+0x9a>
    1568:	ff 0f       	add	r31, r31
    156a:	bb 1f       	adc	r27, r27
    156c:	66 1f       	adc	r22, r22
    156e:	77 1f       	adc	r23, r23
    1570:	88 1f       	adc	r24, r24
    1572:	c2 f7       	brpl	.-16     	; 0x1564 <__addsf3x+0x6e>
    1574:	0e c0       	rjmp	.+28     	; 0x1592 <__addsf3x+0x9c>
    1576:	ba 0f       	add	r27, r26
    1578:	62 1f       	adc	r22, r18
    157a:	73 1f       	adc	r23, r19
    157c:	84 1f       	adc	r24, r20
    157e:	48 f4       	brcc	.+18     	; 0x1592 <__addsf3x+0x9c>
    1580:	87 95       	ror	r24
    1582:	77 95       	ror	r23
    1584:	67 95       	ror	r22
    1586:	b7 95       	ror	r27
    1588:	f7 95       	ror	r31
    158a:	9e 3f       	cpi	r25, 0xFE	; 254
    158c:	08 f0       	brcs	.+2      	; 0x1590 <__addsf3x+0x9a>
    158e:	b0 cf       	rjmp	.-160    	; 0x14f0 <__addsf3+0x28>
    1590:	93 95       	inc	r25
    1592:	88 0f       	add	r24, r24
    1594:	08 f0       	brcs	.+2      	; 0x1598 <__addsf3x+0xa2>
    1596:	99 27       	eor	r25, r25
    1598:	ee 0f       	add	r30, r30
    159a:	97 95       	ror	r25
    159c:	87 95       	ror	r24
    159e:	08 95       	ret

000015a0 <__cmpsf2>:
    15a0:	0e 94 b3 0b 	call	0x1766	; 0x1766 <__fp_cmp>
    15a4:	08 f4       	brcc	.+2      	; 0x15a8 <__cmpsf2+0x8>
    15a6:	81 e0       	ldi	r24, 0x01	; 1
    15a8:	08 95       	ret

000015aa <__divsf3>:
    15aa:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <__divsf3x>
    15ae:	0c 94 ee 0b 	jmp	0x17dc	; 0x17dc <__fp_round>
    15b2:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <__fp_pscB>
    15b6:	58 f0       	brcs	.+22     	; 0x15ce <__divsf3+0x24>
    15b8:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <__fp_pscA>
    15bc:	40 f0       	brcs	.+16     	; 0x15ce <__divsf3+0x24>
    15be:	29 f4       	brne	.+10     	; 0x15ca <__divsf3+0x20>
    15c0:	5f 3f       	cpi	r21, 0xFF	; 255
    15c2:	29 f0       	breq	.+10     	; 0x15ce <__divsf3+0x24>
    15c4:	0c 94 d7 0b 	jmp	0x17ae	; 0x17ae <__fp_inf>
    15c8:	51 11       	cpse	r21, r1
    15ca:	0c 94 22 0c 	jmp	0x1844	; 0x1844 <__fp_szero>
    15ce:	0c 94 dd 0b 	jmp	0x17ba	; 0x17ba <__fp_nan>

000015d2 <__divsf3x>:
    15d2:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <__fp_split3>
    15d6:	68 f3       	brcs	.-38     	; 0x15b2 <__divsf3+0x8>

000015d8 <__divsf3_pse>:
    15d8:	99 23       	and	r25, r25
    15da:	b1 f3       	breq	.-20     	; 0x15c8 <__divsf3+0x1e>
    15dc:	55 23       	and	r21, r21
    15de:	91 f3       	breq	.-28     	; 0x15c4 <__divsf3+0x1a>
    15e0:	95 1b       	sub	r25, r21
    15e2:	55 0b       	sbc	r21, r21
    15e4:	bb 27       	eor	r27, r27
    15e6:	aa 27       	eor	r26, r26
    15e8:	62 17       	cp	r22, r18
    15ea:	73 07       	cpc	r23, r19
    15ec:	84 07       	cpc	r24, r20
    15ee:	38 f0       	brcs	.+14     	; 0x15fe <__divsf3_pse+0x26>
    15f0:	9f 5f       	subi	r25, 0xFF	; 255
    15f2:	5f 4f       	sbci	r21, 0xFF	; 255
    15f4:	22 0f       	add	r18, r18
    15f6:	33 1f       	adc	r19, r19
    15f8:	44 1f       	adc	r20, r20
    15fa:	aa 1f       	adc	r26, r26
    15fc:	a9 f3       	breq	.-22     	; 0x15e8 <__divsf3_pse+0x10>
    15fe:	35 d0       	rcall	.+106    	; 0x166a <__divsf3_pse+0x92>
    1600:	0e 2e       	mov	r0, r30
    1602:	3a f0       	brmi	.+14     	; 0x1612 <__divsf3_pse+0x3a>
    1604:	e0 e8       	ldi	r30, 0x80	; 128
    1606:	32 d0       	rcall	.+100    	; 0x166c <__divsf3_pse+0x94>
    1608:	91 50       	subi	r25, 0x01	; 1
    160a:	50 40       	sbci	r21, 0x00	; 0
    160c:	e6 95       	lsr	r30
    160e:	00 1c       	adc	r0, r0
    1610:	ca f7       	brpl	.-14     	; 0x1604 <__divsf3_pse+0x2c>
    1612:	2b d0       	rcall	.+86     	; 0x166a <__divsf3_pse+0x92>
    1614:	fe 2f       	mov	r31, r30
    1616:	29 d0       	rcall	.+82     	; 0x166a <__divsf3_pse+0x92>
    1618:	66 0f       	add	r22, r22
    161a:	77 1f       	adc	r23, r23
    161c:	88 1f       	adc	r24, r24
    161e:	bb 1f       	adc	r27, r27
    1620:	26 17       	cp	r18, r22
    1622:	37 07       	cpc	r19, r23
    1624:	48 07       	cpc	r20, r24
    1626:	ab 07       	cpc	r26, r27
    1628:	b0 e8       	ldi	r27, 0x80	; 128
    162a:	09 f0       	breq	.+2      	; 0x162e <__divsf3_pse+0x56>
    162c:	bb 0b       	sbc	r27, r27
    162e:	80 2d       	mov	r24, r0
    1630:	bf 01       	movw	r22, r30
    1632:	ff 27       	eor	r31, r31
    1634:	93 58       	subi	r25, 0x83	; 131
    1636:	5f 4f       	sbci	r21, 0xFF	; 255
    1638:	3a f0       	brmi	.+14     	; 0x1648 <__divsf3_pse+0x70>
    163a:	9e 3f       	cpi	r25, 0xFE	; 254
    163c:	51 05       	cpc	r21, r1
    163e:	78 f0       	brcs	.+30     	; 0x165e <__divsf3_pse+0x86>
    1640:	0c 94 d7 0b 	jmp	0x17ae	; 0x17ae <__fp_inf>
    1644:	0c 94 22 0c 	jmp	0x1844	; 0x1844 <__fp_szero>
    1648:	5f 3f       	cpi	r21, 0xFF	; 255
    164a:	e4 f3       	brlt	.-8      	; 0x1644 <__divsf3_pse+0x6c>
    164c:	98 3e       	cpi	r25, 0xE8	; 232
    164e:	d4 f3       	brlt	.-12     	; 0x1644 <__divsf3_pse+0x6c>
    1650:	86 95       	lsr	r24
    1652:	77 95       	ror	r23
    1654:	67 95       	ror	r22
    1656:	b7 95       	ror	r27
    1658:	f7 95       	ror	r31
    165a:	9f 5f       	subi	r25, 0xFF	; 255
    165c:	c9 f7       	brne	.-14     	; 0x1650 <__divsf3_pse+0x78>
    165e:	88 0f       	add	r24, r24
    1660:	91 1d       	adc	r25, r1
    1662:	96 95       	lsr	r25
    1664:	87 95       	ror	r24
    1666:	97 f9       	bld	r25, 7
    1668:	08 95       	ret
    166a:	e1 e0       	ldi	r30, 0x01	; 1
    166c:	66 0f       	add	r22, r22
    166e:	77 1f       	adc	r23, r23
    1670:	88 1f       	adc	r24, r24
    1672:	bb 1f       	adc	r27, r27
    1674:	62 17       	cp	r22, r18
    1676:	73 07       	cpc	r23, r19
    1678:	84 07       	cpc	r24, r20
    167a:	ba 07       	cpc	r27, r26
    167c:	20 f0       	brcs	.+8      	; 0x1686 <__divsf3_pse+0xae>
    167e:	62 1b       	sub	r22, r18
    1680:	73 0b       	sbc	r23, r19
    1682:	84 0b       	sbc	r24, r20
    1684:	ba 0b       	sbc	r27, r26
    1686:	ee 1f       	adc	r30, r30
    1688:	88 f7       	brcc	.-30     	; 0x166c <__divsf3_pse+0x94>
    168a:	e0 95       	com	r30
    168c:	08 95       	ret

0000168e <__fixunssfsi>:
    168e:	0e 94 07 0c 	call	0x180e	; 0x180e <__fp_splitA>
    1692:	88 f0       	brcs	.+34     	; 0x16b6 <__fixunssfsi+0x28>
    1694:	9f 57       	subi	r25, 0x7F	; 127
    1696:	98 f0       	brcs	.+38     	; 0x16be <__fixunssfsi+0x30>
    1698:	b9 2f       	mov	r27, r25
    169a:	99 27       	eor	r25, r25
    169c:	b7 51       	subi	r27, 0x17	; 23
    169e:	b0 f0       	brcs	.+44     	; 0x16cc <__fixunssfsi+0x3e>
    16a0:	e1 f0       	breq	.+56     	; 0x16da <__fixunssfsi+0x4c>
    16a2:	66 0f       	add	r22, r22
    16a4:	77 1f       	adc	r23, r23
    16a6:	88 1f       	adc	r24, r24
    16a8:	99 1f       	adc	r25, r25
    16aa:	1a f0       	brmi	.+6      	; 0x16b2 <__fixunssfsi+0x24>
    16ac:	ba 95       	dec	r27
    16ae:	c9 f7       	brne	.-14     	; 0x16a2 <__fixunssfsi+0x14>
    16b0:	14 c0       	rjmp	.+40     	; 0x16da <__fixunssfsi+0x4c>
    16b2:	b1 30       	cpi	r27, 0x01	; 1
    16b4:	91 f0       	breq	.+36     	; 0x16da <__fixunssfsi+0x4c>
    16b6:	0e 94 21 0c 	call	0x1842	; 0x1842 <__fp_zero>
    16ba:	b1 e0       	ldi	r27, 0x01	; 1
    16bc:	08 95       	ret
    16be:	0c 94 21 0c 	jmp	0x1842	; 0x1842 <__fp_zero>
    16c2:	67 2f       	mov	r22, r23
    16c4:	78 2f       	mov	r23, r24
    16c6:	88 27       	eor	r24, r24
    16c8:	b8 5f       	subi	r27, 0xF8	; 248
    16ca:	39 f0       	breq	.+14     	; 0x16da <__fixunssfsi+0x4c>
    16cc:	b9 3f       	cpi	r27, 0xF9	; 249
    16ce:	cc f3       	brlt	.-14     	; 0x16c2 <__fixunssfsi+0x34>
    16d0:	86 95       	lsr	r24
    16d2:	77 95       	ror	r23
    16d4:	67 95       	ror	r22
    16d6:	b3 95       	inc	r27
    16d8:	d9 f7       	brne	.-10     	; 0x16d0 <__fixunssfsi+0x42>
    16da:	3e f4       	brtc	.+14     	; 0x16ea <__fixunssfsi+0x5c>
    16dc:	90 95       	com	r25
    16de:	80 95       	com	r24
    16e0:	70 95       	com	r23
    16e2:	61 95       	neg	r22
    16e4:	7f 4f       	sbci	r23, 0xFF	; 255
    16e6:	8f 4f       	sbci	r24, 0xFF	; 255
    16e8:	9f 4f       	sbci	r25, 0xFF	; 255
    16ea:	08 95       	ret

000016ec <__floatunsisf>:
    16ec:	e8 94       	clt
    16ee:	09 c0       	rjmp	.+18     	; 0x1702 <__floatsisf+0x12>

000016f0 <__floatsisf>:
    16f0:	97 fb       	bst	r25, 7
    16f2:	3e f4       	brtc	.+14     	; 0x1702 <__floatsisf+0x12>
    16f4:	90 95       	com	r25
    16f6:	80 95       	com	r24
    16f8:	70 95       	com	r23
    16fa:	61 95       	neg	r22
    16fc:	7f 4f       	sbci	r23, 0xFF	; 255
    16fe:	8f 4f       	sbci	r24, 0xFF	; 255
    1700:	9f 4f       	sbci	r25, 0xFF	; 255
    1702:	99 23       	and	r25, r25
    1704:	a9 f0       	breq	.+42     	; 0x1730 <__floatsisf+0x40>
    1706:	f9 2f       	mov	r31, r25
    1708:	96 e9       	ldi	r25, 0x96	; 150
    170a:	bb 27       	eor	r27, r27
    170c:	93 95       	inc	r25
    170e:	f6 95       	lsr	r31
    1710:	87 95       	ror	r24
    1712:	77 95       	ror	r23
    1714:	67 95       	ror	r22
    1716:	b7 95       	ror	r27
    1718:	f1 11       	cpse	r31, r1
    171a:	f8 cf       	rjmp	.-16     	; 0x170c <__floatsisf+0x1c>
    171c:	fa f4       	brpl	.+62     	; 0x175c <__floatsisf+0x6c>
    171e:	bb 0f       	add	r27, r27
    1720:	11 f4       	brne	.+4      	; 0x1726 <__floatsisf+0x36>
    1722:	60 ff       	sbrs	r22, 0
    1724:	1b c0       	rjmp	.+54     	; 0x175c <__floatsisf+0x6c>
    1726:	6f 5f       	subi	r22, 0xFF	; 255
    1728:	7f 4f       	sbci	r23, 0xFF	; 255
    172a:	8f 4f       	sbci	r24, 0xFF	; 255
    172c:	9f 4f       	sbci	r25, 0xFF	; 255
    172e:	16 c0       	rjmp	.+44     	; 0x175c <__floatsisf+0x6c>
    1730:	88 23       	and	r24, r24
    1732:	11 f0       	breq	.+4      	; 0x1738 <__floatsisf+0x48>
    1734:	96 e9       	ldi	r25, 0x96	; 150
    1736:	11 c0       	rjmp	.+34     	; 0x175a <__floatsisf+0x6a>
    1738:	77 23       	and	r23, r23
    173a:	21 f0       	breq	.+8      	; 0x1744 <__floatsisf+0x54>
    173c:	9e e8       	ldi	r25, 0x8E	; 142
    173e:	87 2f       	mov	r24, r23
    1740:	76 2f       	mov	r23, r22
    1742:	05 c0       	rjmp	.+10     	; 0x174e <__floatsisf+0x5e>
    1744:	66 23       	and	r22, r22
    1746:	71 f0       	breq	.+28     	; 0x1764 <__floatsisf+0x74>
    1748:	96 e8       	ldi	r25, 0x86	; 134
    174a:	86 2f       	mov	r24, r22
    174c:	70 e0       	ldi	r23, 0x00	; 0
    174e:	60 e0       	ldi	r22, 0x00	; 0
    1750:	2a f0       	brmi	.+10     	; 0x175c <__floatsisf+0x6c>
    1752:	9a 95       	dec	r25
    1754:	66 0f       	add	r22, r22
    1756:	77 1f       	adc	r23, r23
    1758:	88 1f       	adc	r24, r24
    175a:	da f7       	brpl	.-10     	; 0x1752 <__floatsisf+0x62>
    175c:	88 0f       	add	r24, r24
    175e:	96 95       	lsr	r25
    1760:	87 95       	ror	r24
    1762:	97 f9       	bld	r25, 7
    1764:	08 95       	ret

00001766 <__fp_cmp>:
    1766:	99 0f       	add	r25, r25
    1768:	00 08       	sbc	r0, r0
    176a:	55 0f       	add	r21, r21
    176c:	aa 0b       	sbc	r26, r26
    176e:	e0 e8       	ldi	r30, 0x80	; 128
    1770:	fe ef       	ldi	r31, 0xFE	; 254
    1772:	16 16       	cp	r1, r22
    1774:	17 06       	cpc	r1, r23
    1776:	e8 07       	cpc	r30, r24
    1778:	f9 07       	cpc	r31, r25
    177a:	c0 f0       	brcs	.+48     	; 0x17ac <__fp_cmp+0x46>
    177c:	12 16       	cp	r1, r18
    177e:	13 06       	cpc	r1, r19
    1780:	e4 07       	cpc	r30, r20
    1782:	f5 07       	cpc	r31, r21
    1784:	98 f0       	brcs	.+38     	; 0x17ac <__fp_cmp+0x46>
    1786:	62 1b       	sub	r22, r18
    1788:	73 0b       	sbc	r23, r19
    178a:	84 0b       	sbc	r24, r20
    178c:	95 0b       	sbc	r25, r21
    178e:	39 f4       	brne	.+14     	; 0x179e <__fp_cmp+0x38>
    1790:	0a 26       	eor	r0, r26
    1792:	61 f0       	breq	.+24     	; 0x17ac <__fp_cmp+0x46>
    1794:	23 2b       	or	r18, r19
    1796:	24 2b       	or	r18, r20
    1798:	25 2b       	or	r18, r21
    179a:	21 f4       	brne	.+8      	; 0x17a4 <__fp_cmp+0x3e>
    179c:	08 95       	ret
    179e:	0a 26       	eor	r0, r26
    17a0:	09 f4       	brne	.+2      	; 0x17a4 <__fp_cmp+0x3e>
    17a2:	a1 40       	sbci	r26, 0x01	; 1
    17a4:	a6 95       	lsr	r26
    17a6:	8f ef       	ldi	r24, 0xFF	; 255
    17a8:	81 1d       	adc	r24, r1
    17aa:	81 1d       	adc	r24, r1
    17ac:	08 95       	ret

000017ae <__fp_inf>:
    17ae:	97 f9       	bld	r25, 7
    17b0:	9f 67       	ori	r25, 0x7F	; 127
    17b2:	80 e8       	ldi	r24, 0x80	; 128
    17b4:	70 e0       	ldi	r23, 0x00	; 0
    17b6:	60 e0       	ldi	r22, 0x00	; 0
    17b8:	08 95       	ret

000017ba <__fp_nan>:
    17ba:	9f ef       	ldi	r25, 0xFF	; 255
    17bc:	80 ec       	ldi	r24, 0xC0	; 192
    17be:	08 95       	ret

000017c0 <__fp_pscA>:
    17c0:	00 24       	eor	r0, r0
    17c2:	0a 94       	dec	r0
    17c4:	16 16       	cp	r1, r22
    17c6:	17 06       	cpc	r1, r23
    17c8:	18 06       	cpc	r1, r24
    17ca:	09 06       	cpc	r0, r25
    17cc:	08 95       	ret

000017ce <__fp_pscB>:
    17ce:	00 24       	eor	r0, r0
    17d0:	0a 94       	dec	r0
    17d2:	12 16       	cp	r1, r18
    17d4:	13 06       	cpc	r1, r19
    17d6:	14 06       	cpc	r1, r20
    17d8:	05 06       	cpc	r0, r21
    17da:	08 95       	ret

000017dc <__fp_round>:
    17dc:	09 2e       	mov	r0, r25
    17de:	03 94       	inc	r0
    17e0:	00 0c       	add	r0, r0
    17e2:	11 f4       	brne	.+4      	; 0x17e8 <__fp_round+0xc>
    17e4:	88 23       	and	r24, r24
    17e6:	52 f0       	brmi	.+20     	; 0x17fc <__fp_round+0x20>
    17e8:	bb 0f       	add	r27, r27
    17ea:	40 f4       	brcc	.+16     	; 0x17fc <__fp_round+0x20>
    17ec:	bf 2b       	or	r27, r31
    17ee:	11 f4       	brne	.+4      	; 0x17f4 <__fp_round+0x18>
    17f0:	60 ff       	sbrs	r22, 0
    17f2:	04 c0       	rjmp	.+8      	; 0x17fc <__fp_round+0x20>
    17f4:	6f 5f       	subi	r22, 0xFF	; 255
    17f6:	7f 4f       	sbci	r23, 0xFF	; 255
    17f8:	8f 4f       	sbci	r24, 0xFF	; 255
    17fa:	9f 4f       	sbci	r25, 0xFF	; 255
    17fc:	08 95       	ret

000017fe <__fp_split3>:
    17fe:	57 fd       	sbrc	r21, 7
    1800:	90 58       	subi	r25, 0x80	; 128
    1802:	44 0f       	add	r20, r20
    1804:	55 1f       	adc	r21, r21
    1806:	59 f0       	breq	.+22     	; 0x181e <__fp_splitA+0x10>
    1808:	5f 3f       	cpi	r21, 0xFF	; 255
    180a:	71 f0       	breq	.+28     	; 0x1828 <__fp_splitA+0x1a>
    180c:	47 95       	ror	r20

0000180e <__fp_splitA>:
    180e:	88 0f       	add	r24, r24
    1810:	97 fb       	bst	r25, 7
    1812:	99 1f       	adc	r25, r25
    1814:	61 f0       	breq	.+24     	; 0x182e <__fp_splitA+0x20>
    1816:	9f 3f       	cpi	r25, 0xFF	; 255
    1818:	79 f0       	breq	.+30     	; 0x1838 <__fp_splitA+0x2a>
    181a:	87 95       	ror	r24
    181c:	08 95       	ret
    181e:	12 16       	cp	r1, r18
    1820:	13 06       	cpc	r1, r19
    1822:	14 06       	cpc	r1, r20
    1824:	55 1f       	adc	r21, r21
    1826:	f2 cf       	rjmp	.-28     	; 0x180c <__fp_split3+0xe>
    1828:	46 95       	lsr	r20
    182a:	f1 df       	rcall	.-30     	; 0x180e <__fp_splitA>
    182c:	08 c0       	rjmp	.+16     	; 0x183e <__fp_splitA+0x30>
    182e:	16 16       	cp	r1, r22
    1830:	17 06       	cpc	r1, r23
    1832:	18 06       	cpc	r1, r24
    1834:	99 1f       	adc	r25, r25
    1836:	f1 cf       	rjmp	.-30     	; 0x181a <__fp_splitA+0xc>
    1838:	86 95       	lsr	r24
    183a:	71 05       	cpc	r23, r1
    183c:	61 05       	cpc	r22, r1
    183e:	08 94       	sec
    1840:	08 95       	ret

00001842 <__fp_zero>:
    1842:	e8 94       	clt

00001844 <__fp_szero>:
    1844:	bb 27       	eor	r27, r27
    1846:	66 27       	eor	r22, r22
    1848:	77 27       	eor	r23, r23
    184a:	cb 01       	movw	r24, r22
    184c:	97 f9       	bld	r25, 7
    184e:	08 95       	ret

00001850 <__gesf2>:
    1850:	0e 94 b3 0b 	call	0x1766	; 0x1766 <__fp_cmp>
    1854:	08 f4       	brcc	.+2      	; 0x1858 <__gesf2+0x8>
    1856:	8f ef       	ldi	r24, 0xFF	; 255
    1858:	08 95       	ret

0000185a <__mulsf3>:
    185a:	0e 94 40 0c 	call	0x1880	; 0x1880 <__mulsf3x>
    185e:	0c 94 ee 0b 	jmp	0x17dc	; 0x17dc <__fp_round>
    1862:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <__fp_pscA>
    1866:	38 f0       	brcs	.+14     	; 0x1876 <__mulsf3+0x1c>
    1868:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <__fp_pscB>
    186c:	20 f0       	brcs	.+8      	; 0x1876 <__mulsf3+0x1c>
    186e:	95 23       	and	r25, r21
    1870:	11 f0       	breq	.+4      	; 0x1876 <__mulsf3+0x1c>
    1872:	0c 94 d7 0b 	jmp	0x17ae	; 0x17ae <__fp_inf>
    1876:	0c 94 dd 0b 	jmp	0x17ba	; 0x17ba <__fp_nan>
    187a:	11 24       	eor	r1, r1
    187c:	0c 94 22 0c 	jmp	0x1844	; 0x1844 <__fp_szero>

00001880 <__mulsf3x>:
    1880:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <__fp_split3>
    1884:	70 f3       	brcs	.-36     	; 0x1862 <__mulsf3+0x8>

00001886 <__mulsf3_pse>:
    1886:	95 9f       	mul	r25, r21
    1888:	c1 f3       	breq	.-16     	; 0x187a <__mulsf3+0x20>
    188a:	95 0f       	add	r25, r21
    188c:	50 e0       	ldi	r21, 0x00	; 0
    188e:	55 1f       	adc	r21, r21
    1890:	62 9f       	mul	r22, r18
    1892:	f0 01       	movw	r30, r0
    1894:	72 9f       	mul	r23, r18
    1896:	bb 27       	eor	r27, r27
    1898:	f0 0d       	add	r31, r0
    189a:	b1 1d       	adc	r27, r1
    189c:	63 9f       	mul	r22, r19
    189e:	aa 27       	eor	r26, r26
    18a0:	f0 0d       	add	r31, r0
    18a2:	b1 1d       	adc	r27, r1
    18a4:	aa 1f       	adc	r26, r26
    18a6:	64 9f       	mul	r22, r20
    18a8:	66 27       	eor	r22, r22
    18aa:	b0 0d       	add	r27, r0
    18ac:	a1 1d       	adc	r26, r1
    18ae:	66 1f       	adc	r22, r22
    18b0:	82 9f       	mul	r24, r18
    18b2:	22 27       	eor	r18, r18
    18b4:	b0 0d       	add	r27, r0
    18b6:	a1 1d       	adc	r26, r1
    18b8:	62 1f       	adc	r22, r18
    18ba:	73 9f       	mul	r23, r19
    18bc:	b0 0d       	add	r27, r0
    18be:	a1 1d       	adc	r26, r1
    18c0:	62 1f       	adc	r22, r18
    18c2:	83 9f       	mul	r24, r19
    18c4:	a0 0d       	add	r26, r0
    18c6:	61 1d       	adc	r22, r1
    18c8:	22 1f       	adc	r18, r18
    18ca:	74 9f       	mul	r23, r20
    18cc:	33 27       	eor	r19, r19
    18ce:	a0 0d       	add	r26, r0
    18d0:	61 1d       	adc	r22, r1
    18d2:	23 1f       	adc	r18, r19
    18d4:	84 9f       	mul	r24, r20
    18d6:	60 0d       	add	r22, r0
    18d8:	21 1d       	adc	r18, r1
    18da:	82 2f       	mov	r24, r18
    18dc:	76 2f       	mov	r23, r22
    18de:	6a 2f       	mov	r22, r26
    18e0:	11 24       	eor	r1, r1
    18e2:	9f 57       	subi	r25, 0x7F	; 127
    18e4:	50 40       	sbci	r21, 0x00	; 0
    18e6:	9a f0       	brmi	.+38     	; 0x190e <__mulsf3_pse+0x88>
    18e8:	f1 f0       	breq	.+60     	; 0x1926 <__mulsf3_pse+0xa0>
    18ea:	88 23       	and	r24, r24
    18ec:	4a f0       	brmi	.+18     	; 0x1900 <__mulsf3_pse+0x7a>
    18ee:	ee 0f       	add	r30, r30
    18f0:	ff 1f       	adc	r31, r31
    18f2:	bb 1f       	adc	r27, r27
    18f4:	66 1f       	adc	r22, r22
    18f6:	77 1f       	adc	r23, r23
    18f8:	88 1f       	adc	r24, r24
    18fa:	91 50       	subi	r25, 0x01	; 1
    18fc:	50 40       	sbci	r21, 0x00	; 0
    18fe:	a9 f7       	brne	.-22     	; 0x18ea <__mulsf3_pse+0x64>
    1900:	9e 3f       	cpi	r25, 0xFE	; 254
    1902:	51 05       	cpc	r21, r1
    1904:	80 f0       	brcs	.+32     	; 0x1926 <__mulsf3_pse+0xa0>
    1906:	0c 94 d7 0b 	jmp	0x17ae	; 0x17ae <__fp_inf>
    190a:	0c 94 22 0c 	jmp	0x1844	; 0x1844 <__fp_szero>
    190e:	5f 3f       	cpi	r21, 0xFF	; 255
    1910:	e4 f3       	brlt	.-8      	; 0x190a <__mulsf3_pse+0x84>
    1912:	98 3e       	cpi	r25, 0xE8	; 232
    1914:	d4 f3       	brlt	.-12     	; 0x190a <__mulsf3_pse+0x84>
    1916:	86 95       	lsr	r24
    1918:	77 95       	ror	r23
    191a:	67 95       	ror	r22
    191c:	b7 95       	ror	r27
    191e:	f7 95       	ror	r31
    1920:	e7 95       	ror	r30
    1922:	9f 5f       	subi	r25, 0xFF	; 255
    1924:	c1 f7       	brne	.-16     	; 0x1916 <__mulsf3_pse+0x90>
    1926:	fe 2b       	or	r31, r30
    1928:	88 0f       	add	r24, r24
    192a:	91 1d       	adc	r25, r1
    192c:	96 95       	lsr	r25
    192e:	87 95       	ror	r24
    1930:	97 f9       	bld	r25, 7
    1932:	08 95       	ret

00001934 <__tablejump2__>:
    1934:	ee 0f       	add	r30, r30
    1936:	ff 1f       	adc	r31, r31
    1938:	05 90       	lpm	r0, Z+
    193a:	f4 91       	lpm	r31, Z
    193c:	e0 2d       	mov	r30, r0
    193e:	09 94       	ijmp

00001940 <dtostrf>:
    1940:	ef 92       	push	r14
    1942:	0f 93       	push	r16
    1944:	1f 93       	push	r17
    1946:	cf 93       	push	r28
    1948:	df 93       	push	r29
    194a:	e8 01       	movw	r28, r16
    194c:	47 fd       	sbrc	r20, 7
    194e:	02 c0       	rjmp	.+4      	; 0x1954 <dtostrf+0x14>
    1950:	34 e0       	ldi	r19, 0x04	; 4
    1952:	01 c0       	rjmp	.+2      	; 0x1956 <dtostrf+0x16>
    1954:	34 e1       	ldi	r19, 0x14	; 20
    1956:	04 2e       	mov	r0, r20
    1958:	00 0c       	add	r0, r0
    195a:	55 0b       	sbc	r21, r21
    195c:	57 ff       	sbrs	r21, 7
    195e:	03 c0       	rjmp	.+6      	; 0x1966 <dtostrf+0x26>
    1960:	51 95       	neg	r21
    1962:	41 95       	neg	r20
    1964:	51 09       	sbc	r21, r1
    1966:	e3 2e       	mov	r14, r19
    1968:	02 2f       	mov	r16, r18
    196a:	24 2f       	mov	r18, r20
    196c:	ae 01       	movw	r20, r28
    196e:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <dtoa_prf>
    1972:	ce 01       	movw	r24, r28
    1974:	df 91       	pop	r29
    1976:	cf 91       	pop	r28
    1978:	1f 91       	pop	r17
    197a:	0f 91       	pop	r16
    197c:	ef 90       	pop	r14
    197e:	08 95       	ret

00001980 <snprintf>:
    1980:	ae e0       	ldi	r26, 0x0E	; 14
    1982:	b0 e0       	ldi	r27, 0x00	; 0
    1984:	e6 ec       	ldi	r30, 0xC6	; 198
    1986:	fc e0       	ldi	r31, 0x0C	; 12
    1988:	0c 94 c1 11 	jmp	0x2382	; 0x2382 <__prologue_saves__+0x1c>
    198c:	0d 89       	ldd	r16, Y+21	; 0x15
    198e:	1e 89       	ldd	r17, Y+22	; 0x16
    1990:	8f 89       	ldd	r24, Y+23	; 0x17
    1992:	98 8d       	ldd	r25, Y+24	; 0x18
    1994:	26 e0       	ldi	r18, 0x06	; 6
    1996:	2c 83       	std	Y+4, r18	; 0x04
    1998:	1a 83       	std	Y+2, r17	; 0x02
    199a:	09 83       	std	Y+1, r16	; 0x01
    199c:	97 ff       	sbrs	r25, 7
    199e:	02 c0       	rjmp	.+4      	; 0x19a4 <snprintf+0x24>
    19a0:	80 e0       	ldi	r24, 0x00	; 0
    19a2:	90 e8       	ldi	r25, 0x80	; 128
    19a4:	01 97       	sbiw	r24, 0x01	; 1
    19a6:	9e 83       	std	Y+6, r25	; 0x06
    19a8:	8d 83       	std	Y+5, r24	; 0x05
    19aa:	ae 01       	movw	r20, r28
    19ac:	45 5e       	subi	r20, 0xE5	; 229
    19ae:	5f 4f       	sbci	r21, 0xFF	; 255
    19b0:	69 8d       	ldd	r22, Y+25	; 0x19
    19b2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19b4:	ce 01       	movw	r24, r28
    19b6:	01 96       	adiw	r24, 0x01	; 1
    19b8:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <vfprintf>
    19bc:	4d 81       	ldd	r20, Y+5	; 0x05
    19be:	5e 81       	ldd	r21, Y+6	; 0x06
    19c0:	57 fd       	sbrc	r21, 7
    19c2:	0a c0       	rjmp	.+20     	; 0x19d8 <snprintf+0x58>
    19c4:	2f 81       	ldd	r18, Y+7	; 0x07
    19c6:	38 85       	ldd	r19, Y+8	; 0x08
    19c8:	42 17       	cp	r20, r18
    19ca:	53 07       	cpc	r21, r19
    19cc:	0c f4       	brge	.+2      	; 0x19d0 <snprintf+0x50>
    19ce:	9a 01       	movw	r18, r20
    19d0:	f8 01       	movw	r30, r16
    19d2:	e2 0f       	add	r30, r18
    19d4:	f3 1f       	adc	r31, r19
    19d6:	10 82       	st	Z, r1
    19d8:	2e 96       	adiw	r28, 0x0e	; 14
    19da:	e4 e0       	ldi	r30, 0x04	; 4
    19dc:	0c 94 dd 11 	jmp	0x23ba	; 0x23ba <__epilogue_restores__+0x1c>

000019e0 <vfprintf>:
    19e0:	ab e0       	ldi	r26, 0x0B	; 11
    19e2:	b0 e0       	ldi	r27, 0x00	; 0
    19e4:	e6 ef       	ldi	r30, 0xF6	; 246
    19e6:	fc e0       	ldi	r31, 0x0C	; 12
    19e8:	0c 94 b3 11 	jmp	0x2366	; 0x2366 <__prologue_saves__>
    19ec:	6c 01       	movw	r12, r24
    19ee:	7b 01       	movw	r14, r22
    19f0:	8a 01       	movw	r16, r20
    19f2:	fc 01       	movw	r30, r24
    19f4:	17 82       	std	Z+7, r1	; 0x07
    19f6:	16 82       	std	Z+6, r1	; 0x06
    19f8:	83 81       	ldd	r24, Z+3	; 0x03
    19fa:	81 ff       	sbrs	r24, 1
    19fc:	cc c1       	rjmp	.+920    	; 0x1d96 <vfprintf+0x3b6>
    19fe:	ce 01       	movw	r24, r28
    1a00:	01 96       	adiw	r24, 0x01	; 1
    1a02:	3c 01       	movw	r6, r24
    1a04:	f6 01       	movw	r30, r12
    1a06:	93 81       	ldd	r25, Z+3	; 0x03
    1a08:	f7 01       	movw	r30, r14
    1a0a:	93 fd       	sbrc	r25, 3
    1a0c:	85 91       	lpm	r24, Z+
    1a0e:	93 ff       	sbrs	r25, 3
    1a10:	81 91       	ld	r24, Z+
    1a12:	7f 01       	movw	r14, r30
    1a14:	88 23       	and	r24, r24
    1a16:	09 f4       	brne	.+2      	; 0x1a1a <vfprintf+0x3a>
    1a18:	ba c1       	rjmp	.+884    	; 0x1d8e <vfprintf+0x3ae>
    1a1a:	85 32       	cpi	r24, 0x25	; 37
    1a1c:	39 f4       	brne	.+14     	; 0x1a2c <vfprintf+0x4c>
    1a1e:	93 fd       	sbrc	r25, 3
    1a20:	85 91       	lpm	r24, Z+
    1a22:	93 ff       	sbrs	r25, 3
    1a24:	81 91       	ld	r24, Z+
    1a26:	7f 01       	movw	r14, r30
    1a28:	85 32       	cpi	r24, 0x25	; 37
    1a2a:	29 f4       	brne	.+10     	; 0x1a36 <vfprintf+0x56>
    1a2c:	b6 01       	movw	r22, r12
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	0e 94 19 11 	call	0x2232	; 0x2232 <fputc>
    1a34:	e7 cf       	rjmp	.-50     	; 0x1a04 <vfprintf+0x24>
    1a36:	91 2c       	mov	r9, r1
    1a38:	21 2c       	mov	r2, r1
    1a3a:	31 2c       	mov	r3, r1
    1a3c:	ff e1       	ldi	r31, 0x1F	; 31
    1a3e:	f3 15       	cp	r31, r3
    1a40:	d8 f0       	brcs	.+54     	; 0x1a78 <vfprintf+0x98>
    1a42:	8b 32       	cpi	r24, 0x2B	; 43
    1a44:	79 f0       	breq	.+30     	; 0x1a64 <vfprintf+0x84>
    1a46:	38 f4       	brcc	.+14     	; 0x1a56 <vfprintf+0x76>
    1a48:	80 32       	cpi	r24, 0x20	; 32
    1a4a:	79 f0       	breq	.+30     	; 0x1a6a <vfprintf+0x8a>
    1a4c:	83 32       	cpi	r24, 0x23	; 35
    1a4e:	a1 f4       	brne	.+40     	; 0x1a78 <vfprintf+0x98>
    1a50:	23 2d       	mov	r18, r3
    1a52:	20 61       	ori	r18, 0x10	; 16
    1a54:	1d c0       	rjmp	.+58     	; 0x1a90 <vfprintf+0xb0>
    1a56:	8d 32       	cpi	r24, 0x2D	; 45
    1a58:	61 f0       	breq	.+24     	; 0x1a72 <vfprintf+0x92>
    1a5a:	80 33       	cpi	r24, 0x30	; 48
    1a5c:	69 f4       	brne	.+26     	; 0x1a78 <vfprintf+0x98>
    1a5e:	23 2d       	mov	r18, r3
    1a60:	21 60       	ori	r18, 0x01	; 1
    1a62:	16 c0       	rjmp	.+44     	; 0x1a90 <vfprintf+0xb0>
    1a64:	83 2d       	mov	r24, r3
    1a66:	82 60       	ori	r24, 0x02	; 2
    1a68:	38 2e       	mov	r3, r24
    1a6a:	e3 2d       	mov	r30, r3
    1a6c:	e4 60       	ori	r30, 0x04	; 4
    1a6e:	3e 2e       	mov	r3, r30
    1a70:	2a c0       	rjmp	.+84     	; 0x1ac6 <vfprintf+0xe6>
    1a72:	f3 2d       	mov	r31, r3
    1a74:	f8 60       	ori	r31, 0x08	; 8
    1a76:	1d c0       	rjmp	.+58     	; 0x1ab2 <vfprintf+0xd2>
    1a78:	37 fc       	sbrc	r3, 7
    1a7a:	2d c0       	rjmp	.+90     	; 0x1ad6 <vfprintf+0xf6>
    1a7c:	20 ed       	ldi	r18, 0xD0	; 208
    1a7e:	28 0f       	add	r18, r24
    1a80:	2a 30       	cpi	r18, 0x0A	; 10
    1a82:	40 f0       	brcs	.+16     	; 0x1a94 <vfprintf+0xb4>
    1a84:	8e 32       	cpi	r24, 0x2E	; 46
    1a86:	b9 f4       	brne	.+46     	; 0x1ab6 <vfprintf+0xd6>
    1a88:	36 fc       	sbrc	r3, 6
    1a8a:	81 c1       	rjmp	.+770    	; 0x1d8e <vfprintf+0x3ae>
    1a8c:	23 2d       	mov	r18, r3
    1a8e:	20 64       	ori	r18, 0x40	; 64
    1a90:	32 2e       	mov	r3, r18
    1a92:	19 c0       	rjmp	.+50     	; 0x1ac6 <vfprintf+0xe6>
    1a94:	36 fe       	sbrs	r3, 6
    1a96:	06 c0       	rjmp	.+12     	; 0x1aa4 <vfprintf+0xc4>
    1a98:	8a e0       	ldi	r24, 0x0A	; 10
    1a9a:	98 9e       	mul	r9, r24
    1a9c:	20 0d       	add	r18, r0
    1a9e:	11 24       	eor	r1, r1
    1aa0:	92 2e       	mov	r9, r18
    1aa2:	11 c0       	rjmp	.+34     	; 0x1ac6 <vfprintf+0xe6>
    1aa4:	ea e0       	ldi	r30, 0x0A	; 10
    1aa6:	2e 9e       	mul	r2, r30
    1aa8:	20 0d       	add	r18, r0
    1aaa:	11 24       	eor	r1, r1
    1aac:	22 2e       	mov	r2, r18
    1aae:	f3 2d       	mov	r31, r3
    1ab0:	f0 62       	ori	r31, 0x20	; 32
    1ab2:	3f 2e       	mov	r3, r31
    1ab4:	08 c0       	rjmp	.+16     	; 0x1ac6 <vfprintf+0xe6>
    1ab6:	8c 36       	cpi	r24, 0x6C	; 108
    1ab8:	21 f4       	brne	.+8      	; 0x1ac2 <vfprintf+0xe2>
    1aba:	83 2d       	mov	r24, r3
    1abc:	80 68       	ori	r24, 0x80	; 128
    1abe:	38 2e       	mov	r3, r24
    1ac0:	02 c0       	rjmp	.+4      	; 0x1ac6 <vfprintf+0xe6>
    1ac2:	88 36       	cpi	r24, 0x68	; 104
    1ac4:	41 f4       	brne	.+16     	; 0x1ad6 <vfprintf+0xf6>
    1ac6:	f7 01       	movw	r30, r14
    1ac8:	93 fd       	sbrc	r25, 3
    1aca:	85 91       	lpm	r24, Z+
    1acc:	93 ff       	sbrs	r25, 3
    1ace:	81 91       	ld	r24, Z+
    1ad0:	7f 01       	movw	r14, r30
    1ad2:	81 11       	cpse	r24, r1
    1ad4:	b3 cf       	rjmp	.-154    	; 0x1a3c <vfprintf+0x5c>
    1ad6:	98 2f       	mov	r25, r24
    1ad8:	9f 7d       	andi	r25, 0xDF	; 223
    1ada:	95 54       	subi	r25, 0x45	; 69
    1adc:	93 30       	cpi	r25, 0x03	; 3
    1ade:	28 f4       	brcc	.+10     	; 0x1aea <vfprintf+0x10a>
    1ae0:	0c 5f       	subi	r16, 0xFC	; 252
    1ae2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ae4:	9f e3       	ldi	r25, 0x3F	; 63
    1ae6:	99 83       	std	Y+1, r25	; 0x01
    1ae8:	0d c0       	rjmp	.+26     	; 0x1b04 <vfprintf+0x124>
    1aea:	83 36       	cpi	r24, 0x63	; 99
    1aec:	31 f0       	breq	.+12     	; 0x1afa <vfprintf+0x11a>
    1aee:	83 37       	cpi	r24, 0x73	; 115
    1af0:	71 f0       	breq	.+28     	; 0x1b0e <vfprintf+0x12e>
    1af2:	83 35       	cpi	r24, 0x53	; 83
    1af4:	09 f0       	breq	.+2      	; 0x1af8 <vfprintf+0x118>
    1af6:	59 c0       	rjmp	.+178    	; 0x1baa <vfprintf+0x1ca>
    1af8:	21 c0       	rjmp	.+66     	; 0x1b3c <vfprintf+0x15c>
    1afa:	f8 01       	movw	r30, r16
    1afc:	80 81       	ld	r24, Z
    1afe:	89 83       	std	Y+1, r24	; 0x01
    1b00:	0e 5f       	subi	r16, 0xFE	; 254
    1b02:	1f 4f       	sbci	r17, 0xFF	; 255
    1b04:	88 24       	eor	r8, r8
    1b06:	83 94       	inc	r8
    1b08:	91 2c       	mov	r9, r1
    1b0a:	53 01       	movw	r10, r6
    1b0c:	13 c0       	rjmp	.+38     	; 0x1b34 <vfprintf+0x154>
    1b0e:	28 01       	movw	r4, r16
    1b10:	f2 e0       	ldi	r31, 0x02	; 2
    1b12:	4f 0e       	add	r4, r31
    1b14:	51 1c       	adc	r5, r1
    1b16:	f8 01       	movw	r30, r16
    1b18:	a0 80       	ld	r10, Z
    1b1a:	b1 80       	ldd	r11, Z+1	; 0x01
    1b1c:	36 fe       	sbrs	r3, 6
    1b1e:	03 c0       	rjmp	.+6      	; 0x1b26 <vfprintf+0x146>
    1b20:	69 2d       	mov	r22, r9
    1b22:	70 e0       	ldi	r23, 0x00	; 0
    1b24:	02 c0       	rjmp	.+4      	; 0x1b2a <vfprintf+0x14a>
    1b26:	6f ef       	ldi	r22, 0xFF	; 255
    1b28:	7f ef       	ldi	r23, 0xFF	; 255
    1b2a:	c5 01       	movw	r24, r10
    1b2c:	0e 94 0e 11 	call	0x221c	; 0x221c <strnlen>
    1b30:	4c 01       	movw	r8, r24
    1b32:	82 01       	movw	r16, r4
    1b34:	f3 2d       	mov	r31, r3
    1b36:	ff 77       	andi	r31, 0x7F	; 127
    1b38:	3f 2e       	mov	r3, r31
    1b3a:	16 c0       	rjmp	.+44     	; 0x1b68 <vfprintf+0x188>
    1b3c:	28 01       	movw	r4, r16
    1b3e:	22 e0       	ldi	r18, 0x02	; 2
    1b40:	42 0e       	add	r4, r18
    1b42:	51 1c       	adc	r5, r1
    1b44:	f8 01       	movw	r30, r16
    1b46:	a0 80       	ld	r10, Z
    1b48:	b1 80       	ldd	r11, Z+1	; 0x01
    1b4a:	36 fe       	sbrs	r3, 6
    1b4c:	03 c0       	rjmp	.+6      	; 0x1b54 <vfprintf+0x174>
    1b4e:	69 2d       	mov	r22, r9
    1b50:	70 e0       	ldi	r23, 0x00	; 0
    1b52:	02 c0       	rjmp	.+4      	; 0x1b58 <vfprintf+0x178>
    1b54:	6f ef       	ldi	r22, 0xFF	; 255
    1b56:	7f ef       	ldi	r23, 0xFF	; 255
    1b58:	c5 01       	movw	r24, r10
    1b5a:	0e 94 03 11 	call	0x2206	; 0x2206 <strnlen_P>
    1b5e:	4c 01       	movw	r8, r24
    1b60:	f3 2d       	mov	r31, r3
    1b62:	f0 68       	ori	r31, 0x80	; 128
    1b64:	3f 2e       	mov	r3, r31
    1b66:	82 01       	movw	r16, r4
    1b68:	33 fc       	sbrc	r3, 3
    1b6a:	1b c0       	rjmp	.+54     	; 0x1ba2 <vfprintf+0x1c2>
    1b6c:	82 2d       	mov	r24, r2
    1b6e:	90 e0       	ldi	r25, 0x00	; 0
    1b70:	88 16       	cp	r8, r24
    1b72:	99 06       	cpc	r9, r25
    1b74:	b0 f4       	brcc	.+44     	; 0x1ba2 <vfprintf+0x1c2>
    1b76:	b6 01       	movw	r22, r12
    1b78:	80 e2       	ldi	r24, 0x20	; 32
    1b7a:	90 e0       	ldi	r25, 0x00	; 0
    1b7c:	0e 94 19 11 	call	0x2232	; 0x2232 <fputc>
    1b80:	2a 94       	dec	r2
    1b82:	f4 cf       	rjmp	.-24     	; 0x1b6c <vfprintf+0x18c>
    1b84:	f5 01       	movw	r30, r10
    1b86:	37 fc       	sbrc	r3, 7
    1b88:	85 91       	lpm	r24, Z+
    1b8a:	37 fe       	sbrs	r3, 7
    1b8c:	81 91       	ld	r24, Z+
    1b8e:	5f 01       	movw	r10, r30
    1b90:	b6 01       	movw	r22, r12
    1b92:	90 e0       	ldi	r25, 0x00	; 0
    1b94:	0e 94 19 11 	call	0x2232	; 0x2232 <fputc>
    1b98:	21 10       	cpse	r2, r1
    1b9a:	2a 94       	dec	r2
    1b9c:	21 e0       	ldi	r18, 0x01	; 1
    1b9e:	82 1a       	sub	r8, r18
    1ba0:	91 08       	sbc	r9, r1
    1ba2:	81 14       	cp	r8, r1
    1ba4:	91 04       	cpc	r9, r1
    1ba6:	71 f7       	brne	.-36     	; 0x1b84 <vfprintf+0x1a4>
    1ba8:	e8 c0       	rjmp	.+464    	; 0x1d7a <vfprintf+0x39a>
    1baa:	84 36       	cpi	r24, 0x64	; 100
    1bac:	11 f0       	breq	.+4      	; 0x1bb2 <vfprintf+0x1d2>
    1bae:	89 36       	cpi	r24, 0x69	; 105
    1bb0:	41 f5       	brne	.+80     	; 0x1c02 <vfprintf+0x222>
    1bb2:	f8 01       	movw	r30, r16
    1bb4:	37 fe       	sbrs	r3, 7
    1bb6:	07 c0       	rjmp	.+14     	; 0x1bc6 <vfprintf+0x1e6>
    1bb8:	60 81       	ld	r22, Z
    1bba:	71 81       	ldd	r23, Z+1	; 0x01
    1bbc:	82 81       	ldd	r24, Z+2	; 0x02
    1bbe:	93 81       	ldd	r25, Z+3	; 0x03
    1bc0:	0c 5f       	subi	r16, 0xFC	; 252
    1bc2:	1f 4f       	sbci	r17, 0xFF	; 255
    1bc4:	08 c0       	rjmp	.+16     	; 0x1bd6 <vfprintf+0x1f6>
    1bc6:	60 81       	ld	r22, Z
    1bc8:	71 81       	ldd	r23, Z+1	; 0x01
    1bca:	07 2e       	mov	r0, r23
    1bcc:	00 0c       	add	r0, r0
    1bce:	88 0b       	sbc	r24, r24
    1bd0:	99 0b       	sbc	r25, r25
    1bd2:	0e 5f       	subi	r16, 0xFE	; 254
    1bd4:	1f 4f       	sbci	r17, 0xFF	; 255
    1bd6:	f3 2d       	mov	r31, r3
    1bd8:	ff 76       	andi	r31, 0x6F	; 111
    1bda:	3f 2e       	mov	r3, r31
    1bdc:	97 ff       	sbrs	r25, 7
    1bde:	09 c0       	rjmp	.+18     	; 0x1bf2 <vfprintf+0x212>
    1be0:	90 95       	com	r25
    1be2:	80 95       	com	r24
    1be4:	70 95       	com	r23
    1be6:	61 95       	neg	r22
    1be8:	7f 4f       	sbci	r23, 0xFF	; 255
    1bea:	8f 4f       	sbci	r24, 0xFF	; 255
    1bec:	9f 4f       	sbci	r25, 0xFF	; 255
    1bee:	f0 68       	ori	r31, 0x80	; 128
    1bf0:	3f 2e       	mov	r3, r31
    1bf2:	2a e0       	ldi	r18, 0x0A	; 10
    1bf4:	30 e0       	ldi	r19, 0x00	; 0
    1bf6:	a3 01       	movw	r20, r6
    1bf8:	0e 94 55 11 	call	0x22aa	; 0x22aa <__ultoa_invert>
    1bfc:	88 2e       	mov	r8, r24
    1bfe:	86 18       	sub	r8, r6
    1c00:	45 c0       	rjmp	.+138    	; 0x1c8c <vfprintf+0x2ac>
    1c02:	85 37       	cpi	r24, 0x75	; 117
    1c04:	31 f4       	brne	.+12     	; 0x1c12 <vfprintf+0x232>
    1c06:	23 2d       	mov	r18, r3
    1c08:	2f 7e       	andi	r18, 0xEF	; 239
    1c0a:	b2 2e       	mov	r11, r18
    1c0c:	2a e0       	ldi	r18, 0x0A	; 10
    1c0e:	30 e0       	ldi	r19, 0x00	; 0
    1c10:	25 c0       	rjmp	.+74     	; 0x1c5c <vfprintf+0x27c>
    1c12:	93 2d       	mov	r25, r3
    1c14:	99 7f       	andi	r25, 0xF9	; 249
    1c16:	b9 2e       	mov	r11, r25
    1c18:	8f 36       	cpi	r24, 0x6F	; 111
    1c1a:	c1 f0       	breq	.+48     	; 0x1c4c <vfprintf+0x26c>
    1c1c:	18 f4       	brcc	.+6      	; 0x1c24 <vfprintf+0x244>
    1c1e:	88 35       	cpi	r24, 0x58	; 88
    1c20:	79 f0       	breq	.+30     	; 0x1c40 <vfprintf+0x260>
    1c22:	b5 c0       	rjmp	.+362    	; 0x1d8e <vfprintf+0x3ae>
    1c24:	80 37       	cpi	r24, 0x70	; 112
    1c26:	19 f0       	breq	.+6      	; 0x1c2e <vfprintf+0x24e>
    1c28:	88 37       	cpi	r24, 0x78	; 120
    1c2a:	21 f0       	breq	.+8      	; 0x1c34 <vfprintf+0x254>
    1c2c:	b0 c0       	rjmp	.+352    	; 0x1d8e <vfprintf+0x3ae>
    1c2e:	e9 2f       	mov	r30, r25
    1c30:	e0 61       	ori	r30, 0x10	; 16
    1c32:	be 2e       	mov	r11, r30
    1c34:	b4 fe       	sbrs	r11, 4
    1c36:	0d c0       	rjmp	.+26     	; 0x1c52 <vfprintf+0x272>
    1c38:	fb 2d       	mov	r31, r11
    1c3a:	f4 60       	ori	r31, 0x04	; 4
    1c3c:	bf 2e       	mov	r11, r31
    1c3e:	09 c0       	rjmp	.+18     	; 0x1c52 <vfprintf+0x272>
    1c40:	34 fe       	sbrs	r3, 4
    1c42:	0a c0       	rjmp	.+20     	; 0x1c58 <vfprintf+0x278>
    1c44:	29 2f       	mov	r18, r25
    1c46:	26 60       	ori	r18, 0x06	; 6
    1c48:	b2 2e       	mov	r11, r18
    1c4a:	06 c0       	rjmp	.+12     	; 0x1c58 <vfprintf+0x278>
    1c4c:	28 e0       	ldi	r18, 0x08	; 8
    1c4e:	30 e0       	ldi	r19, 0x00	; 0
    1c50:	05 c0       	rjmp	.+10     	; 0x1c5c <vfprintf+0x27c>
    1c52:	20 e1       	ldi	r18, 0x10	; 16
    1c54:	30 e0       	ldi	r19, 0x00	; 0
    1c56:	02 c0       	rjmp	.+4      	; 0x1c5c <vfprintf+0x27c>
    1c58:	20 e1       	ldi	r18, 0x10	; 16
    1c5a:	32 e0       	ldi	r19, 0x02	; 2
    1c5c:	f8 01       	movw	r30, r16
    1c5e:	b7 fe       	sbrs	r11, 7
    1c60:	07 c0       	rjmp	.+14     	; 0x1c70 <vfprintf+0x290>
    1c62:	60 81       	ld	r22, Z
    1c64:	71 81       	ldd	r23, Z+1	; 0x01
    1c66:	82 81       	ldd	r24, Z+2	; 0x02
    1c68:	93 81       	ldd	r25, Z+3	; 0x03
    1c6a:	0c 5f       	subi	r16, 0xFC	; 252
    1c6c:	1f 4f       	sbci	r17, 0xFF	; 255
    1c6e:	06 c0       	rjmp	.+12     	; 0x1c7c <vfprintf+0x29c>
    1c70:	60 81       	ld	r22, Z
    1c72:	71 81       	ldd	r23, Z+1	; 0x01
    1c74:	80 e0       	ldi	r24, 0x00	; 0
    1c76:	90 e0       	ldi	r25, 0x00	; 0
    1c78:	0e 5f       	subi	r16, 0xFE	; 254
    1c7a:	1f 4f       	sbci	r17, 0xFF	; 255
    1c7c:	a3 01       	movw	r20, r6
    1c7e:	0e 94 55 11 	call	0x22aa	; 0x22aa <__ultoa_invert>
    1c82:	88 2e       	mov	r8, r24
    1c84:	86 18       	sub	r8, r6
    1c86:	fb 2d       	mov	r31, r11
    1c88:	ff 77       	andi	r31, 0x7F	; 127
    1c8a:	3f 2e       	mov	r3, r31
    1c8c:	36 fe       	sbrs	r3, 6
    1c8e:	0d c0       	rjmp	.+26     	; 0x1caa <vfprintf+0x2ca>
    1c90:	23 2d       	mov	r18, r3
    1c92:	2e 7f       	andi	r18, 0xFE	; 254
    1c94:	a2 2e       	mov	r10, r18
    1c96:	89 14       	cp	r8, r9
    1c98:	58 f4       	brcc	.+22     	; 0x1cb0 <vfprintf+0x2d0>
    1c9a:	34 fe       	sbrs	r3, 4
    1c9c:	0b c0       	rjmp	.+22     	; 0x1cb4 <vfprintf+0x2d4>
    1c9e:	32 fc       	sbrc	r3, 2
    1ca0:	09 c0       	rjmp	.+18     	; 0x1cb4 <vfprintf+0x2d4>
    1ca2:	83 2d       	mov	r24, r3
    1ca4:	8e 7e       	andi	r24, 0xEE	; 238
    1ca6:	a8 2e       	mov	r10, r24
    1ca8:	05 c0       	rjmp	.+10     	; 0x1cb4 <vfprintf+0x2d4>
    1caa:	b8 2c       	mov	r11, r8
    1cac:	a3 2c       	mov	r10, r3
    1cae:	03 c0       	rjmp	.+6      	; 0x1cb6 <vfprintf+0x2d6>
    1cb0:	b8 2c       	mov	r11, r8
    1cb2:	01 c0       	rjmp	.+2      	; 0x1cb6 <vfprintf+0x2d6>
    1cb4:	b9 2c       	mov	r11, r9
    1cb6:	a4 fe       	sbrs	r10, 4
    1cb8:	0f c0       	rjmp	.+30     	; 0x1cd8 <vfprintf+0x2f8>
    1cba:	fe 01       	movw	r30, r28
    1cbc:	e8 0d       	add	r30, r8
    1cbe:	f1 1d       	adc	r31, r1
    1cc0:	80 81       	ld	r24, Z
    1cc2:	80 33       	cpi	r24, 0x30	; 48
    1cc4:	21 f4       	brne	.+8      	; 0x1cce <vfprintf+0x2ee>
    1cc6:	9a 2d       	mov	r25, r10
    1cc8:	99 7e       	andi	r25, 0xE9	; 233
    1cca:	a9 2e       	mov	r10, r25
    1ccc:	09 c0       	rjmp	.+18     	; 0x1ce0 <vfprintf+0x300>
    1cce:	a2 fe       	sbrs	r10, 2
    1cd0:	06 c0       	rjmp	.+12     	; 0x1cde <vfprintf+0x2fe>
    1cd2:	b3 94       	inc	r11
    1cd4:	b3 94       	inc	r11
    1cd6:	04 c0       	rjmp	.+8      	; 0x1ce0 <vfprintf+0x300>
    1cd8:	8a 2d       	mov	r24, r10
    1cda:	86 78       	andi	r24, 0x86	; 134
    1cdc:	09 f0       	breq	.+2      	; 0x1ce0 <vfprintf+0x300>
    1cde:	b3 94       	inc	r11
    1ce0:	a3 fc       	sbrc	r10, 3
    1ce2:	11 c0       	rjmp	.+34     	; 0x1d06 <vfprintf+0x326>
    1ce4:	a0 fe       	sbrs	r10, 0
    1ce6:	06 c0       	rjmp	.+12     	; 0x1cf4 <vfprintf+0x314>
    1ce8:	b2 14       	cp	r11, r2
    1cea:	88 f4       	brcc	.+34     	; 0x1d0e <vfprintf+0x32e>
    1cec:	28 0c       	add	r2, r8
    1cee:	92 2c       	mov	r9, r2
    1cf0:	9b 18       	sub	r9, r11
    1cf2:	0e c0       	rjmp	.+28     	; 0x1d10 <vfprintf+0x330>
    1cf4:	b2 14       	cp	r11, r2
    1cf6:	60 f4       	brcc	.+24     	; 0x1d10 <vfprintf+0x330>
    1cf8:	b6 01       	movw	r22, r12
    1cfa:	80 e2       	ldi	r24, 0x20	; 32
    1cfc:	90 e0       	ldi	r25, 0x00	; 0
    1cfe:	0e 94 19 11 	call	0x2232	; 0x2232 <fputc>
    1d02:	b3 94       	inc	r11
    1d04:	f7 cf       	rjmp	.-18     	; 0x1cf4 <vfprintf+0x314>
    1d06:	b2 14       	cp	r11, r2
    1d08:	18 f4       	brcc	.+6      	; 0x1d10 <vfprintf+0x330>
    1d0a:	2b 18       	sub	r2, r11
    1d0c:	02 c0       	rjmp	.+4      	; 0x1d12 <vfprintf+0x332>
    1d0e:	98 2c       	mov	r9, r8
    1d10:	21 2c       	mov	r2, r1
    1d12:	a4 fe       	sbrs	r10, 4
    1d14:	10 c0       	rjmp	.+32     	; 0x1d36 <vfprintf+0x356>
    1d16:	b6 01       	movw	r22, r12
    1d18:	80 e3       	ldi	r24, 0x30	; 48
    1d1a:	90 e0       	ldi	r25, 0x00	; 0
    1d1c:	0e 94 19 11 	call	0x2232	; 0x2232 <fputc>
    1d20:	a2 fe       	sbrs	r10, 2
    1d22:	17 c0       	rjmp	.+46     	; 0x1d52 <vfprintf+0x372>
    1d24:	a1 fc       	sbrc	r10, 1
    1d26:	03 c0       	rjmp	.+6      	; 0x1d2e <vfprintf+0x34e>
    1d28:	88 e7       	ldi	r24, 0x78	; 120
    1d2a:	90 e0       	ldi	r25, 0x00	; 0
    1d2c:	02 c0       	rjmp	.+4      	; 0x1d32 <vfprintf+0x352>
    1d2e:	88 e5       	ldi	r24, 0x58	; 88
    1d30:	90 e0       	ldi	r25, 0x00	; 0
    1d32:	b6 01       	movw	r22, r12
    1d34:	0c c0       	rjmp	.+24     	; 0x1d4e <vfprintf+0x36e>
    1d36:	8a 2d       	mov	r24, r10
    1d38:	86 78       	andi	r24, 0x86	; 134
    1d3a:	59 f0       	breq	.+22     	; 0x1d52 <vfprintf+0x372>
    1d3c:	a1 fe       	sbrs	r10, 1
    1d3e:	02 c0       	rjmp	.+4      	; 0x1d44 <vfprintf+0x364>
    1d40:	8b e2       	ldi	r24, 0x2B	; 43
    1d42:	01 c0       	rjmp	.+2      	; 0x1d46 <vfprintf+0x366>
    1d44:	80 e2       	ldi	r24, 0x20	; 32
    1d46:	a7 fc       	sbrc	r10, 7
    1d48:	8d e2       	ldi	r24, 0x2D	; 45
    1d4a:	b6 01       	movw	r22, r12
    1d4c:	90 e0       	ldi	r25, 0x00	; 0
    1d4e:	0e 94 19 11 	call	0x2232	; 0x2232 <fputc>
    1d52:	89 14       	cp	r8, r9
    1d54:	38 f4       	brcc	.+14     	; 0x1d64 <vfprintf+0x384>
    1d56:	b6 01       	movw	r22, r12
    1d58:	80 e3       	ldi	r24, 0x30	; 48
    1d5a:	90 e0       	ldi	r25, 0x00	; 0
    1d5c:	0e 94 19 11 	call	0x2232	; 0x2232 <fputc>
    1d60:	9a 94       	dec	r9
    1d62:	f7 cf       	rjmp	.-18     	; 0x1d52 <vfprintf+0x372>
    1d64:	8a 94       	dec	r8
    1d66:	f3 01       	movw	r30, r6
    1d68:	e8 0d       	add	r30, r8
    1d6a:	f1 1d       	adc	r31, r1
    1d6c:	80 81       	ld	r24, Z
    1d6e:	b6 01       	movw	r22, r12
    1d70:	90 e0       	ldi	r25, 0x00	; 0
    1d72:	0e 94 19 11 	call	0x2232	; 0x2232 <fputc>
    1d76:	81 10       	cpse	r8, r1
    1d78:	f5 cf       	rjmp	.-22     	; 0x1d64 <vfprintf+0x384>
    1d7a:	22 20       	and	r2, r2
    1d7c:	09 f4       	brne	.+2      	; 0x1d80 <vfprintf+0x3a0>
    1d7e:	42 ce       	rjmp	.-892    	; 0x1a04 <vfprintf+0x24>
    1d80:	b6 01       	movw	r22, r12
    1d82:	80 e2       	ldi	r24, 0x20	; 32
    1d84:	90 e0       	ldi	r25, 0x00	; 0
    1d86:	0e 94 19 11 	call	0x2232	; 0x2232 <fputc>
    1d8a:	2a 94       	dec	r2
    1d8c:	f6 cf       	rjmp	.-20     	; 0x1d7a <vfprintf+0x39a>
    1d8e:	f6 01       	movw	r30, r12
    1d90:	86 81       	ldd	r24, Z+6	; 0x06
    1d92:	97 81       	ldd	r25, Z+7	; 0x07
    1d94:	02 c0       	rjmp	.+4      	; 0x1d9a <vfprintf+0x3ba>
    1d96:	8f ef       	ldi	r24, 0xFF	; 255
    1d98:	9f ef       	ldi	r25, 0xFF	; 255
    1d9a:	2b 96       	adiw	r28, 0x0b	; 11
    1d9c:	e2 e1       	ldi	r30, 0x12	; 18
    1d9e:	0c 94 cf 11 	jmp	0x239e	; 0x239e <__epilogue_restores__>

00001da2 <dtoa_prf>:
    1da2:	a9 e0       	ldi	r26, 0x09	; 9
    1da4:	b0 e0       	ldi	r27, 0x00	; 0
    1da6:	e7 ed       	ldi	r30, 0xD7	; 215
    1da8:	fe e0       	ldi	r31, 0x0E	; 14
    1daa:	0c 94 b9 11 	jmp	0x2372	; 0x2372 <__prologue_saves__+0xc>
    1dae:	6a 01       	movw	r12, r20
    1db0:	12 2f       	mov	r17, r18
    1db2:	b0 2e       	mov	r11, r16
    1db4:	2b e3       	ldi	r18, 0x3B	; 59
    1db6:	20 17       	cp	r18, r16
    1db8:	20 f0       	brcs	.+8      	; 0x1dc2 <dtoa_prf+0x20>
    1dba:	ff 24       	eor	r15, r15
    1dbc:	f3 94       	inc	r15
    1dbe:	f0 0e       	add	r15, r16
    1dc0:	02 c0       	rjmp	.+4      	; 0x1dc6 <dtoa_prf+0x24>
    1dc2:	2c e3       	ldi	r18, 0x3C	; 60
    1dc4:	f2 2e       	mov	r15, r18
    1dc6:	0f 2d       	mov	r16, r15
    1dc8:	27 e0       	ldi	r18, 0x07	; 7
    1dca:	ae 01       	movw	r20, r28
    1dcc:	4f 5f       	subi	r20, 0xFF	; 255
    1dce:	5f 4f       	sbci	r21, 0xFF	; 255
    1dd0:	0e 94 2b 10 	call	0x2056	; 0x2056 <__ftoa_engine>
    1dd4:	bc 01       	movw	r22, r24
    1dd6:	49 81       	ldd	r20, Y+1	; 0x01
    1dd8:	84 2f       	mov	r24, r20
    1dda:	89 70       	andi	r24, 0x09	; 9
    1ddc:	81 30       	cpi	r24, 0x01	; 1
    1dde:	31 f0       	breq	.+12     	; 0x1dec <dtoa_prf+0x4a>
    1de0:	e1 fc       	sbrc	r14, 1
    1de2:	06 c0       	rjmp	.+12     	; 0x1df0 <dtoa_prf+0x4e>
    1de4:	e0 fe       	sbrs	r14, 0
    1de6:	06 c0       	rjmp	.+12     	; 0x1df4 <dtoa_prf+0x52>
    1de8:	90 e2       	ldi	r25, 0x20	; 32
    1dea:	05 c0       	rjmp	.+10     	; 0x1df6 <dtoa_prf+0x54>
    1dec:	9d e2       	ldi	r25, 0x2D	; 45
    1dee:	03 c0       	rjmp	.+6      	; 0x1df6 <dtoa_prf+0x54>
    1df0:	9b e2       	ldi	r25, 0x2B	; 43
    1df2:	01 c0       	rjmp	.+2      	; 0x1df6 <dtoa_prf+0x54>
    1df4:	90 e0       	ldi	r25, 0x00	; 0
    1df6:	5e 2d       	mov	r21, r14
    1df8:	50 71       	andi	r21, 0x10	; 16
    1dfa:	43 ff       	sbrs	r20, 3
    1dfc:	3c c0       	rjmp	.+120    	; 0x1e76 <dtoa_prf+0xd4>
    1dfe:	91 11       	cpse	r25, r1
    1e00:	02 c0       	rjmp	.+4      	; 0x1e06 <dtoa_prf+0x64>
    1e02:	83 e0       	ldi	r24, 0x03	; 3
    1e04:	01 c0       	rjmp	.+2      	; 0x1e08 <dtoa_prf+0x66>
    1e06:	84 e0       	ldi	r24, 0x04	; 4
    1e08:	81 17       	cp	r24, r17
    1e0a:	18 f4       	brcc	.+6      	; 0x1e12 <dtoa_prf+0x70>
    1e0c:	21 2f       	mov	r18, r17
    1e0e:	28 1b       	sub	r18, r24
    1e10:	01 c0       	rjmp	.+2      	; 0x1e14 <dtoa_prf+0x72>
    1e12:	20 e0       	ldi	r18, 0x00	; 0
    1e14:	51 11       	cpse	r21, r1
    1e16:	0b c0       	rjmp	.+22     	; 0x1e2e <dtoa_prf+0x8c>
    1e18:	f6 01       	movw	r30, r12
    1e1a:	82 2f       	mov	r24, r18
    1e1c:	30 e2       	ldi	r19, 0x20	; 32
    1e1e:	88 23       	and	r24, r24
    1e20:	19 f0       	breq	.+6      	; 0x1e28 <dtoa_prf+0x86>
    1e22:	31 93       	st	Z+, r19
    1e24:	81 50       	subi	r24, 0x01	; 1
    1e26:	fb cf       	rjmp	.-10     	; 0x1e1e <dtoa_prf+0x7c>
    1e28:	c2 0e       	add	r12, r18
    1e2a:	d1 1c       	adc	r13, r1
    1e2c:	20 e0       	ldi	r18, 0x00	; 0
    1e2e:	99 23       	and	r25, r25
    1e30:	29 f0       	breq	.+10     	; 0x1e3c <dtoa_prf+0x9a>
    1e32:	d6 01       	movw	r26, r12
    1e34:	9c 93       	st	X, r25
    1e36:	f6 01       	movw	r30, r12
    1e38:	31 96       	adiw	r30, 0x01	; 1
    1e3a:	6f 01       	movw	r12, r30
    1e3c:	c6 01       	movw	r24, r12
    1e3e:	03 96       	adiw	r24, 0x03	; 3
    1e40:	e2 fe       	sbrs	r14, 2
    1e42:	0a c0       	rjmp	.+20     	; 0x1e58 <dtoa_prf+0xb6>
    1e44:	3e e4       	ldi	r19, 0x4E	; 78
    1e46:	d6 01       	movw	r26, r12
    1e48:	3c 93       	st	X, r19
    1e4a:	41 e4       	ldi	r20, 0x41	; 65
    1e4c:	11 96       	adiw	r26, 0x01	; 1
    1e4e:	4c 93       	st	X, r20
    1e50:	11 97       	sbiw	r26, 0x01	; 1
    1e52:	12 96       	adiw	r26, 0x02	; 2
    1e54:	3c 93       	st	X, r19
    1e56:	06 c0       	rjmp	.+12     	; 0x1e64 <dtoa_prf+0xc2>
    1e58:	3e e6       	ldi	r19, 0x6E	; 110
    1e5a:	f6 01       	movw	r30, r12
    1e5c:	30 83       	st	Z, r19
    1e5e:	41 e6       	ldi	r20, 0x61	; 97
    1e60:	41 83       	std	Z+1, r20	; 0x01
    1e62:	32 83       	std	Z+2, r19	; 0x02
    1e64:	fc 01       	movw	r30, r24
    1e66:	32 2f       	mov	r19, r18
    1e68:	40 e2       	ldi	r20, 0x20	; 32
    1e6a:	33 23       	and	r19, r19
    1e6c:	09 f4       	brne	.+2      	; 0x1e70 <dtoa_prf+0xce>
    1e6e:	42 c0       	rjmp	.+132    	; 0x1ef4 <dtoa_prf+0x152>
    1e70:	41 93       	st	Z+, r20
    1e72:	31 50       	subi	r19, 0x01	; 1
    1e74:	fa cf       	rjmp	.-12     	; 0x1e6a <dtoa_prf+0xc8>
    1e76:	42 ff       	sbrs	r20, 2
    1e78:	44 c0       	rjmp	.+136    	; 0x1f02 <dtoa_prf+0x160>
    1e7a:	91 11       	cpse	r25, r1
    1e7c:	02 c0       	rjmp	.+4      	; 0x1e82 <dtoa_prf+0xe0>
    1e7e:	83 e0       	ldi	r24, 0x03	; 3
    1e80:	01 c0       	rjmp	.+2      	; 0x1e84 <dtoa_prf+0xe2>
    1e82:	84 e0       	ldi	r24, 0x04	; 4
    1e84:	81 17       	cp	r24, r17
    1e86:	18 f4       	brcc	.+6      	; 0x1e8e <dtoa_prf+0xec>
    1e88:	21 2f       	mov	r18, r17
    1e8a:	28 1b       	sub	r18, r24
    1e8c:	01 c0       	rjmp	.+2      	; 0x1e90 <dtoa_prf+0xee>
    1e8e:	20 e0       	ldi	r18, 0x00	; 0
    1e90:	51 11       	cpse	r21, r1
    1e92:	0b c0       	rjmp	.+22     	; 0x1eaa <dtoa_prf+0x108>
    1e94:	f6 01       	movw	r30, r12
    1e96:	82 2f       	mov	r24, r18
    1e98:	30 e2       	ldi	r19, 0x20	; 32
    1e9a:	88 23       	and	r24, r24
    1e9c:	19 f0       	breq	.+6      	; 0x1ea4 <dtoa_prf+0x102>
    1e9e:	31 93       	st	Z+, r19
    1ea0:	81 50       	subi	r24, 0x01	; 1
    1ea2:	fb cf       	rjmp	.-10     	; 0x1e9a <dtoa_prf+0xf8>
    1ea4:	c2 0e       	add	r12, r18
    1ea6:	d1 1c       	adc	r13, r1
    1ea8:	20 e0       	ldi	r18, 0x00	; 0
    1eaa:	99 23       	and	r25, r25
    1eac:	29 f0       	breq	.+10     	; 0x1eb8 <dtoa_prf+0x116>
    1eae:	d6 01       	movw	r26, r12
    1eb0:	9c 93       	st	X, r25
    1eb2:	f6 01       	movw	r30, r12
    1eb4:	31 96       	adiw	r30, 0x01	; 1
    1eb6:	6f 01       	movw	r12, r30
    1eb8:	c6 01       	movw	r24, r12
    1eba:	03 96       	adiw	r24, 0x03	; 3
    1ebc:	e2 fe       	sbrs	r14, 2
    1ebe:	0b c0       	rjmp	.+22     	; 0x1ed6 <dtoa_prf+0x134>
    1ec0:	39 e4       	ldi	r19, 0x49	; 73
    1ec2:	d6 01       	movw	r26, r12
    1ec4:	3c 93       	st	X, r19
    1ec6:	3e e4       	ldi	r19, 0x4E	; 78
    1ec8:	11 96       	adiw	r26, 0x01	; 1
    1eca:	3c 93       	st	X, r19
    1ecc:	11 97       	sbiw	r26, 0x01	; 1
    1ece:	36 e4       	ldi	r19, 0x46	; 70
    1ed0:	12 96       	adiw	r26, 0x02	; 2
    1ed2:	3c 93       	st	X, r19
    1ed4:	07 c0       	rjmp	.+14     	; 0x1ee4 <dtoa_prf+0x142>
    1ed6:	39 e6       	ldi	r19, 0x69	; 105
    1ed8:	f6 01       	movw	r30, r12
    1eda:	30 83       	st	Z, r19
    1edc:	3e e6       	ldi	r19, 0x6E	; 110
    1ede:	31 83       	std	Z+1, r19	; 0x01
    1ee0:	36 e6       	ldi	r19, 0x66	; 102
    1ee2:	32 83       	std	Z+2, r19	; 0x02
    1ee4:	fc 01       	movw	r30, r24
    1ee6:	32 2f       	mov	r19, r18
    1ee8:	40 e2       	ldi	r20, 0x20	; 32
    1eea:	33 23       	and	r19, r19
    1eec:	19 f0       	breq	.+6      	; 0x1ef4 <dtoa_prf+0x152>
    1eee:	41 93       	st	Z+, r20
    1ef0:	31 50       	subi	r19, 0x01	; 1
    1ef2:	fb cf       	rjmp	.-10     	; 0x1eea <dtoa_prf+0x148>
    1ef4:	fc 01       	movw	r30, r24
    1ef6:	e2 0f       	add	r30, r18
    1ef8:	f1 1d       	adc	r31, r1
    1efa:	10 82       	st	Z, r1
    1efc:	8e ef       	ldi	r24, 0xFE	; 254
    1efe:	9f ef       	ldi	r25, 0xFF	; 255
    1f00:	a6 c0       	rjmp	.+332    	; 0x204e <dtoa_prf+0x2ac>
    1f02:	21 e0       	ldi	r18, 0x01	; 1
    1f04:	30 e0       	ldi	r19, 0x00	; 0
    1f06:	91 11       	cpse	r25, r1
    1f08:	02 c0       	rjmp	.+4      	; 0x1f0e <dtoa_prf+0x16c>
    1f0a:	20 e0       	ldi	r18, 0x00	; 0
    1f0c:	30 e0       	ldi	r19, 0x00	; 0
    1f0e:	16 16       	cp	r1, r22
    1f10:	17 06       	cpc	r1, r23
    1f12:	1c f4       	brge	.+6      	; 0x1f1a <dtoa_prf+0x178>
    1f14:	fb 01       	movw	r30, r22
    1f16:	31 96       	adiw	r30, 0x01	; 1
    1f18:	02 c0       	rjmp	.+4      	; 0x1f1e <dtoa_prf+0x17c>
    1f1a:	e1 e0       	ldi	r30, 0x01	; 1
    1f1c:	f0 e0       	ldi	r31, 0x00	; 0
    1f1e:	2e 0f       	add	r18, r30
    1f20:	3f 1f       	adc	r19, r31
    1f22:	bb 20       	and	r11, r11
    1f24:	21 f0       	breq	.+8      	; 0x1f2e <dtoa_prf+0x18c>
    1f26:	eb 2d       	mov	r30, r11
    1f28:	f0 e0       	ldi	r31, 0x00	; 0
    1f2a:	31 96       	adiw	r30, 0x01	; 1
    1f2c:	02 c0       	rjmp	.+4      	; 0x1f32 <dtoa_prf+0x190>
    1f2e:	e0 e0       	ldi	r30, 0x00	; 0
    1f30:	f0 e0       	ldi	r31, 0x00	; 0
    1f32:	2e 0f       	add	r18, r30
    1f34:	3f 1f       	adc	r19, r31
    1f36:	e1 2f       	mov	r30, r17
    1f38:	f0 e0       	ldi	r31, 0x00	; 0
    1f3a:	2e 17       	cp	r18, r30
    1f3c:	3f 07       	cpc	r19, r31
    1f3e:	1c f4       	brge	.+6      	; 0x1f46 <dtoa_prf+0x1a4>
    1f40:	12 1b       	sub	r17, r18
    1f42:	21 2f       	mov	r18, r17
    1f44:	01 c0       	rjmp	.+2      	; 0x1f48 <dtoa_prf+0x1a6>
    1f46:	20 e0       	ldi	r18, 0x00	; 0
    1f48:	8e 2d       	mov	r24, r14
    1f4a:	88 71       	andi	r24, 0x18	; 24
    1f4c:	59 f4       	brne	.+22     	; 0x1f64 <dtoa_prf+0x1c2>
    1f4e:	f6 01       	movw	r30, r12
    1f50:	82 2f       	mov	r24, r18
    1f52:	30 e2       	ldi	r19, 0x20	; 32
    1f54:	88 23       	and	r24, r24
    1f56:	19 f0       	breq	.+6      	; 0x1f5e <dtoa_prf+0x1bc>
    1f58:	31 93       	st	Z+, r19
    1f5a:	81 50       	subi	r24, 0x01	; 1
    1f5c:	fb cf       	rjmp	.-10     	; 0x1f54 <dtoa_prf+0x1b2>
    1f5e:	c2 0e       	add	r12, r18
    1f60:	d1 1c       	adc	r13, r1
    1f62:	20 e0       	ldi	r18, 0x00	; 0
    1f64:	99 23       	and	r25, r25
    1f66:	29 f0       	breq	.+10     	; 0x1f72 <dtoa_prf+0x1d0>
    1f68:	d6 01       	movw	r26, r12
    1f6a:	9c 93       	st	X, r25
    1f6c:	f6 01       	movw	r30, r12
    1f6e:	31 96       	adiw	r30, 0x01	; 1
    1f70:	6f 01       	movw	r12, r30
    1f72:	51 11       	cpse	r21, r1
    1f74:	0b c0       	rjmp	.+22     	; 0x1f8c <dtoa_prf+0x1ea>
    1f76:	f6 01       	movw	r30, r12
    1f78:	82 2f       	mov	r24, r18
    1f7a:	90 e3       	ldi	r25, 0x30	; 48
    1f7c:	88 23       	and	r24, r24
    1f7e:	19 f0       	breq	.+6      	; 0x1f86 <dtoa_prf+0x1e4>
    1f80:	91 93       	st	Z+, r25
    1f82:	81 50       	subi	r24, 0x01	; 1
    1f84:	fb cf       	rjmp	.-10     	; 0x1f7c <dtoa_prf+0x1da>
    1f86:	c2 0e       	add	r12, r18
    1f88:	d1 1c       	adc	r13, r1
    1f8a:	20 e0       	ldi	r18, 0x00	; 0
    1f8c:	0f 2d       	mov	r16, r15
    1f8e:	06 0f       	add	r16, r22
    1f90:	9a 81       	ldd	r25, Y+2	; 0x02
    1f92:	34 2f       	mov	r19, r20
    1f94:	30 71       	andi	r19, 0x10	; 16
    1f96:	44 ff       	sbrs	r20, 4
    1f98:	03 c0       	rjmp	.+6      	; 0x1fa0 <dtoa_prf+0x1fe>
    1f9a:	91 33       	cpi	r25, 0x31	; 49
    1f9c:	09 f4       	brne	.+2      	; 0x1fa0 <dtoa_prf+0x1fe>
    1f9e:	01 50       	subi	r16, 0x01	; 1
    1fa0:	10 16       	cp	r1, r16
    1fa2:	24 f4       	brge	.+8      	; 0x1fac <dtoa_prf+0x20a>
    1fa4:	09 30       	cpi	r16, 0x09	; 9
    1fa6:	18 f0       	brcs	.+6      	; 0x1fae <dtoa_prf+0x20c>
    1fa8:	08 e0       	ldi	r16, 0x08	; 8
    1faa:	01 c0       	rjmp	.+2      	; 0x1fae <dtoa_prf+0x20c>
    1fac:	01 e0       	ldi	r16, 0x01	; 1
    1fae:	ab 01       	movw	r20, r22
    1fb0:	77 ff       	sbrs	r23, 7
    1fb2:	02 c0       	rjmp	.+4      	; 0x1fb8 <dtoa_prf+0x216>
    1fb4:	40 e0       	ldi	r20, 0x00	; 0
    1fb6:	50 e0       	ldi	r21, 0x00	; 0
    1fb8:	fb 01       	movw	r30, r22
    1fba:	e4 1b       	sub	r30, r20
    1fbc:	f5 0b       	sbc	r31, r21
    1fbe:	a1 e0       	ldi	r26, 0x01	; 1
    1fc0:	b0 e0       	ldi	r27, 0x00	; 0
    1fc2:	ac 0f       	add	r26, r28
    1fc4:	bd 1f       	adc	r27, r29
    1fc6:	ea 0f       	add	r30, r26
    1fc8:	fb 1f       	adc	r31, r27
    1fca:	8e e2       	ldi	r24, 0x2E	; 46
    1fcc:	a8 2e       	mov	r10, r24
    1fce:	4b 01       	movw	r8, r22
    1fd0:	80 1a       	sub	r8, r16
    1fd2:	91 08       	sbc	r9, r1
    1fd4:	0b 2d       	mov	r16, r11
    1fd6:	10 e0       	ldi	r17, 0x00	; 0
    1fd8:	11 95       	neg	r17
    1fda:	01 95       	neg	r16
    1fdc:	11 09       	sbc	r17, r1
    1fde:	4f 3f       	cpi	r20, 0xFF	; 255
    1fe0:	bf ef       	ldi	r27, 0xFF	; 255
    1fe2:	5b 07       	cpc	r21, r27
    1fe4:	21 f4       	brne	.+8      	; 0x1fee <dtoa_prf+0x24c>
    1fe6:	d6 01       	movw	r26, r12
    1fe8:	ac 92       	st	X, r10
    1fea:	11 96       	adiw	r26, 0x01	; 1
    1fec:	6d 01       	movw	r12, r26
    1fee:	64 17       	cp	r22, r20
    1ff0:	75 07       	cpc	r23, r21
    1ff2:	2c f0       	brlt	.+10     	; 0x1ffe <dtoa_prf+0x25c>
    1ff4:	84 16       	cp	r8, r20
    1ff6:	95 06       	cpc	r9, r21
    1ff8:	14 f4       	brge	.+4      	; 0x1ffe <dtoa_prf+0x25c>
    1ffa:	81 81       	ldd	r24, Z+1	; 0x01
    1ffc:	01 c0       	rjmp	.+2      	; 0x2000 <dtoa_prf+0x25e>
    1ffe:	80 e3       	ldi	r24, 0x30	; 48
    2000:	41 50       	subi	r20, 0x01	; 1
    2002:	51 09       	sbc	r21, r1
    2004:	31 96       	adiw	r30, 0x01	; 1
    2006:	d6 01       	movw	r26, r12
    2008:	11 96       	adiw	r26, 0x01	; 1
    200a:	7d 01       	movw	r14, r26
    200c:	40 17       	cp	r20, r16
    200e:	51 07       	cpc	r21, r17
    2010:	24 f0       	brlt	.+8      	; 0x201a <dtoa_prf+0x278>
    2012:	d6 01       	movw	r26, r12
    2014:	8c 93       	st	X, r24
    2016:	67 01       	movw	r12, r14
    2018:	e2 cf       	rjmp	.-60     	; 0x1fde <dtoa_prf+0x23c>
    201a:	64 17       	cp	r22, r20
    201c:	75 07       	cpc	r23, r21
    201e:	39 f4       	brne	.+14     	; 0x202e <dtoa_prf+0x28c>
    2020:	96 33       	cpi	r25, 0x36	; 54
    2022:	20 f4       	brcc	.+8      	; 0x202c <dtoa_prf+0x28a>
    2024:	95 33       	cpi	r25, 0x35	; 53
    2026:	19 f4       	brne	.+6      	; 0x202e <dtoa_prf+0x28c>
    2028:	31 11       	cpse	r19, r1
    202a:	01 c0       	rjmp	.+2      	; 0x202e <dtoa_prf+0x28c>
    202c:	81 e3       	ldi	r24, 0x31	; 49
    202e:	f6 01       	movw	r30, r12
    2030:	80 83       	st	Z, r24
    2032:	f7 01       	movw	r30, r14
    2034:	82 2f       	mov	r24, r18
    2036:	90 e2       	ldi	r25, 0x20	; 32
    2038:	88 23       	and	r24, r24
    203a:	19 f0       	breq	.+6      	; 0x2042 <dtoa_prf+0x2a0>
    203c:	91 93       	st	Z+, r25
    203e:	81 50       	subi	r24, 0x01	; 1
    2040:	fb cf       	rjmp	.-10     	; 0x2038 <dtoa_prf+0x296>
    2042:	f7 01       	movw	r30, r14
    2044:	e2 0f       	add	r30, r18
    2046:	f1 1d       	adc	r31, r1
    2048:	10 82       	st	Z, r1
    204a:	80 e0       	ldi	r24, 0x00	; 0
    204c:	90 e0       	ldi	r25, 0x00	; 0
    204e:	29 96       	adiw	r28, 0x09	; 9
    2050:	ec e0       	ldi	r30, 0x0C	; 12
    2052:	0c 94 d5 11 	jmp	0x23aa	; 0x23aa <__epilogue_restores__+0xc>

00002056 <__ftoa_engine>:
    2056:	28 30       	cpi	r18, 0x08	; 8
    2058:	08 f0       	brcs	.+2      	; 0x205c <__ftoa_engine+0x6>
    205a:	27 e0       	ldi	r18, 0x07	; 7
    205c:	33 27       	eor	r19, r19
    205e:	da 01       	movw	r26, r20
    2060:	99 0f       	add	r25, r25
    2062:	31 1d       	adc	r19, r1
    2064:	87 fd       	sbrc	r24, 7
    2066:	91 60       	ori	r25, 0x01	; 1
    2068:	00 96       	adiw	r24, 0x00	; 0
    206a:	61 05       	cpc	r22, r1
    206c:	71 05       	cpc	r23, r1
    206e:	39 f4       	brne	.+14     	; 0x207e <__ftoa_engine+0x28>
    2070:	32 60       	ori	r19, 0x02	; 2
    2072:	2e 5f       	subi	r18, 0xFE	; 254
    2074:	3d 93       	st	X+, r19
    2076:	30 e3       	ldi	r19, 0x30	; 48
    2078:	2a 95       	dec	r18
    207a:	e1 f7       	brne	.-8      	; 0x2074 <__ftoa_engine+0x1e>
    207c:	08 95       	ret
    207e:	9f 3f       	cpi	r25, 0xFF	; 255
    2080:	30 f0       	brcs	.+12     	; 0x208e <__ftoa_engine+0x38>
    2082:	80 38       	cpi	r24, 0x80	; 128
    2084:	71 05       	cpc	r23, r1
    2086:	61 05       	cpc	r22, r1
    2088:	09 f0       	breq	.+2      	; 0x208c <__ftoa_engine+0x36>
    208a:	3c 5f       	subi	r19, 0xFC	; 252
    208c:	3c 5f       	subi	r19, 0xFC	; 252
    208e:	3d 93       	st	X+, r19
    2090:	91 30       	cpi	r25, 0x01	; 1
    2092:	08 f0       	brcs	.+2      	; 0x2096 <__ftoa_engine+0x40>
    2094:	80 68       	ori	r24, 0x80	; 128
    2096:	91 1d       	adc	r25, r1
    2098:	df 93       	push	r29
    209a:	cf 93       	push	r28
    209c:	1f 93       	push	r17
    209e:	0f 93       	push	r16
    20a0:	ff 92       	push	r15
    20a2:	ef 92       	push	r14
    20a4:	19 2f       	mov	r17, r25
    20a6:	98 7f       	andi	r25, 0xF8	; 248
    20a8:	96 95       	lsr	r25
    20aa:	e9 2f       	mov	r30, r25
    20ac:	96 95       	lsr	r25
    20ae:	96 95       	lsr	r25
    20b0:	e9 0f       	add	r30, r25
    20b2:	ff 27       	eor	r31, r31
    20b4:	ec 52       	subi	r30, 0x2C	; 44
    20b6:	ff 4f       	sbci	r31, 0xFF	; 255
    20b8:	99 27       	eor	r25, r25
    20ba:	33 27       	eor	r19, r19
    20bc:	ee 24       	eor	r14, r14
    20be:	ff 24       	eor	r15, r15
    20c0:	a7 01       	movw	r20, r14
    20c2:	e7 01       	movw	r28, r14
    20c4:	05 90       	lpm	r0, Z+
    20c6:	08 94       	sec
    20c8:	07 94       	ror	r0
    20ca:	28 f4       	brcc	.+10     	; 0x20d6 <__ftoa_engine+0x80>
    20cc:	36 0f       	add	r19, r22
    20ce:	e7 1e       	adc	r14, r23
    20d0:	f8 1e       	adc	r15, r24
    20d2:	49 1f       	adc	r20, r25
    20d4:	51 1d       	adc	r21, r1
    20d6:	66 0f       	add	r22, r22
    20d8:	77 1f       	adc	r23, r23
    20da:	88 1f       	adc	r24, r24
    20dc:	99 1f       	adc	r25, r25
    20de:	06 94       	lsr	r0
    20e0:	a1 f7       	brne	.-24     	; 0x20ca <__ftoa_engine+0x74>
    20e2:	05 90       	lpm	r0, Z+
    20e4:	07 94       	ror	r0
    20e6:	28 f4       	brcc	.+10     	; 0x20f2 <__ftoa_engine+0x9c>
    20e8:	e7 0e       	add	r14, r23
    20ea:	f8 1e       	adc	r15, r24
    20ec:	49 1f       	adc	r20, r25
    20ee:	56 1f       	adc	r21, r22
    20f0:	c1 1d       	adc	r28, r1
    20f2:	77 0f       	add	r23, r23
    20f4:	88 1f       	adc	r24, r24
    20f6:	99 1f       	adc	r25, r25
    20f8:	66 1f       	adc	r22, r22
    20fa:	06 94       	lsr	r0
    20fc:	a1 f7       	brne	.-24     	; 0x20e6 <__ftoa_engine+0x90>
    20fe:	05 90       	lpm	r0, Z+
    2100:	07 94       	ror	r0
    2102:	28 f4       	brcc	.+10     	; 0x210e <__ftoa_engine+0xb8>
    2104:	f8 0e       	add	r15, r24
    2106:	49 1f       	adc	r20, r25
    2108:	56 1f       	adc	r21, r22
    210a:	c7 1f       	adc	r28, r23
    210c:	d1 1d       	adc	r29, r1
    210e:	88 0f       	add	r24, r24
    2110:	99 1f       	adc	r25, r25
    2112:	66 1f       	adc	r22, r22
    2114:	77 1f       	adc	r23, r23
    2116:	06 94       	lsr	r0
    2118:	a1 f7       	brne	.-24     	; 0x2102 <__ftoa_engine+0xac>
    211a:	05 90       	lpm	r0, Z+
    211c:	07 94       	ror	r0
    211e:	20 f4       	brcc	.+8      	; 0x2128 <__ftoa_engine+0xd2>
    2120:	49 0f       	add	r20, r25
    2122:	56 1f       	adc	r21, r22
    2124:	c7 1f       	adc	r28, r23
    2126:	d8 1f       	adc	r29, r24
    2128:	99 0f       	add	r25, r25
    212a:	66 1f       	adc	r22, r22
    212c:	77 1f       	adc	r23, r23
    212e:	88 1f       	adc	r24, r24
    2130:	06 94       	lsr	r0
    2132:	a9 f7       	brne	.-22     	; 0x211e <__ftoa_engine+0xc8>
    2134:	84 91       	lpm	r24, Z
    2136:	10 95       	com	r17
    2138:	17 70       	andi	r17, 0x07	; 7
    213a:	41 f0       	breq	.+16     	; 0x214c <__ftoa_engine+0xf6>
    213c:	d6 95       	lsr	r29
    213e:	c7 95       	ror	r28
    2140:	57 95       	ror	r21
    2142:	47 95       	ror	r20
    2144:	f7 94       	ror	r15
    2146:	e7 94       	ror	r14
    2148:	1a 95       	dec	r17
    214a:	c1 f7       	brne	.-16     	; 0x213c <__ftoa_engine+0xe6>
    214c:	ea e7       	ldi	r30, 0x7A	; 122
    214e:	f0 e0       	ldi	r31, 0x00	; 0
    2150:	68 94       	set
    2152:	15 90       	lpm	r1, Z+
    2154:	15 91       	lpm	r17, Z+
    2156:	35 91       	lpm	r19, Z+
    2158:	65 91       	lpm	r22, Z+
    215a:	95 91       	lpm	r25, Z+
    215c:	05 90       	lpm	r0, Z+
    215e:	7f e2       	ldi	r23, 0x2F	; 47
    2160:	73 95       	inc	r23
    2162:	e1 18       	sub	r14, r1
    2164:	f1 0a       	sbc	r15, r17
    2166:	43 0b       	sbc	r20, r19
    2168:	56 0b       	sbc	r21, r22
    216a:	c9 0b       	sbc	r28, r25
    216c:	d0 09       	sbc	r29, r0
    216e:	c0 f7       	brcc	.-16     	; 0x2160 <__ftoa_engine+0x10a>
    2170:	e1 0c       	add	r14, r1
    2172:	f1 1e       	adc	r15, r17
    2174:	43 1f       	adc	r20, r19
    2176:	56 1f       	adc	r21, r22
    2178:	c9 1f       	adc	r28, r25
    217a:	d0 1d       	adc	r29, r0
    217c:	7e f4       	brtc	.+30     	; 0x219c <__ftoa_engine+0x146>
    217e:	70 33       	cpi	r23, 0x30	; 48
    2180:	11 f4       	brne	.+4      	; 0x2186 <__ftoa_engine+0x130>
    2182:	8a 95       	dec	r24
    2184:	e6 cf       	rjmp	.-52     	; 0x2152 <__ftoa_engine+0xfc>
    2186:	e8 94       	clt
    2188:	01 50       	subi	r16, 0x01	; 1
    218a:	30 f0       	brcs	.+12     	; 0x2198 <__ftoa_engine+0x142>
    218c:	08 0f       	add	r16, r24
    218e:	0a f4       	brpl	.+2      	; 0x2192 <__ftoa_engine+0x13c>
    2190:	00 27       	eor	r16, r16
    2192:	02 17       	cp	r16, r18
    2194:	08 f4       	brcc	.+2      	; 0x2198 <__ftoa_engine+0x142>
    2196:	20 2f       	mov	r18, r16
    2198:	23 95       	inc	r18
    219a:	02 2f       	mov	r16, r18
    219c:	7a 33       	cpi	r23, 0x3A	; 58
    219e:	28 f0       	brcs	.+10     	; 0x21aa <__ftoa_engine+0x154>
    21a0:	79 e3       	ldi	r23, 0x39	; 57
    21a2:	7d 93       	st	X+, r23
    21a4:	2a 95       	dec	r18
    21a6:	e9 f7       	brne	.-6      	; 0x21a2 <__ftoa_engine+0x14c>
    21a8:	10 c0       	rjmp	.+32     	; 0x21ca <__ftoa_engine+0x174>
    21aa:	7d 93       	st	X+, r23
    21ac:	2a 95       	dec	r18
    21ae:	89 f6       	brne	.-94     	; 0x2152 <__ftoa_engine+0xfc>
    21b0:	06 94       	lsr	r0
    21b2:	97 95       	ror	r25
    21b4:	67 95       	ror	r22
    21b6:	37 95       	ror	r19
    21b8:	17 95       	ror	r17
    21ba:	17 94       	ror	r1
    21bc:	e1 18       	sub	r14, r1
    21be:	f1 0a       	sbc	r15, r17
    21c0:	43 0b       	sbc	r20, r19
    21c2:	56 0b       	sbc	r21, r22
    21c4:	c9 0b       	sbc	r28, r25
    21c6:	d0 09       	sbc	r29, r0
    21c8:	98 f0       	brcs	.+38     	; 0x21f0 <__ftoa_engine+0x19a>
    21ca:	23 95       	inc	r18
    21cc:	7e 91       	ld	r23, -X
    21ce:	73 95       	inc	r23
    21d0:	7a 33       	cpi	r23, 0x3A	; 58
    21d2:	08 f0       	brcs	.+2      	; 0x21d6 <__ftoa_engine+0x180>
    21d4:	70 e3       	ldi	r23, 0x30	; 48
    21d6:	7c 93       	st	X, r23
    21d8:	20 13       	cpse	r18, r16
    21da:	b8 f7       	brcc	.-18     	; 0x21ca <__ftoa_engine+0x174>
    21dc:	7e 91       	ld	r23, -X
    21de:	70 61       	ori	r23, 0x10	; 16
    21e0:	7d 93       	st	X+, r23
    21e2:	30 f0       	brcs	.+12     	; 0x21f0 <__ftoa_engine+0x19a>
    21e4:	83 95       	inc	r24
    21e6:	71 e3       	ldi	r23, 0x31	; 49
    21e8:	7d 93       	st	X+, r23
    21ea:	70 e3       	ldi	r23, 0x30	; 48
    21ec:	2a 95       	dec	r18
    21ee:	e1 f7       	brne	.-8      	; 0x21e8 <__ftoa_engine+0x192>
    21f0:	11 24       	eor	r1, r1
    21f2:	ef 90       	pop	r14
    21f4:	ff 90       	pop	r15
    21f6:	0f 91       	pop	r16
    21f8:	1f 91       	pop	r17
    21fa:	cf 91       	pop	r28
    21fc:	df 91       	pop	r29
    21fe:	99 27       	eor	r25, r25
    2200:	87 fd       	sbrc	r24, 7
    2202:	90 95       	com	r25
    2204:	08 95       	ret

00002206 <strnlen_P>:
    2206:	fc 01       	movw	r30, r24
    2208:	05 90       	lpm	r0, Z+
    220a:	61 50       	subi	r22, 0x01	; 1
    220c:	70 40       	sbci	r23, 0x00	; 0
    220e:	01 10       	cpse	r0, r1
    2210:	d8 f7       	brcc	.-10     	; 0x2208 <strnlen_P+0x2>
    2212:	80 95       	com	r24
    2214:	90 95       	com	r25
    2216:	8e 0f       	add	r24, r30
    2218:	9f 1f       	adc	r25, r31
    221a:	08 95       	ret

0000221c <strnlen>:
    221c:	fc 01       	movw	r30, r24
    221e:	61 50       	subi	r22, 0x01	; 1
    2220:	70 40       	sbci	r23, 0x00	; 0
    2222:	01 90       	ld	r0, Z+
    2224:	01 10       	cpse	r0, r1
    2226:	d8 f7       	brcc	.-10     	; 0x221e <strnlen+0x2>
    2228:	80 95       	com	r24
    222a:	90 95       	com	r25
    222c:	8e 0f       	add	r24, r30
    222e:	9f 1f       	adc	r25, r31
    2230:	08 95       	ret

00002232 <fputc>:
    2232:	0f 93       	push	r16
    2234:	1f 93       	push	r17
    2236:	cf 93       	push	r28
    2238:	df 93       	push	r29
    223a:	fb 01       	movw	r30, r22
    223c:	23 81       	ldd	r18, Z+3	; 0x03
    223e:	21 fd       	sbrc	r18, 1
    2240:	03 c0       	rjmp	.+6      	; 0x2248 <fputc+0x16>
    2242:	8f ef       	ldi	r24, 0xFF	; 255
    2244:	9f ef       	ldi	r25, 0xFF	; 255
    2246:	2c c0       	rjmp	.+88     	; 0x22a0 <fputc+0x6e>
    2248:	22 ff       	sbrs	r18, 2
    224a:	16 c0       	rjmp	.+44     	; 0x2278 <fputc+0x46>
    224c:	46 81       	ldd	r20, Z+6	; 0x06
    224e:	57 81       	ldd	r21, Z+7	; 0x07
    2250:	24 81       	ldd	r18, Z+4	; 0x04
    2252:	35 81       	ldd	r19, Z+5	; 0x05
    2254:	42 17       	cp	r20, r18
    2256:	53 07       	cpc	r21, r19
    2258:	44 f4       	brge	.+16     	; 0x226a <fputc+0x38>
    225a:	a0 81       	ld	r26, Z
    225c:	b1 81       	ldd	r27, Z+1	; 0x01
    225e:	9d 01       	movw	r18, r26
    2260:	2f 5f       	subi	r18, 0xFF	; 255
    2262:	3f 4f       	sbci	r19, 0xFF	; 255
    2264:	31 83       	std	Z+1, r19	; 0x01
    2266:	20 83       	st	Z, r18
    2268:	8c 93       	st	X, r24
    226a:	26 81       	ldd	r18, Z+6	; 0x06
    226c:	37 81       	ldd	r19, Z+7	; 0x07
    226e:	2f 5f       	subi	r18, 0xFF	; 255
    2270:	3f 4f       	sbci	r19, 0xFF	; 255
    2272:	37 83       	std	Z+7, r19	; 0x07
    2274:	26 83       	std	Z+6, r18	; 0x06
    2276:	14 c0       	rjmp	.+40     	; 0x22a0 <fputc+0x6e>
    2278:	8b 01       	movw	r16, r22
    227a:	ec 01       	movw	r28, r24
    227c:	fb 01       	movw	r30, r22
    227e:	00 84       	ldd	r0, Z+8	; 0x08
    2280:	f1 85       	ldd	r31, Z+9	; 0x09
    2282:	e0 2d       	mov	r30, r0
    2284:	09 95       	icall
    2286:	89 2b       	or	r24, r25
    2288:	e1 f6       	brne	.-72     	; 0x2242 <fputc+0x10>
    228a:	d8 01       	movw	r26, r16
    228c:	16 96       	adiw	r26, 0x06	; 6
    228e:	8d 91       	ld	r24, X+
    2290:	9c 91       	ld	r25, X
    2292:	17 97       	sbiw	r26, 0x07	; 7
    2294:	01 96       	adiw	r24, 0x01	; 1
    2296:	17 96       	adiw	r26, 0x07	; 7
    2298:	9c 93       	st	X, r25
    229a:	8e 93       	st	-X, r24
    229c:	16 97       	sbiw	r26, 0x06	; 6
    229e:	ce 01       	movw	r24, r28
    22a0:	df 91       	pop	r29
    22a2:	cf 91       	pop	r28
    22a4:	1f 91       	pop	r17
    22a6:	0f 91       	pop	r16
    22a8:	08 95       	ret

000022aa <__ultoa_invert>:
    22aa:	fa 01       	movw	r30, r20
    22ac:	aa 27       	eor	r26, r26
    22ae:	28 30       	cpi	r18, 0x08	; 8
    22b0:	51 f1       	breq	.+84     	; 0x2306 <__ultoa_invert+0x5c>
    22b2:	20 31       	cpi	r18, 0x10	; 16
    22b4:	81 f1       	breq	.+96     	; 0x2316 <__ultoa_invert+0x6c>
    22b6:	e8 94       	clt
    22b8:	6f 93       	push	r22
    22ba:	6e 7f       	andi	r22, 0xFE	; 254
    22bc:	6e 5f       	subi	r22, 0xFE	; 254
    22be:	7f 4f       	sbci	r23, 0xFF	; 255
    22c0:	8f 4f       	sbci	r24, 0xFF	; 255
    22c2:	9f 4f       	sbci	r25, 0xFF	; 255
    22c4:	af 4f       	sbci	r26, 0xFF	; 255
    22c6:	b1 e0       	ldi	r27, 0x01	; 1
    22c8:	3e d0       	rcall	.+124    	; 0x2346 <__ultoa_invert+0x9c>
    22ca:	b4 e0       	ldi	r27, 0x04	; 4
    22cc:	3c d0       	rcall	.+120    	; 0x2346 <__ultoa_invert+0x9c>
    22ce:	67 0f       	add	r22, r23
    22d0:	78 1f       	adc	r23, r24
    22d2:	89 1f       	adc	r24, r25
    22d4:	9a 1f       	adc	r25, r26
    22d6:	a1 1d       	adc	r26, r1
    22d8:	68 0f       	add	r22, r24
    22da:	79 1f       	adc	r23, r25
    22dc:	8a 1f       	adc	r24, r26
    22de:	91 1d       	adc	r25, r1
    22e0:	a1 1d       	adc	r26, r1
    22e2:	6a 0f       	add	r22, r26
    22e4:	71 1d       	adc	r23, r1
    22e6:	81 1d       	adc	r24, r1
    22e8:	91 1d       	adc	r25, r1
    22ea:	a1 1d       	adc	r26, r1
    22ec:	20 d0       	rcall	.+64     	; 0x232e <__ultoa_invert+0x84>
    22ee:	09 f4       	brne	.+2      	; 0x22f2 <__ultoa_invert+0x48>
    22f0:	68 94       	set
    22f2:	3f 91       	pop	r19
    22f4:	2a e0       	ldi	r18, 0x0A	; 10
    22f6:	26 9f       	mul	r18, r22
    22f8:	11 24       	eor	r1, r1
    22fa:	30 19       	sub	r19, r0
    22fc:	30 5d       	subi	r19, 0xD0	; 208
    22fe:	31 93       	st	Z+, r19
    2300:	de f6       	brtc	.-74     	; 0x22b8 <__ultoa_invert+0xe>
    2302:	cf 01       	movw	r24, r30
    2304:	08 95       	ret
    2306:	46 2f       	mov	r20, r22
    2308:	47 70       	andi	r20, 0x07	; 7
    230a:	40 5d       	subi	r20, 0xD0	; 208
    230c:	41 93       	st	Z+, r20
    230e:	b3 e0       	ldi	r27, 0x03	; 3
    2310:	0f d0       	rcall	.+30     	; 0x2330 <__ultoa_invert+0x86>
    2312:	c9 f7       	brne	.-14     	; 0x2306 <__ultoa_invert+0x5c>
    2314:	f6 cf       	rjmp	.-20     	; 0x2302 <__ultoa_invert+0x58>
    2316:	46 2f       	mov	r20, r22
    2318:	4f 70       	andi	r20, 0x0F	; 15
    231a:	40 5d       	subi	r20, 0xD0	; 208
    231c:	4a 33       	cpi	r20, 0x3A	; 58
    231e:	18 f0       	brcs	.+6      	; 0x2326 <__ultoa_invert+0x7c>
    2320:	49 5d       	subi	r20, 0xD9	; 217
    2322:	31 fd       	sbrc	r19, 1
    2324:	40 52       	subi	r20, 0x20	; 32
    2326:	41 93       	st	Z+, r20
    2328:	02 d0       	rcall	.+4      	; 0x232e <__ultoa_invert+0x84>
    232a:	a9 f7       	brne	.-22     	; 0x2316 <__ultoa_invert+0x6c>
    232c:	ea cf       	rjmp	.-44     	; 0x2302 <__ultoa_invert+0x58>
    232e:	b4 e0       	ldi	r27, 0x04	; 4
    2330:	a6 95       	lsr	r26
    2332:	97 95       	ror	r25
    2334:	87 95       	ror	r24
    2336:	77 95       	ror	r23
    2338:	67 95       	ror	r22
    233a:	ba 95       	dec	r27
    233c:	c9 f7       	brne	.-14     	; 0x2330 <__ultoa_invert+0x86>
    233e:	00 97       	sbiw	r24, 0x00	; 0
    2340:	61 05       	cpc	r22, r1
    2342:	71 05       	cpc	r23, r1
    2344:	08 95       	ret
    2346:	9b 01       	movw	r18, r22
    2348:	ac 01       	movw	r20, r24
    234a:	0a 2e       	mov	r0, r26
    234c:	06 94       	lsr	r0
    234e:	57 95       	ror	r21
    2350:	47 95       	ror	r20
    2352:	37 95       	ror	r19
    2354:	27 95       	ror	r18
    2356:	ba 95       	dec	r27
    2358:	c9 f7       	brne	.-14     	; 0x234c <__ultoa_invert+0xa2>
    235a:	62 0f       	add	r22, r18
    235c:	73 1f       	adc	r23, r19
    235e:	84 1f       	adc	r24, r20
    2360:	95 1f       	adc	r25, r21
    2362:	a0 1d       	adc	r26, r0
    2364:	08 95       	ret

00002366 <__prologue_saves__>:
    2366:	2f 92       	push	r2
    2368:	3f 92       	push	r3
    236a:	4f 92       	push	r4
    236c:	5f 92       	push	r5
    236e:	6f 92       	push	r6
    2370:	7f 92       	push	r7
    2372:	8f 92       	push	r8
    2374:	9f 92       	push	r9
    2376:	af 92       	push	r10
    2378:	bf 92       	push	r11
    237a:	cf 92       	push	r12
    237c:	df 92       	push	r13
    237e:	ef 92       	push	r14
    2380:	ff 92       	push	r15
    2382:	0f 93       	push	r16
    2384:	1f 93       	push	r17
    2386:	cf 93       	push	r28
    2388:	df 93       	push	r29
    238a:	cd b7       	in	r28, 0x3d	; 61
    238c:	de b7       	in	r29, 0x3e	; 62
    238e:	ca 1b       	sub	r28, r26
    2390:	db 0b       	sbc	r29, r27
    2392:	0f b6       	in	r0, 0x3f	; 63
    2394:	f8 94       	cli
    2396:	de bf       	out	0x3e, r29	; 62
    2398:	0f be       	out	0x3f, r0	; 63
    239a:	cd bf       	out	0x3d, r28	; 61
    239c:	09 94       	ijmp

0000239e <__epilogue_restores__>:
    239e:	2a 88       	ldd	r2, Y+18	; 0x12
    23a0:	39 88       	ldd	r3, Y+17	; 0x11
    23a2:	48 88       	ldd	r4, Y+16	; 0x10
    23a4:	5f 84       	ldd	r5, Y+15	; 0x0f
    23a6:	6e 84       	ldd	r6, Y+14	; 0x0e
    23a8:	7d 84       	ldd	r7, Y+13	; 0x0d
    23aa:	8c 84       	ldd	r8, Y+12	; 0x0c
    23ac:	9b 84       	ldd	r9, Y+11	; 0x0b
    23ae:	aa 84       	ldd	r10, Y+10	; 0x0a
    23b0:	b9 84       	ldd	r11, Y+9	; 0x09
    23b2:	c8 84       	ldd	r12, Y+8	; 0x08
    23b4:	df 80       	ldd	r13, Y+7	; 0x07
    23b6:	ee 80       	ldd	r14, Y+6	; 0x06
    23b8:	fd 80       	ldd	r15, Y+5	; 0x05
    23ba:	0c 81       	ldd	r16, Y+4	; 0x04
    23bc:	1b 81       	ldd	r17, Y+3	; 0x03
    23be:	aa 81       	ldd	r26, Y+2	; 0x02
    23c0:	b9 81       	ldd	r27, Y+1	; 0x01
    23c2:	ce 0f       	add	r28, r30
    23c4:	d1 1d       	adc	r29, r1
    23c6:	0f b6       	in	r0, 0x3f	; 63
    23c8:	f8 94       	cli
    23ca:	de bf       	out	0x3e, r29	; 62
    23cc:	0f be       	out	0x3f, r0	; 63
    23ce:	cd bf       	out	0x3d, r28	; 61
    23d0:	ed 01       	movw	r28, r26
    23d2:	08 95       	ret

000023d4 <_exit>:
    23d4:	f8 94       	cli

000023d6 <__stop_program>:
    23d6:	ff cf       	rjmp	.-2      	; 0x23d6 <__stop_program>
