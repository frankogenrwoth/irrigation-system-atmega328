
workable.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000003b2  00800100  000030f6  0000318a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000030f6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000007c  008004b2  008004b2  0000353c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000353c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003598  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a8  00000000  00000000  000035d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002eae  00000000  00000000  00003780  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a02  00000000  00000000  0000662e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000159e  00000000  00000000  00007030  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000580  00000000  00000000  000085d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ae5  00000000  00000000  00008b50  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000019f6  00000000  00000000  00009635  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c8  00000000  00000000  0000b02b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b9 00 	jmp	0x172	; 0x172 <__ctors_end>
       4:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
       8:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
       c:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
      10:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
      14:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
      18:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
      1c:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
      20:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
      24:	0c 94 08 0c 	jmp	0x1810	; 0x1810 <__vector_9>
      28:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
      2c:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
      30:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
      34:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
      38:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
      3c:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
      40:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
      44:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
      48:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
      4c:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
      50:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
      54:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
      58:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
      5c:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
      60:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
      64:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
      68:	f4 06       	cpc	r15, r20
      6a:	12 07       	cpc	r17, r18
      6c:	30 07       	cpc	r19, r16
      6e:	4e 07       	cpc	r20, r30
      70:	6c 07       	cpc	r22, r28
      72:	0a 08       	sbc	r0, r10
      74:	65 08       	sbc	r6, r5
      76:	89 08       	sbc	r8, r9

00000078 <__trampolines_end>:
      78:	00 40       	sbci	r16, 0x00	; 0
      7a:	7a 10       	cpse	r7, r10
      7c:	f3 5a       	subi	r31, 0xA3	; 163
      7e:	00 a0       	ldd	r0, Z+32	; 0x20
      80:	72 4e       	sbci	r23, 0xE2	; 226
      82:	18 09       	sbc	r17, r8
      84:	00 10       	cpse	r0, r0
      86:	a5 d4       	rcall	.+2378   	; 0x9d2 <display_set+0x1c>
      88:	e8 00       	.word	0x00e8	; ????
      8a:	00 e8       	ldi	r16, 0x80	; 128
      8c:	76 48       	sbci	r23, 0x86	; 134
      8e:	17 00       	.word	0x0017	; ????
      90:	00 e4       	ldi	r16, 0x40	; 64
      92:	0b 54       	subi	r16, 0x4B	; 75
      94:	02 00       	.word	0x0002	; ????
      96:	00 ca       	rjmp	.-3072   	; 0xfffff498 <__eeprom_end+0xff7ef498>
      98:	9a 3b       	cpi	r25, 0xBA	; 186
      9a:	00 00       	nop
      9c:	00 e1       	ldi	r16, 0x10	; 16
      9e:	f5 05       	cpc	r31, r5
      a0:	00 00       	nop
      a2:	80 96       	adiw	r24, 0x20	; 32
      a4:	98 00       	.word	0x0098	; ????
      a6:	00 00       	nop
      a8:	40 42       	sbci	r20, 0x20	; 32
      aa:	0f 00       	.word	0x000f	; ????
      ac:	00 00       	nop
      ae:	a0 86       	std	Z+8, r10	; 0x08
      b0:	01 00       	.word	0x0001	; ????
      b2:	00 00       	nop
      b4:	10 27       	eor	r17, r16
      b6:	00 00       	nop
      b8:	00 00       	nop
      ba:	e8 03       	fmulsu	r22, r16
      bc:	00 00       	nop
      be:	00 00       	nop
      c0:	64 00       	.word	0x0064	; ????
      c2:	00 00       	nop
      c4:	00 00       	nop
      c6:	0a 00       	.word	0x000a	; ????
      c8:	00 00       	nop
      ca:	00 00       	nop
      cc:	01 00       	.word	0x0001	; ????
      ce:	00 00       	nop
      d0:	00 00       	nop
      d2:	2c 76       	andi	r18, 0x6C	; 108
      d4:	d8 88       	ldd	r13, Y+16	; 0x10
      d6:	dc 67       	ori	r29, 0x7C	; 124
      d8:	4f 08       	sbc	r4, r15
      da:	23 df       	rcall	.-442    	; 0xffffff22 <__eeprom_end+0xff7eff22>
      dc:	c1 df       	rcall	.-126    	; 0x60 <__SREG__+0x21>
      de:	ae 59       	subi	r26, 0x9E	; 158
      e0:	e1 b1       	in	r30, 0x01	; 1
      e2:	b7 96       	adiw	r30, 0x27	; 39
      e4:	e5 e3       	ldi	r30, 0x35	; 53
      e6:	e4 53       	subi	r30, 0x34	; 52
      e8:	c6 3a       	cpi	r28, 0xA6	; 166
      ea:	e6 51       	subi	r30, 0x16	; 22
      ec:	99 76       	andi	r25, 0x69	; 105
      ee:	96 e8       	ldi	r25, 0x86	; 134
      f0:	e6 c2       	rjmp	.+1484   	; 0x6be <LCD_1602A_init+0x36>
      f2:	84 26       	eor	r8, r20
      f4:	eb 89       	ldd	r30, Y+19	; 0x13
      f6:	8c 9b       	sbis	0x11, 4	; 17
      f8:	62 ed       	ldi	r22, 0xD2	; 210
      fa:	40 7c       	andi	r20, 0xC0	; 192
      fc:	6f fc       	.word	0xfc6f	; ????
      fe:	ef bc       	out	0x2f, r14	; 47
     100:	9c 9f       	mul	r25, r28
     102:	40 f2       	brcs	.-112    	; 0x94 <__trampolines_end+0x1c>
     104:	ba a5       	ldd	r27, Y+42	; 0x2a
     106:	6f a5       	ldd	r22, Y+47	; 0x2f
     108:	f4 90       	lpm	r15, Z
     10a:	05 5a       	subi	r16, 0xA5	; 165
     10c:	2a f7       	brpl	.-54     	; 0xd8 <__trampolines_end+0x60>
     10e:	5c 93       	st	X, r21
     110:	6b 6c       	ori	r22, 0xCB	; 203
     112:	f9 67       	ori	r31, 0x79	; 121
     114:	6d c1       	rjmp	.+730    	; 0x3f0 <queueSize+0x28>
     116:	1b fc       	.word	0xfc1b	; ????
     118:	e0 e4       	ldi	r30, 0x40	; 64
     11a:	0d 47       	sbci	r16, 0x7D	; 125
     11c:	fe f5       	brtc	.+126    	; 0x19c <.do_clear_bss_loop>
     11e:	20 e6       	ldi	r18, 0x60	; 96
     120:	b5 00       	.word	0x00b5	; ????
     122:	d0 ed       	ldi	r29, 0xD0	; 208
     124:	90 2e       	mov	r9, r16
     126:	03 00       	.word	0x0003	; ????
     128:	94 35       	cpi	r25, 0x54	; 84
     12a:	77 05       	cpc	r23, r7
     12c:	00 80       	ld	r0, Z
     12e:	84 1e       	adc	r8, r20
     130:	08 00       	.word	0x0008	; ????
     132:	00 20       	and	r0, r0
     134:	4e 0a       	sbc	r4, r30
     136:	00 00       	nop
     138:	00 c8       	rjmp	.-4096   	; 0xfffff13a <__eeprom_end+0xff7ef13a>
     13a:	0c 33       	cpi	r16, 0x3C	; 60
     13c:	33 33       	cpi	r19, 0x33	; 51
     13e:	33 0f       	add	r19, r19
     140:	98 6e       	ori	r25, 0xE8	; 232
     142:	12 83       	std	Z+2, r17	; 0x02
     144:	11 41       	sbci	r17, 0x11	; 17
     146:	ef 8d       	ldd	r30, Y+31	; 0x1f
     148:	21 14       	cp	r2, r1
     14a:	89 3b       	cpi	r24, 0xB9	; 185
     14c:	e6 55       	subi	r30, 0x56	; 86
     14e:	16 cf       	rjmp	.-468    	; 0xffffff7c <__eeprom_end+0xff7eff7c>
     150:	fe e6       	ldi	r31, 0x6E	; 110
     152:	db 18       	sub	r13, r11
     154:	d1 84       	ldd	r13, Z+9	; 0x09
     156:	4b 38       	cpi	r20, 0x8B	; 139
     158:	1b f7       	brvc	.-58     	; 0x120 <__trampolines_end+0xa8>
     15a:	7c 1d       	adc	r23, r12
     15c:	90 1d       	adc	r25, r0
     15e:	a4 bb       	out	0x14, r26	; 20
     160:	e4 24       	eor	r14, r4
     162:	20 32       	cpi	r18, 0x20	; 32
     164:	84 72       	andi	r24, 0x24	; 36
     166:	5e 22       	and	r5, r30
     168:	81 00       	.word	0x0081	; ????
     16a:	c9 f1       	breq	.+114    	; 0x1de <format_float+0x2e>
     16c:	24 ec       	ldi	r18, 0xC4	; 196
     16e:	a1 e5       	ldi	r26, 0x51	; 81
     170:	3d 27       	eor	r19, r29

00000172 <__ctors_end>:
     172:	11 24       	eor	r1, r1
     174:	1f be       	out	0x3f, r1	; 63
     176:	cf ef       	ldi	r28, 0xFF	; 255
     178:	d8 e0       	ldi	r29, 0x08	; 8
     17a:	de bf       	out	0x3e, r29	; 62
     17c:	cd bf       	out	0x3d, r28	; 61

0000017e <__do_copy_data>:
     17e:	14 e0       	ldi	r17, 0x04	; 4
     180:	a0 e0       	ldi	r26, 0x00	; 0
     182:	b1 e0       	ldi	r27, 0x01	; 1
     184:	e6 ef       	ldi	r30, 0xF6	; 246
     186:	f0 e3       	ldi	r31, 0x30	; 48
     188:	02 c0       	rjmp	.+4      	; 0x18e <__do_copy_data+0x10>
     18a:	05 90       	lpm	r0, Z+
     18c:	0d 92       	st	X+, r0
     18e:	a2 3b       	cpi	r26, 0xB2	; 178
     190:	b1 07       	cpc	r27, r17
     192:	d9 f7       	brne	.-10     	; 0x18a <__do_copy_data+0xc>

00000194 <__do_clear_bss>:
     194:	25 e0       	ldi	r18, 0x05	; 5
     196:	a2 eb       	ldi	r26, 0xB2	; 178
     198:	b4 e0       	ldi	r27, 0x04	; 4
     19a:	01 c0       	rjmp	.+2      	; 0x19e <.do_clear_bss_start>

0000019c <.do_clear_bss_loop>:
     19c:	1d 92       	st	X+, r1

0000019e <.do_clear_bss_start>:
     19e:	ae 32       	cpi	r26, 0x2E	; 46
     1a0:	b2 07       	cpc	r27, r18
     1a2:	e1 f7       	brne	.-8      	; 0x19c <.do_clear_bss_loop>
     1a4:	0e 94 22 0c 	call	0x1844	; 0x1844 <main>
     1a8:	0c 94 79 18 	jmp	0x30f2	; 0x30f2 <_exit>

000001ac <__bad_interrupt>:
     1ac:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001b0 <format_float>:
{
    while (*str)
    {
        LCD_1602A_load_data(*str++);
    }
}
     1b0:	af 92       	push	r10
     1b2:	bf 92       	push	r11
     1b4:	cf 92       	push	r12
     1b6:	df 92       	push	r13
     1b8:	ef 92       	push	r14
     1ba:	ff 92       	push	r15
     1bc:	0f 93       	push	r16
     1be:	1f 93       	push	r17
     1c0:	cf 93       	push	r28
     1c2:	df 93       	push	r29
     1c4:	cd b7       	in	r28, 0x3d	; 61
     1c6:	de b7       	in	r29, 0x3e	; 62
     1c8:	68 97       	sbiw	r28, 0x18	; 24
     1ca:	0f b6       	in	r0, 0x3f	; 63
     1cc:	f8 94       	cli
     1ce:	de bf       	out	0x3e, r29	; 62
     1d0:	0f be       	out	0x3f, r0	; 63
     1d2:	cd bf       	out	0x3d, r28	; 61
     1d4:	d8 2e       	mov	r13, r24
     1d6:	c9 2e       	mov	r12, r25
     1d8:	b6 2e       	mov	r11, r22
     1da:	a7 2e       	mov	r10, r23
     1dc:	ca 01       	movw	r24, r20
     1de:	b9 01       	movw	r22, r18
     1e0:	20 2f       	mov	r18, r16
     1e2:	8e 01       	movw	r16, r28
     1e4:	0f 5f       	subi	r16, 0xFF	; 255
     1e6:	1f 4f       	sbci	r17, 0xFF	; 255
     1e8:	40 e0       	ldi	r20, 0x00	; 0
     1ea:	0e 94 b8 11 	call	0x2370	; 0x2370 <dtostrf>
     1ee:	e1 14       	cp	r14, r1
     1f0:	f1 04       	cpc	r15, r1
     1f2:	c1 f0       	breq	.+48     	; 0x224 <format_float+0x74>
     1f4:	f7 01       	movw	r30, r14
     1f6:	80 81       	ld	r24, Z
     1f8:	88 23       	and	r24, r24
     1fa:	a1 f0       	breq	.+40     	; 0x224 <format_float+0x74>
     1fc:	ff 92       	push	r15
     1fe:	ef 92       	push	r14
     200:	1f 93       	push	r17
     202:	0f 93       	push	r16
     204:	86 e7       	ldi	r24, 0x76	; 118
     206:	91 e0       	ldi	r25, 0x01	; 1
     208:	9f 93       	push	r25
     20a:	8f 93       	push	r24
     20c:	af 92       	push	r10
     20e:	bf 92       	push	r11
     210:	cf 92       	push	r12
     212:	df 92       	push	r13
     214:	0e 94 4f 13 	call	0x269e	; 0x269e <snprintf>
     218:	0f b6       	in	r0, 0x3f	; 63
     21a:	f8 94       	cli
     21c:	de bf       	out	0x3e, r29	; 62
     21e:	0f be       	out	0x3f, r0	; 63
     220:	cd bf       	out	0x3d, r28	; 61
     222:	13 c0       	rjmp	.+38     	; 0x24a <format_float+0x9a>
     224:	ce 01       	movw	r24, r28
     226:	01 96       	adiw	r24, 0x01	; 1
     228:	9f 93       	push	r25
     22a:	8f 93       	push	r24
     22c:	89 e7       	ldi	r24, 0x79	; 121
     22e:	91 e0       	ldi	r25, 0x01	; 1
     230:	9f 93       	push	r25
     232:	8f 93       	push	r24
     234:	af 92       	push	r10
     236:	bf 92       	push	r11
     238:	cf 92       	push	r12
     23a:	df 92       	push	r13
     23c:	0e 94 4f 13 	call	0x269e	; 0x269e <snprintf>
     240:	0f b6       	in	r0, 0x3f	; 63
     242:	f8 94       	cli
     244:	de bf       	out	0x3e, r29	; 62
     246:	0f be       	out	0x3f, r0	; 63
     248:	cd bf       	out	0x3d, r28	; 61
     24a:	68 96       	adiw	r28, 0x18	; 24
     24c:	0f b6       	in	r0, 0x3f	; 63
     24e:	f8 94       	cli
     250:	de bf       	out	0x3e, r29	; 62
     252:	0f be       	out	0x3f, r0	; 63
     254:	cd bf       	out	0x3d, r28	; 61
     256:	df 91       	pop	r29
     258:	cf 91       	pop	r28
     25a:	1f 91       	pop	r17
     25c:	0f 91       	pop	r16
     25e:	ff 90       	pop	r15
     260:	ef 90       	pop	r14
     262:	df 90       	pop	r13
     264:	cf 90       	pop	r12
     266:	bf 90       	pop	r11
     268:	af 90       	pop	r10
     26a:	08 95       	ret

0000026c <initQueue>:
     26c:	2f ef       	ldi	r18, 0xFF	; 255
     26e:	3f ef       	ldi	r19, 0xFF	; 255
     270:	fc 01       	movw	r30, r24
     272:	35 8b       	std	Z+21, r19	; 0x15
     274:	24 8b       	std	Z+20, r18	; 0x14
     276:	37 8b       	std	Z+23, r19	; 0x17
     278:	26 8b       	std	Z+22, r18	; 0x16
     27a:	08 95       	ret

0000027c <isEmpty>:
     27c:	fc 01       	movw	r30, r24
     27e:	24 89       	ldd	r18, Z+20	; 0x14
     280:	35 89       	ldd	r19, Z+21	; 0x15
     282:	81 e0       	ldi	r24, 0x01	; 1
     284:	2f 3f       	cpi	r18, 0xFF	; 255
     286:	3f 4f       	sbci	r19, 0xFF	; 255
     288:	09 f0       	breq	.+2      	; 0x28c <isEmpty+0x10>
     28a:	80 e0       	ldi	r24, 0x00	; 0
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	08 95       	ret

00000290 <isFull>:
     290:	fc 01       	movw	r30, r24
     292:	86 89       	ldd	r24, Z+22	; 0x16
     294:	97 89       	ldd	r25, Z+23	; 0x17
     296:	01 96       	adiw	r24, 0x01	; 1
     298:	6a e0       	ldi	r22, 0x0A	; 10
     29a:	70 e0       	ldi	r23, 0x00	; 0
     29c:	0e 94 8a 11 	call	0x2314	; 0x2314 <__divmodhi4>
     2a0:	ac 01       	movw	r20, r24
     2a2:	24 89       	ldd	r18, Z+20	; 0x14
     2a4:	35 89       	ldd	r19, Z+21	; 0x15
     2a6:	81 e0       	ldi	r24, 0x01	; 1
     2a8:	42 17       	cp	r20, r18
     2aa:	53 07       	cpc	r21, r19
     2ac:	09 f0       	breq	.+2      	; 0x2b0 <isFull+0x20>
     2ae:	80 e0       	ldi	r24, 0x00	; 0
     2b0:	90 e0       	ldi	r25, 0x00	; 0
     2b2:	08 95       	ret

000002b4 <enqueue>:
     2b4:	0f 93       	push	r16
     2b6:	1f 93       	push	r17
     2b8:	cf 93       	push	r28
     2ba:	df 93       	push	r29
     2bc:	ec 01       	movw	r28, r24
     2be:	06 2f       	mov	r16, r22
     2c0:	17 2f       	mov	r17, r23
     2c2:	0e 94 48 01 	call	0x290	; 0x290 <isFull>
     2c6:	89 2b       	or	r24, r25
     2c8:	29 f1       	breq	.+74     	; 0x314 <enqueue+0x60>
     2ca:	8c 89       	ldd	r24, Y+20	; 0x14
     2cc:	9d 89       	ldd	r25, Y+21	; 0x15
     2ce:	01 96       	adiw	r24, 0x01	; 1
     2d0:	2a e0       	ldi	r18, 0x0A	; 10
     2d2:	30 e0       	ldi	r19, 0x00	; 0
     2d4:	b9 01       	movw	r22, r18
     2d6:	0e 94 8a 11 	call	0x2314	; 0x2314 <__divmodhi4>
     2da:	9d 8b       	std	Y+21, r25	; 0x15
     2dc:	8c 8b       	std	Y+20, r24	; 0x14
     2de:	8e 89       	ldd	r24, Y+22	; 0x16
     2e0:	9f 89       	ldd	r25, Y+23	; 0x17
     2e2:	01 96       	adiw	r24, 0x01	; 1
     2e4:	b9 01       	movw	r22, r18
     2e6:	0e 94 8a 11 	call	0x2314	; 0x2314 <__divmodhi4>
     2ea:	9f 8b       	std	Y+23, r25	; 0x17
     2ec:	8e 8b       	std	Y+22, r24	; 0x16
     2ee:	88 0f       	add	r24, r24
     2f0:	99 1f       	adc	r25, r25
     2f2:	c8 0f       	add	r28, r24
     2f4:	d9 1f       	adc	r29, r25
     2f6:	08 83       	st	Y, r16
     2f8:	19 83       	std	Y+1, r17	; 0x01
     2fa:	1f 93       	push	r17
     2fc:	0f 93       	push	r16
     2fe:	8c e8       	ldi	r24, 0x8C	; 140
     300:	91 e0       	ldi	r25, 0x01	; 1
     302:	9f 93       	push	r25
     304:	8f 93       	push	r24
     306:	0e 94 09 13 	call	0x2612	; 0x2612 <printf>
     30a:	0f 90       	pop	r0
     30c:	0f 90       	pop	r0
     30e:	0f 90       	pop	r0
     310:	0f 90       	pop	r0
     312:	1b c0       	rjmp	.+54     	; 0x34a <enqueue+0x96>
     314:	ce 01       	movw	r24, r28
     316:	0e 94 3e 01 	call	0x27c	; 0x27c <isEmpty>
     31a:	89 2b       	or	r24, r25
     31c:	39 f0       	breq	.+14     	; 0x32c <enqueue+0x78>
     31e:	1d 8a       	std	Y+21, r1	; 0x15
     320:	1c 8a       	std	Y+20, r1	; 0x14
     322:	1f 8a       	std	Y+23, r1	; 0x17
     324:	1e 8a       	std	Y+22, r1	; 0x16
     326:	08 83       	st	Y, r16
     328:	19 83       	std	Y+1, r17	; 0x01
     32a:	0f c0       	rjmp	.+30     	; 0x34a <enqueue+0x96>
     32c:	8e 89       	ldd	r24, Y+22	; 0x16
     32e:	9f 89       	ldd	r25, Y+23	; 0x17
     330:	01 96       	adiw	r24, 0x01	; 1
     332:	6a e0       	ldi	r22, 0x0A	; 10
     334:	70 e0       	ldi	r23, 0x00	; 0
     336:	0e 94 8a 11 	call	0x2314	; 0x2314 <__divmodhi4>
     33a:	9f 8b       	std	Y+23, r25	; 0x17
     33c:	8e 8b       	std	Y+22, r24	; 0x16
     33e:	88 0f       	add	r24, r24
     340:	99 1f       	adc	r25, r25
     342:	c8 0f       	add	r28, r24
     344:	d9 1f       	adc	r29, r25
     346:	08 83       	st	Y, r16
     348:	19 83       	std	Y+1, r17	; 0x01
     34a:	df 91       	pop	r29
     34c:	cf 91       	pop	r28
     34e:	1f 91       	pop	r17
     350:	0f 91       	pop	r16
     352:	08 95       	ret

00000354 <peekFront>:
     354:	0f 93       	push	r16
     356:	1f 93       	push	r17
     358:	cf 93       	push	r28
     35a:	df 93       	push	r29
     35c:	ec 01       	movw	r28, r24
     35e:	8b 01       	movw	r16, r22
     360:	0e 94 3e 01 	call	0x27c	; 0x27c <isEmpty>
     364:	00 97       	sbiw	r24, 0x00	; 0
     366:	61 f4       	brne	.+24     	; 0x380 <peekFront+0x2c>
     368:	ec 89       	ldd	r30, Y+20	; 0x14
     36a:	fd 89       	ldd	r31, Y+21	; 0x15
     36c:	ee 0f       	add	r30, r30
     36e:	ff 1f       	adc	r31, r31
     370:	ec 0f       	add	r30, r28
     372:	fd 1f       	adc	r31, r29
     374:	20 81       	ld	r18, Z
     376:	31 81       	ldd	r19, Z+1	; 0x01
     378:	f8 01       	movw	r30, r16
     37a:	31 83       	std	Z+1, r19	; 0x01
     37c:	20 83       	st	Z, r18
     37e:	02 c0       	rjmp	.+4      	; 0x384 <peekFront+0x30>
     380:	8f ef       	ldi	r24, 0xFF	; 255
     382:	9f ef       	ldi	r25, 0xFF	; 255
     384:	df 91       	pop	r29
     386:	cf 91       	pop	r28
     388:	1f 91       	pop	r17
     38a:	0f 91       	pop	r16
     38c:	08 95       	ret

0000038e <peekRear>:
     38e:	0f 93       	push	r16
     390:	1f 93       	push	r17
     392:	cf 93       	push	r28
     394:	df 93       	push	r29
     396:	ec 01       	movw	r28, r24
     398:	8b 01       	movw	r16, r22
     39a:	0e 94 3e 01 	call	0x27c	; 0x27c <isEmpty>
     39e:	00 97       	sbiw	r24, 0x00	; 0
     3a0:	61 f4       	brne	.+24     	; 0x3ba <peekRear+0x2c>
     3a2:	ee 89       	ldd	r30, Y+22	; 0x16
     3a4:	ff 89       	ldd	r31, Y+23	; 0x17
     3a6:	ee 0f       	add	r30, r30
     3a8:	ff 1f       	adc	r31, r31
     3aa:	ec 0f       	add	r30, r28
     3ac:	fd 1f       	adc	r31, r29
     3ae:	20 81       	ld	r18, Z
     3b0:	31 81       	ldd	r19, Z+1	; 0x01
     3b2:	f8 01       	movw	r30, r16
     3b4:	31 83       	std	Z+1, r19	; 0x01
     3b6:	20 83       	st	Z, r18
     3b8:	02 c0       	rjmp	.+4      	; 0x3be <peekRear+0x30>
     3ba:	8f ef       	ldi	r24, 0xFF	; 255
     3bc:	9f ef       	ldi	r25, 0xFF	; 255
     3be:	df 91       	pop	r29
     3c0:	cf 91       	pop	r28
     3c2:	1f 91       	pop	r17
     3c4:	0f 91       	pop	r16
     3c6:	08 95       	ret

000003c8 <queueSize>:
     3c8:	cf 93       	push	r28
     3ca:	df 93       	push	r29
     3cc:	ec 01       	movw	r28, r24
     3ce:	0e 94 3e 01 	call	0x27c	; 0x27c <isEmpty>
     3d2:	89 2b       	or	r24, r25
     3d4:	99 f4       	brne	.+38     	; 0x3fc <queueSize+0x34>
     3d6:	8e 89       	ldd	r24, Y+22	; 0x16
     3d8:	9f 89       	ldd	r25, Y+23	; 0x17
     3da:	4c 89       	ldd	r20, Y+20	; 0x14
     3dc:	5d 89       	ldd	r21, Y+21	; 0x15
     3de:	84 17       	cp	r24, r20
     3e0:	95 07       	cpc	r25, r21
     3e2:	24 f0       	brlt	.+8      	; 0x3ec <queueSize+0x24>
     3e4:	84 1b       	sub	r24, r20
     3e6:	95 0b       	sbc	r25, r21
     3e8:	01 96       	adiw	r24, 0x01	; 1
     3ea:	0a c0       	rjmp	.+20     	; 0x400 <__EEPROM_REGION_LENGTH__>
     3ec:	2a e0       	ldi	r18, 0x0A	; 10
     3ee:	30 e0       	ldi	r19, 0x00	; 0
     3f0:	24 1b       	sub	r18, r20
     3f2:	35 0b       	sbc	r19, r21
     3f4:	82 0f       	add	r24, r18
     3f6:	93 1f       	adc	r25, r19
     3f8:	01 96       	adiw	r24, 0x01	; 1
     3fa:	02 c0       	rjmp	.+4      	; 0x400 <__EEPROM_REGION_LENGTH__>
     3fc:	80 e0       	ldi	r24, 0x00	; 0
     3fe:	90 e0       	ldi	r25, 0x00	; 0
     400:	df 91       	pop	r29
     402:	cf 91       	pop	r28
     404:	08 95       	ret

00000406 <initStrQueue>:
     406:	2f ef       	ldi	r18, 0xFF	; 255
     408:	3f ef       	ldi	r19, 0xFF	; 255
     40a:	fc 01       	movw	r30, r24
     40c:	35 8b       	std	Z+21, r19	; 0x15
     40e:	24 8b       	std	Z+20, r18	; 0x14
     410:	37 8b       	std	Z+23, r19	; 0x17
     412:	26 8b       	std	Z+22, r18	; 0x16
     414:	20 e0       	ldi	r18, 0x00	; 0
     416:	30 e0       	ldi	r19, 0x00	; 0
     418:	09 c0       	rjmp	.+18     	; 0x42c <initStrQueue+0x26>
     41a:	f9 01       	movw	r30, r18
     41c:	ee 0f       	add	r30, r30
     41e:	ff 1f       	adc	r31, r31
     420:	e8 0f       	add	r30, r24
     422:	f9 1f       	adc	r31, r25
     424:	11 82       	std	Z+1, r1	; 0x01
     426:	10 82       	st	Z, r1
     428:	2f 5f       	subi	r18, 0xFF	; 255
     42a:	3f 4f       	sbci	r19, 0xFF	; 255
     42c:	2a 30       	cpi	r18, 0x0A	; 10
     42e:	31 05       	cpc	r19, r1
     430:	a4 f3       	brlt	.-24     	; 0x41a <initStrQueue+0x14>
     432:	08 95       	ret

00000434 <isStrQueueEmpty>:
     434:	fc 01       	movw	r30, r24
     436:	24 89       	ldd	r18, Z+20	; 0x14
     438:	35 89       	ldd	r19, Z+21	; 0x15
     43a:	81 e0       	ldi	r24, 0x01	; 1
     43c:	2f 3f       	cpi	r18, 0xFF	; 255
     43e:	3f 4f       	sbci	r19, 0xFF	; 255
     440:	09 f0       	breq	.+2      	; 0x444 <isStrQueueEmpty+0x10>
     442:	80 e0       	ldi	r24, 0x00	; 0
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	08 95       	ret

00000448 <isStrQueueFull>:
     448:	fc 01       	movw	r30, r24
     44a:	86 89       	ldd	r24, Z+22	; 0x16
     44c:	97 89       	ldd	r25, Z+23	; 0x17
     44e:	01 96       	adiw	r24, 0x01	; 1
     450:	6a e0       	ldi	r22, 0x0A	; 10
     452:	70 e0       	ldi	r23, 0x00	; 0
     454:	0e 94 8a 11 	call	0x2314	; 0x2314 <__divmodhi4>
     458:	ac 01       	movw	r20, r24
     45a:	24 89       	ldd	r18, Z+20	; 0x14
     45c:	35 89       	ldd	r19, Z+21	; 0x15
     45e:	81 e0       	ldi	r24, 0x01	; 1
     460:	42 17       	cp	r20, r18
     462:	53 07       	cpc	r21, r19
     464:	09 f0       	breq	.+2      	; 0x468 <isStrQueueFull+0x20>
     466:	80 e0       	ldi	r24, 0x00	; 0
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	08 95       	ret

0000046c <enqueueStr>:
     46c:	ef 92       	push	r14
     46e:	ff 92       	push	r15
     470:	0f 93       	push	r16
     472:	1f 93       	push	r17
     474:	cf 93       	push	r28
     476:	df 93       	push	r29
     478:	61 15       	cp	r22, r1
     47a:	71 05       	cpc	r23, r1
     47c:	09 f4       	brne	.+2      	; 0x480 <enqueueStr+0x14>
     47e:	5b c0       	rjmp	.+182    	; 0x536 <enqueueStr+0xca>
     480:	8b 01       	movw	r16, r22
     482:	ec 01       	movw	r28, r24
     484:	fb 01       	movw	r30, r22
     486:	01 90       	ld	r0, Z+
     488:	00 20       	and	r0, r0
     48a:	e9 f7       	brne	.-6      	; 0x486 <enqueueStr+0x1a>
     48c:	31 97       	sbiw	r30, 0x01	; 1
     48e:	cf 01       	movw	r24, r30
     490:	86 1b       	sub	r24, r22
     492:	97 0b       	sbc	r25, r23
     494:	01 96       	adiw	r24, 0x01	; 1
     496:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <malloc>
     49a:	7c 01       	movw	r14, r24
     49c:	00 97       	sbiw	r24, 0x00	; 0
     49e:	29 f4       	brne	.+10     	; 0x4aa <enqueueStr+0x3e>
     4a0:	8a ec       	ldi	r24, 0xCA	; 202
     4a2:	91 e0       	ldi	r25, 0x01	; 1
     4a4:	0e 94 1f 13 	call	0x263e	; 0x263e <puts>
     4a8:	46 c0       	rjmp	.+140    	; 0x536 <enqueueStr+0xca>
     4aa:	b8 01       	movw	r22, r16
     4ac:	0e 94 02 13 	call	0x2604	; 0x2604 <strcpy>
     4b0:	ce 01       	movw	r24, r28
     4b2:	0e 94 24 02 	call	0x448	; 0x448 <isStrQueueFull>
     4b6:	89 2b       	or	r24, r25
     4b8:	19 f1       	breq	.+70     	; 0x500 <enqueueStr+0x94>
     4ba:	ec 89       	ldd	r30, Y+20	; 0x14
     4bc:	fd 89       	ldd	r31, Y+21	; 0x15
     4be:	ee 0f       	add	r30, r30
     4c0:	ff 1f       	adc	r31, r31
     4c2:	ec 0f       	add	r30, r28
     4c4:	fd 1f       	adc	r31, r29
     4c6:	80 81       	ld	r24, Z
     4c8:	91 81       	ldd	r25, Z+1	; 0x01
     4ca:	0e 94 70 12 	call	0x24e0	; 0x24e0 <free>
     4ce:	8c 89       	ldd	r24, Y+20	; 0x14
     4d0:	9d 89       	ldd	r25, Y+21	; 0x15
     4d2:	01 96       	adiw	r24, 0x01	; 1
     4d4:	2a e0       	ldi	r18, 0x0A	; 10
     4d6:	30 e0       	ldi	r19, 0x00	; 0
     4d8:	b9 01       	movw	r22, r18
     4da:	0e 94 8a 11 	call	0x2314	; 0x2314 <__divmodhi4>
     4de:	9d 8b       	std	Y+21, r25	; 0x15
     4e0:	8c 8b       	std	Y+20, r24	; 0x14
     4e2:	8e 89       	ldd	r24, Y+22	; 0x16
     4e4:	9f 89       	ldd	r25, Y+23	; 0x17
     4e6:	01 96       	adiw	r24, 0x01	; 1
     4e8:	b9 01       	movw	r22, r18
     4ea:	0e 94 8a 11 	call	0x2314	; 0x2314 <__divmodhi4>
     4ee:	9f 8b       	std	Y+23, r25	; 0x17
     4f0:	8e 8b       	std	Y+22, r24	; 0x16
     4f2:	88 0f       	add	r24, r24
     4f4:	99 1f       	adc	r25, r25
     4f6:	c8 0f       	add	r28, r24
     4f8:	d9 1f       	adc	r29, r25
     4fa:	f9 82       	std	Y+1, r15	; 0x01
     4fc:	e8 82       	st	Y, r14
     4fe:	1b c0       	rjmp	.+54     	; 0x536 <enqueueStr+0xca>
     500:	ce 01       	movw	r24, r28
     502:	0e 94 1a 02 	call	0x434	; 0x434 <isStrQueueEmpty>
     506:	89 2b       	or	r24, r25
     508:	39 f0       	breq	.+14     	; 0x518 <enqueueStr+0xac>
     50a:	1d 8a       	std	Y+21, r1	; 0x15
     50c:	1c 8a       	std	Y+20, r1	; 0x14
     50e:	1f 8a       	std	Y+23, r1	; 0x17
     510:	1e 8a       	std	Y+22, r1	; 0x16
     512:	f9 82       	std	Y+1, r15	; 0x01
     514:	e8 82       	st	Y, r14
     516:	0f c0       	rjmp	.+30     	; 0x536 <enqueueStr+0xca>
     518:	8e 89       	ldd	r24, Y+22	; 0x16
     51a:	9f 89       	ldd	r25, Y+23	; 0x17
     51c:	01 96       	adiw	r24, 0x01	; 1
     51e:	6a e0       	ldi	r22, 0x0A	; 10
     520:	70 e0       	ldi	r23, 0x00	; 0
     522:	0e 94 8a 11 	call	0x2314	; 0x2314 <__divmodhi4>
     526:	9f 8b       	std	Y+23, r25	; 0x17
     528:	8e 8b       	std	Y+22, r24	; 0x16
     52a:	88 0f       	add	r24, r24
     52c:	99 1f       	adc	r25, r25
     52e:	c8 0f       	add	r28, r24
     530:	d9 1f       	adc	r29, r25
     532:	f9 82       	std	Y+1, r15	; 0x01
     534:	e8 82       	st	Y, r14
     536:	df 91       	pop	r29
     538:	cf 91       	pop	r28
     53a:	1f 91       	pop	r17
     53c:	0f 91       	pop	r16
     53e:	ff 90       	pop	r15
     540:	ef 90       	pop	r14
     542:	08 95       	ret

00000544 <peekFrontStr>:
     544:	0f 93       	push	r16
     546:	1f 93       	push	r17
     548:	cf 93       	push	r28
     54a:	df 93       	push	r29
     54c:	ec 01       	movw	r28, r24
     54e:	8b 01       	movw	r16, r22
     550:	0e 94 1a 02 	call	0x434	; 0x434 <isStrQueueEmpty>
     554:	00 97       	sbiw	r24, 0x00	; 0
     556:	61 f4       	brne	.+24     	; 0x570 <peekFrontStr+0x2c>
     558:	ec 89       	ldd	r30, Y+20	; 0x14
     55a:	fd 89       	ldd	r31, Y+21	; 0x15
     55c:	ee 0f       	add	r30, r30
     55e:	ff 1f       	adc	r31, r31
     560:	ec 0f       	add	r30, r28
     562:	fd 1f       	adc	r31, r29
     564:	20 81       	ld	r18, Z
     566:	31 81       	ldd	r19, Z+1	; 0x01
     568:	f8 01       	movw	r30, r16
     56a:	31 83       	std	Z+1, r19	; 0x01
     56c:	20 83       	st	Z, r18
     56e:	02 c0       	rjmp	.+4      	; 0x574 <peekFrontStr+0x30>
     570:	8f ef       	ldi	r24, 0xFF	; 255
     572:	9f ef       	ldi	r25, 0xFF	; 255
     574:	df 91       	pop	r29
     576:	cf 91       	pop	r28
     578:	1f 91       	pop	r17
     57a:	0f 91       	pop	r16
     57c:	08 95       	ret

0000057e <TIMER2_INIT>:
     57e:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     582:	87 e0       	ldi	r24, 0x07	; 7
     584:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
     588:	81 e0       	ldi	r24, 0x01	; 1
     58a:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
     58e:	78 94       	sei
     590:	08 95       	ret

00000592 <LED_SYSTEM_ACTIVE_INIT>:
     592:	87 b1       	in	r24, 0x07	; 7
     594:	82 60       	ori	r24, 0x02	; 2
     596:	87 b9       	out	0x07, r24	; 7
     598:	88 b1       	in	r24, 0x08	; 8
     59a:	8d 7f       	andi	r24, 0xFD	; 253
     59c:	88 b9       	out	0x08, r24	; 8
     59e:	08 95       	ret

000005a0 <LED_system_active_off>:
     5a0:	88 b1       	in	r24, 0x08	; 8
     5a2:	8d 7f       	andi	r24, 0xFD	; 253
     5a4:	88 b9       	out	0x08, r24	; 8
     5a6:	08 95       	ret

000005a8 <LED_system_active_on>:
     5a8:	88 b1       	in	r24, 0x08	; 8
     5aa:	82 60       	ori	r24, 0x02	; 2
     5ac:	88 b9       	out	0x08, r24	; 8
     5ae:	08 95       	ret

000005b0 <LCD_1602A_latch>:
     5b0:	85 b1       	in	r24, 0x05	; 5
     5b2:	82 60       	ori	r24, 0x02	; 2
     5b4:	85 b9       	out	0x05, r24	; 5
     5b6:	85 e0       	ldi	r24, 0x05	; 5
     5b8:	8a 95       	dec	r24
     5ba:	f1 f7       	brne	.-4      	; 0x5b8 <LCD_1602A_latch+0x8>
     5bc:	00 00       	nop
     5be:	85 b1       	in	r24, 0x05	; 5
     5c0:	8d 7f       	andi	r24, 0xFD	; 253
     5c2:	85 b9       	out	0x05, r24	; 5
     5c4:	8f e8       	ldi	r24, 0x8F	; 143
     5c6:	91 e0       	ldi	r25, 0x01	; 1
     5c8:	01 97       	sbiw	r24, 0x01	; 1
     5ca:	f1 f7       	brne	.-4      	; 0x5c8 <LCD_1602A_latch+0x18>
     5cc:	00 c0       	rjmp	.+0      	; 0x5ce <LCD_1602A_latch+0x1e>
     5ce:	00 00       	nop
     5d0:	08 95       	ret

000005d2 <LCD_1602A_send_nibble>:
     5d2:	9b b1       	in	r25, 0x0b	; 11
     5d4:	9f 70       	andi	r25, 0x0F	; 15
     5d6:	9b b9       	out	0x0b, r25	; 11
     5d8:	80 ff       	sbrs	r24, 0
     5da:	03 c0       	rjmp	.+6      	; 0x5e2 <LCD_1602A_send_nibble+0x10>
     5dc:	9b b1       	in	r25, 0x0b	; 11
     5de:	90 61       	ori	r25, 0x10	; 16
     5e0:	9b b9       	out	0x0b, r25	; 11
     5e2:	81 ff       	sbrs	r24, 1
     5e4:	03 c0       	rjmp	.+6      	; 0x5ec <LCD_1602A_send_nibble+0x1a>
     5e6:	9b b1       	in	r25, 0x0b	; 11
     5e8:	90 62       	ori	r25, 0x20	; 32
     5ea:	9b b9       	out	0x0b, r25	; 11
     5ec:	82 ff       	sbrs	r24, 2
     5ee:	03 c0       	rjmp	.+6      	; 0x5f6 <LCD_1602A_send_nibble+0x24>
     5f0:	9b b1       	in	r25, 0x0b	; 11
     5f2:	90 64       	ori	r25, 0x40	; 64
     5f4:	9b b9       	out	0x0b, r25	; 11
     5f6:	83 ff       	sbrs	r24, 3
     5f8:	03 c0       	rjmp	.+6      	; 0x600 <LCD_1602A_send_nibble+0x2e>
     5fa:	8b b1       	in	r24, 0x0b	; 11
     5fc:	80 68       	ori	r24, 0x80	; 128
     5fe:	8b b9       	out	0x0b, r24	; 11
     600:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <LCD_1602A_latch>
     604:	08 95       	ret

00000606 <LCD_1602A_load_command>:
     606:	cf 93       	push	r28
     608:	c8 2f       	mov	r28, r24
     60a:	85 b1       	in	r24, 0x05	; 5
     60c:	8e 7f       	andi	r24, 0xFE	; 254
     60e:	85 b9       	out	0x05, r24	; 5
     610:	8c 2f       	mov	r24, r28
     612:	82 95       	swap	r24
     614:	8f 70       	andi	r24, 0x0F	; 15
     616:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <LCD_1602A_send_nibble>
     61a:	8c 2f       	mov	r24, r28
     61c:	8f 70       	andi	r24, 0x0F	; 15
     61e:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <LCD_1602A_send_nibble>
     622:	cf 91       	pop	r28
     624:	08 95       	ret

00000626 <LCD_1602A_load_data>:
     626:	cf 93       	push	r28
     628:	c8 2f       	mov	r28, r24
     62a:	85 b1       	in	r24, 0x05	; 5
     62c:	81 60       	ori	r24, 0x01	; 1
     62e:	85 b9       	out	0x05, r24	; 5
     630:	8c 2f       	mov	r24, r28
     632:	82 95       	swap	r24
     634:	8f 70       	andi	r24, 0x0F	; 15
     636:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <LCD_1602A_send_nibble>
     63a:	8c 2f       	mov	r24, r28
     63c:	8f 70       	andi	r24, 0x0F	; 15
     63e:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <LCD_1602A_send_nibble>
     642:	cf 91       	pop	r28
     644:	08 95       	ret

00000646 <LCD_1602A_create_char>:

void LCD_1602A_create_char(uint8_t location, uint8_t charmap[])
{
     646:	0f 93       	push	r16
     648:	1f 93       	push	r17
     64a:	cf 93       	push	r28
     64c:	8b 01       	movw	r16, r22
    location &= 0x07;                               // only 0–7 valid
     64e:	87 70       	andi	r24, 0x07	; 7
    LCD_1602A_load_command(0x40 | (location << 3)); // Set CGRAM address
     650:	90 e0       	ldi	r25, 0x00	; 0
     652:	88 0f       	add	r24, r24
     654:	99 1f       	adc	r25, r25
     656:	88 0f       	add	r24, r24
     658:	99 1f       	adc	r25, r25
     65a:	88 0f       	add	r24, r24
     65c:	99 1f       	adc	r25, r25
     65e:	80 64       	ori	r24, 0x40	; 64
     660:	0e 94 03 03 	call	0x606	; 0x606 <LCD_1602A_load_command>

    for (uint8_t i = 0; i < 8; i++)
     664:	c0 e0       	ldi	r28, 0x00	; 0
     666:	07 c0       	rjmp	.+14     	; 0x676 <LCD_1602A_create_char+0x30>
    {
        LCD_1602A_load_data(charmap[i]); // write pixel pattern
     668:	f8 01       	movw	r30, r16
     66a:	ec 0f       	add	r30, r28
     66c:	f1 1d       	adc	r31, r1
     66e:	80 81       	ld	r24, Z
     670:	0e 94 13 03 	call	0x626	; 0x626 <LCD_1602A_load_data>
void LCD_1602A_create_char(uint8_t location, uint8_t charmap[])
{
    location &= 0x07;                               // only 0–7 valid
    LCD_1602A_load_command(0x40 | (location << 3)); // Set CGRAM address

    for (uint8_t i = 0; i < 8; i++)
     674:	cf 5f       	subi	r28, 0xFF	; 255
     676:	c8 30       	cpi	r28, 0x08	; 8
     678:	b8 f3       	brcs	.-18     	; 0x668 <LCD_1602A_create_char+0x22>
    {
        LCD_1602A_load_data(charmap[i]); // write pixel pattern
    }

    // Return to DDRAM (display memory)
    LCD_1602A_load_command(0x80);
     67a:	80 e8       	ldi	r24, 0x80	; 128
     67c:	0e 94 03 03 	call	0x606	; 0x606 <LCD_1602A_load_command>
}
     680:	cf 91       	pop	r28
     682:	1f 91       	pop	r17
     684:	0f 91       	pop	r16
     686:	08 95       	ret

00000688 <LCD_1602A_init>:
    initialize the lcd in 4-bit mode
    params: void
    returns: void
*/
void LCD_1602A_init(void)
{
     688:	cf 93       	push	r28
     68a:	df 93       	push	r29
     68c:	cd b7       	in	r28, 0x3d	; 61
     68e:	de b7       	in	r29, 0x3e	; 62
     690:	a8 97       	sbiw	r28, 0x28	; 40
     692:	0f b6       	in	r0, 0x3f	; 63
     694:	f8 94       	cli
     696:	de bf       	out	0x3e, r29	; 62
     698:	0f be       	out	0x3f, r0	; 63
     69a:	cd bf       	out	0x3d, r28	; 61
    LCD_1602A_CTRL_DDR |= (1 << LCD_1602A_RS) | (1 << LCD_1602A_EN);
     69c:	84 b1       	in	r24, 0x04	; 4
     69e:	83 60       	ori	r24, 0x03	; 3
     6a0:	84 b9       	out	0x04, r24	; 4
    LCD_1602A_DATA_DDR |= (1 << LCD_1602A_D4) | (1 << LCD_1602A_D5) | (1 << LCD_1602A_D6) | (1 << LCD_1602A_D7);
     6a2:	8a b1       	in	r24, 0x0a	; 10
     6a4:	80 6f       	ori	r24, 0xF0	; 240
     6a6:	8a b9       	out	0x0a, r24	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6a8:	2f ef       	ldi	r18, 0xFF	; 255
     6aa:	89 ef       	ldi	r24, 0xF9	; 249
     6ac:	90 e0       	ldi	r25, 0x00	; 0
     6ae:	21 50       	subi	r18, 0x01	; 1
     6b0:	80 40       	sbci	r24, 0x00	; 0
     6b2:	90 40       	sbci	r25, 0x00	; 0
     6b4:	e1 f7       	brne	.-8      	; 0x6ae <LCD_1602A_init+0x26>
     6b6:	00 c0       	rjmp	.+0      	; 0x6b8 <LCD_1602A_init+0x30>
     6b8:	00 00       	nop

    _delay_ms(20); // Wait for LCD power up
    LCD_1602A_send_nibble(DISPLAY_WAIT_POWER_UP);
     6ba:	83 e0       	ldi	r24, 0x03	; 3
     6bc:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <LCD_1602A_send_nibble>
     6c0:	8f e1       	ldi	r24, 0x1F	; 31
     6c2:	9e e4       	ldi	r25, 0x4E	; 78
     6c4:	01 97       	sbiw	r24, 0x01	; 1
     6c6:	f1 f7       	brne	.-4      	; 0x6c4 <LCD_1602A_init+0x3c>
     6c8:	00 c0       	rjmp	.+0      	; 0x6ca <LCD_1602A_init+0x42>
     6ca:	00 00       	nop
    _delay_ms(5);
    LCD_1602A_send_nibble(DISPLAY_WAIT_POWER_UP);
     6cc:	83 e0       	ldi	r24, 0x03	; 3
     6ce:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <LCD_1602A_send_nibble>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6d2:	87 e5       	ldi	r24, 0x57	; 87
     6d4:	92 e0       	ldi	r25, 0x02	; 2
     6d6:	01 97       	sbiw	r24, 0x01	; 1
     6d8:	f1 f7       	brne	.-4      	; 0x6d6 <LCD_1602A_init+0x4e>
     6da:	00 c0       	rjmp	.+0      	; 0x6dc <LCD_1602A_init+0x54>
     6dc:	00 00       	nop
    _delay_us(150);
    LCD_1602A_send_nibble(DISPLAY_WAIT_POWER_UP);
     6de:	83 e0       	ldi	r24, 0x03	; 3
     6e0:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <LCD_1602A_send_nibble>

    LCD_1602A_send_nibble(DISPLAY_4_BIT_MODE); // Switch to 4-bit mode
     6e4:	82 e0       	ldi	r24, 0x02	; 2
     6e6:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <LCD_1602A_send_nibble>

    LCD_1602A_load_command(DISPLAY_FUNCTION_SET_4BIT_2LINE);
     6ea:	88 e2       	ldi	r24, 0x28	; 40
     6ec:	0e 94 03 03 	call	0x606	; 0x606 <LCD_1602A_load_command>
    LCD_1602A_load_command(DISPLAY_DISPLAY_ON_CURSOR_OFF);
     6f0:	8c e0       	ldi	r24, 0x0C	; 12
     6f2:	0e 94 03 03 	call	0x606	; 0x606 <LCD_1602A_load_command>
    LCD_1602A_load_command(DISPLAY_ENTRY_MODE_SET);
     6f6:	86 e0       	ldi	r24, 0x06	; 6
     6f8:	0e 94 03 03 	call	0x606	; 0x606 <LCD_1602A_load_command>
    LCD_1602A_load_command(DISPLAY_CLEAR_SCREEN);
     6fc:	81 e0       	ldi	r24, 0x01	; 1
     6fe:	0e 94 03 03 	call	0x606	; 0x606 <LCD_1602A_load_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     702:	8f e3       	ldi	r24, 0x3F	; 63
     704:	9f e1       	ldi	r25, 0x1F	; 31
     706:	01 97       	sbiw	r24, 0x01	; 1
     708:	f1 f7       	brne	.-4      	; 0x706 <LCD_1602A_init+0x7e>
     70a:	00 c0       	rjmp	.+0      	; 0x70c <LCD_1602A_init+0x84>
     70c:	00 00       	nop
    _delay_ms(2);

    /* create arrow glyphs once during init (used by display_set)
       location 0..3 reserved for arrows */
    uint8_t arrow_down[8] = {
     70e:	88 e0       	ldi	r24, 0x08	; 8
     710:	ee e4       	ldi	r30, 0x4E	; 78
     712:	f1 e0       	ldi	r31, 0x01	; 1
     714:	de 01       	movw	r26, r28
     716:	11 96       	adiw	r26, 0x01	; 1
     718:	01 90       	ld	r0, Z+
     71a:	0d 92       	st	X+, r0
     71c:	8a 95       	dec	r24
     71e:	e1 f7       	brne	.-8      	; 0x718 <LCD_1602A_init+0x90>
        0x0E,
        0x04,
        0x00
    };

    uint8_t arrow_up[8] = {
     720:	88 e0       	ldi	r24, 0x08	; 8
     722:	e6 e5       	ldi	r30, 0x56	; 86
     724:	f1 e0       	ldi	r31, 0x01	; 1
     726:	de 01       	movw	r26, r28
     728:	19 96       	adiw	r26, 0x09	; 9
     72a:	01 90       	ld	r0, Z+
     72c:	0d 92       	st	X+, r0
     72e:	8a 95       	dec	r24
     730:	e1 f7       	brne	.-8      	; 0x72a <LCD_1602A_init+0xa2>
        0x04,
        0x04,
        0x00
    };

    uint8_t arrow_right[8] = {
     732:	88 e0       	ldi	r24, 0x08	; 8
     734:	ee e5       	ldi	r30, 0x5E	; 94
     736:	f1 e0       	ldi	r31, 0x01	; 1
     738:	de 01       	movw	r26, r28
     73a:	51 96       	adiw	r26, 0x11	; 17
     73c:	01 90       	ld	r0, Z+
     73e:	0d 92       	st	X+, r0
     740:	8a 95       	dec	r24
     742:	e1 f7       	brne	.-8      	; 0x73c <LCD_1602A_init+0xb4>
        0x04,
        0x00,
        0x00
    };

    uint8_t arrow_left[8] = {
     744:	88 e0       	ldi	r24, 0x08	; 8
     746:	e6 e6       	ldi	r30, 0x66	; 102
     748:	f1 e0       	ldi	r31, 0x01	; 1
     74a:	de 01       	movw	r26, r28
     74c:	59 96       	adiw	r26, 0x19	; 25
     74e:	01 90       	ld	r0, Z+
     750:	0d 92       	st	X+, r0
     752:	8a 95       	dec	r24
     754:	e1 f7       	brne	.-8      	; 0x74e <LCD_1602A_init+0xc6>
        0x04,
        0x00,
        0x00
    };

    uint8_t alert_bell[8] = {
     756:	88 e0       	ldi	r24, 0x08	; 8
     758:	ee e6       	ldi	r30, 0x6E	; 110
     75a:	f1 e0       	ldi	r31, 0x01	; 1
     75c:	de 01       	movw	r26, r28
     75e:	91 96       	adiw	r26, 0x21	; 33
     760:	01 90       	ld	r0, Z+
     762:	0d 92       	st	X+, r0
     764:	8a 95       	dec	r24
     766:	e1 f7       	brne	.-8      	; 0x760 <LCD_1602A_init+0xd8>
        0x04,
        0x00,
        0x00
    };

    LCD_1602A_create_char(0, arrow_down); // store at location 0
     768:	be 01       	movw	r22, r28
     76a:	6f 5f       	subi	r22, 0xFF	; 255
     76c:	7f 4f       	sbci	r23, 0xFF	; 255
     76e:	80 e0       	ldi	r24, 0x00	; 0
     770:	0e 94 23 03 	call	0x646	; 0x646 <LCD_1602A_create_char>
    LCD_1602A_create_char(1, arrow_up);   // store at location 1
     774:	be 01       	movw	r22, r28
     776:	67 5f       	subi	r22, 0xF7	; 247
     778:	7f 4f       	sbci	r23, 0xFF	; 255
     77a:	81 e0       	ldi	r24, 0x01	; 1
     77c:	0e 94 23 03 	call	0x646	; 0x646 <LCD_1602A_create_char>
    LCD_1602A_create_char(2, arrow_left);   // store at location 2
     780:	be 01       	movw	r22, r28
     782:	67 5e       	subi	r22, 0xE7	; 231
     784:	7f 4f       	sbci	r23, 0xFF	; 255
     786:	82 e0       	ldi	r24, 0x02	; 2
     788:	0e 94 23 03 	call	0x646	; 0x646 <LCD_1602A_create_char>
    LCD_1602A_create_char(3, arrow_right);   // store at location 3
     78c:	be 01       	movw	r22, r28
     78e:	6f 5e       	subi	r22, 0xEF	; 239
     790:	7f 4f       	sbci	r23, 0xFF	; 255
     792:	83 e0       	ldi	r24, 0x03	; 3
     794:	0e 94 23 03 	call	0x646	; 0x646 <LCD_1602A_create_char>
    LCD_1602A_create_char(4, alert_bell);   // store at location 4
     798:	be 01       	movw	r22, r28
     79a:	6f 5d       	subi	r22, 0xDF	; 223
     79c:	7f 4f       	sbci	r23, 0xFF	; 255
     79e:	84 e0       	ldi	r24, 0x04	; 4
     7a0:	0e 94 23 03 	call	0x646	; 0x646 <LCD_1602A_create_char>
}
     7a4:	a8 96       	adiw	r28, 0x28	; 40
     7a6:	0f b6       	in	r0, 0x3f	; 63
     7a8:	f8 94       	cli
     7aa:	de bf       	out	0x3e, r29	; 62
     7ac:	0f be       	out	0x3f, r0	; 63
     7ae:	cd bf       	out	0x3d, r28	; 61
     7b0:	df 91       	pop	r29
     7b2:	cf 91       	pop	r28
     7b4:	08 95       	ret

000007b6 <DS18B20_reset>:
    params: void
    returns: uint8_t - 1 if presence pulse detected, 0 otherwise
*/
uint8_t DS18B20_reset(void)
{
    DS18B20_OUTPUT();
     7b6:	87 b1       	in	r24, 0x07	; 7
     7b8:	81 60       	ori	r24, 0x01	; 1
     7ba:	87 b9       	out	0x07, r24	; 7
    DS18B20_LOW();
     7bc:	88 b1       	in	r24, 0x08	; 8
     7be:	8e 7f       	andi	r24, 0xFE	; 254
     7c0:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7c2:	8f e7       	ldi	r24, 0x7F	; 127
     7c4:	97 e0       	ldi	r25, 0x07	; 7
     7c6:	01 97       	sbiw	r24, 0x01	; 1
     7c8:	f1 f7       	brne	.-4      	; 0x7c6 <DS18B20_reset+0x10>
     7ca:	00 c0       	rjmp	.+0      	; 0x7cc <DS18B20_reset+0x16>
     7cc:	00 00       	nop
    _delay_us(480);
    DS18B20_INPUT();
     7ce:	87 b1       	in	r24, 0x07	; 7
     7d0:	8e 7f       	andi	r24, 0xFE	; 254
     7d2:	87 b9       	out	0x07, r24	; 7
     7d4:	ef ee       	ldi	r30, 0xEF	; 239
     7d6:	f0 e0       	ldi	r31, 0x00	; 0
     7d8:	31 97       	sbiw	r30, 0x01	; 1
     7da:	f1 f7       	brne	.-4      	; 0x7d8 <DS18B20_reset+0x22>
     7dc:	00 c0       	rjmp	.+0      	; 0x7de <DS18B20_reset+0x28>
     7de:	00 00       	nop
    _delay_us(60);

    uint8_t presence = !(DS18B20_PIN & (1 << DS18B20_DQ));
     7e0:	96 b1       	in	r25, 0x06	; 6
     7e2:	81 e0       	ldi	r24, 0x01	; 1
     7e4:	89 27       	eor	r24, r25
     7e6:	81 70       	andi	r24, 0x01	; 1
     7e8:	ef e8       	ldi	r30, 0x8F	; 143
     7ea:	f6 e0       	ldi	r31, 0x06	; 6
     7ec:	31 97       	sbiw	r30, 0x01	; 1
     7ee:	f1 f7       	brne	.-4      	; 0x7ec <DS18B20_reset+0x36>
     7f0:	00 c0       	rjmp	.+0      	; 0x7f2 <DS18B20_reset+0x3c>
     7f2:	00 00       	nop
    _delay_us(420);
    return presence;
}
     7f4:	08 95       	ret

000007f6 <DS18B20_write_bit>:
    params: uint8_t bit - the bit to write (0 or 1)
    returns: void
*/
void DS18B20_write_bit(uint8_t bit)
{
    DS18B20_OUTPUT();
     7f6:	97 b1       	in	r25, 0x07	; 7
     7f8:	91 60       	ori	r25, 0x01	; 1
     7fa:	97 b9       	out	0x07, r25	; 7
    DS18B20_LOW();
     7fc:	98 b1       	in	r25, 0x08	; 8
     7fe:	9e 7f       	andi	r25, 0xFE	; 254
     800:	98 b9       	out	0x08, r25	; 8
    if (bit)
     802:	88 23       	and	r24, r24
     804:	71 f0       	breq	.+28     	; 0x822 <__DATA_REGION_LENGTH__+0x22>
     806:	85 e0       	ldi	r24, 0x05	; 5
     808:	8a 95       	dec	r24
     80a:	f1 f7       	brne	.-4      	; 0x808 <__DATA_REGION_LENGTH__+0x8>
     80c:	00 00       	nop
    {
        _delay_us(1);
        DS18B20_INPUT();
     80e:	87 b1       	in	r24, 0x07	; 7
     810:	8e 7f       	andi	r24, 0xFE	; 254
     812:	87 b9       	out	0x07, r24	; 7
     814:	8f ee       	ldi	r24, 0xEF	; 239
     816:	90 e0       	ldi	r25, 0x00	; 0
     818:	01 97       	sbiw	r24, 0x01	; 1
     81a:	f1 f7       	brne	.-4      	; 0x818 <__DATA_REGION_LENGTH__+0x18>
     81c:	00 c0       	rjmp	.+0      	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
     81e:	00 00       	nop
     820:	08 95       	ret
     822:	8f ee       	ldi	r24, 0xEF	; 239
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	01 97       	sbiw	r24, 0x01	; 1
     828:	f1 f7       	brne	.-4      	; 0x826 <__DATA_REGION_LENGTH__+0x26>
     82a:	00 c0       	rjmp	.+0      	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
     82c:	00 00       	nop
        _delay_us(60);
    }
    else
    {
        _delay_us(60);
        DS18B20_INPUT();
     82e:	87 b1       	in	r24, 0x07	; 7
     830:	8e 7f       	andi	r24, 0xFE	; 254
     832:	87 b9       	out	0x07, r24	; 7
     834:	08 95       	ret

00000836 <DS18B20_write_byte>:
    write a byte to the DS18B20 sensor
    params: uint8_t data - the byte to write
    returns: void
*/
void DS18B20_write_byte(uint8_t data)
{
     836:	cf 93       	push	r28
     838:	df 93       	push	r29
     83a:	d8 2f       	mov	r29, r24
    for (uint8_t i = 0; i < 8; i++)
     83c:	c0 e0       	ldi	r28, 0x00	; 0
     83e:	06 c0       	rjmp	.+12     	; 0x84c <DS18B20_write_byte+0x16>
    {
        DS18B20_write_bit(data & 0x01);
     840:	8d 2f       	mov	r24, r29
     842:	81 70       	andi	r24, 0x01	; 1
     844:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <DS18B20_write_bit>
        data >>= 1;
     848:	d6 95       	lsr	r29
    params: uint8_t data - the byte to write
    returns: void
*/
void DS18B20_write_byte(uint8_t data)
{
    for (uint8_t i = 0; i < 8; i++)
     84a:	cf 5f       	subi	r28, 0xFF	; 255
     84c:	c8 30       	cpi	r28, 0x08	; 8
     84e:	c0 f3       	brcs	.-16     	; 0x840 <DS18B20_write_byte+0xa>
    {
        DS18B20_write_bit(data & 0x01);
        data >>= 1;
    }
}
     850:	df 91       	pop	r29
     852:	cf 91       	pop	r28
     854:	08 95       	ret

00000856 <DS18B20_read_bit>:
    returns: uint8_t - the bit read (0 or 1)
*/
uint8_t DS18B20_read_bit(void)
{
    uint8_t bit;
    DS18B20_OUTPUT();
     856:	87 b1       	in	r24, 0x07	; 7
     858:	81 60       	ori	r24, 0x01	; 1
     85a:	87 b9       	out	0x07, r24	; 7
    DS18B20_LOW();
     85c:	88 b1       	in	r24, 0x08	; 8
     85e:	8e 7f       	andi	r24, 0xFE	; 254
     860:	88 b9       	out	0x08, r24	; 8
     862:	8a e0       	ldi	r24, 0x0A	; 10
     864:	8a 95       	dec	r24
     866:	f1 f7       	brne	.-4      	; 0x864 <DS18B20_read_bit+0xe>
     868:	00 c0       	rjmp	.+0      	; 0x86a <DS18B20_read_bit+0x14>
    _delay_us(2);
    DS18B20_INPUT();
     86a:	87 b1       	in	r24, 0x07	; 7
     86c:	8e 7f       	andi	r24, 0xFE	; 254
     86e:	87 b9       	out	0x07, r24	; 7
     870:	e5 e3       	ldi	r30, 0x35	; 53
     872:	ea 95       	dec	r30
     874:	f1 f7       	brne	.-4      	; 0x872 <DS18B20_read_bit+0x1c>
     876:	00 00       	nop
    _delay_us(10);
    bit = (DS18B20_PIN & (1 << DS18B20_DQ)) ? 1 : 0;
     878:	86 b1       	in	r24, 0x06	; 6
     87a:	81 70       	andi	r24, 0x01	; 1
     87c:	e7 ec       	ldi	r30, 0xC7	; 199
     87e:	f0 e0       	ldi	r31, 0x00	; 0
     880:	31 97       	sbiw	r30, 0x01	; 1
     882:	f1 f7       	brne	.-4      	; 0x880 <DS18B20_read_bit+0x2a>
     884:	00 c0       	rjmp	.+0      	; 0x886 <DS18B20_read_bit+0x30>
     886:	00 00       	nop
    _delay_us(50);
    return bit;
}
     888:	08 95       	ret

0000088a <DS18B20_read_byte>:
    read a byte from the DS18B20 sensor
    params: void
    returns: uint8_t - the byte read
*/
uint8_t DS18B20_read_byte(void)
{
     88a:	cf 93       	push	r28
     88c:	df 93       	push	r29
    uint8_t data = 0;
    for (uint8_t i = 0; i < 8; i++)
     88e:	c0 e0       	ldi	r28, 0x00	; 0
    params: void
    returns: uint8_t - the byte read
*/
uint8_t DS18B20_read_byte(void)
{
    uint8_t data = 0;
     890:	d0 e0       	ldi	r29, 0x00	; 0
    for (uint8_t i = 0; i < 8; i++)
     892:	06 c0       	rjmp	.+12     	; 0x8a0 <DS18B20_read_byte+0x16>
    {
        data >>= 1;
     894:	d6 95       	lsr	r29
        if (DS18B20_read_bit())
     896:	0e 94 2b 04 	call	0x856	; 0x856 <DS18B20_read_bit>
     89a:	81 11       	cpse	r24, r1
            data |= 0x80;
     89c:	d0 68       	ori	r29, 0x80	; 128
    returns: uint8_t - the byte read
*/
uint8_t DS18B20_read_byte(void)
{
    uint8_t data = 0;
    for (uint8_t i = 0; i < 8; i++)
     89e:	cf 5f       	subi	r28, 0xFF	; 255
     8a0:	c8 30       	cpi	r28, 0x08	; 8
     8a2:	c0 f3       	brcs	.-16     	; 0x894 <DS18B20_read_byte+0xa>
        data >>= 1;
        if (DS18B20_read_bit())
            data |= 0x80;
    }
    return data;
}
     8a4:	8d 2f       	mov	r24, r29
     8a6:	df 91       	pop	r29
     8a8:	cf 91       	pop	r28
     8aa:	08 95       	ret

000008ac <DS18B20_read_temperature>:
    read temperature from the DS18B20 sensor
    params: void
    returns: float - the temperature in degrees Celsius
*/
float DS18B20_read_temperature(void)
{
     8ac:	cf 93       	push	r28
    uint8_t temp_l, temp_h;
    int16_t temp;

    DS18B20_reset();
     8ae:	0e 94 db 03 	call	0x7b6	; 0x7b6 <DS18B20_reset>
    DS18B20_write_byte(0xCC);
     8b2:	8c ec       	ldi	r24, 0xCC	; 204
     8b4:	0e 94 1b 04 	call	0x836	; 0x836 <DS18B20_write_byte>
    DS18B20_write_byte(0x44);
     8b8:	84 e4       	ldi	r24, 0x44	; 68
     8ba:	0e 94 1b 04 	call	0x836	; 0x836 <DS18B20_write_byte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8be:	2f ef       	ldi	r18, 0xFF	; 255
     8c0:	8e e9       	ldi	r24, 0x9E	; 158
     8c2:	94 e2       	ldi	r25, 0x24	; 36
     8c4:	21 50       	subi	r18, 0x01	; 1
     8c6:	80 40       	sbci	r24, 0x00	; 0
     8c8:	90 40       	sbci	r25, 0x00	; 0
     8ca:	e1 f7       	brne	.-8      	; 0x8c4 <DS18B20_read_temperature+0x18>
     8cc:	00 c0       	rjmp	.+0      	; 0x8ce <DS18B20_read_temperature+0x22>
     8ce:	00 00       	nop
    _delay_ms(750);

    DS18B20_reset();
     8d0:	0e 94 db 03 	call	0x7b6	; 0x7b6 <DS18B20_reset>
    DS18B20_write_byte(0xCC);
     8d4:	8c ec       	ldi	r24, 0xCC	; 204
     8d6:	0e 94 1b 04 	call	0x836	; 0x836 <DS18B20_write_byte>
    DS18B20_write_byte(0xBE);
     8da:	8e eb       	ldi	r24, 0xBE	; 190
     8dc:	0e 94 1b 04 	call	0x836	; 0x836 <DS18B20_write_byte>

    temp_l = DS18B20_read_byte();
     8e0:	0e 94 45 04 	call	0x88a	; 0x88a <DS18B20_read_byte>
     8e4:	c8 2f       	mov	r28, r24
    temp_h = DS18B20_read_byte();
     8e6:	0e 94 45 04 	call	0x88a	; 0x88a <DS18B20_read_byte>

    temp = (temp_h << 8) | temp_l;
     8ea:	68 2f       	mov	r22, r24
     8ec:	70 e0       	ldi	r23, 0x00	; 0
     8ee:	76 2f       	mov	r23, r22
     8f0:	66 27       	eor	r22, r22
     8f2:	6c 2b       	or	r22, r28

    return (float)temp / 16.0;
     8f4:	07 2e       	mov	r0, r23
     8f6:	00 0c       	add	r0, r0
     8f8:	88 0b       	sbc	r24, r24
     8fa:	99 0b       	sbc	r25, r25
     8fc:	0e 94 68 10 	call	0x20d0	; 0x20d0 <__floatsisf>
     900:	20 e0       	ldi	r18, 0x00	; 0
     902:	30 e0       	ldi	r19, 0x00	; 0
     904:	40 e8       	ldi	r20, 0x80	; 128
     906:	5d e3       	ldi	r21, 0x3D	; 61
     908:	0e 94 1d 11 	call	0x223a	; 0x223a <__mulsf3>
}
     90c:	cf 91       	pop	r28
     90e:	08 95       	ret

00000910 <HCSR04_init>:
    params: void
    returns: void
*/
void HCSR04_init(void)
{
    HCSR04_TRIG_DDR |= (1 << HCSR04_TRIG_PIN);
     910:	8a b1       	in	r24, 0x0a	; 10
     912:	84 60       	ori	r24, 0x04	; 4
     914:	8a b9       	out	0x0a, r24	; 10
    HCSR04_ECHO_DDR &= ~(1 << HCSR04_ECHO_PIN);
     916:	8a b1       	in	r24, 0x0a	; 10
     918:	87 7f       	andi	r24, 0xF7	; 247
     91a:	8a b9       	out	0x0a, r24	; 10
     91c:	08 95       	ret

0000091e <HCSR04_trigger>:
    returns: void
*/
void HCSR04_trigger(void)
{
    /* Proper trigger: low for a short time, then high for 10us pulse */
    HCSR04_TRIG_PORT &= ~(1 << HCSR04_TRIG_PIN);
     91e:	8b b1       	in	r24, 0x0b	; 11
     920:	8b 7f       	andi	r24, 0xFB	; 251
     922:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     924:	8a e0       	ldi	r24, 0x0A	; 10
     926:	8a 95       	dec	r24
     928:	f1 f7       	brne	.-4      	; 0x926 <HCSR04_trigger+0x8>
     92a:	00 c0       	rjmp	.+0      	; 0x92c <HCSR04_trigger+0xe>
    _delay_us(2);
    HCSR04_TRIG_PORT |= (1 << HCSR04_TRIG_PIN);
     92c:	8b b1       	in	r24, 0x0b	; 11
     92e:	84 60       	ori	r24, 0x04	; 4
     930:	8b b9       	out	0x0b, r24	; 11
     932:	85 e3       	ldi	r24, 0x35	; 53
     934:	8a 95       	dec	r24
     936:	f1 f7       	brne	.-4      	; 0x934 <HCSR04_trigger+0x16>
     938:	00 00       	nop
    _delay_us(10);
    HCSR04_TRIG_PORT &= ~(1 << HCSR04_TRIG_PIN);
     93a:	8b b1       	in	r24, 0x0b	; 11
     93c:	8b 7f       	andi	r24, 0xFB	; 251
     93e:	8b b9       	out	0x0b, r24	; 11
     940:	08 95       	ret

00000942 <HCSR04_read>:
*/
uint16_t HCSR04_read(void)
{
    uint32_t count = 0;

    while (!(HCSR04_ECHO_DEF_PIN & (1 << HCSR04_ECHO_PIN)));
     942:	4b 9b       	sbis	0x09, 3	; 9
     944:	fe cf       	rjmp	.-4      	; 0x942 <HCSR04_read>
     946:	60 e0       	ldi	r22, 0x00	; 0
     948:	70 e0       	ldi	r23, 0x00	; 0
     94a:	cb 01       	movw	r24, r22
     94c:	08 c0       	rjmp	.+16     	; 0x95e <HCSR04_read+0x1c>
     94e:	25 e0       	ldi	r18, 0x05	; 5
     950:	2a 95       	dec	r18
     952:	f1 f7       	brne	.-4      	; 0x950 <HCSR04_read+0xe>
     954:	00 00       	nop

    while (HCSR04_ECHO_DEF_PIN & (1 << HCSR04_ECHO_PIN))
    {
        _delay_us(1);
        count++;
     956:	6f 5f       	subi	r22, 0xFF	; 255
     958:	7f 4f       	sbci	r23, 0xFF	; 255
     95a:	8f 4f       	sbci	r24, 0xFF	; 255
     95c:	9f 4f       	sbci	r25, 0xFF	; 255
{
    uint32_t count = 0;

    while (!(HCSR04_ECHO_DEF_PIN & (1 << HCSR04_ECHO_PIN)));

    while (HCSR04_ECHO_DEF_PIN & (1 << HCSR04_ECHO_PIN))
     95e:	4b 99       	sbic	0x09, 3	; 9
     960:	f6 cf       	rjmp	.-20     	; 0x94e <HCSR04_read+0xc>
    {
        _delay_us(1);
        count++;
    }

    return (uint16_t)(count / 58.0);
     962:	0e 94 66 10 	call	0x20cc	; 0x20cc <__floatunsisf>
     966:	20 e0       	ldi	r18, 0x00	; 0
     968:	30 e0       	ldi	r19, 0x00	; 0
     96a:	48 e6       	ldi	r20, 0x68	; 104
     96c:	52 e4       	ldi	r21, 0x42	; 66
     96e:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <__divsf3>
     972:	0e 94 37 10 	call	0x206e	; 0x206e <__fixunssfsi>
}
     976:	cb 01       	movw	r24, r22
     978:	08 95       	ret

0000097a <HCSR04_get_distance>:
    params: void
    returns: uint16_t - the distance in centimeters
*/
uint16_t HCSR04_get_distance(void)
{
    HCSR04_trigger();
     97a:	0e 94 8f 04 	call	0x91e	; 0x91e <HCSR04_trigger>
    return HCSR04_read();
     97e:	0e 94 a1 04 	call	0x942	; 0x942 <HCSR04_read>
}
     982:	08 95       	ret

00000984 <KEYPAD_init>:
    params: void
    returns: void
*/
void KEYPAD_init(void)
{
    KEYPAD_DDR &= ~((1 << KEYPAD_KEY_1) | (1 << KEYPAD_KEY_2) | (1 << KEYPAD_KEY_3) | (1 << KEYPAD_KEY_4));
     984:	84 b1       	in	r24, 0x04	; 4
     986:	83 7c       	andi	r24, 0xC3	; 195
     988:	84 b9       	out	0x04, r24	; 4
    KEYPAD_PORT |= (1 << KEYPAD_KEY_1) | (1 << KEYPAD_KEY_2) | (1 << KEYPAD_KEY_3) | (1 << KEYPAD_KEY_4);
     98a:	85 b1       	in	r24, 0x05	; 5
     98c:	8c 63       	ori	r24, 0x3C	; 60
     98e:	85 b9       	out	0x05, r24	; 5
     990:	08 95       	ret

00000992 <KEYPAD_read>:
    params: void
    returns: uint8_t - the key number (1-4) or KEYPAD_NO_KEY if no key is pressed
*/
uint8_t KEYPAD_read(void)
{
    if (!(KEYPAD_PIN & (1 << KEYPAD_KEY_1))) return 1;
     992:	1a 9b       	sbis	0x03, 2	; 3
     994:	08 c0       	rjmp	.+16     	; 0x9a6 <KEYPAD_read+0x14>
    if (!(KEYPAD_PIN & (1 << KEYPAD_KEY_2))) return 2;
     996:	1b 9b       	sbis	0x03, 3	; 3
     998:	08 c0       	rjmp	.+16     	; 0x9aa <KEYPAD_read+0x18>
    if (!(KEYPAD_PIN & (1 << KEYPAD_KEY_3))) return 3;
     99a:	1c 9b       	sbis	0x03, 4	; 3
     99c:	08 c0       	rjmp	.+16     	; 0x9ae <KEYPAD_read+0x1c>
    if (!(KEYPAD_PIN & (1 << KEYPAD_KEY_4))) return 4;
     99e:	1d 99       	sbic	0x03, 5	; 3
     9a0:	08 c0       	rjmp	.+16     	; 0x9b2 <KEYPAD_read+0x20>
     9a2:	84 e0       	ldi	r24, 0x04	; 4
     9a4:	08 95       	ret
    params: void
    returns: uint8_t - the key number (1-4) or KEYPAD_NO_KEY if no key is pressed
*/
uint8_t KEYPAD_read(void)
{
    if (!(KEYPAD_PIN & (1 << KEYPAD_KEY_1))) return 1;
     9a6:	81 e0       	ldi	r24, 0x01	; 1
     9a8:	08 95       	ret
    if (!(KEYPAD_PIN & (1 << KEYPAD_KEY_2))) return 2;
     9aa:	82 e0       	ldi	r24, 0x02	; 2
     9ac:	08 95       	ret
    if (!(KEYPAD_PIN & (1 << KEYPAD_KEY_3))) return 3;
     9ae:	83 e0       	ldi	r24, 0x03	; 3
     9b0:	08 95       	ret
    if (!(KEYPAD_PIN & (1 << KEYPAD_KEY_4))) return 4;
    return KEYPAD_NO_KEY;
     9b2:	85 e0       	ldi	r24, 0x05	; 5
}
     9b4:	08 95       	ret

000009b6 <display_set>:
    params: const unsigned char* title - title string (max 12 chars)
            const unsigned char* data - data string (max 16 chars)
    returns: void
*/
void display_set(const unsigned char *title, const unsigned char *data)
{
     9b6:	cf 92       	push	r12
     9b8:	df 92       	push	r13
     9ba:	ef 92       	push	r14
     9bc:	ff 92       	push	r15
     9be:	0f 93       	push	r16
     9c0:	1f 93       	push	r17
     9c2:	cf 93       	push	r28
     9c4:	df 93       	push	r29
     9c6:	cd b7       	in	r28, 0x3d	; 61
     9c8:	de b7       	in	r29, 0x3e	; 62
     9ca:	6c 97       	sbiw	r28, 0x1c	; 28
     9cc:	0f b6       	in	r0, 0x3f	; 63
     9ce:	f8 94       	cli
     9d0:	de bf       	out	0x3e, r29	; 62
     9d2:	0f be       	out	0x3f, r0	; 63
     9d4:	cd bf       	out	0x3d, r28	; 61
     9d6:	c8 2e       	mov	r12, r24
     9d8:	d9 2e       	mov	r13, r25
     9da:	db 01       	movw	r26, r22
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9dc:	8f e3       	ldi	r24, 0x3F	; 63
     9de:	9f e1       	ldi	r25, 0x1F	; 31
     9e0:	01 97       	sbiw	r24, 0x01	; 1
     9e2:	f1 f7       	brne	.-4      	; 0x9e0 <display_set+0x2a>
     9e4:	00 c0       	rjmp	.+0      	; 0x9e6 <display_set+0x30>
     9e6:	00 00       	nop
    unsigned char line1[12];
    unsigned char line2[16];

    // prepare line1: copy up to 12 chars from title, pad with spaces
    int i = 0;
    for (; i < 12 && *title; ++i)
     9e8:	ec 2c       	mov	r14, r12
     9ea:	fd 2c       	mov	r15, r13

    unsigned char line1[12];
    unsigned char line2[16];

    // prepare line1: copy up to 12 chars from title, pad with spaces
    int i = 0;
     9ec:	80 e0       	ldi	r24, 0x00	; 0
     9ee:	90 e0       	ldi	r25, 0x00	; 0
    for (; i < 12 && *title; ++i)
     9f0:	0b c0       	rjmp	.+22     	; 0xa08 <display_set+0x52>
        line1[i] = *title++;
     9f2:	ef ef       	ldi	r30, 0xFF	; 255
     9f4:	ee 1a       	sub	r14, r30
     9f6:	fe 0a       	sbc	r15, r30
     9f8:	e1 e0       	ldi	r30, 0x01	; 1
     9fa:	f0 e0       	ldi	r31, 0x00	; 0
     9fc:	ec 0f       	add	r30, r28
     9fe:	fd 1f       	adc	r31, r29
     a00:	e8 0f       	add	r30, r24
     a02:	f9 1f       	adc	r31, r25
     a04:	20 83       	st	Z, r18
    unsigned char line1[12];
    unsigned char line2[16];

    // prepare line1: copy up to 12 chars from title, pad with spaces
    int i = 0;
    for (; i < 12 && *title; ++i)
     a06:	01 96       	adiw	r24, 0x01	; 1
     a08:	8c 30       	cpi	r24, 0x0C	; 12
     a0a:	91 05       	cpc	r25, r1
     a0c:	74 f4       	brge	.+28     	; 0xa2a <display_set+0x74>
     a0e:	f7 01       	movw	r30, r14
     a10:	20 81       	ld	r18, Z
     a12:	21 11       	cpse	r18, r1
     a14:	ee cf       	rjmp	.-36     	; 0x9f2 <display_set+0x3c>
     a16:	09 c0       	rjmp	.+18     	; 0xa2a <display_set+0x74>
        line1[i] = *title++;

    for (; i < 12; ++i)
        line1[i] = ' ';
     a18:	e1 e0       	ldi	r30, 0x01	; 1
     a1a:	f0 e0       	ldi	r31, 0x00	; 0
     a1c:	ec 0f       	add	r30, r28
     a1e:	fd 1f       	adc	r31, r29
     a20:	e8 0f       	add	r30, r24
     a22:	f9 1f       	adc	r31, r25
     a24:	20 e2       	ldi	r18, 0x20	; 32
     a26:	20 83       	st	Z, r18
    // prepare line1: copy up to 12 chars from title, pad with spaces
    int i = 0;
    for (; i < 12 && *title; ++i)
        line1[i] = *title++;

    for (; i < 12; ++i)
     a28:	01 96       	adiw	r24, 0x01	; 1
     a2a:	8c 30       	cpi	r24, 0x0C	; 12
     a2c:	91 05       	cpc	r25, r1
     a2e:	a4 f3       	brlt	.-24     	; 0xa18 <display_set+0x62>
     a30:	80 e0       	ldi	r24, 0x00	; 0
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <display_set+0x92>
    /* custom characters created at init; just write the codes */

    // prepare line2: copy up to 16 chars from data, pad with spaces
    i = 0;
    for (; i < 16 && *data; ++i)
        line2[i] = *data++;
     a36:	11 96       	adiw	r26, 0x01	; 1
     a38:	ed e0       	ldi	r30, 0x0D	; 13
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	ec 0f       	add	r30, r28
     a3e:	fd 1f       	adc	r31, r29
     a40:	e8 0f       	add	r30, r24
     a42:	f9 1f       	adc	r31, r25
     a44:	20 83       	st	Z, r18

    /* custom characters created at init; just write the codes */

    // prepare line2: copy up to 16 chars from data, pad with spaces
    i = 0;
    for (; i < 16 && *data; ++i)
     a46:	01 96       	adiw	r24, 0x01	; 1
     a48:	80 31       	cpi	r24, 0x10	; 16
     a4a:	91 05       	cpc	r25, r1
     a4c:	6c f4       	brge	.+26     	; 0xa68 <display_set+0xb2>
     a4e:	2c 91       	ld	r18, X
     a50:	21 11       	cpse	r18, r1
     a52:	f1 cf       	rjmp	.-30     	; 0xa36 <display_set+0x80>
     a54:	09 c0       	rjmp	.+18     	; 0xa68 <display_set+0xb2>
        line2[i] = *data++;

    // LCD_1602A_load_data(0);

    for (; i < 16; ++i)
        line2[i] = ' ';
     a56:	ed e0       	ldi	r30, 0x0D	; 13
     a58:	f0 e0       	ldi	r31, 0x00	; 0
     a5a:	ec 0f       	add	r30, r28
     a5c:	fd 1f       	adc	r31, r29
     a5e:	e8 0f       	add	r30, r24
     a60:	f9 1f       	adc	r31, r25
     a62:	20 e2       	ldi	r18, 0x20	; 32
     a64:	20 83       	st	Z, r18
    for (; i < 16 && *data; ++i)
        line2[i] = *data++;

    // LCD_1602A_load_data(0);

    for (; i < 16; ++i)
     a66:	01 96       	adiw	r24, 0x01	; 1
     a68:	80 31       	cpi	r24, 0x10	; 16
     a6a:	91 05       	cpc	r25, r1
     a6c:	a4 f3       	brlt	.-24     	; 0xa56 <display_set+0xa0>
        line2[i] = ' ';

    // reset cursor to first line and write 12 chars
    LCD_1602A_load_command(DISPLAY_SET_CURSOR_LINE_1);
     a6e:	80 e8       	ldi	r24, 0x80	; 128
     a70:	0e 94 03 03 	call	0x606	; 0x606 <LCD_1602A_load_command>
    for (i = 0; i < 12; ++i)
     a74:	00 e0       	ldi	r16, 0x00	; 0
     a76:	10 e0       	ldi	r17, 0x00	; 0
     a78:	0b c0       	rjmp	.+22     	; 0xa90 <display_set+0xda>
    {
        LCD_1602A_load_data(line1[i]);
     a7a:	e1 e0       	ldi	r30, 0x01	; 1
     a7c:	f0 e0       	ldi	r31, 0x00	; 0
     a7e:	ec 0f       	add	r30, r28
     a80:	fd 1f       	adc	r31, r29
     a82:	e0 0f       	add	r30, r16
     a84:	f1 1f       	adc	r31, r17
     a86:	80 81       	ld	r24, Z
     a88:	0e 94 13 03 	call	0x626	; 0x626 <LCD_1602A_load_data>
    for (; i < 16; ++i)
        line2[i] = ' ';

    // reset cursor to first line and write 12 chars
    LCD_1602A_load_command(DISPLAY_SET_CURSOR_LINE_1);
    for (i = 0; i < 12; ++i)
     a8c:	0f 5f       	subi	r16, 0xFF	; 255
     a8e:	1f 4f       	sbci	r17, 0xFF	; 255
     a90:	0c 30       	cpi	r16, 0x0C	; 12
     a92:	11 05       	cpc	r17, r1
     a94:	94 f3       	brlt	.-28     	; 0xa7a <display_set+0xc4>
    {
        LCD_1602A_load_data(line1[i]);
    }

    if (title != NULL && strcmp((const char *)original_title, "ALERT") == 0) {
     a96:	ef 28       	or	r14, r15
     a98:	c1 f0       	breq	.+48     	; 0xaca <display_set+0x114>
     a9a:	64 ee       	ldi	r22, 0xE4	; 228
     a9c:	71 e0       	ldi	r23, 0x01	; 1
     a9e:	8c 2d       	mov	r24, r12
     aa0:	9d 2d       	mov	r25, r13
     aa2:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <strcmp>
     aa6:	89 2b       	or	r24, r25
     aa8:	39 f0       	breq	.+14     	; 0xab8 <display_set+0x102>
     aaa:	0f c0       	rjmp	.+30     	; 0xaca <display_set+0x114>
        for (i = 12; i < 15; ++i) {
            LCD_1602A_load_data(' ');
     aac:	80 e2       	ldi	r24, 0x20	; 32
     aae:	0e 94 13 03 	call	0x626	; 0x626 <LCD_1602A_load_data>
    {
        LCD_1602A_load_data(line1[i]);
    }

    if (title != NULL && strcmp((const char *)original_title, "ALERT") == 0) {
        for (i = 12; i < 15; ++i) {
     ab2:	0f 5f       	subi	r16, 0xFF	; 255
     ab4:	1f 4f       	sbci	r17, 0xFF	; 255
     ab6:	02 c0       	rjmp	.+4      	; 0xabc <display_set+0x106>
     ab8:	0c e0       	ldi	r16, 0x0C	; 12
     aba:	10 e0       	ldi	r17, 0x00	; 0
     abc:	0f 30       	cpi	r16, 0x0F	; 15
     abe:	11 05       	cpc	r17, r1
     ac0:	ac f3       	brlt	.-22     	; 0xaac <display_set+0xf6>
            LCD_1602A_load_data(' ');
        }
        LCD_1602A_load_data(4); // Load custom character for alert bell
     ac2:	84 e0       	ldi	r24, 0x04	; 4
     ac4:	0e 94 13 03 	call	0x626	; 0x626 <LCD_1602A_load_data>
     ac8:	0c c0       	rjmp	.+24     	; 0xae2 <display_set+0x12c>
    }
    else {
        LCD_1602A_load_data(2);
     aca:	82 e0       	ldi	r24, 0x02	; 2
     acc:	0e 94 13 03 	call	0x626	; 0x626 <LCD_1602A_load_data>
        LCD_1602A_load_data(0);
     ad0:	80 e0       	ldi	r24, 0x00	; 0
     ad2:	0e 94 13 03 	call	0x626	; 0x626 <LCD_1602A_load_data>
        LCD_1602A_load_data(1);
     ad6:	81 e0       	ldi	r24, 0x01	; 1
     ad8:	0e 94 13 03 	call	0x626	; 0x626 <LCD_1602A_load_data>
        LCD_1602A_load_data(3);
     adc:	83 e0       	ldi	r24, 0x03	; 3
     ade:	0e 94 13 03 	call	0x626	; 0x626 <LCD_1602A_load_data>
    }

    // reset cursor to second line and write 16 chars
    LCD_1602A_load_command(DISPLAY_SET_CURSOR_LINE_2);
     ae2:	80 ec       	ldi	r24, 0xC0	; 192
     ae4:	0e 94 03 03 	call	0x606	; 0x606 <LCD_1602A_load_command>
    for (i = 0; i < 16; ++i)
     ae8:	00 e0       	ldi	r16, 0x00	; 0
     aea:	10 e0       	ldi	r17, 0x00	; 0
     aec:	0b c0       	rjmp	.+22     	; 0xb04 <display_set+0x14e>
    {
        LCD_1602A_load_data(line2[i]);
     aee:	ed e0       	ldi	r30, 0x0D	; 13
     af0:	f0 e0       	ldi	r31, 0x00	; 0
     af2:	ec 0f       	add	r30, r28
     af4:	fd 1f       	adc	r31, r29
     af6:	e0 0f       	add	r30, r16
     af8:	f1 1f       	adc	r31, r17
     afa:	80 81       	ld	r24, Z
     afc:	0e 94 13 03 	call	0x626	; 0x626 <LCD_1602A_load_data>
        LCD_1602A_load_data(3);
    }

    // reset cursor to second line and write 16 chars
    LCD_1602A_load_command(DISPLAY_SET_CURSOR_LINE_2);
    for (i = 0; i < 16; ++i)
     b00:	0f 5f       	subi	r16, 0xFF	; 255
     b02:	1f 4f       	sbci	r17, 0xFF	; 255
     b04:	00 31       	cpi	r16, 0x10	; 16
     b06:	11 05       	cpc	r17, r1
     b08:	94 f3       	brlt	.-28     	; 0xaee <display_set+0x138>
    {
        LCD_1602A_load_data(line2[i]);
    }
}
     b0a:	6c 96       	adiw	r28, 0x1c	; 28
     b0c:	0f b6       	in	r0, 0x3f	; 63
     b0e:	f8 94       	cli
     b10:	de bf       	out	0x3e, r29	; 62
     b12:	0f be       	out	0x3f, r0	; 63
     b14:	cd bf       	out	0x3d, r28	; 61
     b16:	df 91       	pop	r29
     b18:	cf 91       	pop	r28
     b1a:	1f 91       	pop	r17
     b1c:	0f 91       	pop	r16
     b1e:	ff 90       	pop	r15
     b20:	ef 90       	pop	r14
     b22:	df 90       	pop	r13
     b24:	cf 90       	pop	r12
     b26:	08 95       	ret

00000b28 <get_tank_capacity_at_height>:


float get_tank_capacity_at_height(int water_depth)
{
     b28:	cf 92       	push	r12
     b2a:	df 92       	push	r13
     b2c:	ef 92       	push	r14
     b2e:	ff 92       	push	r15
    float water_height = (float)TANK_HEIGHT_IN_CM - (float)water_depth;
     b30:	bc 01       	movw	r22, r24
     b32:	99 0f       	add	r25, r25
     b34:	88 0b       	sbc	r24, r24
     b36:	99 0b       	sbc	r25, r25
     b38:	0e 94 68 10 	call	0x20d0	; 0x20d0 <__floatsisf>
     b3c:	9b 01       	movw	r18, r22
     b3e:	ac 01       	movw	r20, r24
     b40:	6a e9       	ldi	r22, 0x9A	; 154
     b42:	79 e9       	ldi	r23, 0x99	; 153
     b44:	89 e7       	ldi	r24, 0x79	; 121
     b46:	91 e4       	ldi	r25, 0x41	; 65
     b48:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <__subsf3>

    // // The following formula assumes the tank is a perfect cylinder: V = π * r^2 * h
    float volume = (PI * ((float)TANK_RADIUS_IN_CM * (float)TANK_RADIUS_IN_CM) * water_height) / 1000.0; // convert cm^3 to liters
     b4c:	20 ed       	ldi	r18, 0xD0	; 208
     b4e:	3f e0       	ldi	r19, 0x0F	; 15
     b50:	49 e4       	ldi	r20, 0x49	; 73
     b52:	53 e4       	ldi	r21, 0x43	; 67
     b54:	0e 94 1d 11 	call	0x223a	; 0x223a <__mulsf3>
     b58:	20 e0       	ldi	r18, 0x00	; 0
     b5a:	30 e0       	ldi	r19, 0x00	; 0
     b5c:	4a e7       	ldi	r20, 0x7A	; 122
     b5e:	54 e4       	ldi	r21, 0x44	; 68
     b60:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <__divsf3>
     b64:	6b 01       	movw	r12, r22
     b66:	7c 01       	movw	r14, r24

    if (volume < 0.0)
     b68:	20 e0       	ldi	r18, 0x00	; 0
     b6a:	30 e0       	ldi	r19, 0x00	; 0
     b6c:	a9 01       	movw	r20, r18
     b6e:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <__cmpsf2>
     b72:	88 23       	and	r24, r24
     b74:	1c f4       	brge	.+6      	; 0xb7c <get_tank_capacity_at_height+0x54>
    {
        volume = 0.0;
     b76:	c1 2c       	mov	r12, r1
     b78:	d1 2c       	mov	r13, r1
     b7a:	76 01       	movw	r14, r12
    }

    return volume;
}
     b7c:	c7 01       	movw	r24, r14
     b7e:	b6 01       	movw	r22, r12
     b80:	ff 90       	pop	r15
     b82:	ef 90       	pop	r14
     b84:	df 90       	pop	r13
     b86:	cf 90       	pop	r12
     b88:	08 95       	ret

00000b8a <get_tank_capacity>:
    returns: float - the tank capacity in liters
*/
float get_tank_capacity()
{

    uint16_t water_depth = HCSR04_get_distance();
     b8a:	0e 94 bd 04 	call	0x97a	; 0x97a <HCSR04_get_distance>
    water_depth *= 1.5; // convert to float
     b8e:	bc 01       	movw	r22, r24
     b90:	80 e0       	ldi	r24, 0x00	; 0
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	0e 94 66 10 	call	0x20cc	; 0x20cc <__floatunsisf>
     b98:	20 e0       	ldi	r18, 0x00	; 0
     b9a:	30 e0       	ldi	r19, 0x00	; 0
     b9c:	40 ec       	ldi	r20, 0xC0	; 192
     b9e:	5f e3       	ldi	r21, 0x3F	; 63
     ba0:	0e 94 1d 11 	call	0x223a	; 0x223a <__mulsf3>
     ba4:	0e 94 37 10 	call	0x206e	; 0x206e <__fixunssfsi>

    return get_tank_capacity_at_height(water_depth);
     ba8:	cb 01       	movw	r24, r22
     baa:	0e 94 94 05 	call	0xb28	; 0xb28 <get_tank_capacity_at_height>
}
     bae:	08 95       	ret

00000bb0 <get_refill_rate>:
    get the refill rate based on tank capacity change over time
    params: void
    returns: float - the refill rate in liters per minute
*/
float get_refill_rate()
{
     bb0:	8f 92       	push	r8
     bb2:	9f 92       	push	r9
     bb4:	af 92       	push	r10
     bb6:	bf 92       	push	r11
     bb8:	cf 92       	push	r12
     bba:	df 92       	push	r13
     bbc:	ef 92       	push	r14
     bbe:	ff 92       	push	r15
     bc0:	cf 93       	push	r28
     bc2:	df 93       	push	r29
     bc4:	00 d0       	rcall	.+0      	; 0xbc6 <get_refill_rate+0x16>
     bc6:	00 d0       	rcall	.+0      	; 0xbc8 <get_refill_rate+0x18>
     bc8:	cd b7       	in	r28, 0x3d	; 61
     bca:	de b7       	in	r29, 0x3e	; 62
    int height_1;
    peekRear(&height_per_second, &height_1);
     bcc:	be 01       	movw	r22, r28
     bce:	6f 5f       	subi	r22, 0xFF	; 255
     bd0:	7f 4f       	sbci	r23, 0xFF	; 255
     bd2:	84 ef       	ldi	r24, 0xF4	; 244
     bd4:	94 e0       	ldi	r25, 0x04	; 4
     bd6:	0e 94 c7 01 	call	0x38e	; 0x38e <peekRear>

    int height_2;
    peekFront(&height_per_second, &height_2);
     bda:	be 01       	movw	r22, r28
     bdc:	6d 5f       	subi	r22, 0xFD	; 253
     bde:	7f 4f       	sbci	r23, 0xFF	; 255
     be0:	84 ef       	ldi	r24, 0xF4	; 244
     be2:	94 e0       	ldi	r25, 0x04	; 4
     be4:	0e 94 aa 01 	call	0x354	; 0x354 <peekFront>

    float capacity_at_1 = get_tank_capacity_at_height(height_1 * 1.5);
     be8:	69 81       	ldd	r22, Y+1	; 0x01
     bea:	7a 81       	ldd	r23, Y+2	; 0x02
     bec:	07 2e       	mov	r0, r23
     bee:	00 0c       	add	r0, r0
     bf0:	88 0b       	sbc	r24, r24
     bf2:	99 0b       	sbc	r25, r25
     bf4:	0e 94 68 10 	call	0x20d0	; 0x20d0 <__floatsisf>
     bf8:	20 e0       	ldi	r18, 0x00	; 0
     bfa:	30 e0       	ldi	r19, 0x00	; 0
     bfc:	40 ec       	ldi	r20, 0xC0	; 192
     bfe:	5f e3       	ldi	r21, 0x3F	; 63
     c00:	0e 94 1d 11 	call	0x223a	; 0x223a <__mulsf3>
     c04:	0e 94 30 10 	call	0x2060	; 0x2060 <__fixsfsi>
     c08:	cb 01       	movw	r24, r22
     c0a:	0e 94 94 05 	call	0xb28	; 0xb28 <get_tank_capacity_at_height>
     c0e:	4b 01       	movw	r8, r22
     c10:	5c 01       	movw	r10, r24
    float capacity_at_2 = get_tank_capacity_at_height(height_2 * 1.5);
     c12:	6b 81       	ldd	r22, Y+3	; 0x03
     c14:	7c 81       	ldd	r23, Y+4	; 0x04
     c16:	07 2e       	mov	r0, r23
     c18:	00 0c       	add	r0, r0
     c1a:	88 0b       	sbc	r24, r24
     c1c:	99 0b       	sbc	r25, r25
     c1e:	0e 94 68 10 	call	0x20d0	; 0x20d0 <__floatsisf>
     c22:	20 e0       	ldi	r18, 0x00	; 0
     c24:	30 e0       	ldi	r19, 0x00	; 0
     c26:	40 ec       	ldi	r20, 0xC0	; 192
     c28:	5f e3       	ldi	r21, 0x3F	; 63
     c2a:	0e 94 1d 11 	call	0x223a	; 0x223a <__mulsf3>
     c2e:	0e 94 30 10 	call	0x2060	; 0x2060 <__fixsfsi>
     c32:	cb 01       	movw	r24, r22
     c34:	0e 94 94 05 	call	0xb28	; 0xb28 <get_tank_capacity_at_height>
     c38:	6b 01       	movw	r12, r22
     c3a:	7c 01       	movw	r14, r24

    if (capacity_at_1 > capacity_at_2)
     c3c:	9b 01       	movw	r18, r22
     c3e:	ac 01       	movw	r20, r24
     c40:	c5 01       	movw	r24, r10
     c42:	b4 01       	movw	r22, r8
     c44:	0e 94 18 11 	call	0x2230	; 0x2230 <__gesf2>
     c48:	18 16       	cp	r1, r24
     c4a:	9c f0       	brlt	.+38     	; 0xc72 <get_refill_rate+0xc2>
    {
        return 0.0; // no leak detected
    }

    float leak_rate_per_second = (capacity_at_2 - capacity_at_1) / 2.0;
     c4c:	a5 01       	movw	r20, r10
     c4e:	94 01       	movw	r18, r8
     c50:	c7 01       	movw	r24, r14
     c52:	b6 01       	movw	r22, r12
     c54:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <__subsf3>
     c58:	20 e0       	ldi	r18, 0x00	; 0
     c5a:	30 e0       	ldi	r19, 0x00	; 0
     c5c:	40 e0       	ldi	r20, 0x00	; 0
     c5e:	5f e3       	ldi	r21, 0x3F	; 63
     c60:	0e 94 1d 11 	call	0x223a	; 0x223a <__mulsf3>

    return leak_rate_per_second * 60.0; // convert to liters per minute
     c64:	20 e0       	ldi	r18, 0x00	; 0
     c66:	30 e0       	ldi	r19, 0x00	; 0
     c68:	40 e7       	ldi	r20, 0x70	; 112
     c6a:	52 e4       	ldi	r21, 0x42	; 66
     c6c:	0e 94 1d 11 	call	0x223a	; 0x223a <__mulsf3>
     c70:	03 c0       	rjmp	.+6      	; 0xc78 <get_refill_rate+0xc8>
    float capacity_at_1 = get_tank_capacity_at_height(height_1 * 1.5);
    float capacity_at_2 = get_tank_capacity_at_height(height_2 * 1.5);

    if (capacity_at_1 > capacity_at_2)
    {
        return 0.0; // no leak detected
     c72:	60 e0       	ldi	r22, 0x00	; 0
     c74:	70 e0       	ldi	r23, 0x00	; 0
     c76:	cb 01       	movw	r24, r22
    }

    float leak_rate_per_second = (capacity_at_2 - capacity_at_1) / 2.0;

    return leak_rate_per_second * 60.0; // convert to liters per minute
}
     c78:	0f 90       	pop	r0
     c7a:	0f 90       	pop	r0
     c7c:	0f 90       	pop	r0
     c7e:	0f 90       	pop	r0
     c80:	df 91       	pop	r29
     c82:	cf 91       	pop	r28
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	cf 90       	pop	r12
     c8c:	bf 90       	pop	r11
     c8e:	af 90       	pop	r10
     c90:	9f 90       	pop	r9
     c92:	8f 90       	pop	r8
     c94:	08 95       	ret

00000c96 <get_leak_rate>:
    get the leak rate based on tank capacity change over time
    params: void
    returns: float - the leak rate in liters per minute
*/
float get_leak_rate()
{
     c96:	8f 92       	push	r8
     c98:	9f 92       	push	r9
     c9a:	af 92       	push	r10
     c9c:	bf 92       	push	r11
     c9e:	cf 92       	push	r12
     ca0:	df 92       	push	r13
     ca2:	ef 92       	push	r14
     ca4:	ff 92       	push	r15
     ca6:	cf 93       	push	r28
     ca8:	df 93       	push	r29
     caa:	00 d0       	rcall	.+0      	; 0xcac <get_leak_rate+0x16>
     cac:	00 d0       	rcall	.+0      	; 0xcae <get_leak_rate+0x18>
     cae:	cd b7       	in	r28, 0x3d	; 61
     cb0:	de b7       	in	r29, 0x3e	; 62
    int height_1;
    peekRear(&height_per_second, &height_1);
     cb2:	be 01       	movw	r22, r28
     cb4:	6f 5f       	subi	r22, 0xFF	; 255
     cb6:	7f 4f       	sbci	r23, 0xFF	; 255
     cb8:	84 ef       	ldi	r24, 0xF4	; 244
     cba:	94 e0       	ldi	r25, 0x04	; 4
     cbc:	0e 94 c7 01 	call	0x38e	; 0x38e <peekRear>

    int height_2;
    peekFront(&height_per_second, &height_2);
     cc0:	be 01       	movw	r22, r28
     cc2:	6d 5f       	subi	r22, 0xFD	; 253
     cc4:	7f 4f       	sbci	r23, 0xFF	; 255
     cc6:	84 ef       	ldi	r24, 0xF4	; 244
     cc8:	94 e0       	ldi	r25, 0x04	; 4
     cca:	0e 94 aa 01 	call	0x354	; 0x354 <peekFront>

    float capacity_at_1 = get_tank_capacity_at_height(height_1 * 1.5);
     cce:	69 81       	ldd	r22, Y+1	; 0x01
     cd0:	7a 81       	ldd	r23, Y+2	; 0x02
     cd2:	07 2e       	mov	r0, r23
     cd4:	00 0c       	add	r0, r0
     cd6:	88 0b       	sbc	r24, r24
     cd8:	99 0b       	sbc	r25, r25
     cda:	0e 94 68 10 	call	0x20d0	; 0x20d0 <__floatsisf>
     cde:	20 e0       	ldi	r18, 0x00	; 0
     ce0:	30 e0       	ldi	r19, 0x00	; 0
     ce2:	40 ec       	ldi	r20, 0xC0	; 192
     ce4:	5f e3       	ldi	r21, 0x3F	; 63
     ce6:	0e 94 1d 11 	call	0x223a	; 0x223a <__mulsf3>
     cea:	0e 94 30 10 	call	0x2060	; 0x2060 <__fixsfsi>
     cee:	cb 01       	movw	r24, r22
     cf0:	0e 94 94 05 	call	0xb28	; 0xb28 <get_tank_capacity_at_height>
     cf4:	6b 01       	movw	r12, r22
     cf6:	7c 01       	movw	r14, r24
    float capacity_at_2 = get_tank_capacity_at_height(height_2 * 1.5);
     cf8:	6b 81       	ldd	r22, Y+3	; 0x03
     cfa:	7c 81       	ldd	r23, Y+4	; 0x04
     cfc:	07 2e       	mov	r0, r23
     cfe:	00 0c       	add	r0, r0
     d00:	88 0b       	sbc	r24, r24
     d02:	99 0b       	sbc	r25, r25
     d04:	0e 94 68 10 	call	0x20d0	; 0x20d0 <__floatsisf>
     d08:	20 e0       	ldi	r18, 0x00	; 0
     d0a:	30 e0       	ldi	r19, 0x00	; 0
     d0c:	40 ec       	ldi	r20, 0xC0	; 192
     d0e:	5f e3       	ldi	r21, 0x3F	; 63
     d10:	0e 94 1d 11 	call	0x223a	; 0x223a <__mulsf3>
     d14:	0e 94 30 10 	call	0x2060	; 0x2060 <__fixsfsi>
     d18:	cb 01       	movw	r24, r22
     d1a:	0e 94 94 05 	call	0xb28	; 0xb28 <get_tank_capacity_at_height>
     d1e:	4b 01       	movw	r8, r22
     d20:	5c 01       	movw	r10, r24

    if (capacity_at_1 < capacity_at_2) {
     d22:	9b 01       	movw	r18, r22
     d24:	ac 01       	movw	r20, r24
     d26:	c7 01       	movw	r24, r14
     d28:	b6 01       	movw	r22, r12
     d2a:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <__cmpsf2>
     d2e:	88 23       	and	r24, r24
     d30:	fc f0       	brlt	.+62     	; 0xd70 <get_leak_rate+0xda>
        return 0.0; // no leak detected
    }
    float leak_rate_per_second = (capacity_at_1 - capacity_at_2) / queueSize(&height_per_second);
     d32:	a5 01       	movw	r20, r10
     d34:	94 01       	movw	r18, r8
     d36:	c7 01       	movw	r24, r14
     d38:	b6 01       	movw	r22, r12
     d3a:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <__subsf3>
     d3e:	6b 01       	movw	r12, r22
     d40:	7c 01       	movw	r14, r24
     d42:	84 ef       	ldi	r24, 0xF4	; 244
     d44:	94 e0       	ldi	r25, 0x04	; 4
     d46:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <queueSize>
     d4a:	bc 01       	movw	r22, r24
     d4c:	99 0f       	add	r25, r25
     d4e:	88 0b       	sbc	r24, r24
     d50:	99 0b       	sbc	r25, r25
     d52:	0e 94 68 10 	call	0x20d0	; 0x20d0 <__floatsisf>
     d56:	9b 01       	movw	r18, r22
     d58:	ac 01       	movw	r20, r24
     d5a:	c7 01       	movw	r24, r14
     d5c:	b6 01       	movw	r22, r12
     d5e:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <__divsf3>

    return leak_rate_per_second * 60.0; // convert to liters per minute
     d62:	20 e0       	ldi	r18, 0x00	; 0
     d64:	30 e0       	ldi	r19, 0x00	; 0
     d66:	40 e7       	ldi	r20, 0x70	; 112
     d68:	52 e4       	ldi	r21, 0x42	; 66
     d6a:	0e 94 1d 11 	call	0x223a	; 0x223a <__mulsf3>
     d6e:	03 c0       	rjmp	.+6      	; 0xd76 <get_leak_rate+0xe0>

    float capacity_at_1 = get_tank_capacity_at_height(height_1 * 1.5);
    float capacity_at_2 = get_tank_capacity_at_height(height_2 * 1.5);

    if (capacity_at_1 < capacity_at_2) {
        return 0.0; // no leak detected
     d70:	60 e0       	ldi	r22, 0x00	; 0
     d72:	70 e0       	ldi	r23, 0x00	; 0
     d74:	cb 01       	movw	r24, r22
    }
    float leak_rate_per_second = (capacity_at_1 - capacity_at_2) / queueSize(&height_per_second);

    return leak_rate_per_second * 60.0; // convert to liters per minute
}
     d76:	0f 90       	pop	r0
     d78:	0f 90       	pop	r0
     d7a:	0f 90       	pop	r0
     d7c:	0f 90       	pop	r0
     d7e:	df 91       	pop	r29
     d80:	cf 91       	pop	r28
     d82:	ff 90       	pop	r15
     d84:	ef 90       	pop	r14
     d86:	df 90       	pop	r13
     d88:	cf 90       	pop	r12
     d8a:	bf 90       	pop	r11
     d8c:	af 90       	pop	r10
     d8e:	9f 90       	pop	r9
     d90:	8f 90       	pop	r8
     d92:	08 95       	ret

00000d94 <get_soil_temperature>:

float get_soil_temperature()
{
    return DS18B20_read_temperature();
     d94:	0e 94 56 04 	call	0x8ac	; 0x8ac <DS18B20_read_temperature>
}
     d98:	08 95       	ret

00000d9a <ui_show_display>:
    update the display based on the current active menu and hover indices
    params: void
    returns: void
*/
void ui_show_display(void)
{
     d9a:	ef 92       	push	r14
     d9c:	ff 92       	push	r15
     d9e:	0f 93       	push	r16
     da0:	cf 93       	push	r28
     da2:	df 93       	push	r29
     da4:	00 d0       	rcall	.+0      	; 0xda6 <ui_show_display+0xc>
     da6:	cd b7       	in	r28, 0x3d	; 61
     da8:	de b7       	in	r29, 0x3e	; 62
    if (active_menu_index == -1)
     daa:	e0 91 26 01 	lds	r30, 0x0126	; 0x800126 <active_menu_index>
     dae:	f0 91 27 01 	lds	r31, 0x0127	; 0x800127 <active_menu_index+0x1>
     db2:	ef 3f       	cpi	r30, 0xFF	; 255
     db4:	2f ef       	ldi	r18, 0xFF	; 255
     db6:	f2 07       	cpc	r31, r18
     db8:	79 f4       	brne	.+30     	; 0xdd8 <ui_show_display+0x3e>
    {
        display_set("MAIN MENU", MENU_BUFFER[menu_hover_index]);
     dba:	e0 91 e0 04 	lds	r30, 0x04E0	; 0x8004e0 <menu_hover_index>
     dbe:	f0 91 e1 04 	lds	r31, 0x04E1	; 0x8004e1 <menu_hover_index+0x1>
     dc2:	ee 0f       	add	r30, r30
     dc4:	ff 1f       	adc	r31, r31
     dc6:	e2 5c       	subi	r30, 0xC2	; 194
     dc8:	fe 4f       	sbci	r31, 0xFE	; 254
     dca:	60 81       	ld	r22, Z
     dcc:	71 81       	ldd	r23, Z+1	; 0x01
     dce:	8b ef       	ldi	r24, 0xFB	; 251
     dd0:	91 e0       	ldi	r25, 0x01	; 1
     dd2:	0e 94 db 04 	call	0x9b6	; 0x9b6 <display_set>
     dd6:	6f c2       	rjmp	.+1246   	; 0x12b6 <ui_show_display+0x51c>
    }
    else
    {
        switch (active_menu_index)
     dd8:	e8 30       	cpi	r30, 0x08	; 8
     dda:	f1 05       	cpc	r31, r1
     ddc:	08 f0       	brcs	.+2      	; 0xde0 <ui_show_display+0x46>
     dde:	65 c2       	rjmp	.+1226   	; 0x12aa <ui_show_display+0x510>
     de0:	ec 5c       	subi	r30, 0xCC	; 204
     de2:	ff 4f       	sbci	r31, 0xFF	; 255
     de4:	0c 94 9e 11 	jmp	0x233c	; 0x233c <__tablejump2__>
        {
        case 0:
            display_set("TANK CAPACITY", "Loading...");
     de8:	65 e0       	ldi	r22, 0x05	; 5
     dea:	72 e0       	ldi	r23, 0x02	; 2
     dec:	80 e1       	ldi	r24, 0x10	; 16
     dee:	92 e0       	ldi	r25, 0x02	; 2
     df0:	0e 94 db 04 	call	0x9b6	; 0x9b6 <display_set>
            format_float(buffer, sizeof(buffer), get_tank_capacity(), 1, "Ltrs");
     df4:	0e 94 c5 05 	call	0xb8a	; 0xb8a <get_tank_capacity>
     df8:	9b 01       	movw	r18, r22
     dfa:	ac 01       	movw	r20, r24
     dfc:	0f 2e       	mov	r0, r31
     dfe:	fb ea       	ldi	r31, 0xAB	; 171
     e00:	ef 2e       	mov	r14, r31
     e02:	f3 e0       	ldi	r31, 0x03	; 3
     e04:	ff 2e       	mov	r15, r31
     e06:	f0 2d       	mov	r31, r0
     e08:	01 e0       	ldi	r16, 0x01	; 1
     e0a:	60 e1       	ldi	r22, 0x10	; 16
     e0c:	70 e0       	ldi	r23, 0x00	; 0
     e0e:	84 ee       	ldi	r24, 0xE4	; 228
     e10:	94 e0       	ldi	r25, 0x04	; 4
     e12:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <format_float>
            display_set("TANK CAPACITY", buffer);
     e16:	64 ee       	ldi	r22, 0xE4	; 228
     e18:	74 e0       	ldi	r23, 0x04	; 4
     e1a:	80 e1       	ldi	r24, 0x10	; 16
     e1c:	92 e0       	ldi	r25, 0x02	; 2
     e1e:	0e 94 db 04 	call	0x9b6	; 0x9b6 <display_set>
            break;
     e22:	49 c2       	rjmp	.+1170   	; 0x12b6 <ui_show_display+0x51c>
        case 1:
            display_set("REFILL RATE", "Loading...");
     e24:	65 e0       	ldi	r22, 0x05	; 5
     e26:	72 e0       	ldi	r23, 0x02	; 2
     e28:	8e e1       	ldi	r24, 0x1E	; 30
     e2a:	92 e0       	ldi	r25, 0x02	; 2
     e2c:	0e 94 db 04 	call	0x9b6	; 0x9b6 <display_set>
            format_float(buffer, sizeof(buffer), get_refill_rate(), 1, "Ltrs per hour");
     e30:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <get_refill_rate>
     e34:	9b 01       	movw	r18, r22
     e36:	ac 01       	movw	r20, r24
     e38:	0f 2e       	mov	r0, r31
     e3a:	fa e2       	ldi	r31, 0x2A	; 42
     e3c:	ef 2e       	mov	r14, r31
     e3e:	f2 e0       	ldi	r31, 0x02	; 2
     e40:	ff 2e       	mov	r15, r31
     e42:	f0 2d       	mov	r31, r0
     e44:	01 e0       	ldi	r16, 0x01	; 1
     e46:	60 e1       	ldi	r22, 0x10	; 16
     e48:	70 e0       	ldi	r23, 0x00	; 0
     e4a:	84 ee       	ldi	r24, 0xE4	; 228
     e4c:	94 e0       	ldi	r25, 0x04	; 4
     e4e:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <format_float>
            display_set("REFILL RATE", buffer);
     e52:	64 ee       	ldi	r22, 0xE4	; 228
     e54:	74 e0       	ldi	r23, 0x04	; 4
     e56:	8e e1       	ldi	r24, 0x1E	; 30
     e58:	92 e0       	ldi	r25, 0x02	; 2
     e5a:	0e 94 db 04 	call	0x9b6	; 0x9b6 <display_set>
            break;
     e5e:	2b c2       	rjmp	.+1110   	; 0x12b6 <ui_show_display+0x51c>
        case 2:
            display_set("LEAKAGE RATE", "Loading...");
     e60:	65 e0       	ldi	r22, 0x05	; 5
     e62:	72 e0       	ldi	r23, 0x02	; 2
     e64:	88 e3       	ldi	r24, 0x38	; 56
     e66:	92 e0       	ldi	r25, 0x02	; 2
     e68:	0e 94 db 04 	call	0x9b6	; 0x9b6 <display_set>
            format_float(buffer, sizeof(buffer), get_leak_rate(), 1, "Ltrs per min");
     e6c:	0e 94 4b 06 	call	0xc96	; 0xc96 <get_leak_rate>
     e70:	9b 01       	movw	r18, r22
     e72:	ac 01       	movw	r20, r24
     e74:	0f 2e       	mov	r0, r31
     e76:	f5 e4       	ldi	r31, 0x45	; 69
     e78:	ef 2e       	mov	r14, r31
     e7a:	f2 e0       	ldi	r31, 0x02	; 2
     e7c:	ff 2e       	mov	r15, r31
     e7e:	f0 2d       	mov	r31, r0
     e80:	01 e0       	ldi	r16, 0x01	; 1
     e82:	60 e1       	ldi	r22, 0x10	; 16
     e84:	70 e0       	ldi	r23, 0x00	; 0
     e86:	84 ee       	ldi	r24, 0xE4	; 228
     e88:	94 e0       	ldi	r25, 0x04	; 4
     e8a:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <format_float>
            display_set("LEAKAGE RATE", buffer);
     e8e:	64 ee       	ldi	r22, 0xE4	; 228
     e90:	74 e0       	ldi	r23, 0x04	; 4
     e92:	88 e3       	ldi	r24, 0x38	; 56
     e94:	92 e0       	ldi	r25, 0x02	; 2
     e96:	0e 94 db 04 	call	0x9b6	; 0x9b6 <display_set>
            break;
     e9a:	0d c2       	rjmp	.+1050   	; 0x12b6 <ui_show_display+0x51c>
        case 3:
            display_set("SOIL TEMPERATURE", "Loading...");
     e9c:	65 e0       	ldi	r22, 0x05	; 5
     e9e:	72 e0       	ldi	r23, 0x02	; 2
     ea0:	82 e5       	ldi	r24, 0x52	; 82
     ea2:	92 e0       	ldi	r25, 0x02	; 2
     ea4:	0e 94 db 04 	call	0x9b6	; 0x9b6 <display_set>
            format_float(buffer, sizeof(buffer), get_soil_temperature(), 1, "degrees");
     ea8:	0e 94 ca 06 	call	0xd94	; 0xd94 <get_soil_temperature>
     eac:	9b 01       	movw	r18, r22
     eae:	ac 01       	movw	r20, r24
     eb0:	0f 2e       	mov	r0, r31
     eb2:	f9 ec       	ldi	r31, 0xC9	; 201
     eb4:	ef 2e       	mov	r14, r31
     eb6:	f3 e0       	ldi	r31, 0x03	; 3
     eb8:	ff 2e       	mov	r15, r31
     eba:	f0 2d       	mov	r31, r0
     ebc:	01 e0       	ldi	r16, 0x01	; 1
     ebe:	60 e1       	ldi	r22, 0x10	; 16
     ec0:	70 e0       	ldi	r23, 0x00	; 0
     ec2:	84 ee       	ldi	r24, 0xE4	; 228
     ec4:	94 e0       	ldi	r25, 0x04	; 4
     ec6:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <format_float>
            display_set("SOIL TEMPERATURE", buffer);
     eca:	64 ee       	ldi	r22, 0xE4	; 228
     ecc:	74 e0       	ldi	r23, 0x04	; 4
     ece:	82 e5       	ldi	r24, 0x52	; 82
     ed0:	92 e0       	ldi	r25, 0x02	; 2
     ed2:	0e 94 db 04 	call	0x9b6	; 0x9b6 <display_set>
            break;
     ed6:	ef c1       	rjmp	.+990    	; 0x12b6 <ui_show_display+0x51c>
        case 4:
            if (active_live_view_index == -1)
     ed8:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <active_live_view_index>
     edc:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <active_live_view_index+0x1>
     ee0:	01 96       	adiw	r24, 0x01	; 1
     ee2:	79 f4       	brne	.+30     	; 0xf02 <ui_show_display+0x168>
            {
                display_set("LIVE VIEW", LIVE_VIEW_BUFFER[live_view_hover_index]);
     ee4:	e0 91 d8 04 	lds	r30, 0x04D8	; 0x8004d8 <live_view_hover_index>
     ee8:	f0 91 d9 04 	lds	r31, 0x04D9	; 0x8004d9 <live_view_hover_index+0x1>
     eec:	ee 0f       	add	r30, r30
     eee:	ff 1f       	adc	r31, r31
     ef0:	ea 5c       	subi	r30, 0xCA	; 202
     ef2:	fe 4f       	sbci	r31, 0xFE	; 254
     ef4:	60 81       	ld	r22, Z
     ef6:	71 81       	ldd	r23, Z+1	; 0x01
     ef8:	83 e6       	ldi	r24, 0x63	; 99
     efa:	92 e0       	ldi	r25, 0x02	; 2
     efc:	0e 94 db 04 	call	0x9b6	; 0x9b6 <display_set>
     f00:	da c1       	rjmp	.+948    	; 0x12b6 <ui_show_display+0x51c>
            }
            else
            {
                switch (live_view_hover_index)
     f02:	80 91 d8 04 	lds	r24, 0x04D8	; 0x8004d8 <live_view_hover_index>
     f06:	90 91 d9 04 	lds	r25, 0x04D9	; 0x8004d9 <live_view_hover_index+0x1>
     f0a:	81 30       	cpi	r24, 0x01	; 1
     f0c:	91 05       	cpc	r25, r1
     f0e:	39 f1       	breq	.+78     	; 0xf5e <ui_show_display+0x1c4>
     f10:	1c f4       	brge	.+6      	; 0xf18 <ui_show_display+0x17e>
     f12:	89 2b       	or	r24, r25
     f14:	41 f0       	breq	.+16     	; 0xf26 <ui_show_display+0x18c>
     f16:	77 c0       	rjmp	.+238    	; 0x1006 <ui_show_display+0x26c>
     f18:	82 30       	cpi	r24, 0x02	; 2
     f1a:	91 05       	cpc	r25, r1
     f1c:	e1 f1       	breq	.+120    	; 0xf96 <ui_show_display+0x1fc>
     f1e:	03 97       	sbiw	r24, 0x03	; 3
     f20:	09 f4       	brne	.+2      	; 0xf24 <ui_show_display+0x18a>
     f22:	55 c0       	rjmp	.+170    	; 0xfce <ui_show_display+0x234>
     f24:	70 c0       	rjmp	.+224    	; 0x1006 <ui_show_display+0x26c>
                {
                case 0:
                    format_float(buffer, sizeof(buffer), current_tank_capacity, 1, "Ltrs");
     f26:	20 91 c0 04 	lds	r18, 0x04C0	; 0x8004c0 <current_tank_capacity>
     f2a:	30 91 c1 04 	lds	r19, 0x04C1	; 0x8004c1 <current_tank_capacity+0x1>
     f2e:	40 91 c2 04 	lds	r20, 0x04C2	; 0x8004c2 <current_tank_capacity+0x2>
     f32:	50 91 c3 04 	lds	r21, 0x04C3	; 0x8004c3 <current_tank_capacity+0x3>
     f36:	0f 2e       	mov	r0, r31
     f38:	fb ea       	ldi	r31, 0xAB	; 171
     f3a:	ef 2e       	mov	r14, r31
     f3c:	f3 e0       	ldi	r31, 0x03	; 3
     f3e:	ff 2e       	mov	r15, r31
     f40:	f0 2d       	mov	r31, r0
     f42:	01 e0       	ldi	r16, 0x01	; 1
     f44:	60 e1       	ldi	r22, 0x10	; 16
     f46:	70 e0       	ldi	r23, 0x00	; 0
     f48:	84 ee       	ldi	r24, 0xE4	; 228
     f4a:	94 e0       	ldi	r25, 0x04	; 4
     f4c:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <format_float>
                    display_set("CAPACITY", buffer);
     f50:	64 ee       	ldi	r22, 0xE4	; 228
     f52:	74 e0       	ldi	r23, 0x04	; 4
     f54:	85 e1       	ldi	r24, 0x15	; 21
     f56:	92 e0       	ldi	r25, 0x02	; 2
     f58:	0e 94 db 04 	call	0x9b6	; 0x9b6 <display_set>
                    break;
     f5c:	ac c1       	rjmp	.+856    	; 0x12b6 <ui_show_display+0x51c>
                case 1:
                    format_float(buffer, sizeof(buffer), current_refill_rate, 1, "Ltrs per min");
     f5e:	20 91 bc 04 	lds	r18, 0x04BC	; 0x8004bc <current_refill_rate>
     f62:	30 91 bd 04 	lds	r19, 0x04BD	; 0x8004bd <current_refill_rate+0x1>
     f66:	40 91 be 04 	lds	r20, 0x04BE	; 0x8004be <current_refill_rate+0x2>
     f6a:	50 91 bf 04 	lds	r21, 0x04BF	; 0x8004bf <current_refill_rate+0x3>
     f6e:	0f 2e       	mov	r0, r31
     f70:	f5 e4       	ldi	r31, 0x45	; 69
     f72:	ef 2e       	mov	r14, r31
     f74:	f2 e0       	ldi	r31, 0x02	; 2
     f76:	ff 2e       	mov	r15, r31
     f78:	f0 2d       	mov	r31, r0
     f7a:	01 e0       	ldi	r16, 0x01	; 1
     f7c:	60 e1       	ldi	r22, 0x10	; 16
     f7e:	70 e0       	ldi	r23, 0x00	; 0
     f80:	84 ee       	ldi	r24, 0xE4	; 228
     f82:	94 e0       	ldi	r25, 0x04	; 4
     f84:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <format_float>
                    display_set("REFILL RATE", buffer);
     f88:	64 ee       	ldi	r22, 0xE4	; 228
     f8a:	74 e0       	ldi	r23, 0x04	; 4
     f8c:	8e e1       	ldi	r24, 0x1E	; 30
     f8e:	92 e0       	ldi	r25, 0x02	; 2
     f90:	0e 94 db 04 	call	0x9b6	; 0x9b6 <display_set>
                    break;
     f94:	90 c1       	rjmp	.+800    	; 0x12b6 <ui_show_display+0x51c>
                case 2:
                    format_float(buffer, sizeof(buffer), current_leak_rate, 1, "Ltrs per min");
     f96:	20 91 b8 04 	lds	r18, 0x04B8	; 0x8004b8 <current_leak_rate>
     f9a:	30 91 b9 04 	lds	r19, 0x04B9	; 0x8004b9 <current_leak_rate+0x1>
     f9e:	40 91 ba 04 	lds	r20, 0x04BA	; 0x8004ba <current_leak_rate+0x2>
     fa2:	50 91 bb 04 	lds	r21, 0x04BB	; 0x8004bb <current_leak_rate+0x3>
     fa6:	0f 2e       	mov	r0, r31
     fa8:	f5 e4       	ldi	r31, 0x45	; 69
     faa:	ef 2e       	mov	r14, r31
     fac:	f2 e0       	ldi	r31, 0x02	; 2
     fae:	ff 2e       	mov	r15, r31
     fb0:	f0 2d       	mov	r31, r0
     fb2:	01 e0       	ldi	r16, 0x01	; 1
     fb4:	60 e1       	ldi	r22, 0x10	; 16
     fb6:	70 e0       	ldi	r23, 0x00	; 0
     fb8:	84 ee       	ldi	r24, 0xE4	; 228
     fba:	94 e0       	ldi	r25, 0x04	; 4
     fbc:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <format_float>
                    display_set("LEAK RATE", buffer);
     fc0:	64 ee       	ldi	r22, 0xE4	; 228
     fc2:	74 e0       	ldi	r23, 0x04	; 4
     fc4:	8d e6       	ldi	r24, 0x6D	; 109
     fc6:	92 e0       	ldi	r25, 0x02	; 2
     fc8:	0e 94 db 04 	call	0x9b6	; 0x9b6 <display_set>
                    break;
     fcc:	74 c1       	rjmp	.+744    	; 0x12b6 <ui_show_display+0x51c>
                case 3:
                    format_float(buffer, sizeof(buffer), current_soil_temperature, 1, "degrees");
     fce:	20 91 b4 04 	lds	r18, 0x04B4	; 0x8004b4 <current_soil_temperature>
     fd2:	30 91 b5 04 	lds	r19, 0x04B5	; 0x8004b5 <current_soil_temperature+0x1>
     fd6:	40 91 b6 04 	lds	r20, 0x04B6	; 0x8004b6 <current_soil_temperature+0x2>
     fda:	50 91 b7 04 	lds	r21, 0x04B7	; 0x8004b7 <current_soil_temperature+0x3>
     fde:	0f 2e       	mov	r0, r31
     fe0:	f9 ec       	ldi	r31, 0xC9	; 201
     fe2:	ef 2e       	mov	r14, r31
     fe4:	f3 e0       	ldi	r31, 0x03	; 3
     fe6:	ff 2e       	mov	r15, r31
     fe8:	f0 2d       	mov	r31, r0
     fea:	01 e0       	ldi	r16, 0x01	; 1
     fec:	60 e1       	ldi	r22, 0x10	; 16
     fee:	70 e0       	ldi	r23, 0x00	; 0
     ff0:	84 ee       	ldi	r24, 0xE4	; 228
     ff2:	94 e0       	ldi	r25, 0x04	; 4
     ff4:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <format_float>
                    display_set("SOIL TEMP", buffer);
     ff8:	64 ee       	ldi	r22, 0xE4	; 228
     ffa:	74 e0       	ldi	r23, 0x04	; 4
     ffc:	87 e7       	ldi	r24, 0x77	; 119
     ffe:	92 e0       	ldi	r25, 0x02	; 2
    1000:	0e 94 db 04 	call	0x9b6	; 0x9b6 <display_set>
                    break;
    1004:	58 c1       	rjmp	.+688    	; 0x12b6 <ui_show_display+0x51c>
                default:
                    display_set("ERROR", "Invalid live view");
    1006:	61 e8       	ldi	r22, 0x81	; 129
    1008:	72 e0       	ldi	r23, 0x02	; 2
    100a:	83 e9       	ldi	r24, 0x93	; 147
    100c:	92 e0       	ldi	r25, 0x02	; 2
    100e:	0e 94 db 04 	call	0x9b6	; 0x9b6 <display_set>
                    break;
    1012:	51 c1       	rjmp	.+674    	; 0x12b6 <ui_show_display+0x51c>
                }
            }
            break;
        case 5:
            if (active_trigger_index == -1)
    1014:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <active_trigger_index>
    1018:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <active_trigger_index+0x1>
    101c:	8f 3f       	cpi	r24, 0xFF	; 255
    101e:	2f ef       	ldi	r18, 0xFF	; 255
    1020:	92 07       	cpc	r25, r18
    1022:	79 f4       	brne	.+30     	; 0x1042 <ui_show_display+0x2a8>
            {
                display_set("TRIGGERS", TRIGGERS_BUFFER[trigger_hover_index]);
    1024:	e0 91 de 04 	lds	r30, 0x04DE	; 0x8004de <trigger_hover_index>
    1028:	f0 91 df 04 	lds	r31, 0x04DF	; 0x8004df <trigger_hover_index+0x1>
    102c:	ee 0f       	add	r30, r30
    102e:	ff 1f       	adc	r31, r31
    1030:	ee 5c       	subi	r30, 0xCE	; 206
    1032:	fe 4f       	sbci	r31, 0xFE	; 254
    1034:	60 81       	ld	r22, Z
    1036:	71 81       	ldd	r23, Z+1	; 0x01
    1038:	81 e1       	ldi	r24, 0x11	; 17
    103a:	93 e0       	ldi	r25, 0x03	; 3
    103c:	0e 94 db 04 	call	0x9b6	; 0x9b6 <display_set>
    1040:	3a c1       	rjmp	.+628    	; 0x12b6 <ui_show_display+0x51c>
            }
            else
            {
                switch (active_trigger_index)
    1042:	00 97       	sbiw	r24, 0x00	; 0
    1044:	19 f0       	breq	.+6      	; 0x104c <ui_show_display+0x2b2>
    1046:	01 97       	sbiw	r24, 0x01	; 1
    1048:	e9 f0       	breq	.+58     	; 0x1084 <ui_show_display+0x2ea>
    104a:	38 c0       	rjmp	.+112    	; 0x10bc <ui_show_display+0x322>
                {
                case 0:
                    format_float(buffer, sizeof(buffer), MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER, 1, "Ltrs");
    104c:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER>
    1050:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x1>
    1054:	40 91 1e 01 	lds	r20, 0x011E	; 0x80011e <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x2>
    1058:	50 91 1f 01 	lds	r21, 0x011F	; 0x80011f <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x3>
    105c:	0f 2e       	mov	r0, r31
    105e:	fb ea       	ldi	r31, 0xAB	; 171
    1060:	ef 2e       	mov	r14, r31
    1062:	f3 e0       	ldi	r31, 0x03	; 3
    1064:	ff 2e       	mov	r15, r31
    1066:	f0 2d       	mov	r31, r0
    1068:	01 e0       	ldi	r16, 0x01	; 1
    106a:	60 e1       	ldi	r22, 0x10	; 16
    106c:	70 e0       	ldi	r23, 0x00	; 0
    106e:	84 ee       	ldi	r24, 0xE4	; 228
    1070:	94 e0       	ldi	r25, 0x04	; 4
    1072:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <format_float>
                    display_set("MIN CAPACITY", buffer);
    1076:	64 ee       	ldi	r22, 0xE4	; 228
    1078:	74 e0       	ldi	r23, 0x04	; 4
    107a:	89 e9       	ldi	r24, 0x99	; 153
    107c:	92 e0       	ldi	r25, 0x02	; 2
    107e:	0e 94 db 04 	call	0x9b6	; 0x9b6 <display_set>
                    break;
    1082:	19 c1       	rjmp	.+562    	; 0x12b6 <ui_show_display+0x51c>
                case 1:
                    format_float(buffer, sizeof(buffer), MAXIMUM_TEMPERATURE_BEFORE_PUMPING, 2, "degrees");
    1084:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING>
    1088:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x1>
    108c:	40 91 1a 01 	lds	r20, 0x011A	; 0x80011a <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x2>
    1090:	50 91 1b 01 	lds	r21, 0x011B	; 0x80011b <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x3>
    1094:	0f 2e       	mov	r0, r31
    1096:	f9 ec       	ldi	r31, 0xC9	; 201
    1098:	ef 2e       	mov	r14, r31
    109a:	f3 e0       	ldi	r31, 0x03	; 3
    109c:	ff 2e       	mov	r15, r31
    109e:	f0 2d       	mov	r31, r0
    10a0:	02 e0       	ldi	r16, 0x02	; 2
    10a2:	60 e1       	ldi	r22, 0x10	; 16
    10a4:	70 e0       	ldi	r23, 0x00	; 0
    10a6:	84 ee       	ldi	r24, 0xE4	; 228
    10a8:	94 e0       	ldi	r25, 0x04	; 4
    10aa:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <format_float>
                    display_set("MAX TEMP", buffer);
    10ae:	64 ee       	ldi	r22, 0xE4	; 228
    10b0:	74 e0       	ldi	r23, 0x04	; 4
    10b2:	86 ea       	ldi	r24, 0xA6	; 166
    10b4:	92 e0       	ldi	r25, 0x02	; 2
    10b6:	0e 94 db 04 	call	0x9b6	; 0x9b6 <display_set>
                    break;
    10ba:	fd c0       	rjmp	.+506    	; 0x12b6 <ui_show_display+0x51c>
                default:
                    display_set("ERROR", "Invalid trigger");
    10bc:	6f ea       	ldi	r22, 0xAF	; 175
    10be:	72 e0       	ldi	r23, 0x02	; 2
    10c0:	83 e9       	ldi	r24, 0x93	; 147
    10c2:	92 e0       	ldi	r25, 0x02	; 2
    10c4:	0e 94 db 04 	call	0x9b6	; 0x9b6 <display_set>
                    break;
    10c8:	f6 c0       	rjmp	.+492    	; 0x12b6 <ui_show_display+0x51c>
            break;

        case 6:
            // if the messages queue is not empty, show the first (oldest) message
			{
                char *msgptr = NULL;
    10ca:	1a 82       	std	Y+2, r1	; 0x02
    10cc:	19 82       	std	Y+1, r1	; 0x01
                if (!isStrQueueEmpty(&MESSAGES_Q))
    10ce:	8c e0       	ldi	r24, 0x0C	; 12
    10d0:	95 e0       	ldi	r25, 0x05	; 5
    10d2:	0e 94 1a 02 	call	0x434	; 0x434 <isStrQueueEmpty>
    10d6:	89 2b       	or	r24, r25
    10d8:	a9 f4       	brne	.+42     	; 0x1104 <ui_show_display+0x36a>
                {
                    if (peekFrontStr(&MESSAGES_Q, &msgptr) == 0 && msgptr)
    10da:	be 01       	movw	r22, r28
    10dc:	6f 5f       	subi	r22, 0xFF	; 255
    10de:	7f 4f       	sbci	r23, 0xFF	; 255
    10e0:	8c e0       	ldi	r24, 0x0C	; 12
    10e2:	95 e0       	ldi	r25, 0x05	; 5
    10e4:	0e 94 a2 02 	call	0x544	; 0x544 <peekFrontStr>
    10e8:	89 2b       	or	r24, r25
    10ea:	09 f0       	breq	.+2      	; 0x10ee <ui_show_display+0x354>
    10ec:	e4 c0       	rjmp	.+456    	; 0x12b6 <ui_show_display+0x51c>
    10ee:	69 81       	ldd	r22, Y+1	; 0x01
    10f0:	7a 81       	ldd	r23, Y+2	; 0x02
    10f2:	61 15       	cp	r22, r1
    10f4:	71 05       	cpc	r23, r1
    10f6:	09 f4       	brne	.+2      	; 0x10fa <ui_show_display+0x360>
    10f8:	de c0       	rjmp	.+444    	; 0x12b6 <ui_show_display+0x51c>
                    {
                        display_set("MESSAGES", msgptr);
    10fa:	8f eb       	ldi	r24, 0xBF	; 191
    10fc:	92 e0       	ldi	r25, 0x02	; 2
    10fe:	0e 94 db 04 	call	0x9b6	; 0x9b6 <display_set>
    1102:	d9 c0       	rjmp	.+434    	; 0x12b6 <ui_show_display+0x51c>
                    }
                } else 
                {
                    display_set("MESSAGES", "No messages");
    1104:	68 ec       	ldi	r22, 0xC8	; 200
    1106:	72 e0       	ldi	r23, 0x02	; 2
    1108:	8f eb       	ldi	r24, 0xBF	; 191
    110a:	92 e0       	ldi	r25, 0x02	; 2
    110c:	0e 94 db 04 	call	0x9b6	; 0x9b6 <display_set>
				}
            }
            break;
    1110:	d2 c0       	rjmp	.+420    	; 0x12b6 <ui_show_display+0x51c>
        case 7:
            if (active_config_index == -1)
    1112:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <active_config_index>
    1116:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <active_config_index+0x1>
    111a:	8f 3f       	cpi	r24, 0xFF	; 255
    111c:	2f ef       	ldi	r18, 0xFF	; 255
    111e:	92 07       	cpc	r25, r18
    1120:	79 f4       	brne	.+30     	; 0x1140 <ui_show_display+0x3a6>
            {
                display_set("CONFIG", CONFIG_BUFFER[config_hover_index]);
    1122:	e0 91 dc 04 	lds	r30, 0x04DC	; 0x8004dc <config_hover_index>
    1126:	f0 91 dd 04 	lds	r31, 0x04DD	; 0x8004dd <config_hover_index+0x1>
    112a:	ee 0f       	add	r30, r30
    112c:	ff 1f       	adc	r31, r31
    112e:	e8 5d       	subi	r30, 0xD8	; 216
    1130:	fe 4f       	sbci	r31, 0xFE	; 254
    1132:	60 81       	ld	r22, Z
    1134:	71 81       	ldd	r23, Z+1	; 0x01
    1136:	84 ed       	ldi	r24, 0xD4	; 212
    1138:	92 e0       	ldi	r25, 0x02	; 2
    113a:	0e 94 db 04 	call	0x9b6	; 0x9b6 <display_set>
    113e:	bb c0       	rjmp	.+374    	; 0x12b6 <ui_show_display+0x51c>
            }
            else
            {
                switch (active_config_index)
    1140:	82 30       	cpi	r24, 0x02	; 2
    1142:	91 05       	cpc	r25, r1
    1144:	09 f4       	brne	.+2      	; 0x1148 <ui_show_display+0x3ae>
    1146:	46 c0       	rjmp	.+140    	; 0x11d4 <ui_show_display+0x43a>
    1148:	2c f4       	brge	.+10     	; 0x1154 <ui_show_display+0x3ba>
    114a:	00 97       	sbiw	r24, 0x00	; 0
    114c:	59 f0       	breq	.+22     	; 0x1164 <ui_show_display+0x3ca>
    114e:	01 97       	sbiw	r24, 0x01	; 1
    1150:	29 f1       	breq	.+74     	; 0x119c <ui_show_display+0x402>
    1152:	a4 c0       	rjmp	.+328    	; 0x129c <ui_show_display+0x502>
    1154:	83 30       	cpi	r24, 0x03	; 3
    1156:	91 05       	cpc	r25, r1
    1158:	09 f4       	brne	.+2      	; 0x115c <ui_show_display+0x3c2>
    115a:	58 c0       	rjmp	.+176    	; 0x120c <ui_show_display+0x472>
    115c:	04 97       	sbiw	r24, 0x04	; 4
    115e:	09 f4       	brne	.+2      	; 0x1162 <ui_show_display+0x3c8>
    1160:	79 c0       	rjmp	.+242    	; 0x1254 <ui_show_display+0x4ba>
    1162:	9c c0       	rjmp	.+312    	; 0x129c <ui_show_display+0x502>
                {
                case 0:
                    format_float(buffer, sizeof(buffer), STEP_SIZE_FOR_INCREMENTS, 1, "Units");
    1164:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <STEP_SIZE_FOR_INCREMENTS>
    1168:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <STEP_SIZE_FOR_INCREMENTS+0x1>
    116c:	40 91 16 01 	lds	r20, 0x0116	; 0x800116 <STEP_SIZE_FOR_INCREMENTS+0x2>
    1170:	50 91 17 01 	lds	r21, 0x0117	; 0x800117 <STEP_SIZE_FOR_INCREMENTS+0x3>
    1174:	0f 2e       	mov	r0, r31
    1176:	fb ed       	ldi	r31, 0xDB	; 219
    1178:	ef 2e       	mov	r14, r31
    117a:	f2 e0       	ldi	r31, 0x02	; 2
    117c:	ff 2e       	mov	r15, r31
    117e:	f0 2d       	mov	r31, r0
    1180:	01 e0       	ldi	r16, 0x01	; 1
    1182:	60 e1       	ldi	r22, 0x10	; 16
    1184:	70 e0       	ldi	r23, 0x00	; 0
    1186:	84 ee       	ldi	r24, 0xE4	; 228
    1188:	94 e0       	ldi	r25, 0x04	; 4
    118a:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <format_float>
                    display_set("STEP SIZE", buffer);
    118e:	64 ee       	ldi	r22, 0xE4	; 228
    1190:	74 e0       	ldi	r23, 0x04	; 4
    1192:	81 ee       	ldi	r24, 0xE1	; 225
    1194:	92 e0       	ldi	r25, 0x02	; 2
    1196:	0e 94 db 04 	call	0x9b6	; 0x9b6 <display_set>
                    break;
    119a:	8d c0       	rjmp	.+282    	; 0x12b6 <ui_show_display+0x51c>
                case 1:
                    format_float(buffer, sizeof(buffer), PUMP_THRESHOLD, 1, "Ltrs");
    119c:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <PUMP_THRESHOLD>
    11a0:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <PUMP_THRESHOLD+0x1>
    11a4:	40 91 0e 01 	lds	r20, 0x010E	; 0x80010e <PUMP_THRESHOLD+0x2>
    11a8:	50 91 0f 01 	lds	r21, 0x010F	; 0x80010f <PUMP_THRESHOLD+0x3>
    11ac:	0f 2e       	mov	r0, r31
    11ae:	fb ea       	ldi	r31, 0xAB	; 171
    11b0:	ef 2e       	mov	r14, r31
    11b2:	f3 e0       	ldi	r31, 0x03	; 3
    11b4:	ff 2e       	mov	r15, r31
    11b6:	f0 2d       	mov	r31, r0
    11b8:	01 e0       	ldi	r16, 0x01	; 1
    11ba:	60 e1       	ldi	r22, 0x10	; 16
    11bc:	70 e0       	ldi	r23, 0x00	; 0
    11be:	84 ee       	ldi	r24, 0xE4	; 228
    11c0:	94 e0       	ldi	r25, 0x04	; 4
    11c2:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <format_float>
                    display_set("PUMP THRESHOLD", buffer);
    11c6:	64 ee       	ldi	r22, 0xE4	; 228
    11c8:	74 e0       	ldi	r23, 0x04	; 4
    11ca:	8b ee       	ldi	r24, 0xEB	; 235
    11cc:	92 e0       	ldi	r25, 0x02	; 2
    11ce:	0e 94 db 04 	call	0x9b6	; 0x9b6 <display_set>
                    break;
    11d2:	71 c0       	rjmp	.+226    	; 0x12b6 <ui_show_display+0x51c>
                case 2:
                    format_float(buffer, sizeof(buffer), SPRAY_THRESHOLD, 1, "degrees");
    11d4:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <SPRAY_THRESHOLD>
    11d8:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <SPRAY_THRESHOLD+0x1>
    11dc:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <SPRAY_THRESHOLD+0x2>
    11e0:	50 91 0b 01 	lds	r21, 0x010B	; 0x80010b <SPRAY_THRESHOLD+0x3>
    11e4:	0f 2e       	mov	r0, r31
    11e6:	f9 ec       	ldi	r31, 0xC9	; 201
    11e8:	ef 2e       	mov	r14, r31
    11ea:	f3 e0       	ldi	r31, 0x03	; 3
    11ec:	ff 2e       	mov	r15, r31
    11ee:	f0 2d       	mov	r31, r0
    11f0:	01 e0       	ldi	r16, 0x01	; 1
    11f2:	60 e1       	ldi	r22, 0x10	; 16
    11f4:	70 e0       	ldi	r23, 0x00	; 0
    11f6:	84 ee       	ldi	r24, 0xE4	; 228
    11f8:	94 e0       	ldi	r25, 0x04	; 4
    11fa:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <format_float>
                    display_set("SPRAY THRESHOLD", buffer);
    11fe:	64 ee       	ldi	r22, 0xE4	; 228
    1200:	74 e0       	ldi	r23, 0x04	; 4
    1202:	8a ef       	ldi	r24, 0xFA	; 250
    1204:	92 e0       	ldi	r25, 0x02	; 2
    1206:	0e 94 db 04 	call	0x9b6	; 0x9b6 <display_set>
                    break;
    120a:	55 c0       	rjmp	.+170    	; 0x12b6 <ui_show_display+0x51c>
                case 3:
                    snprintf(buffer, sizeof(buffer), "%s", ENABLE_TRIGGER_VALUE ? "Enabled" : "Disabled");
    120c:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <ENABLE_TRIGGER_VALUE>
    1210:	88 23       	and	r24, r24
    1212:	19 f0       	breq	.+6      	; 0x121a <ui_show_display+0x480>
    1214:	8a ee       	ldi	r24, 0xEA	; 234
    1216:	91 e0       	ldi	r25, 0x01	; 1
    1218:	02 c0       	rjmp	.+4      	; 0x121e <ui_show_display+0x484>
    121a:	82 ef       	ldi	r24, 0xF2	; 242
    121c:	91 e0       	ldi	r25, 0x01	; 1
    121e:	9f 93       	push	r25
    1220:	8f 93       	push	r24
    1222:	89 e7       	ldi	r24, 0x79	; 121
    1224:	91 e0       	ldi	r25, 0x01	; 1
    1226:	9f 93       	push	r25
    1228:	8f 93       	push	r24
    122a:	1f 92       	push	r1
    122c:	80 e1       	ldi	r24, 0x10	; 16
    122e:	8f 93       	push	r24
    1230:	84 ee       	ldi	r24, 0xE4	; 228
    1232:	94 e0       	ldi	r25, 0x04	; 4
    1234:	9f 93       	push	r25
    1236:	8f 93       	push	r24
    1238:	0e 94 4f 13 	call	0x269e	; 0x269e <snprintf>
                    display_set("ENABLE TRIGGERS", buffer);
    123c:	64 ee       	ldi	r22, 0xE4	; 228
    123e:	74 e0       	ldi	r23, 0x04	; 4
    1240:	8a e0       	ldi	r24, 0x0A	; 10
    1242:	93 e0       	ldi	r25, 0x03	; 3
    1244:	0e 94 db 04 	call	0x9b6	; 0x9b6 <display_set>
                    break;
    1248:	0f b6       	in	r0, 0x3f	; 63
    124a:	f8 94       	cli
    124c:	de bf       	out	0x3e, r29	; 62
    124e:	0f be       	out	0x3f, r0	; 63
    1250:	cd bf       	out	0x3d, r28	; 61
    1252:	31 c0       	rjmp	.+98     	; 0x12b6 <ui_show_display+0x51c>
                case 4:
                    snprintf(buffer, sizeof(buffer), "%s", ENABLE_ALERT_VALUE ? "Enabled" : "Disabled");
    1254:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <ENABLE_ALERT_VALUE>
    1258:	88 23       	and	r24, r24
    125a:	19 f0       	breq	.+6      	; 0x1262 <ui_show_display+0x4c8>
    125c:	8a ee       	ldi	r24, 0xEA	; 234
    125e:	91 e0       	ldi	r25, 0x01	; 1
    1260:	02 c0       	rjmp	.+4      	; 0x1266 <ui_show_display+0x4cc>
    1262:	82 ef       	ldi	r24, 0xF2	; 242
    1264:	91 e0       	ldi	r25, 0x01	; 1
    1266:	9f 93       	push	r25
    1268:	8f 93       	push	r24
    126a:	89 e7       	ldi	r24, 0x79	; 121
    126c:	91 e0       	ldi	r25, 0x01	; 1
    126e:	9f 93       	push	r25
    1270:	8f 93       	push	r24
    1272:	1f 92       	push	r1
    1274:	80 e1       	ldi	r24, 0x10	; 16
    1276:	8f 93       	push	r24
    1278:	84 ee       	ldi	r24, 0xE4	; 228
    127a:	94 e0       	ldi	r25, 0x04	; 4
    127c:	9f 93       	push	r25
    127e:	8f 93       	push	r24
    1280:	0e 94 4f 13 	call	0x269e	; 0x269e <snprintf>
                    display_set("ENABLE ALERTS", buffer);
    1284:	64 ee       	ldi	r22, 0xE4	; 228
    1286:	74 e0       	ldi	r23, 0x04	; 4
    1288:	8a e1       	ldi	r24, 0x1A	; 26
    128a:	93 e0       	ldi	r25, 0x03	; 3
    128c:	0e 94 db 04 	call	0x9b6	; 0x9b6 <display_set>
                    break;
    1290:	0f b6       	in	r0, 0x3f	; 63
    1292:	f8 94       	cli
    1294:	de bf       	out	0x3e, r29	; 62
    1296:	0f be       	out	0x3f, r0	; 63
    1298:	cd bf       	out	0x3d, r28	; 61
    129a:	0d c0       	rjmp	.+26     	; 0x12b6 <ui_show_display+0x51c>
                default:
                    display_set("ERROR", "Invalid config");
    129c:	68 e2       	ldi	r22, 0x28	; 40
    129e:	73 e0       	ldi	r23, 0x03	; 3
    12a0:	83 e9       	ldi	r24, 0x93	; 147
    12a2:	92 e0       	ldi	r25, 0x02	; 2
    12a4:	0e 94 db 04 	call	0x9b6	; 0x9b6 <display_set>
                    break;
    12a8:	06 c0       	rjmp	.+12     	; 0x12b6 <ui_show_display+0x51c>
                }
            }
            break;

        default:
            display_set("ERROR", "Invalid menu");
    12aa:	67 e3       	ldi	r22, 0x37	; 55
    12ac:	73 e0       	ldi	r23, 0x03	; 3
    12ae:	83 e9       	ldi	r24, 0x93	; 147
    12b0:	92 e0       	ldi	r25, 0x02	; 2
    12b2:	0e 94 db 04 	call	0x9b6	; 0x9b6 <display_set>
            break;
        }
    }
}
    12b6:	0f 90       	pop	r0
    12b8:	0f 90       	pop	r0
    12ba:	df 91       	pop	r29
    12bc:	cf 91       	pop	r28
    12be:	0f 91       	pop	r16
    12c0:	ff 90       	pop	r15
    12c2:	ef 90       	pop	r14
    12c4:	08 95       	ret

000012c6 <ui_process_key_command>:
    process a key command from the keypad and update the UI state
    params: uint8_t key - the key number (1-4)
    returns: void
*/
void ui_process_key_command (uint8_t key) {
    if (key == 1)
    12c6:	81 30       	cpi	r24, 0x01	; 1
    12c8:	a9 f5       	brne	.+106    	; 0x1334 <ui_process_key_command+0x6e>
    {
        if (active_menu_index == -1)
    12ca:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <active_menu_index>
    12ce:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <active_menu_index+0x1>
    12d2:	01 96       	adiw	r24, 0x01	; 1
    12d4:	09 f4       	brne	.+2      	; 0x12d8 <ui_process_key_command+0x12>
    12d6:	9b c2       	rjmp	.+1334   	; 0x180e <ui_process_key_command+0x548>
        {
            return;
        }
        else
        {
            if (active_trigger_index != -1)
    12d8:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <active_trigger_index>
    12dc:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <active_trigger_index+0x1>
    12e0:	01 96       	adiw	r24, 0x01	; 1
    12e2:	39 f0       	breq	.+14     	; 0x12f2 <ui_process_key_command+0x2c>
            {
                active_trigger_index = -1;
    12e4:	8f ef       	ldi	r24, 0xFF	; 255
    12e6:	9f ef       	ldi	r25, 0xFF	; 255
    12e8:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <active_trigger_index+0x1>
    12ec:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <active_trigger_index>
    12f0:	08 95       	ret
            }
            else if (active_config_index != -1)
    12f2:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <active_config_index>
    12f6:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <active_config_index+0x1>
    12fa:	01 96       	adiw	r24, 0x01	; 1
    12fc:	39 f0       	breq	.+14     	; 0x130c <ui_process_key_command+0x46>
            {
                active_config_index = -1;
    12fe:	8f ef       	ldi	r24, 0xFF	; 255
    1300:	9f ef       	ldi	r25, 0xFF	; 255
    1302:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <active_config_index+0x1>
    1306:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <active_config_index>
    130a:	08 95       	ret
            }
            else if (active_live_view_index != -1)
    130c:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <active_live_view_index>
    1310:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <active_live_view_index+0x1>
    1314:	01 96       	adiw	r24, 0x01	; 1
    1316:	39 f0       	breq	.+14     	; 0x1326 <ui_process_key_command+0x60>
            {
                active_live_view_index = -1;
    1318:	8f ef       	ldi	r24, 0xFF	; 255
    131a:	9f ef       	ldi	r25, 0xFF	; 255
    131c:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <active_live_view_index+0x1>
    1320:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <active_live_view_index>
    1324:	08 95       	ret
            }
            else
            {
                active_menu_index = -1;
    1326:	8f ef       	ldi	r24, 0xFF	; 255
    1328:	9f ef       	ldi	r25, 0xFF	; 255
    132a:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <active_menu_index+0x1>
    132e:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <active_menu_index>
    1332:	08 95       	ret
            }
        }
    }
    else if (key == 2)
    1334:	82 30       	cpi	r24, 0x02	; 2
    1336:	09 f0       	breq	.+2      	; 0x133a <ui_process_key_command+0x74>
    1338:	0e c1       	rjmp	.+540    	; 0x1556 <ui_process_key_command+0x290>
    {
        if (active_menu_index == -1)
    133a:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <active_menu_index>
    133e:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <active_menu_index+0x1>
    1342:	8f 3f       	cpi	r24, 0xFF	; 255
    1344:	2f ef       	ldi	r18, 0xFF	; 255
    1346:	92 07       	cpc	r25, r18
    1348:	71 f4       	brne	.+28     	; 0x1366 <ui_process_key_command+0xa0>
        {
            if (menu_hover_index < (sizeof(MENU_BUFFER)/sizeof(MENU_BUFFER[0]) - 1))
    134a:	80 91 e0 04 	lds	r24, 0x04E0	; 0x8004e0 <menu_hover_index>
    134e:	90 91 e1 04 	lds	r25, 0x04E1	; 0x8004e1 <menu_hover_index+0x1>
    1352:	87 30       	cpi	r24, 0x07	; 7
    1354:	91 05       	cpc	r25, r1
    1356:	08 f0       	brcs	.+2      	; 0x135a <ui_process_key_command+0x94>
    1358:	5a c2       	rjmp	.+1204   	; 0x180e <ui_process_key_command+0x548>
                menu_hover_index++; // navigate downwards on the main menu
    135a:	01 96       	adiw	r24, 0x01	; 1
    135c:	90 93 e1 04 	sts	0x04E1, r25	; 0x8004e1 <menu_hover_index+0x1>
    1360:	80 93 e0 04 	sts	0x04E0, r24	; 0x8004e0 <menu_hover_index>
    1364:	08 95       	ret
        }
        else if (active_menu_index == 4)
    1366:	84 30       	cpi	r24, 0x04	; 4
    1368:	91 05       	cpc	r25, r1
    136a:	71 f4       	brne	.+28     	; 0x1388 <ui_process_key_command+0xc2>
        {
            // user is in the live view menu
            if (live_view_hover_index < (sizeof(LIVE_VIEW_BUFFER)/sizeof(LIVE_VIEW_BUFFER[0]) - 1))
    136c:	80 91 d8 04 	lds	r24, 0x04D8	; 0x8004d8 <live_view_hover_index>
    1370:	90 91 d9 04 	lds	r25, 0x04D9	; 0x8004d9 <live_view_hover_index+0x1>
    1374:	83 30       	cpi	r24, 0x03	; 3
    1376:	91 05       	cpc	r25, r1
    1378:	08 f0       	brcs	.+2      	; 0x137c <ui_process_key_command+0xb6>
    137a:	49 c2       	rjmp	.+1170   	; 0x180e <ui_process_key_command+0x548>
                live_view_hover_index++; // navigate downwards on the live view menu
    137c:	01 96       	adiw	r24, 0x01	; 1
    137e:	90 93 d9 04 	sts	0x04D9, r25	; 0x8004d9 <live_view_hover_index+0x1>
    1382:	80 93 d8 04 	sts	0x04D8, r24	; 0x8004d8 <live_view_hover_index>
    1386:	08 95       	ret
        }
        else if (active_menu_index == 5) 
    1388:	85 30       	cpi	r24, 0x05	; 5
    138a:	91 05       	cpc	r25, r1
    138c:	09 f0       	breq	.+2      	; 0x1390 <ui_process_key_command+0xca>
    138e:	50 c0       	rjmp	.+160    	; 0x1430 <ui_process_key_command+0x16a>
        {
            // user is in the triggers menu
            if (active_trigger_index == -1)
    1390:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <active_trigger_index>
    1394:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <active_trigger_index+0x1>
    1398:	8f 3f       	cpi	r24, 0xFF	; 255
    139a:	2f ef       	ldi	r18, 0xFF	; 255
    139c:	92 07       	cpc	r25, r18
    139e:	69 f4       	brne	.+26     	; 0x13ba <ui_process_key_command+0xf4>
            {
                if (trigger_hover_index < (sizeof(TRIGGERS_BUFFER)/sizeof(TRIGGERS_BUFFER[0]) - 1))
    13a0:	80 91 de 04 	lds	r24, 0x04DE	; 0x8004de <trigger_hover_index>
    13a4:	90 91 df 04 	lds	r25, 0x04DF	; 0x8004df <trigger_hover_index+0x1>
    13a8:	00 97       	sbiw	r24, 0x00	; 0
    13aa:	09 f0       	breq	.+2      	; 0x13ae <ui_process_key_command+0xe8>
    13ac:	30 c2       	rjmp	.+1120   	; 0x180e <ui_process_key_command+0x548>
                    trigger_hover_index++; // navigate downwards on the triggers menu
    13ae:	01 96       	adiw	r24, 0x01	; 1
    13b0:	90 93 df 04 	sts	0x04DF, r25	; 0x8004df <trigger_hover_index+0x1>
    13b4:	80 93 de 04 	sts	0x04DE, r24	; 0x8004de <trigger_hover_index>
    13b8:	08 95       	ret
            } else {
                switch (active_trigger_index) {
    13ba:	00 97       	sbiw	r24, 0x00	; 0
    13bc:	19 f0       	breq	.+6      	; 0x13c4 <ui_process_key_command+0xfe>
    13be:	01 97       	sbiw	r24, 0x01	; 1
    13c0:	e1 f0       	breq	.+56     	; 0x13fa <ui_process_key_command+0x134>
    13c2:	08 95       	ret
                    case 0:
                        // adjust MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER - decrease
                        MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER -= STEP_SIZE_FOR_INCREMENTS;
    13c4:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <STEP_SIZE_FOR_INCREMENTS>
    13c8:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <STEP_SIZE_FOR_INCREMENTS+0x1>
    13cc:	40 91 16 01 	lds	r20, 0x0116	; 0x800116 <STEP_SIZE_FOR_INCREMENTS+0x2>
    13d0:	50 91 17 01 	lds	r21, 0x0117	; 0x800117 <STEP_SIZE_FOR_INCREMENTS+0x3>
    13d4:	60 91 1c 01 	lds	r22, 0x011C	; 0x80011c <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER>
    13d8:	70 91 1d 01 	lds	r23, 0x011D	; 0x80011d <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x1>
    13dc:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x2>
    13e0:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x3>
    13e4:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <__subsf3>
    13e8:	60 93 1c 01 	sts	0x011C, r22	; 0x80011c <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER>
    13ec:	70 93 1d 01 	sts	0x011D, r23	; 0x80011d <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x1>
    13f0:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x2>
    13f4:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x3>
                        break;
    13f8:	08 95       	ret
                    case 1:
                        // adjust MAXIMUM_TEMPERATURE_BEFORE_PUMPING - decrease
                        MAXIMUM_TEMPERATURE_BEFORE_PUMPING -= STEP_SIZE_FOR_INCREMENTS;
    13fa:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <STEP_SIZE_FOR_INCREMENTS>
    13fe:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <STEP_SIZE_FOR_INCREMENTS+0x1>
    1402:	40 91 16 01 	lds	r20, 0x0116	; 0x800116 <STEP_SIZE_FOR_INCREMENTS+0x2>
    1406:	50 91 17 01 	lds	r21, 0x0117	; 0x800117 <STEP_SIZE_FOR_INCREMENTS+0x3>
    140a:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING>
    140e:	70 91 19 01 	lds	r23, 0x0119	; 0x800119 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x1>
    1412:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x2>
    1416:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x3>
    141a:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <__subsf3>
    141e:	60 93 18 01 	sts	0x0118, r22	; 0x800118 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING>
    1422:	70 93 19 01 	sts	0x0119, r23	; 0x800119 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x1>
    1426:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x2>
    142a:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x3>
                        break;
    142e:	08 95       	ret
                    default:
                        break;
                }
            }
        }
        else if (active_menu_index == 6) {
    1430:	86 30       	cpi	r24, 0x06	; 6
    1432:	91 05       	cpc	r25, r1
    1434:	71 f4       	brne	.+28     	; 0x1452 <ui_process_key_command+0x18c>
            if (message_hover_index < MSG_BUFFER_SIZE - 1)
    1436:	80 91 da 04 	lds	r24, 0x04DA	; 0x8004da <message_hover_index>
    143a:	90 91 db 04 	lds	r25, 0x04DB	; 0x8004db <message_hover_index+0x1>
    143e:	83 30       	cpi	r24, 0x03	; 3
    1440:	91 05       	cpc	r25, r1
    1442:	0c f0       	brlt	.+2      	; 0x1446 <ui_process_key_command+0x180>
    1444:	e4 c1       	rjmp	.+968    	; 0x180e <ui_process_key_command+0x548>
                message_hover_index++;
    1446:	01 96       	adiw	r24, 0x01	; 1
    1448:	90 93 db 04 	sts	0x04DB, r25	; 0x8004db <message_hover_index+0x1>
    144c:	80 93 da 04 	sts	0x04DA, r24	; 0x8004da <message_hover_index>
    1450:	08 95       	ret
        }
        else if (active_menu_index == 7)
    1452:	07 97       	sbiw	r24, 0x07	; 7
    1454:	09 f0       	breq	.+2      	; 0x1458 <ui_process_key_command+0x192>
    1456:	db c1       	rjmp	.+950    	; 0x180e <ui_process_key_command+0x548>
        {
            if (active_config_index == -1)
    1458:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <active_config_index>
    145c:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <active_config_index+0x1>
    1460:	8f 3f       	cpi	r24, 0xFF	; 255
    1462:	2f ef       	ldi	r18, 0xFF	; 255
    1464:	92 07       	cpc	r25, r18
    1466:	71 f4       	brne	.+28     	; 0x1484 <ui_process_key_command+0x1be>
            {
                if (config_hover_index < (sizeof(CONFIG_BUFFER)/sizeof(CONFIG_BUFFER[0]) - 1))
    1468:	80 91 dc 04 	lds	r24, 0x04DC	; 0x8004dc <config_hover_index>
    146c:	90 91 dd 04 	lds	r25, 0x04DD	; 0x8004dd <config_hover_index+0x1>
    1470:	84 30       	cpi	r24, 0x04	; 4
    1472:	91 05       	cpc	r25, r1
    1474:	08 f0       	brcs	.+2      	; 0x1478 <ui_process_key_command+0x1b2>
    1476:	cb c1       	rjmp	.+918    	; 0x180e <ui_process_key_command+0x548>
                    config_hover_index++; // navigate downwards on the config menu
    1478:	01 96       	adiw	r24, 0x01	; 1
    147a:	90 93 dd 04 	sts	0x04DD, r25	; 0x8004dd <config_hover_index+0x1>
    147e:	80 93 dc 04 	sts	0x04DC, r24	; 0x8004dc <config_hover_index>
    1482:	08 95       	ret
            } else {
                switch (active_config_index)
    1484:	82 30       	cpi	r24, 0x02	; 2
    1486:	91 05       	cpc	r25, r1
    1488:	09 f4       	brne	.+2      	; 0x148c <ui_process_key_command+0x1c6>
    148a:	44 c0       	rjmp	.+136    	; 0x1514 <ui_process_key_command+0x24e>
    148c:	2c f4       	brge	.+10     	; 0x1498 <ui_process_key_command+0x1d2>
    148e:	00 97       	sbiw	r24, 0x00	; 0
    1490:	59 f0       	breq	.+22     	; 0x14a8 <ui_process_key_command+0x1e2>
    1492:	01 97       	sbiw	r24, 0x01	; 1
    1494:	21 f1       	breq	.+72     	; 0x14de <ui_process_key_command+0x218>
    1496:	08 95       	ret
    1498:	83 30       	cpi	r24, 0x03	; 3
    149a:	91 05       	cpc	r25, r1
    149c:	09 f4       	brne	.+2      	; 0x14a0 <ui_process_key_command+0x1da>
    149e:	55 c0       	rjmp	.+170    	; 0x154a <ui_process_key_command+0x284>
    14a0:	04 97       	sbiw	r24, 0x04	; 4
    14a2:	09 f4       	brne	.+2      	; 0x14a6 <ui_process_key_command+0x1e0>
    14a4:	55 c0       	rjmp	.+170    	; 0x1550 <ui_process_key_command+0x28a>
    14a6:	08 95       	ret
                {
                case 0:
                    // adjust STEP_SIZE_FOR_INCREMENTS - decrease
                    STEP_SIZE_FOR_INCREMENTS -= STEP_INCREMENT;
    14a8:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <STEP_INCREMENT>
    14ac:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <STEP_INCREMENT+0x1>
    14b0:	40 91 12 01 	lds	r20, 0x0112	; 0x800112 <STEP_INCREMENT+0x2>
    14b4:	50 91 13 01 	lds	r21, 0x0113	; 0x800113 <STEP_INCREMENT+0x3>
    14b8:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <STEP_SIZE_FOR_INCREMENTS>
    14bc:	70 91 15 01 	lds	r23, 0x0115	; 0x800115 <STEP_SIZE_FOR_INCREMENTS+0x1>
    14c0:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <STEP_SIZE_FOR_INCREMENTS+0x2>
    14c4:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <STEP_SIZE_FOR_INCREMENTS+0x3>
    14c8:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <__subsf3>
    14cc:	60 93 14 01 	sts	0x0114, r22	; 0x800114 <STEP_SIZE_FOR_INCREMENTS>
    14d0:	70 93 15 01 	sts	0x0115, r23	; 0x800115 <STEP_SIZE_FOR_INCREMENTS+0x1>
    14d4:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <STEP_SIZE_FOR_INCREMENTS+0x2>
    14d8:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <STEP_SIZE_FOR_INCREMENTS+0x3>
                    break;
    14dc:	08 95       	ret
                case 1:
                    // adjust PUMP_THRESHOLD - decrease
                    PUMP_THRESHOLD -= STEP_SIZE_FOR_INCREMENTS;
    14de:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <STEP_SIZE_FOR_INCREMENTS>
    14e2:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <STEP_SIZE_FOR_INCREMENTS+0x1>
    14e6:	40 91 16 01 	lds	r20, 0x0116	; 0x800116 <STEP_SIZE_FOR_INCREMENTS+0x2>
    14ea:	50 91 17 01 	lds	r21, 0x0117	; 0x800117 <STEP_SIZE_FOR_INCREMENTS+0x3>
    14ee:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <PUMP_THRESHOLD>
    14f2:	70 91 0d 01 	lds	r23, 0x010D	; 0x80010d <PUMP_THRESHOLD+0x1>
    14f6:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <PUMP_THRESHOLD+0x2>
    14fa:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <PUMP_THRESHOLD+0x3>
    14fe:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <__subsf3>
    1502:	60 93 0c 01 	sts	0x010C, r22	; 0x80010c <PUMP_THRESHOLD>
    1506:	70 93 0d 01 	sts	0x010D, r23	; 0x80010d <PUMP_THRESHOLD+0x1>
    150a:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <PUMP_THRESHOLD+0x2>
    150e:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <PUMP_THRESHOLD+0x3>
                    break;
    1512:	08 95       	ret
                case 2:
                    // adjust SPRAY_THRESHOLD - decrease
                    SPRAY_THRESHOLD -= STEP_SIZE_FOR_INCREMENTS;
    1514:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <STEP_SIZE_FOR_INCREMENTS>
    1518:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <STEP_SIZE_FOR_INCREMENTS+0x1>
    151c:	40 91 16 01 	lds	r20, 0x0116	; 0x800116 <STEP_SIZE_FOR_INCREMENTS+0x2>
    1520:	50 91 17 01 	lds	r21, 0x0117	; 0x800117 <STEP_SIZE_FOR_INCREMENTS+0x3>
    1524:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <SPRAY_THRESHOLD>
    1528:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <SPRAY_THRESHOLD+0x1>
    152c:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <SPRAY_THRESHOLD+0x2>
    1530:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <SPRAY_THRESHOLD+0x3>
    1534:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <__subsf3>
    1538:	60 93 08 01 	sts	0x0108, r22	; 0x800108 <SPRAY_THRESHOLD>
    153c:	70 93 09 01 	sts	0x0109, r23	; 0x800109 <SPRAY_THRESHOLD+0x1>
    1540:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <SPRAY_THRESHOLD+0x2>
    1544:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <SPRAY_THRESHOLD+0x3>
                    break;
    1548:	08 95       	ret
                case 3:
                    // adjust ENABLE_TRIGGER_VALUE - toggle
                    ENABLE_TRIGGER_VALUE = 0;
    154a:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <ENABLE_TRIGGER_VALUE>
                    break;
    154e:	08 95       	ret
                case 4:
                    // adjust ENABLE_ALERT_VALUE - toggle
                    ENABLE_ALERT_VALUE = 0;
    1550:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <ENABLE_ALERT_VALUE>
                    break;
    1554:	08 95       	ret
                    break;
                }
            }
        }
    }
    else if (key == 3)
    1556:	83 30       	cpi	r24, 0x03	; 3
    1558:	09 f0       	breq	.+2      	; 0x155c <ui_process_key_command+0x296>
    155a:	11 c1       	rjmp	.+546    	; 0x177e <ui_process_key_command+0x4b8>
    {
        if (active_menu_index == -1)
    155c:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <active_menu_index>
    1560:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <active_menu_index+0x1>
    1564:	8f 3f       	cpi	r24, 0xFF	; 255
    1566:	2f ef       	ldi	r18, 0xFF	; 255
    1568:	92 07       	cpc	r25, r18
    156a:	71 f4       	brne	.+28     	; 0x1588 <ui_process_key_command+0x2c2>
        {
            if (menu_hover_index > 0)
    156c:	80 91 e0 04 	lds	r24, 0x04E0	; 0x8004e0 <menu_hover_index>
    1570:	90 91 e1 04 	lds	r25, 0x04E1	; 0x8004e1 <menu_hover_index+0x1>
    1574:	18 16       	cp	r1, r24
    1576:	19 06       	cpc	r1, r25
    1578:	0c f0       	brlt	.+2      	; 0x157c <ui_process_key_command+0x2b6>
    157a:	49 c1       	rjmp	.+658    	; 0x180e <ui_process_key_command+0x548>
                menu_hover_index--;
    157c:	01 97       	sbiw	r24, 0x01	; 1
    157e:	90 93 e1 04 	sts	0x04E1, r25	; 0x8004e1 <menu_hover_index+0x1>
    1582:	80 93 e0 04 	sts	0x04E0, r24	; 0x8004e0 <menu_hover_index>
    1586:	08 95       	ret
        }
        else if (active_menu_index == 4)
    1588:	84 30       	cpi	r24, 0x04	; 4
    158a:	91 05       	cpc	r25, r1
    158c:	71 f4       	brne	.+28     	; 0x15aa <ui_process_key_command+0x2e4>
        {
            // user is in the live view menu
            if (live_view_hover_index > 0)
    158e:	80 91 d8 04 	lds	r24, 0x04D8	; 0x8004d8 <live_view_hover_index>
    1592:	90 91 d9 04 	lds	r25, 0x04D9	; 0x8004d9 <live_view_hover_index+0x1>
    1596:	18 16       	cp	r1, r24
    1598:	19 06       	cpc	r1, r25
    159a:	0c f0       	brlt	.+2      	; 0x159e <ui_process_key_command+0x2d8>
    159c:	38 c1       	rjmp	.+624    	; 0x180e <ui_process_key_command+0x548>
                live_view_hover_index--;
    159e:	01 97       	sbiw	r24, 0x01	; 1
    15a0:	90 93 d9 04 	sts	0x04D9, r25	; 0x8004d9 <live_view_hover_index+0x1>
    15a4:	80 93 d8 04 	sts	0x04D8, r24	; 0x8004d8 <live_view_hover_index>
    15a8:	08 95       	ret
        }
        else if (active_menu_index == 5)
    15aa:	85 30       	cpi	r24, 0x05	; 5
    15ac:	91 05       	cpc	r25, r1
    15ae:	09 f0       	breq	.+2      	; 0x15b2 <ui_process_key_command+0x2ec>
    15b0:	51 c0       	rjmp	.+162    	; 0x1654 <ui_process_key_command+0x38e>
        {
            if (active_trigger_index == -1)
    15b2:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <active_trigger_index>
    15b6:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <active_trigger_index+0x1>
    15ba:	8f 3f       	cpi	r24, 0xFF	; 255
    15bc:	2f ef       	ldi	r18, 0xFF	; 255
    15be:	92 07       	cpc	r25, r18
    15c0:	71 f4       	brne	.+28     	; 0x15de <ui_process_key_command+0x318>
            {
                if (trigger_hover_index > 0)
    15c2:	80 91 de 04 	lds	r24, 0x04DE	; 0x8004de <trigger_hover_index>
    15c6:	90 91 df 04 	lds	r25, 0x04DF	; 0x8004df <trigger_hover_index+0x1>
    15ca:	18 16       	cp	r1, r24
    15cc:	19 06       	cpc	r1, r25
    15ce:	0c f0       	brlt	.+2      	; 0x15d2 <ui_process_key_command+0x30c>
    15d0:	1e c1       	rjmp	.+572    	; 0x180e <ui_process_key_command+0x548>
                    trigger_hover_index--;
    15d2:	01 97       	sbiw	r24, 0x01	; 1
    15d4:	90 93 df 04 	sts	0x04DF, r25	; 0x8004df <trigger_hover_index+0x1>
    15d8:	80 93 de 04 	sts	0x04DE, r24	; 0x8004de <trigger_hover_index>
    15dc:	08 95       	ret
            } else {
                switch (active_trigger_index) {
    15de:	00 97       	sbiw	r24, 0x00	; 0
    15e0:	19 f0       	breq	.+6      	; 0x15e8 <ui_process_key_command+0x322>
    15e2:	01 97       	sbiw	r24, 0x01	; 1
    15e4:	e1 f0       	breq	.+56     	; 0x161e <ui_process_key_command+0x358>
    15e6:	08 95       	ret
                    case 0:
                        // adjust MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER - decrease
                        MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER += STEP_SIZE_FOR_INCREMENTS;
    15e8:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <STEP_SIZE_FOR_INCREMENTS>
    15ec:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <STEP_SIZE_FOR_INCREMENTS+0x1>
    15f0:	40 91 16 01 	lds	r20, 0x0116	; 0x800116 <STEP_SIZE_FOR_INCREMENTS+0x2>
    15f4:	50 91 17 01 	lds	r21, 0x0117	; 0x800117 <STEP_SIZE_FOR_INCREMENTS+0x3>
    15f8:	60 91 1c 01 	lds	r22, 0x011C	; 0x80011c <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER>
    15fc:	70 91 1d 01 	lds	r23, 0x011D	; 0x80011d <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x1>
    1600:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x2>
    1604:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x3>
    1608:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <__addsf3>
    160c:	60 93 1c 01 	sts	0x011C, r22	; 0x80011c <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER>
    1610:	70 93 1d 01 	sts	0x011D, r23	; 0x80011d <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x1>
    1614:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x2>
    1618:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x3>
                        break;
    161c:	08 95       	ret
                    case 1:
                        // adjust MAXIMUM_TEMPERATURE_BEFORE_PUMPING - decrease
                        MAXIMUM_TEMPERATURE_BEFORE_PUMPING += STEP_SIZE_FOR_INCREMENTS;
    161e:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <STEP_SIZE_FOR_INCREMENTS>
    1622:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <STEP_SIZE_FOR_INCREMENTS+0x1>
    1626:	40 91 16 01 	lds	r20, 0x0116	; 0x800116 <STEP_SIZE_FOR_INCREMENTS+0x2>
    162a:	50 91 17 01 	lds	r21, 0x0117	; 0x800117 <STEP_SIZE_FOR_INCREMENTS+0x3>
    162e:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING>
    1632:	70 91 19 01 	lds	r23, 0x0119	; 0x800119 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x1>
    1636:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x2>
    163a:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x3>
    163e:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <__addsf3>
    1642:	60 93 18 01 	sts	0x0118, r22	; 0x800118 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING>
    1646:	70 93 19 01 	sts	0x0119, r23	; 0x800119 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x1>
    164a:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x2>
    164e:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x3>
                        break;
    1652:	08 95       	ret
                    default:
                        break;
                }
            }
        } 
        else if (active_menu_index == 6) {
    1654:	86 30       	cpi	r24, 0x06	; 6
    1656:	91 05       	cpc	r25, r1
    1658:	71 f4       	brne	.+28     	; 0x1676 <ui_process_key_command+0x3b0>
            if (message_hover_index > 0)
    165a:	80 91 da 04 	lds	r24, 0x04DA	; 0x8004da <message_hover_index>
    165e:	90 91 db 04 	lds	r25, 0x04DB	; 0x8004db <message_hover_index+0x1>
    1662:	18 16       	cp	r1, r24
    1664:	19 06       	cpc	r1, r25
    1666:	0c f0       	brlt	.+2      	; 0x166a <ui_process_key_command+0x3a4>
    1668:	d2 c0       	rjmp	.+420    	; 0x180e <ui_process_key_command+0x548>
                message_hover_index--;
    166a:	01 97       	sbiw	r24, 0x01	; 1
    166c:	90 93 db 04 	sts	0x04DB, r25	; 0x8004db <message_hover_index+0x1>
    1670:	80 93 da 04 	sts	0x04DA, r24	; 0x8004da <message_hover_index>
    1674:	08 95       	ret
        }
        else if (active_menu_index == 7)
    1676:	07 97       	sbiw	r24, 0x07	; 7
    1678:	09 f0       	breq	.+2      	; 0x167c <ui_process_key_command+0x3b6>
    167a:	c9 c0       	rjmp	.+402    	; 0x180e <ui_process_key_command+0x548>
        {
            if (active_config_index == -1)
    167c:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <active_config_index>
    1680:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <active_config_index+0x1>
    1684:	8f 3f       	cpi	r24, 0xFF	; 255
    1686:	2f ef       	ldi	r18, 0xFF	; 255
    1688:	92 07       	cpc	r25, r18
    168a:	71 f4       	brne	.+28     	; 0x16a8 <ui_process_key_command+0x3e2>
            {
                if (config_hover_index > 0)
    168c:	80 91 dc 04 	lds	r24, 0x04DC	; 0x8004dc <config_hover_index>
    1690:	90 91 dd 04 	lds	r25, 0x04DD	; 0x8004dd <config_hover_index+0x1>
    1694:	18 16       	cp	r1, r24
    1696:	19 06       	cpc	r1, r25
    1698:	0c f0       	brlt	.+2      	; 0x169c <ui_process_key_command+0x3d6>
    169a:	b9 c0       	rjmp	.+370    	; 0x180e <ui_process_key_command+0x548>
                    config_hover_index--;
    169c:	01 97       	sbiw	r24, 0x01	; 1
    169e:	90 93 dd 04 	sts	0x04DD, r25	; 0x8004dd <config_hover_index+0x1>
    16a2:	80 93 dc 04 	sts	0x04DC, r24	; 0x8004dc <config_hover_index>
    16a6:	08 95       	ret
            } else {
            switch (active_config_index)
    16a8:	82 30       	cpi	r24, 0x02	; 2
    16aa:	91 05       	cpc	r25, r1
    16ac:	09 f4       	brne	.+2      	; 0x16b0 <ui_process_key_command+0x3ea>
    16ae:	44 c0       	rjmp	.+136    	; 0x1738 <ui_process_key_command+0x472>
    16b0:	2c f4       	brge	.+10     	; 0x16bc <ui_process_key_command+0x3f6>
    16b2:	00 97       	sbiw	r24, 0x00	; 0
    16b4:	59 f0       	breq	.+22     	; 0x16cc <ui_process_key_command+0x406>
    16b6:	01 97       	sbiw	r24, 0x01	; 1
    16b8:	21 f1       	breq	.+72     	; 0x1702 <ui_process_key_command+0x43c>
    16ba:	08 95       	ret
    16bc:	83 30       	cpi	r24, 0x03	; 3
    16be:	91 05       	cpc	r25, r1
    16c0:	09 f4       	brne	.+2      	; 0x16c4 <ui_process_key_command+0x3fe>
    16c2:	55 c0       	rjmp	.+170    	; 0x176e <ui_process_key_command+0x4a8>
    16c4:	04 97       	sbiw	r24, 0x04	; 4
    16c6:	09 f4       	brne	.+2      	; 0x16ca <ui_process_key_command+0x404>
    16c8:	56 c0       	rjmp	.+172    	; 0x1776 <ui_process_key_command+0x4b0>
    16ca:	08 95       	ret
                {
                case 0:
                    // adjust STEP_SIZE_FOR_INCREMENTS - decrease
                    STEP_SIZE_FOR_INCREMENTS += STEP_INCREMENT;
    16cc:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <STEP_INCREMENT>
    16d0:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <STEP_INCREMENT+0x1>
    16d4:	40 91 12 01 	lds	r20, 0x0112	; 0x800112 <STEP_INCREMENT+0x2>
    16d8:	50 91 13 01 	lds	r21, 0x0113	; 0x800113 <STEP_INCREMENT+0x3>
    16dc:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <STEP_SIZE_FOR_INCREMENTS>
    16e0:	70 91 15 01 	lds	r23, 0x0115	; 0x800115 <STEP_SIZE_FOR_INCREMENTS+0x1>
    16e4:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <STEP_SIZE_FOR_INCREMENTS+0x2>
    16e8:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <STEP_SIZE_FOR_INCREMENTS+0x3>
    16ec:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <__addsf3>
    16f0:	60 93 14 01 	sts	0x0114, r22	; 0x800114 <STEP_SIZE_FOR_INCREMENTS>
    16f4:	70 93 15 01 	sts	0x0115, r23	; 0x800115 <STEP_SIZE_FOR_INCREMENTS+0x1>
    16f8:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <STEP_SIZE_FOR_INCREMENTS+0x2>
    16fc:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <STEP_SIZE_FOR_INCREMENTS+0x3>
                    break;
    1700:	08 95       	ret
                case 1:
                    // adjust PUMP_THRESHOLD - decrease
                    PUMP_THRESHOLD += STEP_SIZE_FOR_INCREMENTS;
    1702:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <STEP_SIZE_FOR_INCREMENTS>
    1706:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <STEP_SIZE_FOR_INCREMENTS+0x1>
    170a:	40 91 16 01 	lds	r20, 0x0116	; 0x800116 <STEP_SIZE_FOR_INCREMENTS+0x2>
    170e:	50 91 17 01 	lds	r21, 0x0117	; 0x800117 <STEP_SIZE_FOR_INCREMENTS+0x3>
    1712:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <PUMP_THRESHOLD>
    1716:	70 91 0d 01 	lds	r23, 0x010D	; 0x80010d <PUMP_THRESHOLD+0x1>
    171a:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <PUMP_THRESHOLD+0x2>
    171e:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <PUMP_THRESHOLD+0x3>
    1722:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <__addsf3>
    1726:	60 93 0c 01 	sts	0x010C, r22	; 0x80010c <PUMP_THRESHOLD>
    172a:	70 93 0d 01 	sts	0x010D, r23	; 0x80010d <PUMP_THRESHOLD+0x1>
    172e:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <PUMP_THRESHOLD+0x2>
    1732:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <PUMP_THRESHOLD+0x3>
                    break;
    1736:	08 95       	ret
                case 2:
                    // adjust SPRAY_THRESHOLD - decrease
                    SPRAY_THRESHOLD += STEP_SIZE_FOR_INCREMENTS;
    1738:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <STEP_SIZE_FOR_INCREMENTS>
    173c:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <STEP_SIZE_FOR_INCREMENTS+0x1>
    1740:	40 91 16 01 	lds	r20, 0x0116	; 0x800116 <STEP_SIZE_FOR_INCREMENTS+0x2>
    1744:	50 91 17 01 	lds	r21, 0x0117	; 0x800117 <STEP_SIZE_FOR_INCREMENTS+0x3>
    1748:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <SPRAY_THRESHOLD>
    174c:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <SPRAY_THRESHOLD+0x1>
    1750:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <SPRAY_THRESHOLD+0x2>
    1754:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <SPRAY_THRESHOLD+0x3>
    1758:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <__addsf3>
    175c:	60 93 08 01 	sts	0x0108, r22	; 0x800108 <SPRAY_THRESHOLD>
    1760:	70 93 09 01 	sts	0x0109, r23	; 0x800109 <SPRAY_THRESHOLD+0x1>
    1764:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <SPRAY_THRESHOLD+0x2>
    1768:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <SPRAY_THRESHOLD+0x3>
                    break;
    176c:	08 95       	ret
                case 3:
                    // adjust ENABLE_TRIGGER_VALUE - toggle
                    ENABLE_TRIGGER_VALUE = 1;
    176e:	81 e0       	ldi	r24, 0x01	; 1
    1770:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <ENABLE_TRIGGER_VALUE>
                    break;
    1774:	08 95       	ret
                case 4:
                    // adjust ENABLE_ALERT_VALUE - toggle
                    ENABLE_ALERT_VALUE = 1;
    1776:	81 e0       	ldi	r24, 0x01	; 1
    1778:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <ENABLE_ALERT_VALUE>
                    break;
    177c:	08 95       	ret
                    break;
                }
            }
        }
    }
    else if (key == 4)
    177e:	84 30       	cpi	r24, 0x04	; 4
    1780:	09 f0       	breq	.+2      	; 0x1784 <ui_process_key_command+0x4be>
    1782:	45 c0       	rjmp	.+138    	; 0x180e <ui_process_key_command+0x548>
    {
        if (active_menu_index == -1)
    1784:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <active_menu_index>
    1788:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <active_menu_index+0x1>
    178c:	8f 3f       	cpi	r24, 0xFF	; 255
    178e:	2f ef       	ldi	r18, 0xFF	; 255
    1790:	92 07       	cpc	r25, r18
    1792:	49 f4       	brne	.+18     	; 0x17a6 <ui_process_key_command+0x4e0>
        {
            active_menu_index = menu_hover_index;
    1794:	80 91 e0 04 	lds	r24, 0x04E0	; 0x8004e0 <menu_hover_index>
    1798:	90 91 e1 04 	lds	r25, 0x04E1	; 0x8004e1 <menu_hover_index+0x1>
    179c:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <active_menu_index+0x1>
    17a0:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <active_menu_index>
    17a4:	08 95       	ret
        }
        else if (active_menu_index == 4)
    17a6:	84 30       	cpi	r24, 0x04	; 4
    17a8:	91 05       	cpc	r25, r1
    17aa:	79 f4       	brne	.+30     	; 0x17ca <ui_process_key_command+0x504>
        {
            if (active_live_view_index == -1)
    17ac:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <active_live_view_index>
    17b0:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <active_live_view_index+0x1>
    17b4:	01 96       	adiw	r24, 0x01	; 1
    17b6:	59 f5       	brne	.+86     	; 0x180e <ui_process_key_command+0x548>
            {
                active_live_view_index = live_view_hover_index;
    17b8:	80 91 d8 04 	lds	r24, 0x04D8	; 0x8004d8 <live_view_hover_index>
    17bc:	90 91 d9 04 	lds	r25, 0x04D9	; 0x8004d9 <live_view_hover_index+0x1>
    17c0:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <active_live_view_index+0x1>
    17c4:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <active_live_view_index>
    17c8:	08 95       	ret
            }
        }
        else if (active_menu_index == 5)
    17ca:	85 30       	cpi	r24, 0x05	; 5
    17cc:	91 05       	cpc	r25, r1
    17ce:	79 f4       	brne	.+30     	; 0x17ee <ui_process_key_command+0x528>
        {
            if (active_trigger_index == -1)
    17d0:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <active_trigger_index>
    17d4:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <active_trigger_index+0x1>
    17d8:	01 96       	adiw	r24, 0x01	; 1
    17da:	c9 f4       	brne	.+50     	; 0x180e <ui_process_key_command+0x548>
            {
                active_trigger_index = trigger_hover_index;
    17dc:	80 91 de 04 	lds	r24, 0x04DE	; 0x8004de <trigger_hover_index>
    17e0:	90 91 df 04 	lds	r25, 0x04DF	; 0x8004df <trigger_hover_index+0x1>
    17e4:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <active_trigger_index+0x1>
    17e8:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <active_trigger_index>
    17ec:	08 95       	ret
            }
        }
        else if (active_menu_index == 7)
    17ee:	07 97       	sbiw	r24, 0x07	; 7
    17f0:	71 f4       	brne	.+28     	; 0x180e <ui_process_key_command+0x548>
        {
            if (active_config_index == -1)
    17f2:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <active_config_index>
    17f6:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <active_config_index+0x1>
    17fa:	01 96       	adiw	r24, 0x01	; 1
    17fc:	41 f4       	brne	.+16     	; 0x180e <ui_process_key_command+0x548>
            {
                active_config_index = config_hover_index;
    17fe:	80 91 dc 04 	lds	r24, 0x04DC	; 0x8004dc <config_hover_index>
    1802:	90 91 dd 04 	lds	r25, 0x04DD	; 0x8004dd <config_hover_index+0x1>
    1806:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <active_config_index+0x1>
    180a:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <active_config_index>
    180e:	08 95       	ret

00001810 <__vector_9>:
        }
    }
}

ISR(TIMER2_OVF_vect)
{
    1810:	1f 92       	push	r1
    1812:	0f 92       	push	r0
    1814:	0f b6       	in	r0, 0x3f	; 63
    1816:	0f 92       	push	r0
    1818:	11 24       	eor	r1, r1
    181a:	8f 93       	push	r24
    /* Keep ISR short: only update tick and set a flag for main loop to do sensor work */
    tick++;
    181c:	80 91 e3 04 	lds	r24, 0x04E3	; 0x8004e3 <tick>
    1820:	8f 5f       	subi	r24, 0xFF	; 255
    1822:	80 93 e3 04 	sts	0x04E3, r24	; 0x8004e3 <tick>

    if (tick >= 248) {
    1826:	80 91 e3 04 	lds	r24, 0x04E3	; 0x8004e3 <tick>
    182a:	88 3f       	cpi	r24, 0xF8	; 248
    182c:	28 f0       	brcs	.+10     	; 0x1838 <__vector_9+0x28>
        tick = 0;
    182e:	10 92 e3 04 	sts	0x04E3, r1	; 0x8004e3 <tick>
        one_second_event = 1;
    1832:	81 e0       	ldi	r24, 0x01	; 1
    1834:	80 93 e2 04 	sts	0x04E2, r24	; 0x8004e2 <one_second_event>
    }
}
    1838:	8f 91       	pop	r24
    183a:	0f 90       	pop	r0
    183c:	0f be       	out	0x3f, r0	; 63
    183e:	0f 90       	pop	r0
    1840:	1f 90       	pop	r1
    1842:	18 95       	reti

00001844 <main>:

int main(void)
{
    1844:	cf 93       	push	r28
    1846:	df 93       	push	r29
    1848:	cd b7       	in	r28, 0x3d	; 61
    184a:	de b7       	in	r29, 0x3e	; 62
    184c:	c0 54       	subi	r28, 0x40	; 64
    184e:	d1 09       	sbc	r29, r1
    1850:	0f b6       	in	r0, 0x3f	; 63
    1852:	f8 94       	cli
    1854:	de bf       	out	0x3e, r29	; 62
    1856:	0f be       	out	0x3f, r0	; 63
    1858:	cd bf       	out	0x3d, r28	; 61
    initQueue(&height_per_second);
    185a:	84 ef       	ldi	r24, 0xF4	; 244
    185c:	94 e0       	ldi	r25, 0x04	; 4
    185e:	0e 94 36 01 	call	0x26c	; 0x26c <initQueue>
    initStrQueue(&MESSAGES_Q);
    1862:	8c e0       	ldi	r24, 0x0C	; 12
    1864:	95 e0       	ldi	r25, 0x05	; 5
    1866:	0e 94 03 02 	call	0x406	; 0x406 <initStrQueue>
    LCD_1602A_init();
    186a:	0e 94 44 03 	call	0x688	; 0x688 <LCD_1602A_init>
    HCSR04_init();
    186e:	0e 94 88 04 	call	0x910	; 0x910 <HCSR04_init>
    KEYPAD_init();
    1872:	0e 94 c2 04 	call	0x984	; 0x984 <KEYPAD_init>
    LED_SYSTEM_ACTIVE_INIT();
    1876:	0e 94 c9 02 	call	0x592	; 0x592 <LED_SYSTEM_ACTIVE_INIT>
    TIMER2_INIT();
    187a:	0e 94 bf 02 	call	0x57e	; 0x57e <TIMER2_INIT>

    uint8_t pressed_key = KEYPAD_NO_KEY;
	
	int tank_height = HCSR04_get_distance();
    187e:	0e 94 bd 04 	call	0x97a	; 0x97a <HCSR04_get_distance>
    enqueue(&height_per_second, tank_height);
    1882:	bc 01       	movw	r22, r24
    1884:	84 ef       	ldi	r24, 0xF4	; 244
    1886:	94 e0       	ldi	r25, 0x04	; 4
    1888:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <enqueue>

    while (1)
    {
        ui_show_display();
    188c:	0e 94 cd 06 	call	0xd9a	; 0xd9a <ui_show_display>


        if (SYSTEM_SIGNAL) {
    1890:	80 91 b2 04 	lds	r24, 0x04B2	; 0x8004b2 <__data_end>
    1894:	88 23       	and	r24, r24
    1896:	e1 f1       	breq	.+120    	; 0x1910 <main+0xcc>
            char *msgptr = NULL;
    1898:	1a 82       	std	Y+2, r1	; 0x02
    189a:	19 82       	std	Y+1, r1	; 0x01
            SYSTEM_SIGNAL = 0;
    189c:	10 92 b2 04 	sts	0x04B2, r1	; 0x8004b2 <__data_end>
            int count = 0;
    18a0:	00 e0       	ldi	r16, 0x00	; 0
    18a2:	10 e0       	ldi	r17, 0x00	; 0
            while (count < 5 && !isStrQueueEmpty(&MESSAGES_Q)) {
    18a4:	2c c0       	rjmp	.+88     	; 0x18fe <main+0xba>
                peekFrontStr(&MESSAGES_Q, &msgptr);
    18a6:	be 01       	movw	r22, r28
    18a8:	6f 5f       	subi	r22, 0xFF	; 255
    18aa:	7f 4f       	sbci	r23, 0xFF	; 255
    18ac:	8c e0       	ldi	r24, 0x0C	; 12
    18ae:	95 e0       	ldi	r25, 0x05	; 5
    18b0:	0e 94 a2 02 	call	0x544	; 0x544 <peekFrontStr>
                display_set("ALERT", msgptr ? msgptr : "System alert");
    18b4:	69 81       	ldd	r22, Y+1	; 0x01
    18b6:	7a 81       	ldd	r23, Y+2	; 0x02
    18b8:	61 15       	cp	r22, r1
    18ba:	71 05       	cpc	r23, r1
    18bc:	11 f4       	brne	.+4      	; 0x18c2 <main+0x7e>
    18be:	64 e4       	ldi	r22, 0x44	; 68
    18c0:	73 e0       	ldi	r23, 0x03	; 3
    18c2:	84 ee       	ldi	r24, 0xE4	; 228
    18c4:	91 e0       	ldi	r25, 0x01	; 1
    18c6:	0e 94 db 04 	call	0x9b6	; 0x9b6 <display_set>
    18ca:	2f ef       	ldi	r18, 0xFF	; 255
    18cc:	82 e5       	ldi	r24, 0x52	; 82
    18ce:	97 e0       	ldi	r25, 0x07	; 7
    18d0:	21 50       	subi	r18, 0x01	; 1
    18d2:	80 40       	sbci	r24, 0x00	; 0
    18d4:	90 40       	sbci	r25, 0x00	; 0
    18d6:	e1 f7       	brne	.-8      	; 0x18d0 <main+0x8c>
    18d8:	00 c0       	rjmp	.+0      	; 0x18da <main+0x96>
    18da:	00 00       	nop
                _delay_ms(150);
                display_set("ALERT", " ");
    18dc:	61 e5       	ldi	r22, 0x51	; 81
    18de:	73 e0       	ldi	r23, 0x03	; 3
    18e0:	84 ee       	ldi	r24, 0xE4	; 228
    18e2:	91 e0       	ldi	r25, 0x01	; 1
    18e4:	0e 94 db 04 	call	0x9b6	; 0x9b6 <display_set>
    18e8:	2f ef       	ldi	r18, 0xFF	; 255
    18ea:	80 e7       	ldi	r24, 0x70	; 112
    18ec:	92 e0       	ldi	r25, 0x02	; 2
    18ee:	21 50       	subi	r18, 0x01	; 1
    18f0:	80 40       	sbci	r24, 0x00	; 0
    18f2:	90 40       	sbci	r25, 0x00	; 0
    18f4:	e1 f7       	brne	.-8      	; 0x18ee <main+0xaa>
    18f6:	00 c0       	rjmp	.+0      	; 0x18f8 <main+0xb4>
    18f8:	00 00       	nop
                _delay_ms(50);
                count++;
    18fa:	0f 5f       	subi	r16, 0xFF	; 255
    18fc:	1f 4f       	sbci	r17, 0xFF	; 255

        if (SYSTEM_SIGNAL) {
            char *msgptr = NULL;
            SYSTEM_SIGNAL = 0;
            int count = 0;
            while (count < 5 && !isStrQueueEmpty(&MESSAGES_Q)) {
    18fe:	05 30       	cpi	r16, 0x05	; 5
    1900:	11 05       	cpc	r17, r1
    1902:	34 f4       	brge	.+12     	; 0x1910 <main+0xcc>
    1904:	8c e0       	ldi	r24, 0x0C	; 12
    1906:	95 e0       	ldi	r25, 0x05	; 5
    1908:	0e 94 1a 02 	call	0x434	; 0x434 <isStrQueueEmpty>
    190c:	89 2b       	or	r24, r25
    190e:	59 f2       	breq	.-106    	; 0x18a6 <main+0x62>
                _delay_ms(50);
                count++;
            }
        }

        if (one_second_event) {
    1910:	80 91 e2 04 	lds	r24, 0x04E2	; 0x8004e2 <one_second_event>
    1914:	88 23       	and	r24, r24
    1916:	09 f4       	brne	.+2      	; 0x191a <main+0xd6>
    1918:	9b c2       	rjmp	.+1334   	; 0x1e50 <main+0x60c>
            one_second_event = 0;
    191a:	10 92 e2 04 	sts	0x04E2, r1	; 0x8004e2 <one_second_event>

            ten_seconds_count++;
    191e:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <ten_seconds_count>
    1922:	90 91 d5 04 	lds	r25, 0x04D5	; 0x8004d5 <ten_seconds_count+0x1>
    1926:	a0 91 d6 04 	lds	r26, 0x04D6	; 0x8004d6 <ten_seconds_count+0x2>
    192a:	b0 91 d7 04 	lds	r27, 0x04D7	; 0x8004d7 <ten_seconds_count+0x3>
    192e:	01 96       	adiw	r24, 0x01	; 1
    1930:	a1 1d       	adc	r26, r1
    1932:	b1 1d       	adc	r27, r1
    1934:	80 93 d4 04 	sts	0x04D4, r24	; 0x8004d4 <ten_seconds_count>
    1938:	90 93 d5 04 	sts	0x04D5, r25	; 0x8004d5 <ten_seconds_count+0x1>
    193c:	a0 93 d6 04 	sts	0x04D6, r26	; 0x8004d6 <ten_seconds_count+0x2>
    1940:	b0 93 d7 04 	sts	0x04D7, r27	; 0x8004d7 <ten_seconds_count+0x3>

            int tank_height = HCSR04_get_distance();
    1944:	0e 94 bd 04 	call	0x97a	; 0x97a <HCSR04_get_distance>
    1948:	8c 01       	movw	r16, r24
            enqueue(&height_per_second, tank_height);
    194a:	bc 01       	movw	r22, r24
    194c:	84 ef       	ldi	r24, 0xF4	; 244
    194e:	94 e0       	ldi	r25, 0x04	; 4
    1950:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <enqueue>

            float capacity = get_tank_capacity_at_height(tank_height * 1.5);
    1954:	b8 01       	movw	r22, r16
    1956:	11 0f       	add	r17, r17
    1958:	88 0b       	sbc	r24, r24
    195a:	99 0b       	sbc	r25, r25
    195c:	0e 94 68 10 	call	0x20d0	; 0x20d0 <__floatsisf>
    1960:	20 e0       	ldi	r18, 0x00	; 0
    1962:	30 e0       	ldi	r19, 0x00	; 0
    1964:	40 ec       	ldi	r20, 0xC0	; 192
    1966:	5f e3       	ldi	r21, 0x3F	; 63
    1968:	0e 94 1d 11 	call	0x223a	; 0x223a <__mulsf3>
    196c:	0e 94 30 10 	call	0x2060	; 0x2060 <__fixsfsi>
    1970:	cb 01       	movw	r24, r22
    1972:	0e 94 94 05 	call	0xb28	; 0xb28 <get_tank_capacity_at_height>
    1976:	16 2f       	mov	r17, r22
    1978:	07 2f       	mov	r16, r23
    197a:	f8 2e       	mov	r15, r24
    197c:	e9 2e       	mov	r14, r25
            float soil_temp = get_soil_temperature();
    197e:	0e 94 ca 06 	call	0xd94	; 0xd94 <get_soil_temperature>
    1982:	86 2e       	mov	r8, r22
    1984:	97 2e       	mov	r9, r23
    1986:	c8 2e       	mov	r12, r24
    1988:	d9 2e       	mov	r13, r25

            if (ENABLE_TRIGGER_VALUE) {
    198a:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <ENABLE_TRIGGER_VALUE>
    198e:	88 23       	and	r24, r24
    1990:	09 f4       	brne	.+2      	; 0x1994 <main+0x150>
    1992:	5e c2       	rjmp	.+1212   	; 0x1e50 <main+0x60c>
                if (capacity <= MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER) {
    1994:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER>
    1998:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x1>
    199c:	40 91 1e 01 	lds	r20, 0x011E	; 0x80011e <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x2>
    19a0:	50 91 1f 01 	lds	r21, 0x011F	; 0x80011f <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x3>
    19a4:	61 2f       	mov	r22, r17
    19a6:	70 2f       	mov	r23, r16
    19a8:	8f 2d       	mov	r24, r15
    19aa:	9e 2d       	mov	r25, r14
    19ac:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <__cmpsf2>
    19b0:	18 16       	cp	r1, r24
    19b2:	0c f4       	brge	.+2      	; 0x19b6 <main+0x172>
    19b4:	47 c0       	rjmp	.+142    	; 0x1a44 <main+0x200>
                    if ((ten_seconds_count - last_refill_alert_time) >= ALERT_COOLDOWN_SECONDS) {
    19b6:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <ten_seconds_count>
    19ba:	90 91 d5 04 	lds	r25, 0x04D5	; 0x8004d5 <ten_seconds_count+0x1>
    19be:	a0 91 d6 04 	lds	r26, 0x04D6	; 0x8004d6 <ten_seconds_count+0x2>
    19c2:	b0 91 d7 04 	lds	r27, 0x04D7	; 0x8004d7 <ten_seconds_count+0x3>
    19c6:	40 91 d0 04 	lds	r20, 0x04D0	; 0x8004d0 <last_refill_alert_time>
    19ca:	50 91 d1 04 	lds	r21, 0x04D1	; 0x8004d1 <last_refill_alert_time+0x1>
    19ce:	60 91 d2 04 	lds	r22, 0x04D2	; 0x8004d2 <last_refill_alert_time+0x2>
    19d2:	70 91 d3 04 	lds	r23, 0x04D3	; 0x8004d3 <last_refill_alert_time+0x3>
    19d6:	84 1b       	sub	r24, r20
    19d8:	95 0b       	sbc	r25, r21
    19da:	a6 0b       	sbc	r26, r22
    19dc:	b7 0b       	sbc	r27, r23
    19de:	03 97       	sbiw	r24, 0x03	; 3
    19e0:	a1 05       	cpc	r26, r1
    19e2:	b1 05       	cpc	r27, r1
    19e4:	78 f1       	brcs	.+94     	; 0x1a44 <main+0x200>
                        char msg[64];
                        snprintf(msg, sizeof(msg), "Refill triggered at %.1f Ltrs", capacity);
    19e6:	ef 92       	push	r14
    19e8:	ff 92       	push	r15
    19ea:	0f 93       	push	r16
    19ec:	1f 93       	push	r17
    19ee:	83 e5       	ldi	r24, 0x53	; 83
    19f0:	93 e0       	ldi	r25, 0x03	; 3
    19f2:	9f 93       	push	r25
    19f4:	8f 93       	push	r24
    19f6:	1f 92       	push	r1
    19f8:	80 e4       	ldi	r24, 0x40	; 64
    19fa:	8f 93       	push	r24
    19fc:	ce 01       	movw	r24, r28
    19fe:	01 96       	adiw	r24, 0x01	; 1
    1a00:	5c 01       	movw	r10, r24
    1a02:	9f 93       	push	r25
    1a04:	8f 93       	push	r24
    1a06:	0e 94 4f 13 	call	0x269e	; 0x269e <snprintf>
                        enqueueStr(&MESSAGES_Q, msg);
    1a0a:	b5 01       	movw	r22, r10
    1a0c:	8c e0       	ldi	r24, 0x0C	; 12
    1a0e:	95 e0       	ldi	r25, 0x05	; 5
    1a10:	0e 94 36 02 	call	0x46c	; 0x46c <enqueueStr>
                        SYSTEM_SIGNAL = 1;
    1a14:	81 e0       	ldi	r24, 0x01	; 1
    1a16:	80 93 b2 04 	sts	0x04B2, r24	; 0x8004b2 <__data_end>
                        last_refill_alert_time = ten_seconds_count;
    1a1a:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <ten_seconds_count>
    1a1e:	90 91 d5 04 	lds	r25, 0x04D5	; 0x8004d5 <ten_seconds_count+0x1>
    1a22:	a0 91 d6 04 	lds	r26, 0x04D6	; 0x8004d6 <ten_seconds_count+0x2>
    1a26:	b0 91 d7 04 	lds	r27, 0x04D7	; 0x8004d7 <ten_seconds_count+0x3>
    1a2a:	80 93 d0 04 	sts	0x04D0, r24	; 0x8004d0 <last_refill_alert_time>
    1a2e:	90 93 d1 04 	sts	0x04D1, r25	; 0x8004d1 <last_refill_alert_time+0x1>
    1a32:	a0 93 d2 04 	sts	0x04D2, r26	; 0x8004d2 <last_refill_alert_time+0x2>
    1a36:	b0 93 d3 04 	sts	0x04D3, r27	; 0x8004d3 <last_refill_alert_time+0x3>
    1a3a:	0f b6       	in	r0, 0x3f	; 63
    1a3c:	f8 94       	cli
    1a3e:	de bf       	out	0x3e, r29	; 62
    1a40:	0f be       	out	0x3f, r0	; 63
    1a42:	cd bf       	out	0x3d, r28	; 61
                    }
                }

                if (soil_temp >= MAXIMUM_TEMPERATURE_BEFORE_PUMPING) {
    1a44:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING>
    1a48:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x1>
    1a4c:	40 91 1a 01 	lds	r20, 0x011A	; 0x80011a <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x2>
    1a50:	50 91 1b 01 	lds	r21, 0x011B	; 0x80011b <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x3>
    1a54:	68 2d       	mov	r22, r8
    1a56:	79 2d       	mov	r23, r9
    1a58:	8c 2d       	mov	r24, r12
    1a5a:	9d 2d       	mov	r25, r13
    1a5c:	0e 94 18 11 	call	0x2230	; 0x2230 <__gesf2>
    1a60:	88 23       	and	r24, r24
    1a62:	0c f4       	brge	.+2      	; 0x1a66 <main+0x222>
    1a64:	47 c0       	rjmp	.+142    	; 0x1af4 <main+0x2b0>
                    if ((ten_seconds_count - last_cooling_alert_time) >= ALERT_COOLDOWN_SECONDS) {
    1a66:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <ten_seconds_count>
    1a6a:	90 91 d5 04 	lds	r25, 0x04D5	; 0x8004d5 <ten_seconds_count+0x1>
    1a6e:	a0 91 d6 04 	lds	r26, 0x04D6	; 0x8004d6 <ten_seconds_count+0x2>
    1a72:	b0 91 d7 04 	lds	r27, 0x04D7	; 0x8004d7 <ten_seconds_count+0x3>
    1a76:	40 91 cc 04 	lds	r20, 0x04CC	; 0x8004cc <last_cooling_alert_time>
    1a7a:	50 91 cd 04 	lds	r21, 0x04CD	; 0x8004cd <last_cooling_alert_time+0x1>
    1a7e:	60 91 ce 04 	lds	r22, 0x04CE	; 0x8004ce <last_cooling_alert_time+0x2>
    1a82:	70 91 cf 04 	lds	r23, 0x04CF	; 0x8004cf <last_cooling_alert_time+0x3>
    1a86:	84 1b       	sub	r24, r20
    1a88:	95 0b       	sbc	r25, r21
    1a8a:	a6 0b       	sbc	r26, r22
    1a8c:	b7 0b       	sbc	r27, r23
    1a8e:	03 97       	sbiw	r24, 0x03	; 3
    1a90:	a1 05       	cpc	r26, r1
    1a92:	b1 05       	cpc	r27, r1
    1a94:	78 f1       	brcs	.+94     	; 0x1af4 <main+0x2b0>
                        char msg[64];
                        snprintf(msg, sizeof(msg), "Cooling triggered at %.2f degrees", soil_temp);
    1a96:	df 92       	push	r13
    1a98:	cf 92       	push	r12
    1a9a:	9f 92       	push	r9
    1a9c:	8f 92       	push	r8
    1a9e:	81 e7       	ldi	r24, 0x71	; 113
    1aa0:	93 e0       	ldi	r25, 0x03	; 3
    1aa2:	9f 93       	push	r25
    1aa4:	8f 93       	push	r24
    1aa6:	1f 92       	push	r1
    1aa8:	80 e4       	ldi	r24, 0x40	; 64
    1aaa:	8f 93       	push	r24
    1aac:	ce 01       	movw	r24, r28
    1aae:	01 96       	adiw	r24, 0x01	; 1
    1ab0:	5c 01       	movw	r10, r24
    1ab2:	9f 93       	push	r25
    1ab4:	8f 93       	push	r24
    1ab6:	0e 94 4f 13 	call	0x269e	; 0x269e <snprintf>
                        enqueueStr(&MESSAGES_Q, msg);
    1aba:	b5 01       	movw	r22, r10
    1abc:	8c e0       	ldi	r24, 0x0C	; 12
    1abe:	95 e0       	ldi	r25, 0x05	; 5
    1ac0:	0e 94 36 02 	call	0x46c	; 0x46c <enqueueStr>
                        SYSTEM_SIGNAL = 1;
    1ac4:	81 e0       	ldi	r24, 0x01	; 1
    1ac6:	80 93 b2 04 	sts	0x04B2, r24	; 0x8004b2 <__data_end>
                        last_cooling_alert_time = ten_seconds_count;
    1aca:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <ten_seconds_count>
    1ace:	90 91 d5 04 	lds	r25, 0x04D5	; 0x8004d5 <ten_seconds_count+0x1>
    1ad2:	a0 91 d6 04 	lds	r26, 0x04D6	; 0x8004d6 <ten_seconds_count+0x2>
    1ad6:	b0 91 d7 04 	lds	r27, 0x04D7	; 0x8004d7 <ten_seconds_count+0x3>
    1ada:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <last_cooling_alert_time>
    1ade:	90 93 cd 04 	sts	0x04CD, r25	; 0x8004cd <last_cooling_alert_time+0x1>
    1ae2:	a0 93 ce 04 	sts	0x04CE, r26	; 0x8004ce <last_cooling_alert_time+0x2>
    1ae6:	b0 93 cf 04 	sts	0x04CF, r27	; 0x8004cf <last_cooling_alert_time+0x3>
    1aea:	0f b6       	in	r0, 0x3f	; 63
    1aec:	f8 94       	cli
    1aee:	de bf       	out	0x3e, r29	; 62
    1af0:	0f be       	out	0x3f, r0	; 63
    1af2:	cd bf       	out	0x3d, r28	; 61
                    }
                }

                if (capacity >= PUMP_THRESHOLD) {
    1af4:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <PUMP_THRESHOLD>
    1af8:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <PUMP_THRESHOLD+0x1>
    1afc:	40 91 0e 01 	lds	r20, 0x010E	; 0x80010e <PUMP_THRESHOLD+0x2>
    1b00:	50 91 0f 01 	lds	r21, 0x010F	; 0x80010f <PUMP_THRESHOLD+0x3>
    1b04:	61 2f       	mov	r22, r17
    1b06:	70 2f       	mov	r23, r16
    1b08:	8f 2d       	mov	r24, r15
    1b0a:	9e 2d       	mov	r25, r14
    1b0c:	0e 94 18 11 	call	0x2230	; 0x2230 <__gesf2>
    1b10:	88 23       	and	r24, r24
    1b12:	0c f4       	brge	.+2      	; 0x1b16 <main+0x2d2>
    1b14:	47 c0       	rjmp	.+142    	; 0x1ba4 <main+0x360>
                    if ((ten_seconds_count - last_pumping_alert_time) >= ALERT_COOLDOWN_SECONDS) {
    1b16:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <ten_seconds_count>
    1b1a:	90 91 d5 04 	lds	r25, 0x04D5	; 0x8004d5 <ten_seconds_count+0x1>
    1b1e:	a0 91 d6 04 	lds	r26, 0x04D6	; 0x8004d6 <ten_seconds_count+0x2>
    1b22:	b0 91 d7 04 	lds	r27, 0x04D7	; 0x8004d7 <ten_seconds_count+0x3>
    1b26:	40 91 c8 04 	lds	r20, 0x04C8	; 0x8004c8 <last_pumping_alert_time>
    1b2a:	50 91 c9 04 	lds	r21, 0x04C9	; 0x8004c9 <last_pumping_alert_time+0x1>
    1b2e:	60 91 ca 04 	lds	r22, 0x04CA	; 0x8004ca <last_pumping_alert_time+0x2>
    1b32:	70 91 cb 04 	lds	r23, 0x04CB	; 0x8004cb <last_pumping_alert_time+0x3>
    1b36:	84 1b       	sub	r24, r20
    1b38:	95 0b       	sbc	r25, r21
    1b3a:	a6 0b       	sbc	r26, r22
    1b3c:	b7 0b       	sbc	r27, r23
    1b3e:	03 97       	sbiw	r24, 0x03	; 3
    1b40:	a1 05       	cpc	r26, r1
    1b42:	b1 05       	cpc	r27, r1
    1b44:	78 f1       	brcs	.+94     	; 0x1ba4 <main+0x360>
                        char msg[64];
                        snprintf(msg, sizeof(msg), "Pumping stopped at %.1f Ltrs", capacity);
    1b46:	ef 92       	push	r14
    1b48:	ff 92       	push	r15
    1b4a:	0f 93       	push	r16
    1b4c:	1f 93       	push	r17
    1b4e:	83 e9       	ldi	r24, 0x93	; 147
    1b50:	93 e0       	ldi	r25, 0x03	; 3
    1b52:	9f 93       	push	r25
    1b54:	8f 93       	push	r24
    1b56:	1f 92       	push	r1
    1b58:	80 e4       	ldi	r24, 0x40	; 64
    1b5a:	8f 93       	push	r24
    1b5c:	8e 01       	movw	r16, r28
    1b5e:	0f 5f       	subi	r16, 0xFF	; 255
    1b60:	1f 4f       	sbci	r17, 0xFF	; 255
    1b62:	1f 93       	push	r17
    1b64:	0f 93       	push	r16
    1b66:	0e 94 4f 13 	call	0x269e	; 0x269e <snprintf>
                        enqueueStr(&MESSAGES_Q, msg);
    1b6a:	b8 01       	movw	r22, r16
    1b6c:	8c e0       	ldi	r24, 0x0C	; 12
    1b6e:	95 e0       	ldi	r25, 0x05	; 5
    1b70:	0e 94 36 02 	call	0x46c	; 0x46c <enqueueStr>
                        SYSTEM_SIGNAL = 1;
    1b74:	81 e0       	ldi	r24, 0x01	; 1
    1b76:	80 93 b2 04 	sts	0x04B2, r24	; 0x8004b2 <__data_end>
                        last_pumping_alert_time = ten_seconds_count;
    1b7a:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <ten_seconds_count>
    1b7e:	90 91 d5 04 	lds	r25, 0x04D5	; 0x8004d5 <ten_seconds_count+0x1>
    1b82:	a0 91 d6 04 	lds	r26, 0x04D6	; 0x8004d6 <ten_seconds_count+0x2>
    1b86:	b0 91 d7 04 	lds	r27, 0x04D7	; 0x8004d7 <ten_seconds_count+0x3>
    1b8a:	80 93 c8 04 	sts	0x04C8, r24	; 0x8004c8 <last_pumping_alert_time>
    1b8e:	90 93 c9 04 	sts	0x04C9, r25	; 0x8004c9 <last_pumping_alert_time+0x1>
    1b92:	a0 93 ca 04 	sts	0x04CA, r26	; 0x8004ca <last_pumping_alert_time+0x2>
    1b96:	b0 93 cb 04 	sts	0x04CB, r27	; 0x8004cb <last_pumping_alert_time+0x3>
    1b9a:	0f b6       	in	r0, 0x3f	; 63
    1b9c:	f8 94       	cli
    1b9e:	de bf       	out	0x3e, r29	; 62
    1ba0:	0f be       	out	0x3f, r0	; 63
    1ba2:	cd bf       	out	0x3d, r28	; 61
                    }
                }

                if (soil_temp <= SPRAY_THRESHOLD) {
    1ba4:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <SPRAY_THRESHOLD>
    1ba8:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <SPRAY_THRESHOLD+0x1>
    1bac:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <SPRAY_THRESHOLD+0x2>
    1bb0:	50 91 0b 01 	lds	r21, 0x010B	; 0x80010b <SPRAY_THRESHOLD+0x3>
    1bb4:	68 2d       	mov	r22, r8
    1bb6:	79 2d       	mov	r23, r9
    1bb8:	8c 2d       	mov	r24, r12
    1bba:	9d 2d       	mov	r25, r13
    1bbc:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <__cmpsf2>
    1bc0:	18 16       	cp	r1, r24
    1bc2:	0c f4       	brge	.+2      	; 0x1bc6 <main+0x382>
    1bc4:	45 c1       	rjmp	.+650    	; 0x1e50 <main+0x60c>
                    if ((ten_seconds_count - last_spraying_alert_time) >= ALERT_COOLDOWN_SECONDS) {
    1bc6:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <ten_seconds_count>
    1bca:	90 91 d5 04 	lds	r25, 0x04D5	; 0x8004d5 <ten_seconds_count+0x1>
    1bce:	a0 91 d6 04 	lds	r26, 0x04D6	; 0x8004d6 <ten_seconds_count+0x2>
    1bd2:	b0 91 d7 04 	lds	r27, 0x04D7	; 0x8004d7 <ten_seconds_count+0x3>
    1bd6:	40 91 c4 04 	lds	r20, 0x04C4	; 0x8004c4 <last_spraying_alert_time>
    1bda:	50 91 c5 04 	lds	r21, 0x04C5	; 0x8004c5 <last_spraying_alert_time+0x1>
    1bde:	60 91 c6 04 	lds	r22, 0x04C6	; 0x8004c6 <last_spraying_alert_time+0x2>
    1be2:	70 91 c7 04 	lds	r23, 0x04C7	; 0x8004c7 <last_spraying_alert_time+0x3>
    1be6:	84 1b       	sub	r24, r20
    1be8:	95 0b       	sbc	r25, r21
    1bea:	a6 0b       	sbc	r26, r22
    1bec:	b7 0b       	sbc	r27, r23
    1bee:	03 97       	sbiw	r24, 0x03	; 3
    1bf0:	a1 05       	cpc	r26, r1
    1bf2:	b1 05       	cpc	r27, r1
    1bf4:	08 f4       	brcc	.+2      	; 0x1bf8 <main+0x3b4>
    1bf6:	2c c1       	rjmp	.+600    	; 0x1e50 <main+0x60c>
                        char msg[64];
                        snprintf(msg, sizeof(msg), "Spraying stopped at %.2f degrees", soil_temp);
    1bf8:	df 92       	push	r13
    1bfa:	cf 92       	push	r12
    1bfc:	9f 92       	push	r9
    1bfe:	8f 92       	push	r8
    1c00:	80 eb       	ldi	r24, 0xB0	; 176
    1c02:	93 e0       	ldi	r25, 0x03	; 3
    1c04:	9f 93       	push	r25
    1c06:	8f 93       	push	r24
    1c08:	1f 92       	push	r1
    1c0a:	80 e4       	ldi	r24, 0x40	; 64
    1c0c:	8f 93       	push	r24
    1c0e:	8e 01       	movw	r16, r28
    1c10:	0f 5f       	subi	r16, 0xFF	; 255
    1c12:	1f 4f       	sbci	r17, 0xFF	; 255
    1c14:	1f 93       	push	r17
    1c16:	0f 93       	push	r16
    1c18:	0e 94 4f 13 	call	0x269e	; 0x269e <snprintf>
                        enqueueStr(&MESSAGES_Q, msg);
    1c1c:	b8 01       	movw	r22, r16
    1c1e:	8c e0       	ldi	r24, 0x0C	; 12
    1c20:	95 e0       	ldi	r25, 0x05	; 5
    1c22:	0e 94 36 02 	call	0x46c	; 0x46c <enqueueStr>
                        SYSTEM_SIGNAL = 1;
    1c26:	81 e0       	ldi	r24, 0x01	; 1
    1c28:	80 93 b2 04 	sts	0x04B2, r24	; 0x8004b2 <__data_end>
                        last_spraying_alert_time = ten_seconds_count;
    1c2c:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <ten_seconds_count>
    1c30:	90 91 d5 04 	lds	r25, 0x04D5	; 0x8004d5 <ten_seconds_count+0x1>
    1c34:	a0 91 d6 04 	lds	r26, 0x04D6	; 0x8004d6 <ten_seconds_count+0x2>
    1c38:	b0 91 d7 04 	lds	r27, 0x04D7	; 0x8004d7 <ten_seconds_count+0x3>
    1c3c:	80 93 c4 04 	sts	0x04C4, r24	; 0x8004c4 <last_spraying_alert_time>
    1c40:	90 93 c5 04 	sts	0x04C5, r25	; 0x8004c5 <last_spraying_alert_time+0x1>
    1c44:	a0 93 c6 04 	sts	0x04C6, r26	; 0x8004c6 <last_spraying_alert_time+0x2>
    1c48:	b0 93 c7 04 	sts	0x04C7, r27	; 0x8004c7 <last_spraying_alert_time+0x3>
    1c4c:	0f b6       	in	r0, 0x3f	; 63
    1c4e:	f8 94       	cli
    1c50:	de bf       	out	0x3e, r29	; 62
    1c52:	0f be       	out	0x3f, r0	; 63
    1c54:	cd bf       	out	0x3d, r28	; 61
    1c56:	fc c0       	rjmp	.+504    	; 0x1e50 <main+0x60c>
        while (active_menu_index == 4 && active_live_view_index != -1)
        {
            while ((pressed_key = KEYPAD_read()) == KEYPAD_NO_KEY)
            {

                switch (live_view_hover_index)
    1c58:	80 91 d8 04 	lds	r24, 0x04D8	; 0x8004d8 <live_view_hover_index>
    1c5c:	90 91 d9 04 	lds	r25, 0x04D9	; 0x8004d9 <live_view_hover_index+0x1>
    1c60:	81 30       	cpi	r24, 0x01	; 1
    1c62:	91 05       	cpc	r25, r1
    1c64:	09 f4       	brne	.+2      	; 0x1c68 <main+0x424>
    1c66:	40 c0       	rjmp	.+128    	; 0x1ce8 <main+0x4a4>
    1c68:	1c f4       	brge	.+6      	; 0x1c70 <main+0x42c>
    1c6a:	89 2b       	or	r24, r25
    1c6c:	49 f0       	breq	.+18     	; 0x1c80 <main+0x43c>
    1c6e:	d7 c0       	rjmp	.+430    	; 0x1e1e <main+0x5da>
    1c70:	82 30       	cpi	r24, 0x02	; 2
    1c72:	91 05       	cpc	r25, r1
    1c74:	09 f4       	brne	.+2      	; 0x1c78 <main+0x434>
    1c76:	6c c0       	rjmp	.+216    	; 0x1d50 <main+0x50c>
    1c78:	03 97       	sbiw	r24, 0x03	; 3
    1c7a:	09 f4       	brne	.+2      	; 0x1c7e <main+0x43a>
    1c7c:	9d c0       	rjmp	.+314    	; 0x1db8 <main+0x574>
    1c7e:	cf c0       	rjmp	.+414    	; 0x1e1e <main+0x5da>
                {
                    case 0:
                        if (!(SHOW_LOADING_WIDGET)) {
    1c80:	80 91 b3 04 	lds	r24, 0x04B3	; 0x8004b3 <SHOW_LOADING_WIDGET>
    1c84:	81 11       	cpse	r24, r1
    1c86:	14 c0       	rjmp	.+40     	; 0x1cb0 <main+0x46c>
                            display_set("CAPACITY", "Updating...");
    1c88:	61 ed       	ldi	r22, 0xD1	; 209
    1c8a:	73 e0       	ldi	r23, 0x03	; 3
    1c8c:	85 e1       	ldi	r24, 0x15	; 21
    1c8e:	92 e0       	ldi	r25, 0x02	; 2
    1c90:	0e 94 db 04 	call	0x9b6	; 0x9b6 <display_set>
                            SHOW_LOADING_WIDGET = 1;
    1c94:	81 e0       	ldi	r24, 0x01	; 1
    1c96:	80 93 b3 04 	sts	0x04B3, r24	; 0x8004b3 <SHOW_LOADING_WIDGET>
                            current_tank_capacity = get_tank_capacity();
    1c9a:	0e 94 c5 05 	call	0xb8a	; 0xb8a <get_tank_capacity>
    1c9e:	60 93 c0 04 	sts	0x04C0, r22	; 0x8004c0 <current_tank_capacity>
    1ca2:	70 93 c1 04 	sts	0x04C1, r23	; 0x8004c1 <current_tank_capacity+0x1>
    1ca6:	80 93 c2 04 	sts	0x04C2, r24	; 0x8004c2 <current_tank_capacity+0x2>
    1caa:	90 93 c3 04 	sts	0x04C3, r25	; 0x8004c3 <current_tank_capacity+0x3>
    1cae:	b7 c0       	rjmp	.+366    	; 0x1e1e <main+0x5da>
                        }
                        else {
                            format_float(buffer, sizeof(buffer), current_tank_capacity, 1, "Ltrs");
    1cb0:	20 91 c0 04 	lds	r18, 0x04C0	; 0x8004c0 <current_tank_capacity>
    1cb4:	30 91 c1 04 	lds	r19, 0x04C1	; 0x8004c1 <current_tank_capacity+0x1>
    1cb8:	40 91 c2 04 	lds	r20, 0x04C2	; 0x8004c2 <current_tank_capacity+0x2>
    1cbc:	50 91 c3 04 	lds	r21, 0x04C3	; 0x8004c3 <current_tank_capacity+0x3>
    1cc0:	0f 2e       	mov	r0, r31
    1cc2:	fb ea       	ldi	r31, 0xAB	; 171
    1cc4:	ef 2e       	mov	r14, r31
    1cc6:	f3 e0       	ldi	r31, 0x03	; 3
    1cc8:	ff 2e       	mov	r15, r31
    1cca:	f0 2d       	mov	r31, r0
    1ccc:	01 e0       	ldi	r16, 0x01	; 1
    1cce:	60 e1       	ldi	r22, 0x10	; 16
    1cd0:	70 e0       	ldi	r23, 0x00	; 0
    1cd2:	84 ee       	ldi	r24, 0xE4	; 228
    1cd4:	94 e0       	ldi	r25, 0x04	; 4
    1cd6:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <format_float>
                            display_set("CAPACITY", buffer);
    1cda:	64 ee       	ldi	r22, 0xE4	; 228
    1cdc:	74 e0       	ldi	r23, 0x04	; 4
    1cde:	85 e1       	ldi	r24, 0x15	; 21
    1ce0:	92 e0       	ldi	r25, 0x02	; 2
    1ce2:	0e 94 db 04 	call	0x9b6	; 0x9b6 <display_set>
    1ce6:	9b c0       	rjmp	.+310    	; 0x1e1e <main+0x5da>
                        }

                        break;
                    case 1:
                        if (!(SHOW_LOADING_WIDGET))
    1ce8:	80 91 b3 04 	lds	r24, 0x04B3	; 0x8004b3 <SHOW_LOADING_WIDGET>
    1cec:	81 11       	cpse	r24, r1
    1cee:	14 c0       	rjmp	.+40     	; 0x1d18 <main+0x4d4>
                        {
                            display_set("REFILL RATE", "Updating...");
    1cf0:	61 ed       	ldi	r22, 0xD1	; 209
    1cf2:	73 e0       	ldi	r23, 0x03	; 3
    1cf4:	8e e1       	ldi	r24, 0x1E	; 30
    1cf6:	92 e0       	ldi	r25, 0x02	; 2
    1cf8:	0e 94 db 04 	call	0x9b6	; 0x9b6 <display_set>
                            SHOW_LOADING_WIDGET = 1;
    1cfc:	81 e0       	ldi	r24, 0x01	; 1
    1cfe:	80 93 b3 04 	sts	0x04B3, r24	; 0x8004b3 <SHOW_LOADING_WIDGET>
                            current_refill_rate = get_refill_rate();
    1d02:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <get_refill_rate>
    1d06:	60 93 bc 04 	sts	0x04BC, r22	; 0x8004bc <current_refill_rate>
    1d0a:	70 93 bd 04 	sts	0x04BD, r23	; 0x8004bd <current_refill_rate+0x1>
    1d0e:	80 93 be 04 	sts	0x04BE, r24	; 0x8004be <current_refill_rate+0x2>
    1d12:	90 93 bf 04 	sts	0x04BF, r25	; 0x8004bf <current_refill_rate+0x3>
    1d16:	83 c0       	rjmp	.+262    	; 0x1e1e <main+0x5da>
                        } else {
                            format_float(buffer, sizeof(buffer), current_refill_rate, 1, "Ltrs per min");
    1d18:	20 91 bc 04 	lds	r18, 0x04BC	; 0x8004bc <current_refill_rate>
    1d1c:	30 91 bd 04 	lds	r19, 0x04BD	; 0x8004bd <current_refill_rate+0x1>
    1d20:	40 91 be 04 	lds	r20, 0x04BE	; 0x8004be <current_refill_rate+0x2>
    1d24:	50 91 bf 04 	lds	r21, 0x04BF	; 0x8004bf <current_refill_rate+0x3>
    1d28:	0f 2e       	mov	r0, r31
    1d2a:	f5 e4       	ldi	r31, 0x45	; 69
    1d2c:	ef 2e       	mov	r14, r31
    1d2e:	f2 e0       	ldi	r31, 0x02	; 2
    1d30:	ff 2e       	mov	r15, r31
    1d32:	f0 2d       	mov	r31, r0
    1d34:	01 e0       	ldi	r16, 0x01	; 1
    1d36:	60 e1       	ldi	r22, 0x10	; 16
    1d38:	70 e0       	ldi	r23, 0x00	; 0
    1d3a:	84 ee       	ldi	r24, 0xE4	; 228
    1d3c:	94 e0       	ldi	r25, 0x04	; 4
    1d3e:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <format_float>
                            display_set("REFILL RATE", buffer);
    1d42:	64 ee       	ldi	r22, 0xE4	; 228
    1d44:	74 e0       	ldi	r23, 0x04	; 4
    1d46:	8e e1       	ldi	r24, 0x1E	; 30
    1d48:	92 e0       	ldi	r25, 0x02	; 2
    1d4a:	0e 94 db 04 	call	0x9b6	; 0x9b6 <display_set>
    1d4e:	67 c0       	rjmp	.+206    	; 0x1e1e <main+0x5da>
                        }
                        break;
                    case 2:
                        if (!(SHOW_LOADING_WIDGET))
    1d50:	80 91 b3 04 	lds	r24, 0x04B3	; 0x8004b3 <SHOW_LOADING_WIDGET>
    1d54:	81 11       	cpse	r24, r1
    1d56:	14 c0       	rjmp	.+40     	; 0x1d80 <main+0x53c>
                        {
                            display_set("LEAK RATE", "Updating...");
    1d58:	61 ed       	ldi	r22, 0xD1	; 209
    1d5a:	73 e0       	ldi	r23, 0x03	; 3
    1d5c:	8d e6       	ldi	r24, 0x6D	; 109
    1d5e:	92 e0       	ldi	r25, 0x02	; 2
    1d60:	0e 94 db 04 	call	0x9b6	; 0x9b6 <display_set>
                            SHOW_LOADING_WIDGET = 1;
    1d64:	81 e0       	ldi	r24, 0x01	; 1
    1d66:	80 93 b3 04 	sts	0x04B3, r24	; 0x8004b3 <SHOW_LOADING_WIDGET>
                            current_leak_rate = get_leak_rate();
    1d6a:	0e 94 4b 06 	call	0xc96	; 0xc96 <get_leak_rate>
    1d6e:	60 93 b8 04 	sts	0x04B8, r22	; 0x8004b8 <current_leak_rate>
    1d72:	70 93 b9 04 	sts	0x04B9, r23	; 0x8004b9 <current_leak_rate+0x1>
    1d76:	80 93 ba 04 	sts	0x04BA, r24	; 0x8004ba <current_leak_rate+0x2>
    1d7a:	90 93 bb 04 	sts	0x04BB, r25	; 0x8004bb <current_leak_rate+0x3>
    1d7e:	4f c0       	rjmp	.+158    	; 0x1e1e <main+0x5da>
                        } else {
                            format_float(buffer, sizeof(buffer), current_leak_rate, 1, "Ltrs per min");
    1d80:	20 91 b8 04 	lds	r18, 0x04B8	; 0x8004b8 <current_leak_rate>
    1d84:	30 91 b9 04 	lds	r19, 0x04B9	; 0x8004b9 <current_leak_rate+0x1>
    1d88:	40 91 ba 04 	lds	r20, 0x04BA	; 0x8004ba <current_leak_rate+0x2>
    1d8c:	50 91 bb 04 	lds	r21, 0x04BB	; 0x8004bb <current_leak_rate+0x3>
    1d90:	0f 2e       	mov	r0, r31
    1d92:	f5 e4       	ldi	r31, 0x45	; 69
    1d94:	ef 2e       	mov	r14, r31
    1d96:	f2 e0       	ldi	r31, 0x02	; 2
    1d98:	ff 2e       	mov	r15, r31
    1d9a:	f0 2d       	mov	r31, r0
    1d9c:	01 e0       	ldi	r16, 0x01	; 1
    1d9e:	60 e1       	ldi	r22, 0x10	; 16
    1da0:	70 e0       	ldi	r23, 0x00	; 0
    1da2:	84 ee       	ldi	r24, 0xE4	; 228
    1da4:	94 e0       	ldi	r25, 0x04	; 4
    1da6:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <format_float>
                            display_set("LEAK RATE", buffer);
    1daa:	64 ee       	ldi	r22, 0xE4	; 228
    1dac:	74 e0       	ldi	r23, 0x04	; 4
    1dae:	8d e6       	ldi	r24, 0x6D	; 109
    1db0:	92 e0       	ldi	r25, 0x02	; 2
    1db2:	0e 94 db 04 	call	0x9b6	; 0x9b6 <display_set>
    1db6:	33 c0       	rjmp	.+102    	; 0x1e1e <main+0x5da>
                        }
                        
                        break;

                    case 3:
                        if (!(SHOW_LOADING_WIDGET))
    1db8:	80 91 b3 04 	lds	r24, 0x04B3	; 0x8004b3 <SHOW_LOADING_WIDGET>
    1dbc:	81 11       	cpse	r24, r1
    1dbe:	14 c0       	rjmp	.+40     	; 0x1de8 <main+0x5a4>
                        {
                            display_set("SOIL TEMP", "Updating...");
    1dc0:	61 ed       	ldi	r22, 0xD1	; 209
    1dc2:	73 e0       	ldi	r23, 0x03	; 3
    1dc4:	87 e7       	ldi	r24, 0x77	; 119
    1dc6:	92 e0       	ldi	r25, 0x02	; 2
    1dc8:	0e 94 db 04 	call	0x9b6	; 0x9b6 <display_set>
                            SHOW_LOADING_WIDGET = 1;
    1dcc:	81 e0       	ldi	r24, 0x01	; 1
    1dce:	80 93 b3 04 	sts	0x04B3, r24	; 0x8004b3 <SHOW_LOADING_WIDGET>
                            current_soil_temperature = get_soil_temperature();
    1dd2:	0e 94 ca 06 	call	0xd94	; 0xd94 <get_soil_temperature>
    1dd6:	60 93 b4 04 	sts	0x04B4, r22	; 0x8004b4 <current_soil_temperature>
    1dda:	70 93 b5 04 	sts	0x04B5, r23	; 0x8004b5 <current_soil_temperature+0x1>
    1dde:	80 93 b6 04 	sts	0x04B6, r24	; 0x8004b6 <current_soil_temperature+0x2>
    1de2:	90 93 b7 04 	sts	0x04B7, r25	; 0x8004b7 <current_soil_temperature+0x3>
    1de6:	1b c0       	rjmp	.+54     	; 0x1e1e <main+0x5da>
                        } else {
                            format_float(buffer, sizeof(buffer), current_soil_temperature, 1, "degrees");
    1de8:	20 91 b4 04 	lds	r18, 0x04B4	; 0x8004b4 <current_soil_temperature>
    1dec:	30 91 b5 04 	lds	r19, 0x04B5	; 0x8004b5 <current_soil_temperature+0x1>
    1df0:	40 91 b6 04 	lds	r20, 0x04B6	; 0x8004b6 <current_soil_temperature+0x2>
    1df4:	50 91 b7 04 	lds	r21, 0x04B7	; 0x8004b7 <current_soil_temperature+0x3>
    1df8:	0f 2e       	mov	r0, r31
    1dfa:	f9 ec       	ldi	r31, 0xC9	; 201
    1dfc:	ef 2e       	mov	r14, r31
    1dfe:	f3 e0       	ldi	r31, 0x03	; 3
    1e00:	ff 2e       	mov	r15, r31
    1e02:	f0 2d       	mov	r31, r0
    1e04:	01 e0       	ldi	r16, 0x01	; 1
    1e06:	60 e1       	ldi	r22, 0x10	; 16
    1e08:	70 e0       	ldi	r23, 0x00	; 0
    1e0a:	84 ee       	ldi	r24, 0xE4	; 228
    1e0c:	94 e0       	ldi	r25, 0x04	; 4
    1e0e:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <format_float>
                            display_set("SOIL TEMP", buffer);
    1e12:	64 ee       	ldi	r22, 0xE4	; 228
    1e14:	74 e0       	ldi	r23, 0x04	; 4
    1e16:	87 e7       	ldi	r24, 0x77	; 119
    1e18:	92 e0       	ldi	r25, 0x02	; 2
    1e1a:	0e 94 db 04 	call	0x9b6	; 0x9b6 <display_set>
            }
        }

        while (active_menu_index == 4 && active_live_view_index != -1)
        {
            while ((pressed_key = KEYPAD_read()) == KEYPAD_NO_KEY)
    1e1e:	0e 94 c9 04 	call	0x992	; 0x992 <KEYPAD_read>
    1e22:	18 2f       	mov	r17, r24
    1e24:	85 30       	cpi	r24, 0x05	; 5
    1e26:	09 f4       	brne	.+2      	; 0x1e2a <main+0x5e6>
    1e28:	17 cf       	rjmp	.-466    	; 0x1c58 <main+0x414>
                        break;
                }
                
            }

            SHOW_LOADING_WIDGET = 0;
    1e2a:	10 92 b3 04 	sts	0x04B3, r1	; 0x8004b3 <SHOW_LOADING_WIDGET>

            if (pressed_key == 1)
    1e2e:	81 30       	cpi	r24, 0x01	; 1
    1e30:	41 f4       	brne	.+16     	; 0x1e42 <main+0x5fe>
            {
                // exit live view on key 1 press
                active_menu_index = -1;
    1e32:	8f ef       	ldi	r24, 0xFF	; 255
    1e34:	9f ef       	ldi	r25, 0xFF	; 255
    1e36:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <active_menu_index+0x1>
    1e3a:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <active_menu_index>
                pressed_key = KEYPAD_NO_KEY;
    1e3e:	15 e0       	ldi	r17, 0x05	; 5
                break;
    1e40:	14 c0       	rjmp	.+40     	; 0x1e6a <main+0x626>
            } else {
                ui_process_key_command(pressed_key);
    1e42:	0e 94 63 09 	call	0x12c6	; 0x12c6 <ui_process_key_command>
            }

            while (KEYPAD_read() != KEYPAD_NO_KEY);
    1e46:	0e 94 c9 04 	call	0x992	; 0x992 <KEYPAD_read>
    1e4a:	85 30       	cpi	r24, 0x05	; 5
    1e4c:	e1 f7       	brne	.-8      	; 0x1e46 <main+0x602>
    1e4e:	01 c0       	rjmp	.+2      	; 0x1e52 <main+0x60e>


        if (SYSTEM_SIGNAL) {
            char *msgptr = NULL;
            SYSTEM_SIGNAL = 0;
            int count = 0;
    1e50:	15 e0       	ldi	r17, 0x05	; 5

                
            }
        }

        while (active_menu_index == 4 && active_live_view_index != -1)
    1e52:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <active_menu_index>
    1e56:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <active_menu_index+0x1>
    1e5a:	04 97       	sbiw	r24, 0x04	; 4
    1e5c:	31 f4       	brne	.+12     	; 0x1e6a <main+0x626>
    1e5e:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <active_live_view_index>
    1e62:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <active_live_view_index+0x1>
    1e66:	01 96       	adiw	r24, 0x01	; 1
    1e68:	d1 f6       	brne	.-76     	; 0x1e1e <main+0x5da>
        }


        // _delay_ms(20);

        if (pressed_key == KEYPAD_NO_KEY) {
    1e6a:	15 30       	cpi	r17, 0x05	; 5
    1e6c:	49 f4       	brne	.+18     	; 0x1e80 <main+0x63c>
            LED_system_active_on();
    1e6e:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <LED_system_active_on>
            while ((pressed_key = KEYPAD_read()) == KEYPAD_NO_KEY);
    1e72:	0e 94 c9 04 	call	0x992	; 0x992 <KEYPAD_read>
    1e76:	18 2f       	mov	r17, r24
    1e78:	85 30       	cpi	r24, 0x05	; 5
    1e7a:	d9 f3       	breq	.-10     	; 0x1e72 <main+0x62e>
            LED_system_active_off();
    1e7c:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <LED_system_active_off>
        }
        
        // _delay_ms(20);
        if (KEYPAD_read() == pressed_key)
    1e80:	0e 94 c9 04 	call	0x992	; 0x992 <KEYPAD_read>
    1e84:	18 13       	cpse	r17, r24
    1e86:	02 cd       	rjmp	.-1532   	; 0x188c <main+0x48>
        {
            ui_process_key_command(pressed_key);
    1e88:	81 2f       	mov	r24, r17
    1e8a:	0e 94 63 09 	call	0x12c6	; 0x12c6 <ui_process_key_command>

            while (KEYPAD_read() != KEYPAD_NO_KEY); // wait until the key is released
    1e8e:	0e 94 c9 04 	call	0x992	; 0x992 <KEYPAD_read>
    1e92:	85 30       	cpi	r24, 0x05	; 5
    1e94:	e1 f7       	brne	.-8      	; 0x1e8e <main+0x64a>
    1e96:	fa cc       	rjmp	.-1548   	; 0x188c <main+0x48>

00001e98 <__subsf3>:
    1e98:	50 58       	subi	r21, 0x80	; 128

00001e9a <__addsf3>:
    1e9a:	bb 27       	eor	r27, r27
    1e9c:	aa 27       	eor	r26, r26
    1e9e:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <__addsf3x>
    1ea2:	0c 94 de 10 	jmp	0x21bc	; 0x21bc <__fp_round>
    1ea6:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <__fp_pscA>
    1eaa:	38 f0       	brcs	.+14     	; 0x1eba <__addsf3+0x20>
    1eac:	0e 94 d7 10 	call	0x21ae	; 0x21ae <__fp_pscB>
    1eb0:	20 f0       	brcs	.+8      	; 0x1eba <__addsf3+0x20>
    1eb2:	39 f4       	brne	.+14     	; 0x1ec2 <__addsf3+0x28>
    1eb4:	9f 3f       	cpi	r25, 0xFF	; 255
    1eb6:	19 f4       	brne	.+6      	; 0x1ebe <__addsf3+0x24>
    1eb8:	26 f4       	brtc	.+8      	; 0x1ec2 <__addsf3+0x28>
    1eba:	0c 94 cd 10 	jmp	0x219a	; 0x219a <__fp_nan>
    1ebe:	0e f4       	brtc	.+2      	; 0x1ec2 <__addsf3+0x28>
    1ec0:	e0 95       	com	r30
    1ec2:	e7 fb       	bst	r30, 7
    1ec4:	0c 94 c7 10 	jmp	0x218e	; 0x218e <__fp_inf>

00001ec8 <__addsf3x>:
    1ec8:	e9 2f       	mov	r30, r25
    1eca:	0e 94 ef 10 	call	0x21de	; 0x21de <__fp_split3>
    1ece:	58 f3       	brcs	.-42     	; 0x1ea6 <__addsf3+0xc>
    1ed0:	ba 17       	cp	r27, r26
    1ed2:	62 07       	cpc	r22, r18
    1ed4:	73 07       	cpc	r23, r19
    1ed6:	84 07       	cpc	r24, r20
    1ed8:	95 07       	cpc	r25, r21
    1eda:	20 f0       	brcs	.+8      	; 0x1ee4 <__addsf3x+0x1c>
    1edc:	79 f4       	brne	.+30     	; 0x1efc <__addsf3x+0x34>
    1ede:	a6 f5       	brtc	.+104    	; 0x1f48 <__addsf3x+0x80>
    1ee0:	0c 94 11 11 	jmp	0x2222	; 0x2222 <__fp_zero>
    1ee4:	0e f4       	brtc	.+2      	; 0x1ee8 <__addsf3x+0x20>
    1ee6:	e0 95       	com	r30
    1ee8:	0b 2e       	mov	r0, r27
    1eea:	ba 2f       	mov	r27, r26
    1eec:	a0 2d       	mov	r26, r0
    1eee:	0b 01       	movw	r0, r22
    1ef0:	b9 01       	movw	r22, r18
    1ef2:	90 01       	movw	r18, r0
    1ef4:	0c 01       	movw	r0, r24
    1ef6:	ca 01       	movw	r24, r20
    1ef8:	a0 01       	movw	r20, r0
    1efa:	11 24       	eor	r1, r1
    1efc:	ff 27       	eor	r31, r31
    1efe:	59 1b       	sub	r21, r25
    1f00:	99 f0       	breq	.+38     	; 0x1f28 <__addsf3x+0x60>
    1f02:	59 3f       	cpi	r21, 0xF9	; 249
    1f04:	50 f4       	brcc	.+20     	; 0x1f1a <__addsf3x+0x52>
    1f06:	50 3e       	cpi	r21, 0xE0	; 224
    1f08:	68 f1       	brcs	.+90     	; 0x1f64 <__addsf3x+0x9c>
    1f0a:	1a 16       	cp	r1, r26
    1f0c:	f0 40       	sbci	r31, 0x00	; 0
    1f0e:	a2 2f       	mov	r26, r18
    1f10:	23 2f       	mov	r18, r19
    1f12:	34 2f       	mov	r19, r20
    1f14:	44 27       	eor	r20, r20
    1f16:	58 5f       	subi	r21, 0xF8	; 248
    1f18:	f3 cf       	rjmp	.-26     	; 0x1f00 <__addsf3x+0x38>
    1f1a:	46 95       	lsr	r20
    1f1c:	37 95       	ror	r19
    1f1e:	27 95       	ror	r18
    1f20:	a7 95       	ror	r26
    1f22:	f0 40       	sbci	r31, 0x00	; 0
    1f24:	53 95       	inc	r21
    1f26:	c9 f7       	brne	.-14     	; 0x1f1a <__addsf3x+0x52>
    1f28:	7e f4       	brtc	.+30     	; 0x1f48 <__addsf3x+0x80>
    1f2a:	1f 16       	cp	r1, r31
    1f2c:	ba 0b       	sbc	r27, r26
    1f2e:	62 0b       	sbc	r22, r18
    1f30:	73 0b       	sbc	r23, r19
    1f32:	84 0b       	sbc	r24, r20
    1f34:	ba f0       	brmi	.+46     	; 0x1f64 <__addsf3x+0x9c>
    1f36:	91 50       	subi	r25, 0x01	; 1
    1f38:	a1 f0       	breq	.+40     	; 0x1f62 <__addsf3x+0x9a>
    1f3a:	ff 0f       	add	r31, r31
    1f3c:	bb 1f       	adc	r27, r27
    1f3e:	66 1f       	adc	r22, r22
    1f40:	77 1f       	adc	r23, r23
    1f42:	88 1f       	adc	r24, r24
    1f44:	c2 f7       	brpl	.-16     	; 0x1f36 <__addsf3x+0x6e>
    1f46:	0e c0       	rjmp	.+28     	; 0x1f64 <__addsf3x+0x9c>
    1f48:	ba 0f       	add	r27, r26
    1f4a:	62 1f       	adc	r22, r18
    1f4c:	73 1f       	adc	r23, r19
    1f4e:	84 1f       	adc	r24, r20
    1f50:	48 f4       	brcc	.+18     	; 0x1f64 <__addsf3x+0x9c>
    1f52:	87 95       	ror	r24
    1f54:	77 95       	ror	r23
    1f56:	67 95       	ror	r22
    1f58:	b7 95       	ror	r27
    1f5a:	f7 95       	ror	r31
    1f5c:	9e 3f       	cpi	r25, 0xFE	; 254
    1f5e:	08 f0       	brcs	.+2      	; 0x1f62 <__addsf3x+0x9a>
    1f60:	b0 cf       	rjmp	.-160    	; 0x1ec2 <__addsf3+0x28>
    1f62:	93 95       	inc	r25
    1f64:	88 0f       	add	r24, r24
    1f66:	08 f0       	brcs	.+2      	; 0x1f6a <__addsf3x+0xa2>
    1f68:	99 27       	eor	r25, r25
    1f6a:	ee 0f       	add	r30, r30
    1f6c:	97 95       	ror	r25
    1f6e:	87 95       	ror	r24
    1f70:	08 95       	ret

00001f72 <__cmpsf2>:
    1f72:	0e 94 a3 10 	call	0x2146	; 0x2146 <__fp_cmp>
    1f76:	08 f4       	brcc	.+2      	; 0x1f7a <__cmpsf2+0x8>
    1f78:	81 e0       	ldi	r24, 0x01	; 1
    1f7a:	08 95       	ret

00001f7c <__divsf3>:
    1f7c:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <__divsf3x>
    1f80:	0c 94 de 10 	jmp	0x21bc	; 0x21bc <__fp_round>
    1f84:	0e 94 d7 10 	call	0x21ae	; 0x21ae <__fp_pscB>
    1f88:	58 f0       	brcs	.+22     	; 0x1fa0 <__divsf3+0x24>
    1f8a:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <__fp_pscA>
    1f8e:	40 f0       	brcs	.+16     	; 0x1fa0 <__divsf3+0x24>
    1f90:	29 f4       	brne	.+10     	; 0x1f9c <__divsf3+0x20>
    1f92:	5f 3f       	cpi	r21, 0xFF	; 255
    1f94:	29 f0       	breq	.+10     	; 0x1fa0 <__divsf3+0x24>
    1f96:	0c 94 c7 10 	jmp	0x218e	; 0x218e <__fp_inf>
    1f9a:	51 11       	cpse	r21, r1
    1f9c:	0c 94 12 11 	jmp	0x2224	; 0x2224 <__fp_szero>
    1fa0:	0c 94 cd 10 	jmp	0x219a	; 0x219a <__fp_nan>

00001fa4 <__divsf3x>:
    1fa4:	0e 94 ef 10 	call	0x21de	; 0x21de <__fp_split3>
    1fa8:	68 f3       	brcs	.-38     	; 0x1f84 <__divsf3+0x8>

00001faa <__divsf3_pse>:
    1faa:	99 23       	and	r25, r25
    1fac:	b1 f3       	breq	.-20     	; 0x1f9a <__divsf3+0x1e>
    1fae:	55 23       	and	r21, r21
    1fb0:	91 f3       	breq	.-28     	; 0x1f96 <__divsf3+0x1a>
    1fb2:	95 1b       	sub	r25, r21
    1fb4:	55 0b       	sbc	r21, r21
    1fb6:	bb 27       	eor	r27, r27
    1fb8:	aa 27       	eor	r26, r26
    1fba:	62 17       	cp	r22, r18
    1fbc:	73 07       	cpc	r23, r19
    1fbe:	84 07       	cpc	r24, r20
    1fc0:	38 f0       	brcs	.+14     	; 0x1fd0 <__divsf3_pse+0x26>
    1fc2:	9f 5f       	subi	r25, 0xFF	; 255
    1fc4:	5f 4f       	sbci	r21, 0xFF	; 255
    1fc6:	22 0f       	add	r18, r18
    1fc8:	33 1f       	adc	r19, r19
    1fca:	44 1f       	adc	r20, r20
    1fcc:	aa 1f       	adc	r26, r26
    1fce:	a9 f3       	breq	.-22     	; 0x1fba <__divsf3_pse+0x10>
    1fd0:	35 d0       	rcall	.+106    	; 0x203c <__divsf3_pse+0x92>
    1fd2:	0e 2e       	mov	r0, r30
    1fd4:	3a f0       	brmi	.+14     	; 0x1fe4 <__divsf3_pse+0x3a>
    1fd6:	e0 e8       	ldi	r30, 0x80	; 128
    1fd8:	32 d0       	rcall	.+100    	; 0x203e <__divsf3_pse+0x94>
    1fda:	91 50       	subi	r25, 0x01	; 1
    1fdc:	50 40       	sbci	r21, 0x00	; 0
    1fde:	e6 95       	lsr	r30
    1fe0:	00 1c       	adc	r0, r0
    1fe2:	ca f7       	brpl	.-14     	; 0x1fd6 <__divsf3_pse+0x2c>
    1fe4:	2b d0       	rcall	.+86     	; 0x203c <__divsf3_pse+0x92>
    1fe6:	fe 2f       	mov	r31, r30
    1fe8:	29 d0       	rcall	.+82     	; 0x203c <__divsf3_pse+0x92>
    1fea:	66 0f       	add	r22, r22
    1fec:	77 1f       	adc	r23, r23
    1fee:	88 1f       	adc	r24, r24
    1ff0:	bb 1f       	adc	r27, r27
    1ff2:	26 17       	cp	r18, r22
    1ff4:	37 07       	cpc	r19, r23
    1ff6:	48 07       	cpc	r20, r24
    1ff8:	ab 07       	cpc	r26, r27
    1ffa:	b0 e8       	ldi	r27, 0x80	; 128
    1ffc:	09 f0       	breq	.+2      	; 0x2000 <__divsf3_pse+0x56>
    1ffe:	bb 0b       	sbc	r27, r27
    2000:	80 2d       	mov	r24, r0
    2002:	bf 01       	movw	r22, r30
    2004:	ff 27       	eor	r31, r31
    2006:	93 58       	subi	r25, 0x83	; 131
    2008:	5f 4f       	sbci	r21, 0xFF	; 255
    200a:	3a f0       	brmi	.+14     	; 0x201a <__divsf3_pse+0x70>
    200c:	9e 3f       	cpi	r25, 0xFE	; 254
    200e:	51 05       	cpc	r21, r1
    2010:	78 f0       	brcs	.+30     	; 0x2030 <__divsf3_pse+0x86>
    2012:	0c 94 c7 10 	jmp	0x218e	; 0x218e <__fp_inf>
    2016:	0c 94 12 11 	jmp	0x2224	; 0x2224 <__fp_szero>
    201a:	5f 3f       	cpi	r21, 0xFF	; 255
    201c:	e4 f3       	brlt	.-8      	; 0x2016 <__divsf3_pse+0x6c>
    201e:	98 3e       	cpi	r25, 0xE8	; 232
    2020:	d4 f3       	brlt	.-12     	; 0x2016 <__divsf3_pse+0x6c>
    2022:	86 95       	lsr	r24
    2024:	77 95       	ror	r23
    2026:	67 95       	ror	r22
    2028:	b7 95       	ror	r27
    202a:	f7 95       	ror	r31
    202c:	9f 5f       	subi	r25, 0xFF	; 255
    202e:	c9 f7       	brne	.-14     	; 0x2022 <__divsf3_pse+0x78>
    2030:	88 0f       	add	r24, r24
    2032:	91 1d       	adc	r25, r1
    2034:	96 95       	lsr	r25
    2036:	87 95       	ror	r24
    2038:	97 f9       	bld	r25, 7
    203a:	08 95       	ret
    203c:	e1 e0       	ldi	r30, 0x01	; 1
    203e:	66 0f       	add	r22, r22
    2040:	77 1f       	adc	r23, r23
    2042:	88 1f       	adc	r24, r24
    2044:	bb 1f       	adc	r27, r27
    2046:	62 17       	cp	r22, r18
    2048:	73 07       	cpc	r23, r19
    204a:	84 07       	cpc	r24, r20
    204c:	ba 07       	cpc	r27, r26
    204e:	20 f0       	brcs	.+8      	; 0x2058 <__divsf3_pse+0xae>
    2050:	62 1b       	sub	r22, r18
    2052:	73 0b       	sbc	r23, r19
    2054:	84 0b       	sbc	r24, r20
    2056:	ba 0b       	sbc	r27, r26
    2058:	ee 1f       	adc	r30, r30
    205a:	88 f7       	brcc	.-30     	; 0x203e <__divsf3_pse+0x94>
    205c:	e0 95       	com	r30
    205e:	08 95       	ret

00002060 <__fixsfsi>:
    2060:	0e 94 37 10 	call	0x206e	; 0x206e <__fixunssfsi>
    2064:	68 94       	set
    2066:	b1 11       	cpse	r27, r1
    2068:	0c 94 12 11 	jmp	0x2224	; 0x2224 <__fp_szero>
    206c:	08 95       	ret

0000206e <__fixunssfsi>:
    206e:	0e 94 f7 10 	call	0x21ee	; 0x21ee <__fp_splitA>
    2072:	88 f0       	brcs	.+34     	; 0x2096 <__fixunssfsi+0x28>
    2074:	9f 57       	subi	r25, 0x7F	; 127
    2076:	98 f0       	brcs	.+38     	; 0x209e <__fixunssfsi+0x30>
    2078:	b9 2f       	mov	r27, r25
    207a:	99 27       	eor	r25, r25
    207c:	b7 51       	subi	r27, 0x17	; 23
    207e:	b0 f0       	brcs	.+44     	; 0x20ac <__fixunssfsi+0x3e>
    2080:	e1 f0       	breq	.+56     	; 0x20ba <__fixunssfsi+0x4c>
    2082:	66 0f       	add	r22, r22
    2084:	77 1f       	adc	r23, r23
    2086:	88 1f       	adc	r24, r24
    2088:	99 1f       	adc	r25, r25
    208a:	1a f0       	brmi	.+6      	; 0x2092 <__fixunssfsi+0x24>
    208c:	ba 95       	dec	r27
    208e:	c9 f7       	brne	.-14     	; 0x2082 <__fixunssfsi+0x14>
    2090:	14 c0       	rjmp	.+40     	; 0x20ba <__fixunssfsi+0x4c>
    2092:	b1 30       	cpi	r27, 0x01	; 1
    2094:	91 f0       	breq	.+36     	; 0x20ba <__fixunssfsi+0x4c>
    2096:	0e 94 11 11 	call	0x2222	; 0x2222 <__fp_zero>
    209a:	b1 e0       	ldi	r27, 0x01	; 1
    209c:	08 95       	ret
    209e:	0c 94 11 11 	jmp	0x2222	; 0x2222 <__fp_zero>
    20a2:	67 2f       	mov	r22, r23
    20a4:	78 2f       	mov	r23, r24
    20a6:	88 27       	eor	r24, r24
    20a8:	b8 5f       	subi	r27, 0xF8	; 248
    20aa:	39 f0       	breq	.+14     	; 0x20ba <__fixunssfsi+0x4c>
    20ac:	b9 3f       	cpi	r27, 0xF9	; 249
    20ae:	cc f3       	brlt	.-14     	; 0x20a2 <__fixunssfsi+0x34>
    20b0:	86 95       	lsr	r24
    20b2:	77 95       	ror	r23
    20b4:	67 95       	ror	r22
    20b6:	b3 95       	inc	r27
    20b8:	d9 f7       	brne	.-10     	; 0x20b0 <__fixunssfsi+0x42>
    20ba:	3e f4       	brtc	.+14     	; 0x20ca <__fixunssfsi+0x5c>
    20bc:	90 95       	com	r25
    20be:	80 95       	com	r24
    20c0:	70 95       	com	r23
    20c2:	61 95       	neg	r22
    20c4:	7f 4f       	sbci	r23, 0xFF	; 255
    20c6:	8f 4f       	sbci	r24, 0xFF	; 255
    20c8:	9f 4f       	sbci	r25, 0xFF	; 255
    20ca:	08 95       	ret

000020cc <__floatunsisf>:
    20cc:	e8 94       	clt
    20ce:	09 c0       	rjmp	.+18     	; 0x20e2 <__floatsisf+0x12>

000020d0 <__floatsisf>:
    20d0:	97 fb       	bst	r25, 7
    20d2:	3e f4       	brtc	.+14     	; 0x20e2 <__floatsisf+0x12>
    20d4:	90 95       	com	r25
    20d6:	80 95       	com	r24
    20d8:	70 95       	com	r23
    20da:	61 95       	neg	r22
    20dc:	7f 4f       	sbci	r23, 0xFF	; 255
    20de:	8f 4f       	sbci	r24, 0xFF	; 255
    20e0:	9f 4f       	sbci	r25, 0xFF	; 255
    20e2:	99 23       	and	r25, r25
    20e4:	a9 f0       	breq	.+42     	; 0x2110 <__floatsisf+0x40>
    20e6:	f9 2f       	mov	r31, r25
    20e8:	96 e9       	ldi	r25, 0x96	; 150
    20ea:	bb 27       	eor	r27, r27
    20ec:	93 95       	inc	r25
    20ee:	f6 95       	lsr	r31
    20f0:	87 95       	ror	r24
    20f2:	77 95       	ror	r23
    20f4:	67 95       	ror	r22
    20f6:	b7 95       	ror	r27
    20f8:	f1 11       	cpse	r31, r1
    20fa:	f8 cf       	rjmp	.-16     	; 0x20ec <__floatsisf+0x1c>
    20fc:	fa f4       	brpl	.+62     	; 0x213c <__floatsisf+0x6c>
    20fe:	bb 0f       	add	r27, r27
    2100:	11 f4       	brne	.+4      	; 0x2106 <__floatsisf+0x36>
    2102:	60 ff       	sbrs	r22, 0
    2104:	1b c0       	rjmp	.+54     	; 0x213c <__floatsisf+0x6c>
    2106:	6f 5f       	subi	r22, 0xFF	; 255
    2108:	7f 4f       	sbci	r23, 0xFF	; 255
    210a:	8f 4f       	sbci	r24, 0xFF	; 255
    210c:	9f 4f       	sbci	r25, 0xFF	; 255
    210e:	16 c0       	rjmp	.+44     	; 0x213c <__floatsisf+0x6c>
    2110:	88 23       	and	r24, r24
    2112:	11 f0       	breq	.+4      	; 0x2118 <__floatsisf+0x48>
    2114:	96 e9       	ldi	r25, 0x96	; 150
    2116:	11 c0       	rjmp	.+34     	; 0x213a <__floatsisf+0x6a>
    2118:	77 23       	and	r23, r23
    211a:	21 f0       	breq	.+8      	; 0x2124 <__floatsisf+0x54>
    211c:	9e e8       	ldi	r25, 0x8E	; 142
    211e:	87 2f       	mov	r24, r23
    2120:	76 2f       	mov	r23, r22
    2122:	05 c0       	rjmp	.+10     	; 0x212e <__floatsisf+0x5e>
    2124:	66 23       	and	r22, r22
    2126:	71 f0       	breq	.+28     	; 0x2144 <__floatsisf+0x74>
    2128:	96 e8       	ldi	r25, 0x86	; 134
    212a:	86 2f       	mov	r24, r22
    212c:	70 e0       	ldi	r23, 0x00	; 0
    212e:	60 e0       	ldi	r22, 0x00	; 0
    2130:	2a f0       	brmi	.+10     	; 0x213c <__floatsisf+0x6c>
    2132:	9a 95       	dec	r25
    2134:	66 0f       	add	r22, r22
    2136:	77 1f       	adc	r23, r23
    2138:	88 1f       	adc	r24, r24
    213a:	da f7       	brpl	.-10     	; 0x2132 <__floatsisf+0x62>
    213c:	88 0f       	add	r24, r24
    213e:	96 95       	lsr	r25
    2140:	87 95       	ror	r24
    2142:	97 f9       	bld	r25, 7
    2144:	08 95       	ret

00002146 <__fp_cmp>:
    2146:	99 0f       	add	r25, r25
    2148:	00 08       	sbc	r0, r0
    214a:	55 0f       	add	r21, r21
    214c:	aa 0b       	sbc	r26, r26
    214e:	e0 e8       	ldi	r30, 0x80	; 128
    2150:	fe ef       	ldi	r31, 0xFE	; 254
    2152:	16 16       	cp	r1, r22
    2154:	17 06       	cpc	r1, r23
    2156:	e8 07       	cpc	r30, r24
    2158:	f9 07       	cpc	r31, r25
    215a:	c0 f0       	brcs	.+48     	; 0x218c <__fp_cmp+0x46>
    215c:	12 16       	cp	r1, r18
    215e:	13 06       	cpc	r1, r19
    2160:	e4 07       	cpc	r30, r20
    2162:	f5 07       	cpc	r31, r21
    2164:	98 f0       	brcs	.+38     	; 0x218c <__fp_cmp+0x46>
    2166:	62 1b       	sub	r22, r18
    2168:	73 0b       	sbc	r23, r19
    216a:	84 0b       	sbc	r24, r20
    216c:	95 0b       	sbc	r25, r21
    216e:	39 f4       	brne	.+14     	; 0x217e <__fp_cmp+0x38>
    2170:	0a 26       	eor	r0, r26
    2172:	61 f0       	breq	.+24     	; 0x218c <__fp_cmp+0x46>
    2174:	23 2b       	or	r18, r19
    2176:	24 2b       	or	r18, r20
    2178:	25 2b       	or	r18, r21
    217a:	21 f4       	brne	.+8      	; 0x2184 <__fp_cmp+0x3e>
    217c:	08 95       	ret
    217e:	0a 26       	eor	r0, r26
    2180:	09 f4       	brne	.+2      	; 0x2184 <__fp_cmp+0x3e>
    2182:	a1 40       	sbci	r26, 0x01	; 1
    2184:	a6 95       	lsr	r26
    2186:	8f ef       	ldi	r24, 0xFF	; 255
    2188:	81 1d       	adc	r24, r1
    218a:	81 1d       	adc	r24, r1
    218c:	08 95       	ret

0000218e <__fp_inf>:
    218e:	97 f9       	bld	r25, 7
    2190:	9f 67       	ori	r25, 0x7F	; 127
    2192:	80 e8       	ldi	r24, 0x80	; 128
    2194:	70 e0       	ldi	r23, 0x00	; 0
    2196:	60 e0       	ldi	r22, 0x00	; 0
    2198:	08 95       	ret

0000219a <__fp_nan>:
    219a:	9f ef       	ldi	r25, 0xFF	; 255
    219c:	80 ec       	ldi	r24, 0xC0	; 192
    219e:	08 95       	ret

000021a0 <__fp_pscA>:
    21a0:	00 24       	eor	r0, r0
    21a2:	0a 94       	dec	r0
    21a4:	16 16       	cp	r1, r22
    21a6:	17 06       	cpc	r1, r23
    21a8:	18 06       	cpc	r1, r24
    21aa:	09 06       	cpc	r0, r25
    21ac:	08 95       	ret

000021ae <__fp_pscB>:
    21ae:	00 24       	eor	r0, r0
    21b0:	0a 94       	dec	r0
    21b2:	12 16       	cp	r1, r18
    21b4:	13 06       	cpc	r1, r19
    21b6:	14 06       	cpc	r1, r20
    21b8:	05 06       	cpc	r0, r21
    21ba:	08 95       	ret

000021bc <__fp_round>:
    21bc:	09 2e       	mov	r0, r25
    21be:	03 94       	inc	r0
    21c0:	00 0c       	add	r0, r0
    21c2:	11 f4       	brne	.+4      	; 0x21c8 <__fp_round+0xc>
    21c4:	88 23       	and	r24, r24
    21c6:	52 f0       	brmi	.+20     	; 0x21dc <__fp_round+0x20>
    21c8:	bb 0f       	add	r27, r27
    21ca:	40 f4       	brcc	.+16     	; 0x21dc <__fp_round+0x20>
    21cc:	bf 2b       	or	r27, r31
    21ce:	11 f4       	brne	.+4      	; 0x21d4 <__fp_round+0x18>
    21d0:	60 ff       	sbrs	r22, 0
    21d2:	04 c0       	rjmp	.+8      	; 0x21dc <__fp_round+0x20>
    21d4:	6f 5f       	subi	r22, 0xFF	; 255
    21d6:	7f 4f       	sbci	r23, 0xFF	; 255
    21d8:	8f 4f       	sbci	r24, 0xFF	; 255
    21da:	9f 4f       	sbci	r25, 0xFF	; 255
    21dc:	08 95       	ret

000021de <__fp_split3>:
    21de:	57 fd       	sbrc	r21, 7
    21e0:	90 58       	subi	r25, 0x80	; 128
    21e2:	44 0f       	add	r20, r20
    21e4:	55 1f       	adc	r21, r21
    21e6:	59 f0       	breq	.+22     	; 0x21fe <__fp_splitA+0x10>
    21e8:	5f 3f       	cpi	r21, 0xFF	; 255
    21ea:	71 f0       	breq	.+28     	; 0x2208 <__fp_splitA+0x1a>
    21ec:	47 95       	ror	r20

000021ee <__fp_splitA>:
    21ee:	88 0f       	add	r24, r24
    21f0:	97 fb       	bst	r25, 7
    21f2:	99 1f       	adc	r25, r25
    21f4:	61 f0       	breq	.+24     	; 0x220e <__fp_splitA+0x20>
    21f6:	9f 3f       	cpi	r25, 0xFF	; 255
    21f8:	79 f0       	breq	.+30     	; 0x2218 <__fp_splitA+0x2a>
    21fa:	87 95       	ror	r24
    21fc:	08 95       	ret
    21fe:	12 16       	cp	r1, r18
    2200:	13 06       	cpc	r1, r19
    2202:	14 06       	cpc	r1, r20
    2204:	55 1f       	adc	r21, r21
    2206:	f2 cf       	rjmp	.-28     	; 0x21ec <__fp_split3+0xe>
    2208:	46 95       	lsr	r20
    220a:	f1 df       	rcall	.-30     	; 0x21ee <__fp_splitA>
    220c:	08 c0       	rjmp	.+16     	; 0x221e <__fp_splitA+0x30>
    220e:	16 16       	cp	r1, r22
    2210:	17 06       	cpc	r1, r23
    2212:	18 06       	cpc	r1, r24
    2214:	99 1f       	adc	r25, r25
    2216:	f1 cf       	rjmp	.-30     	; 0x21fa <__fp_splitA+0xc>
    2218:	86 95       	lsr	r24
    221a:	71 05       	cpc	r23, r1
    221c:	61 05       	cpc	r22, r1
    221e:	08 94       	sec
    2220:	08 95       	ret

00002222 <__fp_zero>:
    2222:	e8 94       	clt

00002224 <__fp_szero>:
    2224:	bb 27       	eor	r27, r27
    2226:	66 27       	eor	r22, r22
    2228:	77 27       	eor	r23, r23
    222a:	cb 01       	movw	r24, r22
    222c:	97 f9       	bld	r25, 7
    222e:	08 95       	ret

00002230 <__gesf2>:
    2230:	0e 94 a3 10 	call	0x2146	; 0x2146 <__fp_cmp>
    2234:	08 f4       	brcc	.+2      	; 0x2238 <__gesf2+0x8>
    2236:	8f ef       	ldi	r24, 0xFF	; 255
    2238:	08 95       	ret

0000223a <__mulsf3>:
    223a:	0e 94 30 11 	call	0x2260	; 0x2260 <__mulsf3x>
    223e:	0c 94 de 10 	jmp	0x21bc	; 0x21bc <__fp_round>
    2242:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <__fp_pscA>
    2246:	38 f0       	brcs	.+14     	; 0x2256 <__mulsf3+0x1c>
    2248:	0e 94 d7 10 	call	0x21ae	; 0x21ae <__fp_pscB>
    224c:	20 f0       	brcs	.+8      	; 0x2256 <__mulsf3+0x1c>
    224e:	95 23       	and	r25, r21
    2250:	11 f0       	breq	.+4      	; 0x2256 <__mulsf3+0x1c>
    2252:	0c 94 c7 10 	jmp	0x218e	; 0x218e <__fp_inf>
    2256:	0c 94 cd 10 	jmp	0x219a	; 0x219a <__fp_nan>
    225a:	11 24       	eor	r1, r1
    225c:	0c 94 12 11 	jmp	0x2224	; 0x2224 <__fp_szero>

00002260 <__mulsf3x>:
    2260:	0e 94 ef 10 	call	0x21de	; 0x21de <__fp_split3>
    2264:	70 f3       	brcs	.-36     	; 0x2242 <__mulsf3+0x8>

00002266 <__mulsf3_pse>:
    2266:	95 9f       	mul	r25, r21
    2268:	c1 f3       	breq	.-16     	; 0x225a <__mulsf3+0x20>
    226a:	95 0f       	add	r25, r21
    226c:	50 e0       	ldi	r21, 0x00	; 0
    226e:	55 1f       	adc	r21, r21
    2270:	62 9f       	mul	r22, r18
    2272:	f0 01       	movw	r30, r0
    2274:	72 9f       	mul	r23, r18
    2276:	bb 27       	eor	r27, r27
    2278:	f0 0d       	add	r31, r0
    227a:	b1 1d       	adc	r27, r1
    227c:	63 9f       	mul	r22, r19
    227e:	aa 27       	eor	r26, r26
    2280:	f0 0d       	add	r31, r0
    2282:	b1 1d       	adc	r27, r1
    2284:	aa 1f       	adc	r26, r26
    2286:	64 9f       	mul	r22, r20
    2288:	66 27       	eor	r22, r22
    228a:	b0 0d       	add	r27, r0
    228c:	a1 1d       	adc	r26, r1
    228e:	66 1f       	adc	r22, r22
    2290:	82 9f       	mul	r24, r18
    2292:	22 27       	eor	r18, r18
    2294:	b0 0d       	add	r27, r0
    2296:	a1 1d       	adc	r26, r1
    2298:	62 1f       	adc	r22, r18
    229a:	73 9f       	mul	r23, r19
    229c:	b0 0d       	add	r27, r0
    229e:	a1 1d       	adc	r26, r1
    22a0:	62 1f       	adc	r22, r18
    22a2:	83 9f       	mul	r24, r19
    22a4:	a0 0d       	add	r26, r0
    22a6:	61 1d       	adc	r22, r1
    22a8:	22 1f       	adc	r18, r18
    22aa:	74 9f       	mul	r23, r20
    22ac:	33 27       	eor	r19, r19
    22ae:	a0 0d       	add	r26, r0
    22b0:	61 1d       	adc	r22, r1
    22b2:	23 1f       	adc	r18, r19
    22b4:	84 9f       	mul	r24, r20
    22b6:	60 0d       	add	r22, r0
    22b8:	21 1d       	adc	r18, r1
    22ba:	82 2f       	mov	r24, r18
    22bc:	76 2f       	mov	r23, r22
    22be:	6a 2f       	mov	r22, r26
    22c0:	11 24       	eor	r1, r1
    22c2:	9f 57       	subi	r25, 0x7F	; 127
    22c4:	50 40       	sbci	r21, 0x00	; 0
    22c6:	9a f0       	brmi	.+38     	; 0x22ee <__mulsf3_pse+0x88>
    22c8:	f1 f0       	breq	.+60     	; 0x2306 <__mulsf3_pse+0xa0>
    22ca:	88 23       	and	r24, r24
    22cc:	4a f0       	brmi	.+18     	; 0x22e0 <__mulsf3_pse+0x7a>
    22ce:	ee 0f       	add	r30, r30
    22d0:	ff 1f       	adc	r31, r31
    22d2:	bb 1f       	adc	r27, r27
    22d4:	66 1f       	adc	r22, r22
    22d6:	77 1f       	adc	r23, r23
    22d8:	88 1f       	adc	r24, r24
    22da:	91 50       	subi	r25, 0x01	; 1
    22dc:	50 40       	sbci	r21, 0x00	; 0
    22de:	a9 f7       	brne	.-22     	; 0x22ca <__mulsf3_pse+0x64>
    22e0:	9e 3f       	cpi	r25, 0xFE	; 254
    22e2:	51 05       	cpc	r21, r1
    22e4:	80 f0       	brcs	.+32     	; 0x2306 <__mulsf3_pse+0xa0>
    22e6:	0c 94 c7 10 	jmp	0x218e	; 0x218e <__fp_inf>
    22ea:	0c 94 12 11 	jmp	0x2224	; 0x2224 <__fp_szero>
    22ee:	5f 3f       	cpi	r21, 0xFF	; 255
    22f0:	e4 f3       	brlt	.-8      	; 0x22ea <__mulsf3_pse+0x84>
    22f2:	98 3e       	cpi	r25, 0xE8	; 232
    22f4:	d4 f3       	brlt	.-12     	; 0x22ea <__mulsf3_pse+0x84>
    22f6:	86 95       	lsr	r24
    22f8:	77 95       	ror	r23
    22fa:	67 95       	ror	r22
    22fc:	b7 95       	ror	r27
    22fe:	f7 95       	ror	r31
    2300:	e7 95       	ror	r30
    2302:	9f 5f       	subi	r25, 0xFF	; 255
    2304:	c1 f7       	brne	.-16     	; 0x22f6 <__mulsf3_pse+0x90>
    2306:	fe 2b       	or	r31, r30
    2308:	88 0f       	add	r24, r24
    230a:	91 1d       	adc	r25, r1
    230c:	96 95       	lsr	r25
    230e:	87 95       	ror	r24
    2310:	97 f9       	bld	r25, 7
    2312:	08 95       	ret

00002314 <__divmodhi4>:
    2314:	97 fb       	bst	r25, 7
    2316:	07 2e       	mov	r0, r23
    2318:	16 f4       	brtc	.+4      	; 0x231e <__divmodhi4+0xa>
    231a:	00 94       	com	r0
    231c:	07 d0       	rcall	.+14     	; 0x232c <__divmodhi4_neg1>
    231e:	77 fd       	sbrc	r23, 7
    2320:	09 d0       	rcall	.+18     	; 0x2334 <__divmodhi4_neg2>
    2322:	0e 94 a4 11 	call	0x2348	; 0x2348 <__udivmodhi4>
    2326:	07 fc       	sbrc	r0, 7
    2328:	05 d0       	rcall	.+10     	; 0x2334 <__divmodhi4_neg2>
    232a:	3e f4       	brtc	.+14     	; 0x233a <__divmodhi4_exit>

0000232c <__divmodhi4_neg1>:
    232c:	90 95       	com	r25
    232e:	81 95       	neg	r24
    2330:	9f 4f       	sbci	r25, 0xFF	; 255
    2332:	08 95       	ret

00002334 <__divmodhi4_neg2>:
    2334:	70 95       	com	r23
    2336:	61 95       	neg	r22
    2338:	7f 4f       	sbci	r23, 0xFF	; 255

0000233a <__divmodhi4_exit>:
    233a:	08 95       	ret

0000233c <__tablejump2__>:
    233c:	ee 0f       	add	r30, r30
    233e:	ff 1f       	adc	r31, r31
    2340:	05 90       	lpm	r0, Z+
    2342:	f4 91       	lpm	r31, Z
    2344:	e0 2d       	mov	r30, r0
    2346:	09 94       	ijmp

00002348 <__udivmodhi4>:
    2348:	aa 1b       	sub	r26, r26
    234a:	bb 1b       	sub	r27, r27
    234c:	51 e1       	ldi	r21, 0x11	; 17
    234e:	07 c0       	rjmp	.+14     	; 0x235e <__udivmodhi4_ep>

00002350 <__udivmodhi4_loop>:
    2350:	aa 1f       	adc	r26, r26
    2352:	bb 1f       	adc	r27, r27
    2354:	a6 17       	cp	r26, r22
    2356:	b7 07       	cpc	r27, r23
    2358:	10 f0       	brcs	.+4      	; 0x235e <__udivmodhi4_ep>
    235a:	a6 1b       	sub	r26, r22
    235c:	b7 0b       	sbc	r27, r23

0000235e <__udivmodhi4_ep>:
    235e:	88 1f       	adc	r24, r24
    2360:	99 1f       	adc	r25, r25
    2362:	5a 95       	dec	r21
    2364:	a9 f7       	brne	.-22     	; 0x2350 <__udivmodhi4_loop>
    2366:	80 95       	com	r24
    2368:	90 95       	com	r25
    236a:	bc 01       	movw	r22, r24
    236c:	cd 01       	movw	r24, r26
    236e:	08 95       	ret

00002370 <dtostrf>:
    2370:	ef 92       	push	r14
    2372:	0f 93       	push	r16
    2374:	1f 93       	push	r17
    2376:	cf 93       	push	r28
    2378:	df 93       	push	r29
    237a:	e8 01       	movw	r28, r16
    237c:	47 fd       	sbrc	r20, 7
    237e:	02 c0       	rjmp	.+4      	; 0x2384 <dtostrf+0x14>
    2380:	34 e0       	ldi	r19, 0x04	; 4
    2382:	01 c0       	rjmp	.+2      	; 0x2386 <dtostrf+0x16>
    2384:	34 e1       	ldi	r19, 0x14	; 20
    2386:	04 2e       	mov	r0, r20
    2388:	00 0c       	add	r0, r0
    238a:	55 0b       	sbc	r21, r21
    238c:	57 ff       	sbrs	r21, 7
    238e:	03 c0       	rjmp	.+6      	; 0x2396 <dtostrf+0x26>
    2390:	51 95       	neg	r21
    2392:	41 95       	neg	r20
    2394:	51 09       	sbc	r21, r1
    2396:	e3 2e       	mov	r14, r19
    2398:	02 2f       	mov	r16, r18
    239a:	24 2f       	mov	r18, r20
    239c:	ae 01       	movw	r20, r28
    239e:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <dtoa_prf>
    23a2:	ce 01       	movw	r24, r28
    23a4:	df 91       	pop	r29
    23a6:	cf 91       	pop	r28
    23a8:	1f 91       	pop	r17
    23aa:	0f 91       	pop	r16
    23ac:	ef 90       	pop	r14
    23ae:	08 95       	ret

000023b0 <malloc>:
    23b0:	0f 93       	push	r16
    23b2:	1f 93       	push	r17
    23b4:	cf 93       	push	r28
    23b6:	df 93       	push	r29
    23b8:	82 30       	cpi	r24, 0x02	; 2
    23ba:	91 05       	cpc	r25, r1
    23bc:	10 f4       	brcc	.+4      	; 0x23c2 <malloc+0x12>
    23be:	82 e0       	ldi	r24, 0x02	; 2
    23c0:	90 e0       	ldi	r25, 0x00	; 0
    23c2:	e0 91 26 05 	lds	r30, 0x0526	; 0x800526 <__flp>
    23c6:	f0 91 27 05 	lds	r31, 0x0527	; 0x800527 <__flp+0x1>
    23ca:	20 e0       	ldi	r18, 0x00	; 0
    23cc:	30 e0       	ldi	r19, 0x00	; 0
    23ce:	a0 e0       	ldi	r26, 0x00	; 0
    23d0:	b0 e0       	ldi	r27, 0x00	; 0
    23d2:	30 97       	sbiw	r30, 0x00	; 0
    23d4:	19 f1       	breq	.+70     	; 0x241c <malloc+0x6c>
    23d6:	40 81       	ld	r20, Z
    23d8:	51 81       	ldd	r21, Z+1	; 0x01
    23da:	02 81       	ldd	r16, Z+2	; 0x02
    23dc:	13 81       	ldd	r17, Z+3	; 0x03
    23de:	48 17       	cp	r20, r24
    23e0:	59 07       	cpc	r21, r25
    23e2:	c8 f0       	brcs	.+50     	; 0x2416 <malloc+0x66>
    23e4:	84 17       	cp	r24, r20
    23e6:	95 07       	cpc	r25, r21
    23e8:	69 f4       	brne	.+26     	; 0x2404 <malloc+0x54>
    23ea:	10 97       	sbiw	r26, 0x00	; 0
    23ec:	31 f0       	breq	.+12     	; 0x23fa <malloc+0x4a>
    23ee:	12 96       	adiw	r26, 0x02	; 2
    23f0:	0c 93       	st	X, r16
    23f2:	12 97       	sbiw	r26, 0x02	; 2
    23f4:	13 96       	adiw	r26, 0x03	; 3
    23f6:	1c 93       	st	X, r17
    23f8:	27 c0       	rjmp	.+78     	; 0x2448 <malloc+0x98>
    23fa:	00 93 26 05 	sts	0x0526, r16	; 0x800526 <__flp>
    23fe:	10 93 27 05 	sts	0x0527, r17	; 0x800527 <__flp+0x1>
    2402:	22 c0       	rjmp	.+68     	; 0x2448 <malloc+0x98>
    2404:	21 15       	cp	r18, r1
    2406:	31 05       	cpc	r19, r1
    2408:	19 f0       	breq	.+6      	; 0x2410 <malloc+0x60>
    240a:	42 17       	cp	r20, r18
    240c:	53 07       	cpc	r21, r19
    240e:	18 f4       	brcc	.+6      	; 0x2416 <malloc+0x66>
    2410:	9a 01       	movw	r18, r20
    2412:	bd 01       	movw	r22, r26
    2414:	ef 01       	movw	r28, r30
    2416:	df 01       	movw	r26, r30
    2418:	f8 01       	movw	r30, r16
    241a:	db cf       	rjmp	.-74     	; 0x23d2 <malloc+0x22>
    241c:	21 15       	cp	r18, r1
    241e:	31 05       	cpc	r19, r1
    2420:	f9 f0       	breq	.+62     	; 0x2460 <malloc+0xb0>
    2422:	28 1b       	sub	r18, r24
    2424:	39 0b       	sbc	r19, r25
    2426:	24 30       	cpi	r18, 0x04	; 4
    2428:	31 05       	cpc	r19, r1
    242a:	80 f4       	brcc	.+32     	; 0x244c <malloc+0x9c>
    242c:	8a 81       	ldd	r24, Y+2	; 0x02
    242e:	9b 81       	ldd	r25, Y+3	; 0x03
    2430:	61 15       	cp	r22, r1
    2432:	71 05       	cpc	r23, r1
    2434:	21 f0       	breq	.+8      	; 0x243e <malloc+0x8e>
    2436:	fb 01       	movw	r30, r22
    2438:	93 83       	std	Z+3, r25	; 0x03
    243a:	82 83       	std	Z+2, r24	; 0x02
    243c:	04 c0       	rjmp	.+8      	; 0x2446 <malloc+0x96>
    243e:	90 93 27 05 	sts	0x0527, r25	; 0x800527 <__flp+0x1>
    2442:	80 93 26 05 	sts	0x0526, r24	; 0x800526 <__flp>
    2446:	fe 01       	movw	r30, r28
    2448:	32 96       	adiw	r30, 0x02	; 2
    244a:	44 c0       	rjmp	.+136    	; 0x24d4 <malloc+0x124>
    244c:	fe 01       	movw	r30, r28
    244e:	e2 0f       	add	r30, r18
    2450:	f3 1f       	adc	r31, r19
    2452:	81 93       	st	Z+, r24
    2454:	91 93       	st	Z+, r25
    2456:	22 50       	subi	r18, 0x02	; 2
    2458:	31 09       	sbc	r19, r1
    245a:	39 83       	std	Y+1, r19	; 0x01
    245c:	28 83       	st	Y, r18
    245e:	3a c0       	rjmp	.+116    	; 0x24d4 <malloc+0x124>
    2460:	20 91 24 05 	lds	r18, 0x0524	; 0x800524 <__brkval>
    2464:	30 91 25 05 	lds	r19, 0x0525	; 0x800525 <__brkval+0x1>
    2468:	23 2b       	or	r18, r19
    246a:	41 f4       	brne	.+16     	; 0x247c <malloc+0xcc>
    246c:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    2470:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    2474:	30 93 25 05 	sts	0x0525, r19	; 0x800525 <__brkval+0x1>
    2478:	20 93 24 05 	sts	0x0524, r18	; 0x800524 <__brkval>
    247c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    2480:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    2484:	21 15       	cp	r18, r1
    2486:	31 05       	cpc	r19, r1
    2488:	41 f4       	brne	.+16     	; 0x249a <malloc+0xea>
    248a:	2d b7       	in	r18, 0x3d	; 61
    248c:	3e b7       	in	r19, 0x3e	; 62
    248e:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    2492:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    2496:	24 1b       	sub	r18, r20
    2498:	35 0b       	sbc	r19, r21
    249a:	e0 91 24 05 	lds	r30, 0x0524	; 0x800524 <__brkval>
    249e:	f0 91 25 05 	lds	r31, 0x0525	; 0x800525 <__brkval+0x1>
    24a2:	e2 17       	cp	r30, r18
    24a4:	f3 07       	cpc	r31, r19
    24a6:	a0 f4       	brcc	.+40     	; 0x24d0 <malloc+0x120>
    24a8:	2e 1b       	sub	r18, r30
    24aa:	3f 0b       	sbc	r19, r31
    24ac:	28 17       	cp	r18, r24
    24ae:	39 07       	cpc	r19, r25
    24b0:	78 f0       	brcs	.+30     	; 0x24d0 <malloc+0x120>
    24b2:	ac 01       	movw	r20, r24
    24b4:	4e 5f       	subi	r20, 0xFE	; 254
    24b6:	5f 4f       	sbci	r21, 0xFF	; 255
    24b8:	24 17       	cp	r18, r20
    24ba:	35 07       	cpc	r19, r21
    24bc:	48 f0       	brcs	.+18     	; 0x24d0 <malloc+0x120>
    24be:	4e 0f       	add	r20, r30
    24c0:	5f 1f       	adc	r21, r31
    24c2:	50 93 25 05 	sts	0x0525, r21	; 0x800525 <__brkval+0x1>
    24c6:	40 93 24 05 	sts	0x0524, r20	; 0x800524 <__brkval>
    24ca:	81 93       	st	Z+, r24
    24cc:	91 93       	st	Z+, r25
    24ce:	02 c0       	rjmp	.+4      	; 0x24d4 <malloc+0x124>
    24d0:	e0 e0       	ldi	r30, 0x00	; 0
    24d2:	f0 e0       	ldi	r31, 0x00	; 0
    24d4:	cf 01       	movw	r24, r30
    24d6:	df 91       	pop	r29
    24d8:	cf 91       	pop	r28
    24da:	1f 91       	pop	r17
    24dc:	0f 91       	pop	r16
    24de:	08 95       	ret

000024e0 <free>:
    24e0:	cf 93       	push	r28
    24e2:	df 93       	push	r29
    24e4:	00 97       	sbiw	r24, 0x00	; 0
    24e6:	09 f4       	brne	.+2      	; 0x24ea <free+0xa>
    24e8:	81 c0       	rjmp	.+258    	; 0x25ec <free+0x10c>
    24ea:	fc 01       	movw	r30, r24
    24ec:	32 97       	sbiw	r30, 0x02	; 2
    24ee:	13 82       	std	Z+3, r1	; 0x03
    24f0:	12 82       	std	Z+2, r1	; 0x02
    24f2:	a0 91 26 05 	lds	r26, 0x0526	; 0x800526 <__flp>
    24f6:	b0 91 27 05 	lds	r27, 0x0527	; 0x800527 <__flp+0x1>
    24fa:	10 97       	sbiw	r26, 0x00	; 0
    24fc:	81 f4       	brne	.+32     	; 0x251e <free+0x3e>
    24fe:	20 81       	ld	r18, Z
    2500:	31 81       	ldd	r19, Z+1	; 0x01
    2502:	82 0f       	add	r24, r18
    2504:	93 1f       	adc	r25, r19
    2506:	20 91 24 05 	lds	r18, 0x0524	; 0x800524 <__brkval>
    250a:	30 91 25 05 	lds	r19, 0x0525	; 0x800525 <__brkval+0x1>
    250e:	28 17       	cp	r18, r24
    2510:	39 07       	cpc	r19, r25
    2512:	51 f5       	brne	.+84     	; 0x2568 <free+0x88>
    2514:	f0 93 25 05 	sts	0x0525, r31	; 0x800525 <__brkval+0x1>
    2518:	e0 93 24 05 	sts	0x0524, r30	; 0x800524 <__brkval>
    251c:	67 c0       	rjmp	.+206    	; 0x25ec <free+0x10c>
    251e:	ed 01       	movw	r28, r26
    2520:	20 e0       	ldi	r18, 0x00	; 0
    2522:	30 e0       	ldi	r19, 0x00	; 0
    2524:	ce 17       	cp	r28, r30
    2526:	df 07       	cpc	r29, r31
    2528:	40 f4       	brcc	.+16     	; 0x253a <free+0x5a>
    252a:	4a 81       	ldd	r20, Y+2	; 0x02
    252c:	5b 81       	ldd	r21, Y+3	; 0x03
    252e:	9e 01       	movw	r18, r28
    2530:	41 15       	cp	r20, r1
    2532:	51 05       	cpc	r21, r1
    2534:	f1 f0       	breq	.+60     	; 0x2572 <free+0x92>
    2536:	ea 01       	movw	r28, r20
    2538:	f5 cf       	rjmp	.-22     	; 0x2524 <free+0x44>
    253a:	d3 83       	std	Z+3, r29	; 0x03
    253c:	c2 83       	std	Z+2, r28	; 0x02
    253e:	40 81       	ld	r20, Z
    2540:	51 81       	ldd	r21, Z+1	; 0x01
    2542:	84 0f       	add	r24, r20
    2544:	95 1f       	adc	r25, r21
    2546:	c8 17       	cp	r28, r24
    2548:	d9 07       	cpc	r29, r25
    254a:	59 f4       	brne	.+22     	; 0x2562 <free+0x82>
    254c:	88 81       	ld	r24, Y
    254e:	99 81       	ldd	r25, Y+1	; 0x01
    2550:	84 0f       	add	r24, r20
    2552:	95 1f       	adc	r25, r21
    2554:	02 96       	adiw	r24, 0x02	; 2
    2556:	91 83       	std	Z+1, r25	; 0x01
    2558:	80 83       	st	Z, r24
    255a:	8a 81       	ldd	r24, Y+2	; 0x02
    255c:	9b 81       	ldd	r25, Y+3	; 0x03
    255e:	93 83       	std	Z+3, r25	; 0x03
    2560:	82 83       	std	Z+2, r24	; 0x02
    2562:	21 15       	cp	r18, r1
    2564:	31 05       	cpc	r19, r1
    2566:	29 f4       	brne	.+10     	; 0x2572 <free+0x92>
    2568:	f0 93 27 05 	sts	0x0527, r31	; 0x800527 <__flp+0x1>
    256c:	e0 93 26 05 	sts	0x0526, r30	; 0x800526 <__flp>
    2570:	3d c0       	rjmp	.+122    	; 0x25ec <free+0x10c>
    2572:	e9 01       	movw	r28, r18
    2574:	fb 83       	std	Y+3, r31	; 0x03
    2576:	ea 83       	std	Y+2, r30	; 0x02
    2578:	49 91       	ld	r20, Y+
    257a:	59 91       	ld	r21, Y+
    257c:	c4 0f       	add	r28, r20
    257e:	d5 1f       	adc	r29, r21
    2580:	ec 17       	cp	r30, r28
    2582:	fd 07       	cpc	r31, r29
    2584:	61 f4       	brne	.+24     	; 0x259e <free+0xbe>
    2586:	80 81       	ld	r24, Z
    2588:	91 81       	ldd	r25, Z+1	; 0x01
    258a:	84 0f       	add	r24, r20
    258c:	95 1f       	adc	r25, r21
    258e:	02 96       	adiw	r24, 0x02	; 2
    2590:	e9 01       	movw	r28, r18
    2592:	99 83       	std	Y+1, r25	; 0x01
    2594:	88 83       	st	Y, r24
    2596:	82 81       	ldd	r24, Z+2	; 0x02
    2598:	93 81       	ldd	r25, Z+3	; 0x03
    259a:	9b 83       	std	Y+3, r25	; 0x03
    259c:	8a 83       	std	Y+2, r24	; 0x02
    259e:	e0 e0       	ldi	r30, 0x00	; 0
    25a0:	f0 e0       	ldi	r31, 0x00	; 0
    25a2:	12 96       	adiw	r26, 0x02	; 2
    25a4:	8d 91       	ld	r24, X+
    25a6:	9c 91       	ld	r25, X
    25a8:	13 97       	sbiw	r26, 0x03	; 3
    25aa:	00 97       	sbiw	r24, 0x00	; 0
    25ac:	19 f0       	breq	.+6      	; 0x25b4 <free+0xd4>
    25ae:	fd 01       	movw	r30, r26
    25b0:	dc 01       	movw	r26, r24
    25b2:	f7 cf       	rjmp	.-18     	; 0x25a2 <free+0xc2>
    25b4:	8d 91       	ld	r24, X+
    25b6:	9c 91       	ld	r25, X
    25b8:	11 97       	sbiw	r26, 0x01	; 1
    25ba:	9d 01       	movw	r18, r26
    25bc:	2e 5f       	subi	r18, 0xFE	; 254
    25be:	3f 4f       	sbci	r19, 0xFF	; 255
    25c0:	82 0f       	add	r24, r18
    25c2:	93 1f       	adc	r25, r19
    25c4:	20 91 24 05 	lds	r18, 0x0524	; 0x800524 <__brkval>
    25c8:	30 91 25 05 	lds	r19, 0x0525	; 0x800525 <__brkval+0x1>
    25cc:	28 17       	cp	r18, r24
    25ce:	39 07       	cpc	r19, r25
    25d0:	69 f4       	brne	.+26     	; 0x25ec <free+0x10c>
    25d2:	30 97       	sbiw	r30, 0x00	; 0
    25d4:	29 f4       	brne	.+10     	; 0x25e0 <free+0x100>
    25d6:	10 92 27 05 	sts	0x0527, r1	; 0x800527 <__flp+0x1>
    25da:	10 92 26 05 	sts	0x0526, r1	; 0x800526 <__flp>
    25de:	02 c0       	rjmp	.+4      	; 0x25e4 <free+0x104>
    25e0:	13 82       	std	Z+3, r1	; 0x03
    25e2:	12 82       	std	Z+2, r1	; 0x02
    25e4:	b0 93 25 05 	sts	0x0525, r27	; 0x800525 <__brkval+0x1>
    25e8:	a0 93 24 05 	sts	0x0524, r26	; 0x800524 <__brkval>
    25ec:	df 91       	pop	r29
    25ee:	cf 91       	pop	r28
    25f0:	08 95       	ret

000025f2 <strcmp>:
    25f2:	fb 01       	movw	r30, r22
    25f4:	dc 01       	movw	r26, r24
    25f6:	8d 91       	ld	r24, X+
    25f8:	01 90       	ld	r0, Z+
    25fa:	80 19       	sub	r24, r0
    25fc:	01 10       	cpse	r0, r1
    25fe:	d9 f3       	breq	.-10     	; 0x25f6 <strcmp+0x4>
    2600:	99 0b       	sbc	r25, r25
    2602:	08 95       	ret

00002604 <strcpy>:
    2604:	fb 01       	movw	r30, r22
    2606:	dc 01       	movw	r26, r24
    2608:	01 90       	ld	r0, Z+
    260a:	0d 92       	st	X+, r0
    260c:	00 20       	and	r0, r0
    260e:	e1 f7       	brne	.-8      	; 0x2608 <strcpy+0x4>
    2610:	08 95       	ret

00002612 <printf>:
    2612:	a0 e0       	ldi	r26, 0x00	; 0
    2614:	b0 e0       	ldi	r27, 0x00	; 0
    2616:	ef e0       	ldi	r30, 0x0F	; 15
    2618:	f3 e1       	ldi	r31, 0x13	; 19
    261a:	0c 94 52 18 	jmp	0x30a4	; 0x30a4 <__prologue_saves__+0x20>
    261e:	ae 01       	movw	r20, r28
    2620:	4b 5f       	subi	r20, 0xFB	; 251
    2622:	5f 4f       	sbci	r21, 0xFF	; 255
    2624:	fa 01       	movw	r30, r20
    2626:	61 91       	ld	r22, Z+
    2628:	71 91       	ld	r23, Z+
    262a:	af 01       	movw	r20, r30
    262c:	80 91 2a 05 	lds	r24, 0x052A	; 0x80052a <__iob+0x2>
    2630:	90 91 2b 05 	lds	r25, 0x052B	; 0x80052b <__iob+0x3>
    2634:	0e 94 7f 13 	call	0x26fe	; 0x26fe <vfprintf>
    2638:	e2 e0       	ldi	r30, 0x02	; 2
    263a:	0c 94 6e 18 	jmp	0x30dc	; 0x30dc <__epilogue_restores__+0x20>

0000263e <puts>:
    263e:	0f 93       	push	r16
    2640:	1f 93       	push	r17
    2642:	cf 93       	push	r28
    2644:	df 93       	push	r29
    2646:	e0 91 2a 05 	lds	r30, 0x052A	; 0x80052a <__iob+0x2>
    264a:	f0 91 2b 05 	lds	r31, 0x052B	; 0x80052b <__iob+0x3>
    264e:	23 81       	ldd	r18, Z+3	; 0x03
    2650:	21 ff       	sbrs	r18, 1
    2652:	1b c0       	rjmp	.+54     	; 0x268a <puts+0x4c>
    2654:	8c 01       	movw	r16, r24
    2656:	d0 e0       	ldi	r29, 0x00	; 0
    2658:	c0 e0       	ldi	r28, 0x00	; 0
    265a:	f8 01       	movw	r30, r16
    265c:	81 91       	ld	r24, Z+
    265e:	8f 01       	movw	r16, r30
    2660:	60 91 2a 05 	lds	r22, 0x052A	; 0x80052a <__iob+0x2>
    2664:	70 91 2b 05 	lds	r23, 0x052B	; 0x80052b <__iob+0x3>
    2668:	db 01       	movw	r26, r22
    266a:	18 96       	adiw	r26, 0x08	; 8
    266c:	ed 91       	ld	r30, X+
    266e:	fc 91       	ld	r31, X
    2670:	19 97       	sbiw	r26, 0x09	; 9
    2672:	88 23       	and	r24, r24
    2674:	31 f0       	breq	.+12     	; 0x2682 <puts+0x44>
    2676:	09 95       	icall
    2678:	89 2b       	or	r24, r25
    267a:	79 f3       	breq	.-34     	; 0x265a <puts+0x1c>
    267c:	df ef       	ldi	r29, 0xFF	; 255
    267e:	cf ef       	ldi	r28, 0xFF	; 255
    2680:	ec cf       	rjmp	.-40     	; 0x265a <puts+0x1c>
    2682:	8a e0       	ldi	r24, 0x0A	; 10
    2684:	09 95       	icall
    2686:	89 2b       	or	r24, r25
    2688:	19 f0       	breq	.+6      	; 0x2690 <puts+0x52>
    268a:	8f ef       	ldi	r24, 0xFF	; 255
    268c:	9f ef       	ldi	r25, 0xFF	; 255
    268e:	02 c0       	rjmp	.+4      	; 0x2694 <puts+0x56>
    2690:	8d 2f       	mov	r24, r29
    2692:	9c 2f       	mov	r25, r28
    2694:	df 91       	pop	r29
    2696:	cf 91       	pop	r28
    2698:	1f 91       	pop	r17
    269a:	0f 91       	pop	r16
    269c:	08 95       	ret

0000269e <snprintf>:
    269e:	ae e0       	ldi	r26, 0x0E	; 14
    26a0:	b0 e0       	ldi	r27, 0x00	; 0
    26a2:	e5 e5       	ldi	r30, 0x55	; 85
    26a4:	f3 e1       	ldi	r31, 0x13	; 19
    26a6:	0c 94 50 18 	jmp	0x30a0	; 0x30a0 <__prologue_saves__+0x1c>
    26aa:	0d 89       	ldd	r16, Y+21	; 0x15
    26ac:	1e 89       	ldd	r17, Y+22	; 0x16
    26ae:	8f 89       	ldd	r24, Y+23	; 0x17
    26b0:	98 8d       	ldd	r25, Y+24	; 0x18
    26b2:	26 e0       	ldi	r18, 0x06	; 6
    26b4:	2c 83       	std	Y+4, r18	; 0x04
    26b6:	1a 83       	std	Y+2, r17	; 0x02
    26b8:	09 83       	std	Y+1, r16	; 0x01
    26ba:	97 ff       	sbrs	r25, 7
    26bc:	02 c0       	rjmp	.+4      	; 0x26c2 <snprintf+0x24>
    26be:	80 e0       	ldi	r24, 0x00	; 0
    26c0:	90 e8       	ldi	r25, 0x80	; 128
    26c2:	01 97       	sbiw	r24, 0x01	; 1
    26c4:	9e 83       	std	Y+6, r25	; 0x06
    26c6:	8d 83       	std	Y+5, r24	; 0x05
    26c8:	ae 01       	movw	r20, r28
    26ca:	45 5e       	subi	r20, 0xE5	; 229
    26cc:	5f 4f       	sbci	r21, 0xFF	; 255
    26ce:	69 8d       	ldd	r22, Y+25	; 0x19
    26d0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26d2:	ce 01       	movw	r24, r28
    26d4:	01 96       	adiw	r24, 0x01	; 1
    26d6:	0e 94 7f 13 	call	0x26fe	; 0x26fe <vfprintf>
    26da:	4d 81       	ldd	r20, Y+5	; 0x05
    26dc:	5e 81       	ldd	r21, Y+6	; 0x06
    26de:	57 fd       	sbrc	r21, 7
    26e0:	0a c0       	rjmp	.+20     	; 0x26f6 <snprintf+0x58>
    26e2:	2f 81       	ldd	r18, Y+7	; 0x07
    26e4:	38 85       	ldd	r19, Y+8	; 0x08
    26e6:	42 17       	cp	r20, r18
    26e8:	53 07       	cpc	r21, r19
    26ea:	0c f4       	brge	.+2      	; 0x26ee <snprintf+0x50>
    26ec:	9a 01       	movw	r18, r20
    26ee:	f8 01       	movw	r30, r16
    26f0:	e2 0f       	add	r30, r18
    26f2:	f3 1f       	adc	r31, r19
    26f4:	10 82       	st	Z, r1
    26f6:	2e 96       	adiw	r28, 0x0e	; 14
    26f8:	e4 e0       	ldi	r30, 0x04	; 4
    26fa:	0c 94 6c 18 	jmp	0x30d8	; 0x30d8 <__epilogue_restores__+0x1c>

000026fe <vfprintf>:
    26fe:	ab e0       	ldi	r26, 0x0B	; 11
    2700:	b0 e0       	ldi	r27, 0x00	; 0
    2702:	e5 e8       	ldi	r30, 0x85	; 133
    2704:	f3 e1       	ldi	r31, 0x13	; 19
    2706:	0c 94 42 18 	jmp	0x3084	; 0x3084 <__prologue_saves__>
    270a:	6c 01       	movw	r12, r24
    270c:	7b 01       	movw	r14, r22
    270e:	8a 01       	movw	r16, r20
    2710:	fc 01       	movw	r30, r24
    2712:	17 82       	std	Z+7, r1	; 0x07
    2714:	16 82       	std	Z+6, r1	; 0x06
    2716:	83 81       	ldd	r24, Z+3	; 0x03
    2718:	81 ff       	sbrs	r24, 1
    271a:	cc c1       	rjmp	.+920    	; 0x2ab4 <vfprintf+0x3b6>
    271c:	ce 01       	movw	r24, r28
    271e:	01 96       	adiw	r24, 0x01	; 1
    2720:	3c 01       	movw	r6, r24
    2722:	f6 01       	movw	r30, r12
    2724:	93 81       	ldd	r25, Z+3	; 0x03
    2726:	f7 01       	movw	r30, r14
    2728:	93 fd       	sbrc	r25, 3
    272a:	85 91       	lpm	r24, Z+
    272c:	93 ff       	sbrs	r25, 3
    272e:	81 91       	ld	r24, Z+
    2730:	7f 01       	movw	r14, r30
    2732:	88 23       	and	r24, r24
    2734:	09 f4       	brne	.+2      	; 0x2738 <vfprintf+0x3a>
    2736:	ba c1       	rjmp	.+884    	; 0x2aac <vfprintf+0x3ae>
    2738:	85 32       	cpi	r24, 0x25	; 37
    273a:	39 f4       	brne	.+14     	; 0x274a <vfprintf+0x4c>
    273c:	93 fd       	sbrc	r25, 3
    273e:	85 91       	lpm	r24, Z+
    2740:	93 ff       	sbrs	r25, 3
    2742:	81 91       	ld	r24, Z+
    2744:	7f 01       	movw	r14, r30
    2746:	85 32       	cpi	r24, 0x25	; 37
    2748:	29 f4       	brne	.+10     	; 0x2754 <vfprintf+0x56>
    274a:	b6 01       	movw	r22, r12
    274c:	90 e0       	ldi	r25, 0x00	; 0
    274e:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <fputc>
    2752:	e7 cf       	rjmp	.-50     	; 0x2722 <vfprintf+0x24>
    2754:	91 2c       	mov	r9, r1
    2756:	21 2c       	mov	r2, r1
    2758:	31 2c       	mov	r3, r1
    275a:	ff e1       	ldi	r31, 0x1F	; 31
    275c:	f3 15       	cp	r31, r3
    275e:	d8 f0       	brcs	.+54     	; 0x2796 <vfprintf+0x98>
    2760:	8b 32       	cpi	r24, 0x2B	; 43
    2762:	79 f0       	breq	.+30     	; 0x2782 <vfprintf+0x84>
    2764:	38 f4       	brcc	.+14     	; 0x2774 <vfprintf+0x76>
    2766:	80 32       	cpi	r24, 0x20	; 32
    2768:	79 f0       	breq	.+30     	; 0x2788 <vfprintf+0x8a>
    276a:	83 32       	cpi	r24, 0x23	; 35
    276c:	a1 f4       	brne	.+40     	; 0x2796 <vfprintf+0x98>
    276e:	23 2d       	mov	r18, r3
    2770:	20 61       	ori	r18, 0x10	; 16
    2772:	1d c0       	rjmp	.+58     	; 0x27ae <vfprintf+0xb0>
    2774:	8d 32       	cpi	r24, 0x2D	; 45
    2776:	61 f0       	breq	.+24     	; 0x2790 <vfprintf+0x92>
    2778:	80 33       	cpi	r24, 0x30	; 48
    277a:	69 f4       	brne	.+26     	; 0x2796 <vfprintf+0x98>
    277c:	23 2d       	mov	r18, r3
    277e:	21 60       	ori	r18, 0x01	; 1
    2780:	16 c0       	rjmp	.+44     	; 0x27ae <vfprintf+0xb0>
    2782:	83 2d       	mov	r24, r3
    2784:	82 60       	ori	r24, 0x02	; 2
    2786:	38 2e       	mov	r3, r24
    2788:	e3 2d       	mov	r30, r3
    278a:	e4 60       	ori	r30, 0x04	; 4
    278c:	3e 2e       	mov	r3, r30
    278e:	2a c0       	rjmp	.+84     	; 0x27e4 <vfprintf+0xe6>
    2790:	f3 2d       	mov	r31, r3
    2792:	f8 60       	ori	r31, 0x08	; 8
    2794:	1d c0       	rjmp	.+58     	; 0x27d0 <vfprintf+0xd2>
    2796:	37 fc       	sbrc	r3, 7
    2798:	2d c0       	rjmp	.+90     	; 0x27f4 <vfprintf+0xf6>
    279a:	20 ed       	ldi	r18, 0xD0	; 208
    279c:	28 0f       	add	r18, r24
    279e:	2a 30       	cpi	r18, 0x0A	; 10
    27a0:	40 f0       	brcs	.+16     	; 0x27b2 <vfprintf+0xb4>
    27a2:	8e 32       	cpi	r24, 0x2E	; 46
    27a4:	b9 f4       	brne	.+46     	; 0x27d4 <vfprintf+0xd6>
    27a6:	36 fc       	sbrc	r3, 6
    27a8:	81 c1       	rjmp	.+770    	; 0x2aac <vfprintf+0x3ae>
    27aa:	23 2d       	mov	r18, r3
    27ac:	20 64       	ori	r18, 0x40	; 64
    27ae:	32 2e       	mov	r3, r18
    27b0:	19 c0       	rjmp	.+50     	; 0x27e4 <vfprintf+0xe6>
    27b2:	36 fe       	sbrs	r3, 6
    27b4:	06 c0       	rjmp	.+12     	; 0x27c2 <vfprintf+0xc4>
    27b6:	8a e0       	ldi	r24, 0x0A	; 10
    27b8:	98 9e       	mul	r9, r24
    27ba:	20 0d       	add	r18, r0
    27bc:	11 24       	eor	r1, r1
    27be:	92 2e       	mov	r9, r18
    27c0:	11 c0       	rjmp	.+34     	; 0x27e4 <vfprintf+0xe6>
    27c2:	ea e0       	ldi	r30, 0x0A	; 10
    27c4:	2e 9e       	mul	r2, r30
    27c6:	20 0d       	add	r18, r0
    27c8:	11 24       	eor	r1, r1
    27ca:	22 2e       	mov	r2, r18
    27cc:	f3 2d       	mov	r31, r3
    27ce:	f0 62       	ori	r31, 0x20	; 32
    27d0:	3f 2e       	mov	r3, r31
    27d2:	08 c0       	rjmp	.+16     	; 0x27e4 <vfprintf+0xe6>
    27d4:	8c 36       	cpi	r24, 0x6C	; 108
    27d6:	21 f4       	brne	.+8      	; 0x27e0 <vfprintf+0xe2>
    27d8:	83 2d       	mov	r24, r3
    27da:	80 68       	ori	r24, 0x80	; 128
    27dc:	38 2e       	mov	r3, r24
    27de:	02 c0       	rjmp	.+4      	; 0x27e4 <vfprintf+0xe6>
    27e0:	88 36       	cpi	r24, 0x68	; 104
    27e2:	41 f4       	brne	.+16     	; 0x27f4 <vfprintf+0xf6>
    27e4:	f7 01       	movw	r30, r14
    27e6:	93 fd       	sbrc	r25, 3
    27e8:	85 91       	lpm	r24, Z+
    27ea:	93 ff       	sbrs	r25, 3
    27ec:	81 91       	ld	r24, Z+
    27ee:	7f 01       	movw	r14, r30
    27f0:	81 11       	cpse	r24, r1
    27f2:	b3 cf       	rjmp	.-154    	; 0x275a <vfprintf+0x5c>
    27f4:	98 2f       	mov	r25, r24
    27f6:	9f 7d       	andi	r25, 0xDF	; 223
    27f8:	95 54       	subi	r25, 0x45	; 69
    27fa:	93 30       	cpi	r25, 0x03	; 3
    27fc:	28 f4       	brcc	.+10     	; 0x2808 <vfprintf+0x10a>
    27fe:	0c 5f       	subi	r16, 0xFC	; 252
    2800:	1f 4f       	sbci	r17, 0xFF	; 255
    2802:	9f e3       	ldi	r25, 0x3F	; 63
    2804:	99 83       	std	Y+1, r25	; 0x01
    2806:	0d c0       	rjmp	.+26     	; 0x2822 <vfprintf+0x124>
    2808:	83 36       	cpi	r24, 0x63	; 99
    280a:	31 f0       	breq	.+12     	; 0x2818 <vfprintf+0x11a>
    280c:	83 37       	cpi	r24, 0x73	; 115
    280e:	71 f0       	breq	.+28     	; 0x282c <vfprintf+0x12e>
    2810:	83 35       	cpi	r24, 0x53	; 83
    2812:	09 f0       	breq	.+2      	; 0x2816 <vfprintf+0x118>
    2814:	59 c0       	rjmp	.+178    	; 0x28c8 <vfprintf+0x1ca>
    2816:	21 c0       	rjmp	.+66     	; 0x285a <vfprintf+0x15c>
    2818:	f8 01       	movw	r30, r16
    281a:	80 81       	ld	r24, Z
    281c:	89 83       	std	Y+1, r24	; 0x01
    281e:	0e 5f       	subi	r16, 0xFE	; 254
    2820:	1f 4f       	sbci	r17, 0xFF	; 255
    2822:	88 24       	eor	r8, r8
    2824:	83 94       	inc	r8
    2826:	91 2c       	mov	r9, r1
    2828:	53 01       	movw	r10, r6
    282a:	13 c0       	rjmp	.+38     	; 0x2852 <vfprintf+0x154>
    282c:	28 01       	movw	r4, r16
    282e:	f2 e0       	ldi	r31, 0x02	; 2
    2830:	4f 0e       	add	r4, r31
    2832:	51 1c       	adc	r5, r1
    2834:	f8 01       	movw	r30, r16
    2836:	a0 80       	ld	r10, Z
    2838:	b1 80       	ldd	r11, Z+1	; 0x01
    283a:	36 fe       	sbrs	r3, 6
    283c:	03 c0       	rjmp	.+6      	; 0x2844 <vfprintf+0x146>
    283e:	69 2d       	mov	r22, r9
    2840:	70 e0       	ldi	r23, 0x00	; 0
    2842:	02 c0       	rjmp	.+4      	; 0x2848 <vfprintf+0x14a>
    2844:	6f ef       	ldi	r22, 0xFF	; 255
    2846:	7f ef       	ldi	r23, 0xFF	; 255
    2848:	c5 01       	movw	r24, r10
    284a:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <strnlen>
    284e:	4c 01       	movw	r8, r24
    2850:	82 01       	movw	r16, r4
    2852:	f3 2d       	mov	r31, r3
    2854:	ff 77       	andi	r31, 0x7F	; 127
    2856:	3f 2e       	mov	r3, r31
    2858:	16 c0       	rjmp	.+44     	; 0x2886 <vfprintf+0x188>
    285a:	28 01       	movw	r4, r16
    285c:	22 e0       	ldi	r18, 0x02	; 2
    285e:	42 0e       	add	r4, r18
    2860:	51 1c       	adc	r5, r1
    2862:	f8 01       	movw	r30, r16
    2864:	a0 80       	ld	r10, Z
    2866:	b1 80       	ldd	r11, Z+1	; 0x01
    2868:	36 fe       	sbrs	r3, 6
    286a:	03 c0       	rjmp	.+6      	; 0x2872 <vfprintf+0x174>
    286c:	69 2d       	mov	r22, r9
    286e:	70 e0       	ldi	r23, 0x00	; 0
    2870:	02 c0       	rjmp	.+4      	; 0x2876 <vfprintf+0x178>
    2872:	6f ef       	ldi	r22, 0xFF	; 255
    2874:	7f ef       	ldi	r23, 0xFF	; 255
    2876:	c5 01       	movw	r24, r10
    2878:	0e 94 92 17 	call	0x2f24	; 0x2f24 <strnlen_P>
    287c:	4c 01       	movw	r8, r24
    287e:	f3 2d       	mov	r31, r3
    2880:	f0 68       	ori	r31, 0x80	; 128
    2882:	3f 2e       	mov	r3, r31
    2884:	82 01       	movw	r16, r4
    2886:	33 fc       	sbrc	r3, 3
    2888:	1b c0       	rjmp	.+54     	; 0x28c0 <vfprintf+0x1c2>
    288a:	82 2d       	mov	r24, r2
    288c:	90 e0       	ldi	r25, 0x00	; 0
    288e:	88 16       	cp	r8, r24
    2890:	99 06       	cpc	r9, r25
    2892:	b0 f4       	brcc	.+44     	; 0x28c0 <vfprintf+0x1c2>
    2894:	b6 01       	movw	r22, r12
    2896:	80 e2       	ldi	r24, 0x20	; 32
    2898:	90 e0       	ldi	r25, 0x00	; 0
    289a:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <fputc>
    289e:	2a 94       	dec	r2
    28a0:	f4 cf       	rjmp	.-24     	; 0x288a <vfprintf+0x18c>
    28a2:	f5 01       	movw	r30, r10
    28a4:	37 fc       	sbrc	r3, 7
    28a6:	85 91       	lpm	r24, Z+
    28a8:	37 fe       	sbrs	r3, 7
    28aa:	81 91       	ld	r24, Z+
    28ac:	5f 01       	movw	r10, r30
    28ae:	b6 01       	movw	r22, r12
    28b0:	90 e0       	ldi	r25, 0x00	; 0
    28b2:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <fputc>
    28b6:	21 10       	cpse	r2, r1
    28b8:	2a 94       	dec	r2
    28ba:	21 e0       	ldi	r18, 0x01	; 1
    28bc:	82 1a       	sub	r8, r18
    28be:	91 08       	sbc	r9, r1
    28c0:	81 14       	cp	r8, r1
    28c2:	91 04       	cpc	r9, r1
    28c4:	71 f7       	brne	.-36     	; 0x28a2 <vfprintf+0x1a4>
    28c6:	e8 c0       	rjmp	.+464    	; 0x2a98 <vfprintf+0x39a>
    28c8:	84 36       	cpi	r24, 0x64	; 100
    28ca:	11 f0       	breq	.+4      	; 0x28d0 <vfprintf+0x1d2>
    28cc:	89 36       	cpi	r24, 0x69	; 105
    28ce:	41 f5       	brne	.+80     	; 0x2920 <vfprintf+0x222>
    28d0:	f8 01       	movw	r30, r16
    28d2:	37 fe       	sbrs	r3, 7
    28d4:	07 c0       	rjmp	.+14     	; 0x28e4 <vfprintf+0x1e6>
    28d6:	60 81       	ld	r22, Z
    28d8:	71 81       	ldd	r23, Z+1	; 0x01
    28da:	82 81       	ldd	r24, Z+2	; 0x02
    28dc:	93 81       	ldd	r25, Z+3	; 0x03
    28de:	0c 5f       	subi	r16, 0xFC	; 252
    28e0:	1f 4f       	sbci	r17, 0xFF	; 255
    28e2:	08 c0       	rjmp	.+16     	; 0x28f4 <vfprintf+0x1f6>
    28e4:	60 81       	ld	r22, Z
    28e6:	71 81       	ldd	r23, Z+1	; 0x01
    28e8:	07 2e       	mov	r0, r23
    28ea:	00 0c       	add	r0, r0
    28ec:	88 0b       	sbc	r24, r24
    28ee:	99 0b       	sbc	r25, r25
    28f0:	0e 5f       	subi	r16, 0xFE	; 254
    28f2:	1f 4f       	sbci	r17, 0xFF	; 255
    28f4:	f3 2d       	mov	r31, r3
    28f6:	ff 76       	andi	r31, 0x6F	; 111
    28f8:	3f 2e       	mov	r3, r31
    28fa:	97 ff       	sbrs	r25, 7
    28fc:	09 c0       	rjmp	.+18     	; 0x2910 <vfprintf+0x212>
    28fe:	90 95       	com	r25
    2900:	80 95       	com	r24
    2902:	70 95       	com	r23
    2904:	61 95       	neg	r22
    2906:	7f 4f       	sbci	r23, 0xFF	; 255
    2908:	8f 4f       	sbci	r24, 0xFF	; 255
    290a:	9f 4f       	sbci	r25, 0xFF	; 255
    290c:	f0 68       	ori	r31, 0x80	; 128
    290e:	3f 2e       	mov	r3, r31
    2910:	2a e0       	ldi	r18, 0x0A	; 10
    2912:	30 e0       	ldi	r19, 0x00	; 0
    2914:	a3 01       	movw	r20, r6
    2916:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <__ultoa_invert>
    291a:	88 2e       	mov	r8, r24
    291c:	86 18       	sub	r8, r6
    291e:	45 c0       	rjmp	.+138    	; 0x29aa <vfprintf+0x2ac>
    2920:	85 37       	cpi	r24, 0x75	; 117
    2922:	31 f4       	brne	.+12     	; 0x2930 <vfprintf+0x232>
    2924:	23 2d       	mov	r18, r3
    2926:	2f 7e       	andi	r18, 0xEF	; 239
    2928:	b2 2e       	mov	r11, r18
    292a:	2a e0       	ldi	r18, 0x0A	; 10
    292c:	30 e0       	ldi	r19, 0x00	; 0
    292e:	25 c0       	rjmp	.+74     	; 0x297a <vfprintf+0x27c>
    2930:	93 2d       	mov	r25, r3
    2932:	99 7f       	andi	r25, 0xF9	; 249
    2934:	b9 2e       	mov	r11, r25
    2936:	8f 36       	cpi	r24, 0x6F	; 111
    2938:	c1 f0       	breq	.+48     	; 0x296a <vfprintf+0x26c>
    293a:	18 f4       	brcc	.+6      	; 0x2942 <vfprintf+0x244>
    293c:	88 35       	cpi	r24, 0x58	; 88
    293e:	79 f0       	breq	.+30     	; 0x295e <vfprintf+0x260>
    2940:	b5 c0       	rjmp	.+362    	; 0x2aac <vfprintf+0x3ae>
    2942:	80 37       	cpi	r24, 0x70	; 112
    2944:	19 f0       	breq	.+6      	; 0x294c <vfprintf+0x24e>
    2946:	88 37       	cpi	r24, 0x78	; 120
    2948:	21 f0       	breq	.+8      	; 0x2952 <vfprintf+0x254>
    294a:	b0 c0       	rjmp	.+352    	; 0x2aac <vfprintf+0x3ae>
    294c:	e9 2f       	mov	r30, r25
    294e:	e0 61       	ori	r30, 0x10	; 16
    2950:	be 2e       	mov	r11, r30
    2952:	b4 fe       	sbrs	r11, 4
    2954:	0d c0       	rjmp	.+26     	; 0x2970 <vfprintf+0x272>
    2956:	fb 2d       	mov	r31, r11
    2958:	f4 60       	ori	r31, 0x04	; 4
    295a:	bf 2e       	mov	r11, r31
    295c:	09 c0       	rjmp	.+18     	; 0x2970 <vfprintf+0x272>
    295e:	34 fe       	sbrs	r3, 4
    2960:	0a c0       	rjmp	.+20     	; 0x2976 <vfprintf+0x278>
    2962:	29 2f       	mov	r18, r25
    2964:	26 60       	ori	r18, 0x06	; 6
    2966:	b2 2e       	mov	r11, r18
    2968:	06 c0       	rjmp	.+12     	; 0x2976 <vfprintf+0x278>
    296a:	28 e0       	ldi	r18, 0x08	; 8
    296c:	30 e0       	ldi	r19, 0x00	; 0
    296e:	05 c0       	rjmp	.+10     	; 0x297a <vfprintf+0x27c>
    2970:	20 e1       	ldi	r18, 0x10	; 16
    2972:	30 e0       	ldi	r19, 0x00	; 0
    2974:	02 c0       	rjmp	.+4      	; 0x297a <vfprintf+0x27c>
    2976:	20 e1       	ldi	r18, 0x10	; 16
    2978:	32 e0       	ldi	r19, 0x02	; 2
    297a:	f8 01       	movw	r30, r16
    297c:	b7 fe       	sbrs	r11, 7
    297e:	07 c0       	rjmp	.+14     	; 0x298e <vfprintf+0x290>
    2980:	60 81       	ld	r22, Z
    2982:	71 81       	ldd	r23, Z+1	; 0x01
    2984:	82 81       	ldd	r24, Z+2	; 0x02
    2986:	93 81       	ldd	r25, Z+3	; 0x03
    2988:	0c 5f       	subi	r16, 0xFC	; 252
    298a:	1f 4f       	sbci	r17, 0xFF	; 255
    298c:	06 c0       	rjmp	.+12     	; 0x299a <vfprintf+0x29c>
    298e:	60 81       	ld	r22, Z
    2990:	71 81       	ldd	r23, Z+1	; 0x01
    2992:	80 e0       	ldi	r24, 0x00	; 0
    2994:	90 e0       	ldi	r25, 0x00	; 0
    2996:	0e 5f       	subi	r16, 0xFE	; 254
    2998:	1f 4f       	sbci	r17, 0xFF	; 255
    299a:	a3 01       	movw	r20, r6
    299c:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <__ultoa_invert>
    29a0:	88 2e       	mov	r8, r24
    29a2:	86 18       	sub	r8, r6
    29a4:	fb 2d       	mov	r31, r11
    29a6:	ff 77       	andi	r31, 0x7F	; 127
    29a8:	3f 2e       	mov	r3, r31
    29aa:	36 fe       	sbrs	r3, 6
    29ac:	0d c0       	rjmp	.+26     	; 0x29c8 <vfprintf+0x2ca>
    29ae:	23 2d       	mov	r18, r3
    29b0:	2e 7f       	andi	r18, 0xFE	; 254
    29b2:	a2 2e       	mov	r10, r18
    29b4:	89 14       	cp	r8, r9
    29b6:	58 f4       	brcc	.+22     	; 0x29ce <vfprintf+0x2d0>
    29b8:	34 fe       	sbrs	r3, 4
    29ba:	0b c0       	rjmp	.+22     	; 0x29d2 <vfprintf+0x2d4>
    29bc:	32 fc       	sbrc	r3, 2
    29be:	09 c0       	rjmp	.+18     	; 0x29d2 <vfprintf+0x2d4>
    29c0:	83 2d       	mov	r24, r3
    29c2:	8e 7e       	andi	r24, 0xEE	; 238
    29c4:	a8 2e       	mov	r10, r24
    29c6:	05 c0       	rjmp	.+10     	; 0x29d2 <vfprintf+0x2d4>
    29c8:	b8 2c       	mov	r11, r8
    29ca:	a3 2c       	mov	r10, r3
    29cc:	03 c0       	rjmp	.+6      	; 0x29d4 <vfprintf+0x2d6>
    29ce:	b8 2c       	mov	r11, r8
    29d0:	01 c0       	rjmp	.+2      	; 0x29d4 <vfprintf+0x2d6>
    29d2:	b9 2c       	mov	r11, r9
    29d4:	a4 fe       	sbrs	r10, 4
    29d6:	0f c0       	rjmp	.+30     	; 0x29f6 <vfprintf+0x2f8>
    29d8:	fe 01       	movw	r30, r28
    29da:	e8 0d       	add	r30, r8
    29dc:	f1 1d       	adc	r31, r1
    29de:	80 81       	ld	r24, Z
    29e0:	80 33       	cpi	r24, 0x30	; 48
    29e2:	21 f4       	brne	.+8      	; 0x29ec <vfprintf+0x2ee>
    29e4:	9a 2d       	mov	r25, r10
    29e6:	99 7e       	andi	r25, 0xE9	; 233
    29e8:	a9 2e       	mov	r10, r25
    29ea:	09 c0       	rjmp	.+18     	; 0x29fe <vfprintf+0x300>
    29ec:	a2 fe       	sbrs	r10, 2
    29ee:	06 c0       	rjmp	.+12     	; 0x29fc <vfprintf+0x2fe>
    29f0:	b3 94       	inc	r11
    29f2:	b3 94       	inc	r11
    29f4:	04 c0       	rjmp	.+8      	; 0x29fe <vfprintf+0x300>
    29f6:	8a 2d       	mov	r24, r10
    29f8:	86 78       	andi	r24, 0x86	; 134
    29fa:	09 f0       	breq	.+2      	; 0x29fe <vfprintf+0x300>
    29fc:	b3 94       	inc	r11
    29fe:	a3 fc       	sbrc	r10, 3
    2a00:	11 c0       	rjmp	.+34     	; 0x2a24 <vfprintf+0x326>
    2a02:	a0 fe       	sbrs	r10, 0
    2a04:	06 c0       	rjmp	.+12     	; 0x2a12 <vfprintf+0x314>
    2a06:	b2 14       	cp	r11, r2
    2a08:	88 f4       	brcc	.+34     	; 0x2a2c <vfprintf+0x32e>
    2a0a:	28 0c       	add	r2, r8
    2a0c:	92 2c       	mov	r9, r2
    2a0e:	9b 18       	sub	r9, r11
    2a10:	0e c0       	rjmp	.+28     	; 0x2a2e <vfprintf+0x330>
    2a12:	b2 14       	cp	r11, r2
    2a14:	60 f4       	brcc	.+24     	; 0x2a2e <vfprintf+0x330>
    2a16:	b6 01       	movw	r22, r12
    2a18:	80 e2       	ldi	r24, 0x20	; 32
    2a1a:	90 e0       	ldi	r25, 0x00	; 0
    2a1c:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <fputc>
    2a20:	b3 94       	inc	r11
    2a22:	f7 cf       	rjmp	.-18     	; 0x2a12 <vfprintf+0x314>
    2a24:	b2 14       	cp	r11, r2
    2a26:	18 f4       	brcc	.+6      	; 0x2a2e <vfprintf+0x330>
    2a28:	2b 18       	sub	r2, r11
    2a2a:	02 c0       	rjmp	.+4      	; 0x2a30 <vfprintf+0x332>
    2a2c:	98 2c       	mov	r9, r8
    2a2e:	21 2c       	mov	r2, r1
    2a30:	a4 fe       	sbrs	r10, 4
    2a32:	10 c0       	rjmp	.+32     	; 0x2a54 <vfprintf+0x356>
    2a34:	b6 01       	movw	r22, r12
    2a36:	80 e3       	ldi	r24, 0x30	; 48
    2a38:	90 e0       	ldi	r25, 0x00	; 0
    2a3a:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <fputc>
    2a3e:	a2 fe       	sbrs	r10, 2
    2a40:	17 c0       	rjmp	.+46     	; 0x2a70 <vfprintf+0x372>
    2a42:	a1 fc       	sbrc	r10, 1
    2a44:	03 c0       	rjmp	.+6      	; 0x2a4c <vfprintf+0x34e>
    2a46:	88 e7       	ldi	r24, 0x78	; 120
    2a48:	90 e0       	ldi	r25, 0x00	; 0
    2a4a:	02 c0       	rjmp	.+4      	; 0x2a50 <vfprintf+0x352>
    2a4c:	88 e5       	ldi	r24, 0x58	; 88
    2a4e:	90 e0       	ldi	r25, 0x00	; 0
    2a50:	b6 01       	movw	r22, r12
    2a52:	0c c0       	rjmp	.+24     	; 0x2a6c <vfprintf+0x36e>
    2a54:	8a 2d       	mov	r24, r10
    2a56:	86 78       	andi	r24, 0x86	; 134
    2a58:	59 f0       	breq	.+22     	; 0x2a70 <vfprintf+0x372>
    2a5a:	a1 fe       	sbrs	r10, 1
    2a5c:	02 c0       	rjmp	.+4      	; 0x2a62 <vfprintf+0x364>
    2a5e:	8b e2       	ldi	r24, 0x2B	; 43
    2a60:	01 c0       	rjmp	.+2      	; 0x2a64 <vfprintf+0x366>
    2a62:	80 e2       	ldi	r24, 0x20	; 32
    2a64:	a7 fc       	sbrc	r10, 7
    2a66:	8d e2       	ldi	r24, 0x2D	; 45
    2a68:	b6 01       	movw	r22, r12
    2a6a:	90 e0       	ldi	r25, 0x00	; 0
    2a6c:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <fputc>
    2a70:	89 14       	cp	r8, r9
    2a72:	38 f4       	brcc	.+14     	; 0x2a82 <vfprintf+0x384>
    2a74:	b6 01       	movw	r22, r12
    2a76:	80 e3       	ldi	r24, 0x30	; 48
    2a78:	90 e0       	ldi	r25, 0x00	; 0
    2a7a:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <fputc>
    2a7e:	9a 94       	dec	r9
    2a80:	f7 cf       	rjmp	.-18     	; 0x2a70 <vfprintf+0x372>
    2a82:	8a 94       	dec	r8
    2a84:	f3 01       	movw	r30, r6
    2a86:	e8 0d       	add	r30, r8
    2a88:	f1 1d       	adc	r31, r1
    2a8a:	80 81       	ld	r24, Z
    2a8c:	b6 01       	movw	r22, r12
    2a8e:	90 e0       	ldi	r25, 0x00	; 0
    2a90:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <fputc>
    2a94:	81 10       	cpse	r8, r1
    2a96:	f5 cf       	rjmp	.-22     	; 0x2a82 <vfprintf+0x384>
    2a98:	22 20       	and	r2, r2
    2a9a:	09 f4       	brne	.+2      	; 0x2a9e <vfprintf+0x3a0>
    2a9c:	42 ce       	rjmp	.-892    	; 0x2722 <vfprintf+0x24>
    2a9e:	b6 01       	movw	r22, r12
    2aa0:	80 e2       	ldi	r24, 0x20	; 32
    2aa2:	90 e0       	ldi	r25, 0x00	; 0
    2aa4:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <fputc>
    2aa8:	2a 94       	dec	r2
    2aaa:	f6 cf       	rjmp	.-20     	; 0x2a98 <vfprintf+0x39a>
    2aac:	f6 01       	movw	r30, r12
    2aae:	86 81       	ldd	r24, Z+6	; 0x06
    2ab0:	97 81       	ldd	r25, Z+7	; 0x07
    2ab2:	02 c0       	rjmp	.+4      	; 0x2ab8 <vfprintf+0x3ba>
    2ab4:	8f ef       	ldi	r24, 0xFF	; 255
    2ab6:	9f ef       	ldi	r25, 0xFF	; 255
    2ab8:	2b 96       	adiw	r28, 0x0b	; 11
    2aba:	e2 e1       	ldi	r30, 0x12	; 18
    2abc:	0c 94 5e 18 	jmp	0x30bc	; 0x30bc <__epilogue_restores__>

00002ac0 <dtoa_prf>:
    2ac0:	a9 e0       	ldi	r26, 0x09	; 9
    2ac2:	b0 e0       	ldi	r27, 0x00	; 0
    2ac4:	e6 e6       	ldi	r30, 0x66	; 102
    2ac6:	f5 e1       	ldi	r31, 0x15	; 21
    2ac8:	0c 94 48 18 	jmp	0x3090	; 0x3090 <__prologue_saves__+0xc>
    2acc:	6a 01       	movw	r12, r20
    2ace:	12 2f       	mov	r17, r18
    2ad0:	b0 2e       	mov	r11, r16
    2ad2:	2b e3       	ldi	r18, 0x3B	; 59
    2ad4:	20 17       	cp	r18, r16
    2ad6:	20 f0       	brcs	.+8      	; 0x2ae0 <dtoa_prf+0x20>
    2ad8:	ff 24       	eor	r15, r15
    2ada:	f3 94       	inc	r15
    2adc:	f0 0e       	add	r15, r16
    2ade:	02 c0       	rjmp	.+4      	; 0x2ae4 <dtoa_prf+0x24>
    2ae0:	2c e3       	ldi	r18, 0x3C	; 60
    2ae2:	f2 2e       	mov	r15, r18
    2ae4:	0f 2d       	mov	r16, r15
    2ae6:	27 e0       	ldi	r18, 0x07	; 7
    2ae8:	ae 01       	movw	r20, r28
    2aea:	4f 5f       	subi	r20, 0xFF	; 255
    2aec:	5f 4f       	sbci	r21, 0xFF	; 255
    2aee:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <__ftoa_engine>
    2af2:	bc 01       	movw	r22, r24
    2af4:	49 81       	ldd	r20, Y+1	; 0x01
    2af6:	84 2f       	mov	r24, r20
    2af8:	89 70       	andi	r24, 0x09	; 9
    2afa:	81 30       	cpi	r24, 0x01	; 1
    2afc:	31 f0       	breq	.+12     	; 0x2b0a <dtoa_prf+0x4a>
    2afe:	e1 fc       	sbrc	r14, 1
    2b00:	06 c0       	rjmp	.+12     	; 0x2b0e <dtoa_prf+0x4e>
    2b02:	e0 fe       	sbrs	r14, 0
    2b04:	06 c0       	rjmp	.+12     	; 0x2b12 <dtoa_prf+0x52>
    2b06:	90 e2       	ldi	r25, 0x20	; 32
    2b08:	05 c0       	rjmp	.+10     	; 0x2b14 <dtoa_prf+0x54>
    2b0a:	9d e2       	ldi	r25, 0x2D	; 45
    2b0c:	03 c0       	rjmp	.+6      	; 0x2b14 <dtoa_prf+0x54>
    2b0e:	9b e2       	ldi	r25, 0x2B	; 43
    2b10:	01 c0       	rjmp	.+2      	; 0x2b14 <dtoa_prf+0x54>
    2b12:	90 e0       	ldi	r25, 0x00	; 0
    2b14:	5e 2d       	mov	r21, r14
    2b16:	50 71       	andi	r21, 0x10	; 16
    2b18:	43 ff       	sbrs	r20, 3
    2b1a:	3c c0       	rjmp	.+120    	; 0x2b94 <dtoa_prf+0xd4>
    2b1c:	91 11       	cpse	r25, r1
    2b1e:	02 c0       	rjmp	.+4      	; 0x2b24 <dtoa_prf+0x64>
    2b20:	83 e0       	ldi	r24, 0x03	; 3
    2b22:	01 c0       	rjmp	.+2      	; 0x2b26 <dtoa_prf+0x66>
    2b24:	84 e0       	ldi	r24, 0x04	; 4
    2b26:	81 17       	cp	r24, r17
    2b28:	18 f4       	brcc	.+6      	; 0x2b30 <dtoa_prf+0x70>
    2b2a:	21 2f       	mov	r18, r17
    2b2c:	28 1b       	sub	r18, r24
    2b2e:	01 c0       	rjmp	.+2      	; 0x2b32 <dtoa_prf+0x72>
    2b30:	20 e0       	ldi	r18, 0x00	; 0
    2b32:	51 11       	cpse	r21, r1
    2b34:	0b c0       	rjmp	.+22     	; 0x2b4c <dtoa_prf+0x8c>
    2b36:	f6 01       	movw	r30, r12
    2b38:	82 2f       	mov	r24, r18
    2b3a:	30 e2       	ldi	r19, 0x20	; 32
    2b3c:	88 23       	and	r24, r24
    2b3e:	19 f0       	breq	.+6      	; 0x2b46 <dtoa_prf+0x86>
    2b40:	31 93       	st	Z+, r19
    2b42:	81 50       	subi	r24, 0x01	; 1
    2b44:	fb cf       	rjmp	.-10     	; 0x2b3c <dtoa_prf+0x7c>
    2b46:	c2 0e       	add	r12, r18
    2b48:	d1 1c       	adc	r13, r1
    2b4a:	20 e0       	ldi	r18, 0x00	; 0
    2b4c:	99 23       	and	r25, r25
    2b4e:	29 f0       	breq	.+10     	; 0x2b5a <dtoa_prf+0x9a>
    2b50:	d6 01       	movw	r26, r12
    2b52:	9c 93       	st	X, r25
    2b54:	f6 01       	movw	r30, r12
    2b56:	31 96       	adiw	r30, 0x01	; 1
    2b58:	6f 01       	movw	r12, r30
    2b5a:	c6 01       	movw	r24, r12
    2b5c:	03 96       	adiw	r24, 0x03	; 3
    2b5e:	e2 fe       	sbrs	r14, 2
    2b60:	0a c0       	rjmp	.+20     	; 0x2b76 <dtoa_prf+0xb6>
    2b62:	3e e4       	ldi	r19, 0x4E	; 78
    2b64:	d6 01       	movw	r26, r12
    2b66:	3c 93       	st	X, r19
    2b68:	41 e4       	ldi	r20, 0x41	; 65
    2b6a:	11 96       	adiw	r26, 0x01	; 1
    2b6c:	4c 93       	st	X, r20
    2b6e:	11 97       	sbiw	r26, 0x01	; 1
    2b70:	12 96       	adiw	r26, 0x02	; 2
    2b72:	3c 93       	st	X, r19
    2b74:	06 c0       	rjmp	.+12     	; 0x2b82 <dtoa_prf+0xc2>
    2b76:	3e e6       	ldi	r19, 0x6E	; 110
    2b78:	f6 01       	movw	r30, r12
    2b7a:	30 83       	st	Z, r19
    2b7c:	41 e6       	ldi	r20, 0x61	; 97
    2b7e:	41 83       	std	Z+1, r20	; 0x01
    2b80:	32 83       	std	Z+2, r19	; 0x02
    2b82:	fc 01       	movw	r30, r24
    2b84:	32 2f       	mov	r19, r18
    2b86:	40 e2       	ldi	r20, 0x20	; 32
    2b88:	33 23       	and	r19, r19
    2b8a:	09 f4       	brne	.+2      	; 0x2b8e <dtoa_prf+0xce>
    2b8c:	42 c0       	rjmp	.+132    	; 0x2c12 <dtoa_prf+0x152>
    2b8e:	41 93       	st	Z+, r20
    2b90:	31 50       	subi	r19, 0x01	; 1
    2b92:	fa cf       	rjmp	.-12     	; 0x2b88 <dtoa_prf+0xc8>
    2b94:	42 ff       	sbrs	r20, 2
    2b96:	44 c0       	rjmp	.+136    	; 0x2c20 <dtoa_prf+0x160>
    2b98:	91 11       	cpse	r25, r1
    2b9a:	02 c0       	rjmp	.+4      	; 0x2ba0 <dtoa_prf+0xe0>
    2b9c:	83 e0       	ldi	r24, 0x03	; 3
    2b9e:	01 c0       	rjmp	.+2      	; 0x2ba2 <dtoa_prf+0xe2>
    2ba0:	84 e0       	ldi	r24, 0x04	; 4
    2ba2:	81 17       	cp	r24, r17
    2ba4:	18 f4       	brcc	.+6      	; 0x2bac <dtoa_prf+0xec>
    2ba6:	21 2f       	mov	r18, r17
    2ba8:	28 1b       	sub	r18, r24
    2baa:	01 c0       	rjmp	.+2      	; 0x2bae <dtoa_prf+0xee>
    2bac:	20 e0       	ldi	r18, 0x00	; 0
    2bae:	51 11       	cpse	r21, r1
    2bb0:	0b c0       	rjmp	.+22     	; 0x2bc8 <dtoa_prf+0x108>
    2bb2:	f6 01       	movw	r30, r12
    2bb4:	82 2f       	mov	r24, r18
    2bb6:	30 e2       	ldi	r19, 0x20	; 32
    2bb8:	88 23       	and	r24, r24
    2bba:	19 f0       	breq	.+6      	; 0x2bc2 <dtoa_prf+0x102>
    2bbc:	31 93       	st	Z+, r19
    2bbe:	81 50       	subi	r24, 0x01	; 1
    2bc0:	fb cf       	rjmp	.-10     	; 0x2bb8 <dtoa_prf+0xf8>
    2bc2:	c2 0e       	add	r12, r18
    2bc4:	d1 1c       	adc	r13, r1
    2bc6:	20 e0       	ldi	r18, 0x00	; 0
    2bc8:	99 23       	and	r25, r25
    2bca:	29 f0       	breq	.+10     	; 0x2bd6 <dtoa_prf+0x116>
    2bcc:	d6 01       	movw	r26, r12
    2bce:	9c 93       	st	X, r25
    2bd0:	f6 01       	movw	r30, r12
    2bd2:	31 96       	adiw	r30, 0x01	; 1
    2bd4:	6f 01       	movw	r12, r30
    2bd6:	c6 01       	movw	r24, r12
    2bd8:	03 96       	adiw	r24, 0x03	; 3
    2bda:	e2 fe       	sbrs	r14, 2
    2bdc:	0b c0       	rjmp	.+22     	; 0x2bf4 <dtoa_prf+0x134>
    2bde:	39 e4       	ldi	r19, 0x49	; 73
    2be0:	d6 01       	movw	r26, r12
    2be2:	3c 93       	st	X, r19
    2be4:	3e e4       	ldi	r19, 0x4E	; 78
    2be6:	11 96       	adiw	r26, 0x01	; 1
    2be8:	3c 93       	st	X, r19
    2bea:	11 97       	sbiw	r26, 0x01	; 1
    2bec:	36 e4       	ldi	r19, 0x46	; 70
    2bee:	12 96       	adiw	r26, 0x02	; 2
    2bf0:	3c 93       	st	X, r19
    2bf2:	07 c0       	rjmp	.+14     	; 0x2c02 <dtoa_prf+0x142>
    2bf4:	39 e6       	ldi	r19, 0x69	; 105
    2bf6:	f6 01       	movw	r30, r12
    2bf8:	30 83       	st	Z, r19
    2bfa:	3e e6       	ldi	r19, 0x6E	; 110
    2bfc:	31 83       	std	Z+1, r19	; 0x01
    2bfe:	36 e6       	ldi	r19, 0x66	; 102
    2c00:	32 83       	std	Z+2, r19	; 0x02
    2c02:	fc 01       	movw	r30, r24
    2c04:	32 2f       	mov	r19, r18
    2c06:	40 e2       	ldi	r20, 0x20	; 32
    2c08:	33 23       	and	r19, r19
    2c0a:	19 f0       	breq	.+6      	; 0x2c12 <dtoa_prf+0x152>
    2c0c:	41 93       	st	Z+, r20
    2c0e:	31 50       	subi	r19, 0x01	; 1
    2c10:	fb cf       	rjmp	.-10     	; 0x2c08 <dtoa_prf+0x148>
    2c12:	fc 01       	movw	r30, r24
    2c14:	e2 0f       	add	r30, r18
    2c16:	f1 1d       	adc	r31, r1
    2c18:	10 82       	st	Z, r1
    2c1a:	8e ef       	ldi	r24, 0xFE	; 254
    2c1c:	9f ef       	ldi	r25, 0xFF	; 255
    2c1e:	a6 c0       	rjmp	.+332    	; 0x2d6c <dtoa_prf+0x2ac>
    2c20:	21 e0       	ldi	r18, 0x01	; 1
    2c22:	30 e0       	ldi	r19, 0x00	; 0
    2c24:	91 11       	cpse	r25, r1
    2c26:	02 c0       	rjmp	.+4      	; 0x2c2c <dtoa_prf+0x16c>
    2c28:	20 e0       	ldi	r18, 0x00	; 0
    2c2a:	30 e0       	ldi	r19, 0x00	; 0
    2c2c:	16 16       	cp	r1, r22
    2c2e:	17 06       	cpc	r1, r23
    2c30:	1c f4       	brge	.+6      	; 0x2c38 <dtoa_prf+0x178>
    2c32:	fb 01       	movw	r30, r22
    2c34:	31 96       	adiw	r30, 0x01	; 1
    2c36:	02 c0       	rjmp	.+4      	; 0x2c3c <dtoa_prf+0x17c>
    2c38:	e1 e0       	ldi	r30, 0x01	; 1
    2c3a:	f0 e0       	ldi	r31, 0x00	; 0
    2c3c:	2e 0f       	add	r18, r30
    2c3e:	3f 1f       	adc	r19, r31
    2c40:	bb 20       	and	r11, r11
    2c42:	21 f0       	breq	.+8      	; 0x2c4c <dtoa_prf+0x18c>
    2c44:	eb 2d       	mov	r30, r11
    2c46:	f0 e0       	ldi	r31, 0x00	; 0
    2c48:	31 96       	adiw	r30, 0x01	; 1
    2c4a:	02 c0       	rjmp	.+4      	; 0x2c50 <dtoa_prf+0x190>
    2c4c:	e0 e0       	ldi	r30, 0x00	; 0
    2c4e:	f0 e0       	ldi	r31, 0x00	; 0
    2c50:	2e 0f       	add	r18, r30
    2c52:	3f 1f       	adc	r19, r31
    2c54:	e1 2f       	mov	r30, r17
    2c56:	f0 e0       	ldi	r31, 0x00	; 0
    2c58:	2e 17       	cp	r18, r30
    2c5a:	3f 07       	cpc	r19, r31
    2c5c:	1c f4       	brge	.+6      	; 0x2c64 <dtoa_prf+0x1a4>
    2c5e:	12 1b       	sub	r17, r18
    2c60:	21 2f       	mov	r18, r17
    2c62:	01 c0       	rjmp	.+2      	; 0x2c66 <dtoa_prf+0x1a6>
    2c64:	20 e0       	ldi	r18, 0x00	; 0
    2c66:	8e 2d       	mov	r24, r14
    2c68:	88 71       	andi	r24, 0x18	; 24
    2c6a:	59 f4       	brne	.+22     	; 0x2c82 <dtoa_prf+0x1c2>
    2c6c:	f6 01       	movw	r30, r12
    2c6e:	82 2f       	mov	r24, r18
    2c70:	30 e2       	ldi	r19, 0x20	; 32
    2c72:	88 23       	and	r24, r24
    2c74:	19 f0       	breq	.+6      	; 0x2c7c <dtoa_prf+0x1bc>
    2c76:	31 93       	st	Z+, r19
    2c78:	81 50       	subi	r24, 0x01	; 1
    2c7a:	fb cf       	rjmp	.-10     	; 0x2c72 <dtoa_prf+0x1b2>
    2c7c:	c2 0e       	add	r12, r18
    2c7e:	d1 1c       	adc	r13, r1
    2c80:	20 e0       	ldi	r18, 0x00	; 0
    2c82:	99 23       	and	r25, r25
    2c84:	29 f0       	breq	.+10     	; 0x2c90 <dtoa_prf+0x1d0>
    2c86:	d6 01       	movw	r26, r12
    2c88:	9c 93       	st	X, r25
    2c8a:	f6 01       	movw	r30, r12
    2c8c:	31 96       	adiw	r30, 0x01	; 1
    2c8e:	6f 01       	movw	r12, r30
    2c90:	51 11       	cpse	r21, r1
    2c92:	0b c0       	rjmp	.+22     	; 0x2caa <dtoa_prf+0x1ea>
    2c94:	f6 01       	movw	r30, r12
    2c96:	82 2f       	mov	r24, r18
    2c98:	90 e3       	ldi	r25, 0x30	; 48
    2c9a:	88 23       	and	r24, r24
    2c9c:	19 f0       	breq	.+6      	; 0x2ca4 <dtoa_prf+0x1e4>
    2c9e:	91 93       	st	Z+, r25
    2ca0:	81 50       	subi	r24, 0x01	; 1
    2ca2:	fb cf       	rjmp	.-10     	; 0x2c9a <dtoa_prf+0x1da>
    2ca4:	c2 0e       	add	r12, r18
    2ca6:	d1 1c       	adc	r13, r1
    2ca8:	20 e0       	ldi	r18, 0x00	; 0
    2caa:	0f 2d       	mov	r16, r15
    2cac:	06 0f       	add	r16, r22
    2cae:	9a 81       	ldd	r25, Y+2	; 0x02
    2cb0:	34 2f       	mov	r19, r20
    2cb2:	30 71       	andi	r19, 0x10	; 16
    2cb4:	44 ff       	sbrs	r20, 4
    2cb6:	03 c0       	rjmp	.+6      	; 0x2cbe <dtoa_prf+0x1fe>
    2cb8:	91 33       	cpi	r25, 0x31	; 49
    2cba:	09 f4       	brne	.+2      	; 0x2cbe <dtoa_prf+0x1fe>
    2cbc:	01 50       	subi	r16, 0x01	; 1
    2cbe:	10 16       	cp	r1, r16
    2cc0:	24 f4       	brge	.+8      	; 0x2cca <dtoa_prf+0x20a>
    2cc2:	09 30       	cpi	r16, 0x09	; 9
    2cc4:	18 f0       	brcs	.+6      	; 0x2ccc <dtoa_prf+0x20c>
    2cc6:	08 e0       	ldi	r16, 0x08	; 8
    2cc8:	01 c0       	rjmp	.+2      	; 0x2ccc <dtoa_prf+0x20c>
    2cca:	01 e0       	ldi	r16, 0x01	; 1
    2ccc:	ab 01       	movw	r20, r22
    2cce:	77 ff       	sbrs	r23, 7
    2cd0:	02 c0       	rjmp	.+4      	; 0x2cd6 <dtoa_prf+0x216>
    2cd2:	40 e0       	ldi	r20, 0x00	; 0
    2cd4:	50 e0       	ldi	r21, 0x00	; 0
    2cd6:	fb 01       	movw	r30, r22
    2cd8:	e4 1b       	sub	r30, r20
    2cda:	f5 0b       	sbc	r31, r21
    2cdc:	a1 e0       	ldi	r26, 0x01	; 1
    2cde:	b0 e0       	ldi	r27, 0x00	; 0
    2ce0:	ac 0f       	add	r26, r28
    2ce2:	bd 1f       	adc	r27, r29
    2ce4:	ea 0f       	add	r30, r26
    2ce6:	fb 1f       	adc	r31, r27
    2ce8:	8e e2       	ldi	r24, 0x2E	; 46
    2cea:	a8 2e       	mov	r10, r24
    2cec:	4b 01       	movw	r8, r22
    2cee:	80 1a       	sub	r8, r16
    2cf0:	91 08       	sbc	r9, r1
    2cf2:	0b 2d       	mov	r16, r11
    2cf4:	10 e0       	ldi	r17, 0x00	; 0
    2cf6:	11 95       	neg	r17
    2cf8:	01 95       	neg	r16
    2cfa:	11 09       	sbc	r17, r1
    2cfc:	4f 3f       	cpi	r20, 0xFF	; 255
    2cfe:	bf ef       	ldi	r27, 0xFF	; 255
    2d00:	5b 07       	cpc	r21, r27
    2d02:	21 f4       	brne	.+8      	; 0x2d0c <dtoa_prf+0x24c>
    2d04:	d6 01       	movw	r26, r12
    2d06:	ac 92       	st	X, r10
    2d08:	11 96       	adiw	r26, 0x01	; 1
    2d0a:	6d 01       	movw	r12, r26
    2d0c:	64 17       	cp	r22, r20
    2d0e:	75 07       	cpc	r23, r21
    2d10:	2c f0       	brlt	.+10     	; 0x2d1c <dtoa_prf+0x25c>
    2d12:	84 16       	cp	r8, r20
    2d14:	95 06       	cpc	r9, r21
    2d16:	14 f4       	brge	.+4      	; 0x2d1c <dtoa_prf+0x25c>
    2d18:	81 81       	ldd	r24, Z+1	; 0x01
    2d1a:	01 c0       	rjmp	.+2      	; 0x2d1e <dtoa_prf+0x25e>
    2d1c:	80 e3       	ldi	r24, 0x30	; 48
    2d1e:	41 50       	subi	r20, 0x01	; 1
    2d20:	51 09       	sbc	r21, r1
    2d22:	31 96       	adiw	r30, 0x01	; 1
    2d24:	d6 01       	movw	r26, r12
    2d26:	11 96       	adiw	r26, 0x01	; 1
    2d28:	7d 01       	movw	r14, r26
    2d2a:	40 17       	cp	r20, r16
    2d2c:	51 07       	cpc	r21, r17
    2d2e:	24 f0       	brlt	.+8      	; 0x2d38 <dtoa_prf+0x278>
    2d30:	d6 01       	movw	r26, r12
    2d32:	8c 93       	st	X, r24
    2d34:	67 01       	movw	r12, r14
    2d36:	e2 cf       	rjmp	.-60     	; 0x2cfc <dtoa_prf+0x23c>
    2d38:	64 17       	cp	r22, r20
    2d3a:	75 07       	cpc	r23, r21
    2d3c:	39 f4       	brne	.+14     	; 0x2d4c <dtoa_prf+0x28c>
    2d3e:	96 33       	cpi	r25, 0x36	; 54
    2d40:	20 f4       	brcc	.+8      	; 0x2d4a <dtoa_prf+0x28a>
    2d42:	95 33       	cpi	r25, 0x35	; 53
    2d44:	19 f4       	brne	.+6      	; 0x2d4c <dtoa_prf+0x28c>
    2d46:	31 11       	cpse	r19, r1
    2d48:	01 c0       	rjmp	.+2      	; 0x2d4c <dtoa_prf+0x28c>
    2d4a:	81 e3       	ldi	r24, 0x31	; 49
    2d4c:	f6 01       	movw	r30, r12
    2d4e:	80 83       	st	Z, r24
    2d50:	f7 01       	movw	r30, r14
    2d52:	82 2f       	mov	r24, r18
    2d54:	90 e2       	ldi	r25, 0x20	; 32
    2d56:	88 23       	and	r24, r24
    2d58:	19 f0       	breq	.+6      	; 0x2d60 <dtoa_prf+0x2a0>
    2d5a:	91 93       	st	Z+, r25
    2d5c:	81 50       	subi	r24, 0x01	; 1
    2d5e:	fb cf       	rjmp	.-10     	; 0x2d56 <dtoa_prf+0x296>
    2d60:	f7 01       	movw	r30, r14
    2d62:	e2 0f       	add	r30, r18
    2d64:	f1 1d       	adc	r31, r1
    2d66:	10 82       	st	Z, r1
    2d68:	80 e0       	ldi	r24, 0x00	; 0
    2d6a:	90 e0       	ldi	r25, 0x00	; 0
    2d6c:	29 96       	adiw	r28, 0x09	; 9
    2d6e:	ec e0       	ldi	r30, 0x0C	; 12
    2d70:	0c 94 64 18 	jmp	0x30c8	; 0x30c8 <__epilogue_restores__+0xc>

00002d74 <__ftoa_engine>:
    2d74:	28 30       	cpi	r18, 0x08	; 8
    2d76:	08 f0       	brcs	.+2      	; 0x2d7a <__ftoa_engine+0x6>
    2d78:	27 e0       	ldi	r18, 0x07	; 7
    2d7a:	33 27       	eor	r19, r19
    2d7c:	da 01       	movw	r26, r20
    2d7e:	99 0f       	add	r25, r25
    2d80:	31 1d       	adc	r19, r1
    2d82:	87 fd       	sbrc	r24, 7
    2d84:	91 60       	ori	r25, 0x01	; 1
    2d86:	00 96       	adiw	r24, 0x00	; 0
    2d88:	61 05       	cpc	r22, r1
    2d8a:	71 05       	cpc	r23, r1
    2d8c:	39 f4       	brne	.+14     	; 0x2d9c <__ftoa_engine+0x28>
    2d8e:	32 60       	ori	r19, 0x02	; 2
    2d90:	2e 5f       	subi	r18, 0xFE	; 254
    2d92:	3d 93       	st	X+, r19
    2d94:	30 e3       	ldi	r19, 0x30	; 48
    2d96:	2a 95       	dec	r18
    2d98:	e1 f7       	brne	.-8      	; 0x2d92 <__ftoa_engine+0x1e>
    2d9a:	08 95       	ret
    2d9c:	9f 3f       	cpi	r25, 0xFF	; 255
    2d9e:	30 f0       	brcs	.+12     	; 0x2dac <__ftoa_engine+0x38>
    2da0:	80 38       	cpi	r24, 0x80	; 128
    2da2:	71 05       	cpc	r23, r1
    2da4:	61 05       	cpc	r22, r1
    2da6:	09 f0       	breq	.+2      	; 0x2daa <__ftoa_engine+0x36>
    2da8:	3c 5f       	subi	r19, 0xFC	; 252
    2daa:	3c 5f       	subi	r19, 0xFC	; 252
    2dac:	3d 93       	st	X+, r19
    2dae:	91 30       	cpi	r25, 0x01	; 1
    2db0:	08 f0       	brcs	.+2      	; 0x2db4 <__ftoa_engine+0x40>
    2db2:	80 68       	ori	r24, 0x80	; 128
    2db4:	91 1d       	adc	r25, r1
    2db6:	df 93       	push	r29
    2db8:	cf 93       	push	r28
    2dba:	1f 93       	push	r17
    2dbc:	0f 93       	push	r16
    2dbe:	ff 92       	push	r15
    2dc0:	ef 92       	push	r14
    2dc2:	19 2f       	mov	r17, r25
    2dc4:	98 7f       	andi	r25, 0xF8	; 248
    2dc6:	96 95       	lsr	r25
    2dc8:	e9 2f       	mov	r30, r25
    2dca:	96 95       	lsr	r25
    2dcc:	96 95       	lsr	r25
    2dce:	e9 0f       	add	r30, r25
    2dd0:	ff 27       	eor	r31, r31
    2dd2:	ee 52       	subi	r30, 0x2E	; 46
    2dd4:	ff 4f       	sbci	r31, 0xFF	; 255
    2dd6:	99 27       	eor	r25, r25
    2dd8:	33 27       	eor	r19, r19
    2dda:	ee 24       	eor	r14, r14
    2ddc:	ff 24       	eor	r15, r15
    2dde:	a7 01       	movw	r20, r14
    2de0:	e7 01       	movw	r28, r14
    2de2:	05 90       	lpm	r0, Z+
    2de4:	08 94       	sec
    2de6:	07 94       	ror	r0
    2de8:	28 f4       	brcc	.+10     	; 0x2df4 <__ftoa_engine+0x80>
    2dea:	36 0f       	add	r19, r22
    2dec:	e7 1e       	adc	r14, r23
    2dee:	f8 1e       	adc	r15, r24
    2df0:	49 1f       	adc	r20, r25
    2df2:	51 1d       	adc	r21, r1
    2df4:	66 0f       	add	r22, r22
    2df6:	77 1f       	adc	r23, r23
    2df8:	88 1f       	adc	r24, r24
    2dfa:	99 1f       	adc	r25, r25
    2dfc:	06 94       	lsr	r0
    2dfe:	a1 f7       	brne	.-24     	; 0x2de8 <__ftoa_engine+0x74>
    2e00:	05 90       	lpm	r0, Z+
    2e02:	07 94       	ror	r0
    2e04:	28 f4       	brcc	.+10     	; 0x2e10 <__ftoa_engine+0x9c>
    2e06:	e7 0e       	add	r14, r23
    2e08:	f8 1e       	adc	r15, r24
    2e0a:	49 1f       	adc	r20, r25
    2e0c:	56 1f       	adc	r21, r22
    2e0e:	c1 1d       	adc	r28, r1
    2e10:	77 0f       	add	r23, r23
    2e12:	88 1f       	adc	r24, r24
    2e14:	99 1f       	adc	r25, r25
    2e16:	66 1f       	adc	r22, r22
    2e18:	06 94       	lsr	r0
    2e1a:	a1 f7       	brne	.-24     	; 0x2e04 <__ftoa_engine+0x90>
    2e1c:	05 90       	lpm	r0, Z+
    2e1e:	07 94       	ror	r0
    2e20:	28 f4       	brcc	.+10     	; 0x2e2c <__ftoa_engine+0xb8>
    2e22:	f8 0e       	add	r15, r24
    2e24:	49 1f       	adc	r20, r25
    2e26:	56 1f       	adc	r21, r22
    2e28:	c7 1f       	adc	r28, r23
    2e2a:	d1 1d       	adc	r29, r1
    2e2c:	88 0f       	add	r24, r24
    2e2e:	99 1f       	adc	r25, r25
    2e30:	66 1f       	adc	r22, r22
    2e32:	77 1f       	adc	r23, r23
    2e34:	06 94       	lsr	r0
    2e36:	a1 f7       	brne	.-24     	; 0x2e20 <__ftoa_engine+0xac>
    2e38:	05 90       	lpm	r0, Z+
    2e3a:	07 94       	ror	r0
    2e3c:	20 f4       	brcc	.+8      	; 0x2e46 <__ftoa_engine+0xd2>
    2e3e:	49 0f       	add	r20, r25
    2e40:	56 1f       	adc	r21, r22
    2e42:	c7 1f       	adc	r28, r23
    2e44:	d8 1f       	adc	r29, r24
    2e46:	99 0f       	add	r25, r25
    2e48:	66 1f       	adc	r22, r22
    2e4a:	77 1f       	adc	r23, r23
    2e4c:	88 1f       	adc	r24, r24
    2e4e:	06 94       	lsr	r0
    2e50:	a9 f7       	brne	.-22     	; 0x2e3c <__ftoa_engine+0xc8>
    2e52:	84 91       	lpm	r24, Z
    2e54:	10 95       	com	r17
    2e56:	17 70       	andi	r17, 0x07	; 7
    2e58:	41 f0       	breq	.+16     	; 0x2e6a <__ftoa_engine+0xf6>
    2e5a:	d6 95       	lsr	r29
    2e5c:	c7 95       	ror	r28
    2e5e:	57 95       	ror	r21
    2e60:	47 95       	ror	r20
    2e62:	f7 94       	ror	r15
    2e64:	e7 94       	ror	r14
    2e66:	1a 95       	dec	r17
    2e68:	c1 f7       	brne	.-16     	; 0x2e5a <__ftoa_engine+0xe6>
    2e6a:	e8 e7       	ldi	r30, 0x78	; 120
    2e6c:	f0 e0       	ldi	r31, 0x00	; 0
    2e6e:	68 94       	set
    2e70:	15 90       	lpm	r1, Z+
    2e72:	15 91       	lpm	r17, Z+
    2e74:	35 91       	lpm	r19, Z+
    2e76:	65 91       	lpm	r22, Z+
    2e78:	95 91       	lpm	r25, Z+
    2e7a:	05 90       	lpm	r0, Z+
    2e7c:	7f e2       	ldi	r23, 0x2F	; 47
    2e7e:	73 95       	inc	r23
    2e80:	e1 18       	sub	r14, r1
    2e82:	f1 0a       	sbc	r15, r17
    2e84:	43 0b       	sbc	r20, r19
    2e86:	56 0b       	sbc	r21, r22
    2e88:	c9 0b       	sbc	r28, r25
    2e8a:	d0 09       	sbc	r29, r0
    2e8c:	c0 f7       	brcc	.-16     	; 0x2e7e <__ftoa_engine+0x10a>
    2e8e:	e1 0c       	add	r14, r1
    2e90:	f1 1e       	adc	r15, r17
    2e92:	43 1f       	adc	r20, r19
    2e94:	56 1f       	adc	r21, r22
    2e96:	c9 1f       	adc	r28, r25
    2e98:	d0 1d       	adc	r29, r0
    2e9a:	7e f4       	brtc	.+30     	; 0x2eba <__ftoa_engine+0x146>
    2e9c:	70 33       	cpi	r23, 0x30	; 48
    2e9e:	11 f4       	brne	.+4      	; 0x2ea4 <__ftoa_engine+0x130>
    2ea0:	8a 95       	dec	r24
    2ea2:	e6 cf       	rjmp	.-52     	; 0x2e70 <__ftoa_engine+0xfc>
    2ea4:	e8 94       	clt
    2ea6:	01 50       	subi	r16, 0x01	; 1
    2ea8:	30 f0       	brcs	.+12     	; 0x2eb6 <__ftoa_engine+0x142>
    2eaa:	08 0f       	add	r16, r24
    2eac:	0a f4       	brpl	.+2      	; 0x2eb0 <__ftoa_engine+0x13c>
    2eae:	00 27       	eor	r16, r16
    2eb0:	02 17       	cp	r16, r18
    2eb2:	08 f4       	brcc	.+2      	; 0x2eb6 <__ftoa_engine+0x142>
    2eb4:	20 2f       	mov	r18, r16
    2eb6:	23 95       	inc	r18
    2eb8:	02 2f       	mov	r16, r18
    2eba:	7a 33       	cpi	r23, 0x3A	; 58
    2ebc:	28 f0       	brcs	.+10     	; 0x2ec8 <__ftoa_engine+0x154>
    2ebe:	79 e3       	ldi	r23, 0x39	; 57
    2ec0:	7d 93       	st	X+, r23
    2ec2:	2a 95       	dec	r18
    2ec4:	e9 f7       	brne	.-6      	; 0x2ec0 <__ftoa_engine+0x14c>
    2ec6:	10 c0       	rjmp	.+32     	; 0x2ee8 <__ftoa_engine+0x174>
    2ec8:	7d 93       	st	X+, r23
    2eca:	2a 95       	dec	r18
    2ecc:	89 f6       	brne	.-94     	; 0x2e70 <__ftoa_engine+0xfc>
    2ece:	06 94       	lsr	r0
    2ed0:	97 95       	ror	r25
    2ed2:	67 95       	ror	r22
    2ed4:	37 95       	ror	r19
    2ed6:	17 95       	ror	r17
    2ed8:	17 94       	ror	r1
    2eda:	e1 18       	sub	r14, r1
    2edc:	f1 0a       	sbc	r15, r17
    2ede:	43 0b       	sbc	r20, r19
    2ee0:	56 0b       	sbc	r21, r22
    2ee2:	c9 0b       	sbc	r28, r25
    2ee4:	d0 09       	sbc	r29, r0
    2ee6:	98 f0       	brcs	.+38     	; 0x2f0e <__ftoa_engine+0x19a>
    2ee8:	23 95       	inc	r18
    2eea:	7e 91       	ld	r23, -X
    2eec:	73 95       	inc	r23
    2eee:	7a 33       	cpi	r23, 0x3A	; 58
    2ef0:	08 f0       	brcs	.+2      	; 0x2ef4 <__ftoa_engine+0x180>
    2ef2:	70 e3       	ldi	r23, 0x30	; 48
    2ef4:	7c 93       	st	X, r23
    2ef6:	20 13       	cpse	r18, r16
    2ef8:	b8 f7       	brcc	.-18     	; 0x2ee8 <__ftoa_engine+0x174>
    2efa:	7e 91       	ld	r23, -X
    2efc:	70 61       	ori	r23, 0x10	; 16
    2efe:	7d 93       	st	X+, r23
    2f00:	30 f0       	brcs	.+12     	; 0x2f0e <__ftoa_engine+0x19a>
    2f02:	83 95       	inc	r24
    2f04:	71 e3       	ldi	r23, 0x31	; 49
    2f06:	7d 93       	st	X+, r23
    2f08:	70 e3       	ldi	r23, 0x30	; 48
    2f0a:	2a 95       	dec	r18
    2f0c:	e1 f7       	brne	.-8      	; 0x2f06 <__ftoa_engine+0x192>
    2f0e:	11 24       	eor	r1, r1
    2f10:	ef 90       	pop	r14
    2f12:	ff 90       	pop	r15
    2f14:	0f 91       	pop	r16
    2f16:	1f 91       	pop	r17
    2f18:	cf 91       	pop	r28
    2f1a:	df 91       	pop	r29
    2f1c:	99 27       	eor	r25, r25
    2f1e:	87 fd       	sbrc	r24, 7
    2f20:	90 95       	com	r25
    2f22:	08 95       	ret

00002f24 <strnlen_P>:
    2f24:	fc 01       	movw	r30, r24
    2f26:	05 90       	lpm	r0, Z+
    2f28:	61 50       	subi	r22, 0x01	; 1
    2f2a:	70 40       	sbci	r23, 0x00	; 0
    2f2c:	01 10       	cpse	r0, r1
    2f2e:	d8 f7       	brcc	.-10     	; 0x2f26 <strnlen_P+0x2>
    2f30:	80 95       	com	r24
    2f32:	90 95       	com	r25
    2f34:	8e 0f       	add	r24, r30
    2f36:	9f 1f       	adc	r25, r31
    2f38:	08 95       	ret

00002f3a <strnlen>:
    2f3a:	fc 01       	movw	r30, r24
    2f3c:	61 50       	subi	r22, 0x01	; 1
    2f3e:	70 40       	sbci	r23, 0x00	; 0
    2f40:	01 90       	ld	r0, Z+
    2f42:	01 10       	cpse	r0, r1
    2f44:	d8 f7       	brcc	.-10     	; 0x2f3c <strnlen+0x2>
    2f46:	80 95       	com	r24
    2f48:	90 95       	com	r25
    2f4a:	8e 0f       	add	r24, r30
    2f4c:	9f 1f       	adc	r25, r31
    2f4e:	08 95       	ret

00002f50 <fputc>:
    2f50:	0f 93       	push	r16
    2f52:	1f 93       	push	r17
    2f54:	cf 93       	push	r28
    2f56:	df 93       	push	r29
    2f58:	fb 01       	movw	r30, r22
    2f5a:	23 81       	ldd	r18, Z+3	; 0x03
    2f5c:	21 fd       	sbrc	r18, 1
    2f5e:	03 c0       	rjmp	.+6      	; 0x2f66 <fputc+0x16>
    2f60:	8f ef       	ldi	r24, 0xFF	; 255
    2f62:	9f ef       	ldi	r25, 0xFF	; 255
    2f64:	2c c0       	rjmp	.+88     	; 0x2fbe <fputc+0x6e>
    2f66:	22 ff       	sbrs	r18, 2
    2f68:	16 c0       	rjmp	.+44     	; 0x2f96 <fputc+0x46>
    2f6a:	46 81       	ldd	r20, Z+6	; 0x06
    2f6c:	57 81       	ldd	r21, Z+7	; 0x07
    2f6e:	24 81       	ldd	r18, Z+4	; 0x04
    2f70:	35 81       	ldd	r19, Z+5	; 0x05
    2f72:	42 17       	cp	r20, r18
    2f74:	53 07       	cpc	r21, r19
    2f76:	44 f4       	brge	.+16     	; 0x2f88 <fputc+0x38>
    2f78:	a0 81       	ld	r26, Z
    2f7a:	b1 81       	ldd	r27, Z+1	; 0x01
    2f7c:	9d 01       	movw	r18, r26
    2f7e:	2f 5f       	subi	r18, 0xFF	; 255
    2f80:	3f 4f       	sbci	r19, 0xFF	; 255
    2f82:	31 83       	std	Z+1, r19	; 0x01
    2f84:	20 83       	st	Z, r18
    2f86:	8c 93       	st	X, r24
    2f88:	26 81       	ldd	r18, Z+6	; 0x06
    2f8a:	37 81       	ldd	r19, Z+7	; 0x07
    2f8c:	2f 5f       	subi	r18, 0xFF	; 255
    2f8e:	3f 4f       	sbci	r19, 0xFF	; 255
    2f90:	37 83       	std	Z+7, r19	; 0x07
    2f92:	26 83       	std	Z+6, r18	; 0x06
    2f94:	14 c0       	rjmp	.+40     	; 0x2fbe <fputc+0x6e>
    2f96:	8b 01       	movw	r16, r22
    2f98:	ec 01       	movw	r28, r24
    2f9a:	fb 01       	movw	r30, r22
    2f9c:	00 84       	ldd	r0, Z+8	; 0x08
    2f9e:	f1 85       	ldd	r31, Z+9	; 0x09
    2fa0:	e0 2d       	mov	r30, r0
    2fa2:	09 95       	icall
    2fa4:	89 2b       	or	r24, r25
    2fa6:	e1 f6       	brne	.-72     	; 0x2f60 <fputc+0x10>
    2fa8:	d8 01       	movw	r26, r16
    2faa:	16 96       	adiw	r26, 0x06	; 6
    2fac:	8d 91       	ld	r24, X+
    2fae:	9c 91       	ld	r25, X
    2fb0:	17 97       	sbiw	r26, 0x07	; 7
    2fb2:	01 96       	adiw	r24, 0x01	; 1
    2fb4:	17 96       	adiw	r26, 0x07	; 7
    2fb6:	9c 93       	st	X, r25
    2fb8:	8e 93       	st	-X, r24
    2fba:	16 97       	sbiw	r26, 0x06	; 6
    2fbc:	ce 01       	movw	r24, r28
    2fbe:	df 91       	pop	r29
    2fc0:	cf 91       	pop	r28
    2fc2:	1f 91       	pop	r17
    2fc4:	0f 91       	pop	r16
    2fc6:	08 95       	ret

00002fc8 <__ultoa_invert>:
    2fc8:	fa 01       	movw	r30, r20
    2fca:	aa 27       	eor	r26, r26
    2fcc:	28 30       	cpi	r18, 0x08	; 8
    2fce:	51 f1       	breq	.+84     	; 0x3024 <__ultoa_invert+0x5c>
    2fd0:	20 31       	cpi	r18, 0x10	; 16
    2fd2:	81 f1       	breq	.+96     	; 0x3034 <__ultoa_invert+0x6c>
    2fd4:	e8 94       	clt
    2fd6:	6f 93       	push	r22
    2fd8:	6e 7f       	andi	r22, 0xFE	; 254
    2fda:	6e 5f       	subi	r22, 0xFE	; 254
    2fdc:	7f 4f       	sbci	r23, 0xFF	; 255
    2fde:	8f 4f       	sbci	r24, 0xFF	; 255
    2fe0:	9f 4f       	sbci	r25, 0xFF	; 255
    2fe2:	af 4f       	sbci	r26, 0xFF	; 255
    2fe4:	b1 e0       	ldi	r27, 0x01	; 1
    2fe6:	3e d0       	rcall	.+124    	; 0x3064 <__ultoa_invert+0x9c>
    2fe8:	b4 e0       	ldi	r27, 0x04	; 4
    2fea:	3c d0       	rcall	.+120    	; 0x3064 <__ultoa_invert+0x9c>
    2fec:	67 0f       	add	r22, r23
    2fee:	78 1f       	adc	r23, r24
    2ff0:	89 1f       	adc	r24, r25
    2ff2:	9a 1f       	adc	r25, r26
    2ff4:	a1 1d       	adc	r26, r1
    2ff6:	68 0f       	add	r22, r24
    2ff8:	79 1f       	adc	r23, r25
    2ffa:	8a 1f       	adc	r24, r26
    2ffc:	91 1d       	adc	r25, r1
    2ffe:	a1 1d       	adc	r26, r1
    3000:	6a 0f       	add	r22, r26
    3002:	71 1d       	adc	r23, r1
    3004:	81 1d       	adc	r24, r1
    3006:	91 1d       	adc	r25, r1
    3008:	a1 1d       	adc	r26, r1
    300a:	20 d0       	rcall	.+64     	; 0x304c <__ultoa_invert+0x84>
    300c:	09 f4       	brne	.+2      	; 0x3010 <__ultoa_invert+0x48>
    300e:	68 94       	set
    3010:	3f 91       	pop	r19
    3012:	2a e0       	ldi	r18, 0x0A	; 10
    3014:	26 9f       	mul	r18, r22
    3016:	11 24       	eor	r1, r1
    3018:	30 19       	sub	r19, r0
    301a:	30 5d       	subi	r19, 0xD0	; 208
    301c:	31 93       	st	Z+, r19
    301e:	de f6       	brtc	.-74     	; 0x2fd6 <__ultoa_invert+0xe>
    3020:	cf 01       	movw	r24, r30
    3022:	08 95       	ret
    3024:	46 2f       	mov	r20, r22
    3026:	47 70       	andi	r20, 0x07	; 7
    3028:	40 5d       	subi	r20, 0xD0	; 208
    302a:	41 93       	st	Z+, r20
    302c:	b3 e0       	ldi	r27, 0x03	; 3
    302e:	0f d0       	rcall	.+30     	; 0x304e <__ultoa_invert+0x86>
    3030:	c9 f7       	brne	.-14     	; 0x3024 <__ultoa_invert+0x5c>
    3032:	f6 cf       	rjmp	.-20     	; 0x3020 <__ultoa_invert+0x58>
    3034:	46 2f       	mov	r20, r22
    3036:	4f 70       	andi	r20, 0x0F	; 15
    3038:	40 5d       	subi	r20, 0xD0	; 208
    303a:	4a 33       	cpi	r20, 0x3A	; 58
    303c:	18 f0       	brcs	.+6      	; 0x3044 <__ultoa_invert+0x7c>
    303e:	49 5d       	subi	r20, 0xD9	; 217
    3040:	31 fd       	sbrc	r19, 1
    3042:	40 52       	subi	r20, 0x20	; 32
    3044:	41 93       	st	Z+, r20
    3046:	02 d0       	rcall	.+4      	; 0x304c <__ultoa_invert+0x84>
    3048:	a9 f7       	brne	.-22     	; 0x3034 <__ultoa_invert+0x6c>
    304a:	ea cf       	rjmp	.-44     	; 0x3020 <__ultoa_invert+0x58>
    304c:	b4 e0       	ldi	r27, 0x04	; 4
    304e:	a6 95       	lsr	r26
    3050:	97 95       	ror	r25
    3052:	87 95       	ror	r24
    3054:	77 95       	ror	r23
    3056:	67 95       	ror	r22
    3058:	ba 95       	dec	r27
    305a:	c9 f7       	brne	.-14     	; 0x304e <__ultoa_invert+0x86>
    305c:	00 97       	sbiw	r24, 0x00	; 0
    305e:	61 05       	cpc	r22, r1
    3060:	71 05       	cpc	r23, r1
    3062:	08 95       	ret
    3064:	9b 01       	movw	r18, r22
    3066:	ac 01       	movw	r20, r24
    3068:	0a 2e       	mov	r0, r26
    306a:	06 94       	lsr	r0
    306c:	57 95       	ror	r21
    306e:	47 95       	ror	r20
    3070:	37 95       	ror	r19
    3072:	27 95       	ror	r18
    3074:	ba 95       	dec	r27
    3076:	c9 f7       	brne	.-14     	; 0x306a <__ultoa_invert+0xa2>
    3078:	62 0f       	add	r22, r18
    307a:	73 1f       	adc	r23, r19
    307c:	84 1f       	adc	r24, r20
    307e:	95 1f       	adc	r25, r21
    3080:	a0 1d       	adc	r26, r0
    3082:	08 95       	ret

00003084 <__prologue_saves__>:
    3084:	2f 92       	push	r2
    3086:	3f 92       	push	r3
    3088:	4f 92       	push	r4
    308a:	5f 92       	push	r5
    308c:	6f 92       	push	r6
    308e:	7f 92       	push	r7
    3090:	8f 92       	push	r8
    3092:	9f 92       	push	r9
    3094:	af 92       	push	r10
    3096:	bf 92       	push	r11
    3098:	cf 92       	push	r12
    309a:	df 92       	push	r13
    309c:	ef 92       	push	r14
    309e:	ff 92       	push	r15
    30a0:	0f 93       	push	r16
    30a2:	1f 93       	push	r17
    30a4:	cf 93       	push	r28
    30a6:	df 93       	push	r29
    30a8:	cd b7       	in	r28, 0x3d	; 61
    30aa:	de b7       	in	r29, 0x3e	; 62
    30ac:	ca 1b       	sub	r28, r26
    30ae:	db 0b       	sbc	r29, r27
    30b0:	0f b6       	in	r0, 0x3f	; 63
    30b2:	f8 94       	cli
    30b4:	de bf       	out	0x3e, r29	; 62
    30b6:	0f be       	out	0x3f, r0	; 63
    30b8:	cd bf       	out	0x3d, r28	; 61
    30ba:	09 94       	ijmp

000030bc <__epilogue_restores__>:
    30bc:	2a 88       	ldd	r2, Y+18	; 0x12
    30be:	39 88       	ldd	r3, Y+17	; 0x11
    30c0:	48 88       	ldd	r4, Y+16	; 0x10
    30c2:	5f 84       	ldd	r5, Y+15	; 0x0f
    30c4:	6e 84       	ldd	r6, Y+14	; 0x0e
    30c6:	7d 84       	ldd	r7, Y+13	; 0x0d
    30c8:	8c 84       	ldd	r8, Y+12	; 0x0c
    30ca:	9b 84       	ldd	r9, Y+11	; 0x0b
    30cc:	aa 84       	ldd	r10, Y+10	; 0x0a
    30ce:	b9 84       	ldd	r11, Y+9	; 0x09
    30d0:	c8 84       	ldd	r12, Y+8	; 0x08
    30d2:	df 80       	ldd	r13, Y+7	; 0x07
    30d4:	ee 80       	ldd	r14, Y+6	; 0x06
    30d6:	fd 80       	ldd	r15, Y+5	; 0x05
    30d8:	0c 81       	ldd	r16, Y+4	; 0x04
    30da:	1b 81       	ldd	r17, Y+3	; 0x03
    30dc:	aa 81       	ldd	r26, Y+2	; 0x02
    30de:	b9 81       	ldd	r27, Y+1	; 0x01
    30e0:	ce 0f       	add	r28, r30
    30e2:	d1 1d       	adc	r29, r1
    30e4:	0f b6       	in	r0, 0x3f	; 63
    30e6:	f8 94       	cli
    30e8:	de bf       	out	0x3e, r29	; 62
    30ea:	0f be       	out	0x3f, r0	; 63
    30ec:	cd bf       	out	0x3d, r28	; 61
    30ee:	ed 01       	movw	r28, r26
    30f0:	08 95       	ret

000030f2 <_exit>:
    30f2:	f8 94       	cli

000030f4 <__stop_program>:
    30f4:	ff cf       	rjmp	.-2      	; 0x30f4 <__stop_program>
