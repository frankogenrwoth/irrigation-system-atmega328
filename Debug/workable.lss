
workable.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000370  00800100  00002884  00002918  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002884  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000062  00800470  00800470  00002c88  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002c88  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002ce4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a8  00000000  00000000  00002d24  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000029c6  00000000  00000000  00002ecc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009d4  00000000  00000000  00005892  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000144a  00000000  00000000  00006266  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005e4  00000000  00000000  000076b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a3a  00000000  00000000  00007c94  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001a57  00000000  00000000  000086ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b0  00000000  00000000  0000a125  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b9 00 	jmp	0x172	; 0x172 <__ctors_end>
       4:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
       8:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
       c:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
      10:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
      14:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
      18:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
      1c:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
      20:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
      24:	0c 94 6d 0b 	jmp	0x16da	; 0x16da <__vector_9>
      28:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
      2c:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
      30:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
      34:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
      38:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
      3c:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
      40:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
      44:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
      48:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
      4c:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
      50:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
      54:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
      58:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
      5c:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
      60:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
      64:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
      68:	59 06       	cpc	r5, r25
      6a:	77 06       	cpc	r7, r23
      6c:	95 06       	cpc	r9, r21
      6e:	b3 06       	cpc	r11, r19
      70:	d1 06       	cpc	r13, r17
      72:	6f 07       	cpc	r22, r31
      74:	ca 07       	cpc	r28, r26
      76:	ee 07       	cpc	r30, r30

00000078 <__trampolines_end>:
      78:	00 40       	sbci	r16, 0x00	; 0
      7a:	7a 10       	cpse	r7, r10
      7c:	f3 5a       	subi	r31, 0xA3	; 163
      7e:	00 a0       	ldd	r0, Z+32	; 0x20
      80:	72 4e       	sbci	r23, 0xE2	; 226
      82:	18 09       	sbc	r17, r8
      84:	00 10       	cpse	r0, r0
      86:	a5 d4       	rcall	.+2378   	; 0x9d2 <get_tank_capacity_at_height+0x1e>
      88:	e8 00       	.word	0x00e8	; ????
      8a:	00 e8       	ldi	r16, 0x80	; 128
      8c:	76 48       	sbci	r23, 0x86	; 134
      8e:	17 00       	.word	0x0017	; ????
      90:	00 e4       	ldi	r16, 0x40	; 64
      92:	0b 54       	subi	r16, 0x4B	; 75
      94:	02 00       	.word	0x0002	; ????
      96:	00 ca       	rjmp	.-3072   	; 0xfffff498 <__eeprom_end+0xff7ef498>
      98:	9a 3b       	cpi	r25, 0xBA	; 186
      9a:	00 00       	nop
      9c:	00 e1       	ldi	r16, 0x10	; 16
      9e:	f5 05       	cpc	r31, r5
      a0:	00 00       	nop
      a2:	80 96       	adiw	r24, 0x20	; 32
      a4:	98 00       	.word	0x0098	; ????
      a6:	00 00       	nop
      a8:	40 42       	sbci	r20, 0x20	; 32
      aa:	0f 00       	.word	0x000f	; ????
      ac:	00 00       	nop
      ae:	a0 86       	std	Z+8, r10	; 0x08
      b0:	01 00       	.word	0x0001	; ????
      b2:	00 00       	nop
      b4:	10 27       	eor	r17, r16
      b6:	00 00       	nop
      b8:	00 00       	nop
      ba:	e8 03       	fmulsu	r22, r16
      bc:	00 00       	nop
      be:	00 00       	nop
      c0:	64 00       	.word	0x0064	; ????
      c2:	00 00       	nop
      c4:	00 00       	nop
      c6:	0a 00       	.word	0x000a	; ????
      c8:	00 00       	nop
      ca:	00 00       	nop
      cc:	01 00       	.word	0x0001	; ????
      ce:	00 00       	nop
      d0:	00 00       	nop
      d2:	2c 76       	andi	r18, 0x6C	; 108
      d4:	d8 88       	ldd	r13, Y+16	; 0x10
      d6:	dc 67       	ori	r29, 0x7C	; 124
      d8:	4f 08       	sbc	r4, r15
      da:	23 df       	rcall	.-442    	; 0xffffff22 <__eeprom_end+0xff7eff22>
      dc:	c1 df       	rcall	.-126    	; 0x60 <__SREG__+0x21>
      de:	ae 59       	subi	r26, 0x9E	; 158
      e0:	e1 b1       	in	r30, 0x01	; 1
      e2:	b7 96       	adiw	r30, 0x27	; 39
      e4:	e5 e3       	ldi	r30, 0x35	; 53
      e6:	e4 53       	subi	r30, 0x34	; 52
      e8:	c6 3a       	cpi	r28, 0xA6	; 166
      ea:	e6 51       	subi	r30, 0x16	; 22
      ec:	99 76       	andi	r25, 0x69	; 105
      ee:	96 e8       	ldi	r25, 0x86	; 134
      f0:	e6 c2       	rjmp	.+1484   	; 0x6be <DS18B20_read_bit+0x20>
      f2:	84 26       	eor	r8, r20
      f4:	eb 89       	ldd	r30, Y+19	; 0x13
      f6:	8c 9b       	sbis	0x11, 4	; 17
      f8:	62 ed       	ldi	r22, 0xD2	; 210
      fa:	40 7c       	andi	r20, 0xC0	; 192
      fc:	6f fc       	.word	0xfc6f	; ????
      fe:	ef bc       	out	0x2f, r14	; 47
     100:	9c 9f       	mul	r25, r28
     102:	40 f2       	brcs	.-112    	; 0x94 <__trampolines_end+0x1c>
     104:	ba a5       	ldd	r27, Y+42	; 0x2a
     106:	6f a5       	ldd	r22, Y+47	; 0x2f
     108:	f4 90       	lpm	r15, Z
     10a:	05 5a       	subi	r16, 0xA5	; 165
     10c:	2a f7       	brpl	.-54     	; 0xd8 <__trampolines_end+0x60>
     10e:	5c 93       	st	X, r21
     110:	6b 6c       	ori	r22, 0xCB	; 203
     112:	f9 67       	ori	r31, 0x79	; 121
     114:	6d c1       	rjmp	.+730    	; 0x3f0 <peekRear+0x32>
     116:	1b fc       	.word	0xfc1b	; ????
     118:	e0 e4       	ldi	r30, 0x40	; 64
     11a:	0d 47       	sbci	r16, 0x7D	; 125
     11c:	fe f5       	brtc	.+126    	; 0x19c <.do_clear_bss_loop>
     11e:	20 e6       	ldi	r18, 0x60	; 96
     120:	b5 00       	.word	0x00b5	; ????
     122:	d0 ed       	ldi	r29, 0xD0	; 208
     124:	90 2e       	mov	r9, r16
     126:	03 00       	.word	0x0003	; ????
     128:	94 35       	cpi	r25, 0x54	; 84
     12a:	77 05       	cpc	r23, r7
     12c:	00 80       	ld	r0, Z
     12e:	84 1e       	adc	r8, r20
     130:	08 00       	.word	0x0008	; ????
     132:	00 20       	and	r0, r0
     134:	4e 0a       	sbc	r4, r30
     136:	00 00       	nop
     138:	00 c8       	rjmp	.-4096   	; 0xfffff13a <__eeprom_end+0xff7ef13a>
     13a:	0c 33       	cpi	r16, 0x3C	; 60
     13c:	33 33       	cpi	r19, 0x33	; 51
     13e:	33 0f       	add	r19, r19
     140:	98 6e       	ori	r25, 0xE8	; 232
     142:	12 83       	std	Z+2, r17	; 0x02
     144:	11 41       	sbci	r17, 0x11	; 17
     146:	ef 8d       	ldd	r30, Y+31	; 0x1f
     148:	21 14       	cp	r2, r1
     14a:	89 3b       	cpi	r24, 0xB9	; 185
     14c:	e6 55       	subi	r30, 0x56	; 86
     14e:	16 cf       	rjmp	.-468    	; 0xffffff7c <__eeprom_end+0xff7eff7c>
     150:	fe e6       	ldi	r31, 0x6E	; 110
     152:	db 18       	sub	r13, r11
     154:	d1 84       	ldd	r13, Z+9	; 0x09
     156:	4b 38       	cpi	r20, 0x8B	; 139
     158:	1b f7       	brvc	.-58     	; 0x120 <__trampolines_end+0xa8>
     15a:	7c 1d       	adc	r23, r12
     15c:	90 1d       	adc	r25, r0
     15e:	a4 bb       	out	0x14, r26	; 20
     160:	e4 24       	eor	r14, r4
     162:	20 32       	cpi	r18, 0x20	; 32
     164:	84 72       	andi	r24, 0x24	; 36
     166:	5e 22       	and	r5, r30
     168:	81 00       	.word	0x0081	; ????
     16a:	c9 f1       	breq	.+114    	; 0x1de <format_float+0x2e>
     16c:	24 ec       	ldi	r18, 0xC4	; 196
     16e:	a1 e5       	ldi	r26, 0x51	; 81
     170:	3d 27       	eor	r19, r29

00000172 <__ctors_end>:
     172:	11 24       	eor	r1, r1
     174:	1f be       	out	0x3f, r1	; 63
     176:	cf ef       	ldi	r28, 0xFF	; 255
     178:	d8 e0       	ldi	r29, 0x08	; 8
     17a:	de bf       	out	0x3e, r29	; 62
     17c:	cd bf       	out	0x3d, r28	; 61

0000017e <__do_copy_data>:
     17e:	14 e0       	ldi	r17, 0x04	; 4
     180:	a0 e0       	ldi	r26, 0x00	; 0
     182:	b1 e0       	ldi	r27, 0x01	; 1
     184:	e4 e8       	ldi	r30, 0x84	; 132
     186:	f8 e2       	ldi	r31, 0x28	; 40
     188:	02 c0       	rjmp	.+4      	; 0x18e <__do_copy_data+0x10>
     18a:	05 90       	lpm	r0, Z+
     18c:	0d 92       	st	X+, r0
     18e:	a0 37       	cpi	r26, 0x70	; 112
     190:	b1 07       	cpc	r27, r17
     192:	d9 f7       	brne	.-10     	; 0x18a <__do_copy_data+0xc>

00000194 <__do_clear_bss>:
     194:	24 e0       	ldi	r18, 0x04	; 4
     196:	a0 e7       	ldi	r26, 0x70	; 112
     198:	b4 e0       	ldi	r27, 0x04	; 4
     19a:	01 c0       	rjmp	.+2      	; 0x19e <.do_clear_bss_start>

0000019c <.do_clear_bss_loop>:
     19c:	1d 92       	st	X+, r1

0000019e <.do_clear_bss_start>:
     19e:	a2 3d       	cpi	r26, 0xD2	; 210
     1a0:	b2 07       	cpc	r27, r18
     1a2:	e1 f7       	brne	.-8      	; 0x19c <.do_clear_bss_loop>
     1a4:	0e 94 a5 0b 	call	0x174a	; 0x174a <main>
     1a8:	0c 94 40 14 	jmp	0x2880	; 0x2880 <_exit>

000001ac <__bad_interrupt>:
     1ac:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001b0 <format_float>:
{
    while (*str)
    {
        LCD_1602A_load_data(*str++);
    }
}
     1b0:	af 92       	push	r10
     1b2:	bf 92       	push	r11
     1b4:	cf 92       	push	r12
     1b6:	df 92       	push	r13
     1b8:	ef 92       	push	r14
     1ba:	ff 92       	push	r15
     1bc:	0f 93       	push	r16
     1be:	1f 93       	push	r17
     1c0:	cf 93       	push	r28
     1c2:	df 93       	push	r29
     1c4:	cd b7       	in	r28, 0x3d	; 61
     1c6:	de b7       	in	r29, 0x3e	; 62
     1c8:	68 97       	sbiw	r28, 0x18	; 24
     1ca:	0f b6       	in	r0, 0x3f	; 63
     1cc:	f8 94       	cli
     1ce:	de bf       	out	0x3e, r29	; 62
     1d0:	0f be       	out	0x3f, r0	; 63
     1d2:	cd bf       	out	0x3d, r28	; 61
     1d4:	d8 2e       	mov	r13, r24
     1d6:	c9 2e       	mov	r12, r25
     1d8:	b6 2e       	mov	r11, r22
     1da:	a7 2e       	mov	r10, r23
     1dc:	ca 01       	movw	r24, r20
     1de:	b9 01       	movw	r22, r18
     1e0:	20 2f       	mov	r18, r16
     1e2:	8e 01       	movw	r16, r28
     1e4:	0f 5f       	subi	r16, 0xFF	; 255
     1e6:	1f 4f       	sbci	r17, 0xFF	; 255
     1e8:	40 e0       	ldi	r20, 0x00	; 0
     1ea:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <dtostrf>
     1ee:	e1 14       	cp	r14, r1
     1f0:	f1 04       	cpc	r15, r1
     1f2:	c1 f0       	breq	.+48     	; 0x224 <format_float+0x74>
     1f4:	f7 01       	movw	r30, r14
     1f6:	80 81       	ld	r24, Z
     1f8:	88 23       	and	r24, r24
     1fa:	a1 f0       	breq	.+40     	; 0x224 <format_float+0x74>
     1fc:	ff 92       	push	r15
     1fe:	ef 92       	push	r14
     200:	1f 93       	push	r17
     202:	0f 93       	push	r16
     204:	88 e6       	ldi	r24, 0x68	; 104
     206:	91 e0       	ldi	r25, 0x01	; 1
     208:	9f 93       	push	r25
     20a:	8f 93       	push	r24
     20c:	af 92       	push	r10
     20e:	bf 92       	push	r11
     210:	cf 92       	push	r12
     212:	df 92       	push	r13
     214:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <snprintf>
     218:	0f b6       	in	r0, 0x3f	; 63
     21a:	f8 94       	cli
     21c:	de bf       	out	0x3e, r29	; 62
     21e:	0f be       	out	0x3f, r0	; 63
     220:	cd bf       	out	0x3d, r28	; 61
     222:	13 c0       	rjmp	.+38     	; 0x24a <format_float+0x9a>
     224:	ce 01       	movw	r24, r28
     226:	01 96       	adiw	r24, 0x01	; 1
     228:	9f 93       	push	r25
     22a:	8f 93       	push	r24
     22c:	8b e6       	ldi	r24, 0x6B	; 107
     22e:	91 e0       	ldi	r25, 0x01	; 1
     230:	9f 93       	push	r25
     232:	8f 93       	push	r24
     234:	af 92       	push	r10
     236:	bf 92       	push	r11
     238:	cf 92       	push	r12
     23a:	df 92       	push	r13
     23c:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <snprintf>
     240:	0f b6       	in	r0, 0x3f	; 63
     242:	f8 94       	cli
     244:	de bf       	out	0x3e, r29	; 62
     246:	0f be       	out	0x3f, r0	; 63
     248:	cd bf       	out	0x3d, r28	; 61
     24a:	68 96       	adiw	r28, 0x18	; 24
     24c:	0f b6       	in	r0, 0x3f	; 63
     24e:	f8 94       	cli
     250:	de bf       	out	0x3e, r29	; 62
     252:	0f be       	out	0x3f, r0	; 63
     254:	cd bf       	out	0x3d, r28	; 61
     256:	df 91       	pop	r29
     258:	cf 91       	pop	r28
     25a:	1f 91       	pop	r17
     25c:	0f 91       	pop	r16
     25e:	ff 90       	pop	r15
     260:	ef 90       	pop	r14
     262:	df 90       	pop	r13
     264:	cf 90       	pop	r12
     266:	bf 90       	pop	r11
     268:	af 90       	pop	r10
     26a:	08 95       	ret

0000026c <initQueue>:
     26c:	2f ef       	ldi	r18, 0xFF	; 255
     26e:	3f ef       	ldi	r19, 0xFF	; 255
     270:	fc 01       	movw	r30, r24
     272:	35 8b       	std	Z+21, r19	; 0x15
     274:	24 8b       	std	Z+20, r18	; 0x14
     276:	37 8b       	std	Z+23, r19	; 0x17
     278:	26 8b       	std	Z+22, r18	; 0x16
     27a:	08 95       	ret

0000027c <isEmpty>:
     27c:	fc 01       	movw	r30, r24
     27e:	24 89       	ldd	r18, Z+20	; 0x14
     280:	35 89       	ldd	r19, Z+21	; 0x15
     282:	81 e0       	ldi	r24, 0x01	; 1
     284:	2f 3f       	cpi	r18, 0xFF	; 255
     286:	3f 4f       	sbci	r19, 0xFF	; 255
     288:	09 f0       	breq	.+2      	; 0x28c <isEmpty+0x10>
     28a:	80 e0       	ldi	r24, 0x00	; 0
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	08 95       	ret

00000290 <isFull>:
     290:	fc 01       	movw	r30, r24
     292:	86 89       	ldd	r24, Z+22	; 0x16
     294:	97 89       	ldd	r25, Z+23	; 0x17
     296:	01 96       	adiw	r24, 0x01	; 1
     298:	6a e0       	ldi	r22, 0x0A	; 10
     29a:	70 e0       	ldi	r23, 0x00	; 0
     29c:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <__divmodhi4>
     2a0:	ac 01       	movw	r20, r24
     2a2:	24 89       	ldd	r18, Z+20	; 0x14
     2a4:	35 89       	ldd	r19, Z+21	; 0x15
     2a6:	81 e0       	ldi	r24, 0x01	; 1
     2a8:	42 17       	cp	r20, r18
     2aa:	53 07       	cpc	r21, r19
     2ac:	09 f0       	breq	.+2      	; 0x2b0 <isFull+0x20>
     2ae:	80 e0       	ldi	r24, 0x00	; 0
     2b0:	90 e0       	ldi	r25, 0x00	; 0
     2b2:	08 95       	ret

000002b4 <enqueue>:
     2b4:	0f 93       	push	r16
     2b6:	1f 93       	push	r17
     2b8:	cf 93       	push	r28
     2ba:	df 93       	push	r29
     2bc:	ec 01       	movw	r28, r24
     2be:	16 2f       	mov	r17, r22
     2c0:	07 2f       	mov	r16, r23
     2c2:	0e 94 48 01 	call	0x290	; 0x290 <isFull>
     2c6:	89 2b       	or	r24, r25
     2c8:	29 f1       	breq	.+74     	; 0x314 <enqueue+0x60>
     2ca:	8c 89       	ldd	r24, Y+20	; 0x14
     2cc:	9d 89       	ldd	r25, Y+21	; 0x15
     2ce:	01 96       	adiw	r24, 0x01	; 1
     2d0:	2a e0       	ldi	r18, 0x0A	; 10
     2d2:	30 e0       	ldi	r19, 0x00	; 0
     2d4:	b9 01       	movw	r22, r18
     2d6:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <__divmodhi4>
     2da:	9d 8b       	std	Y+21, r25	; 0x15
     2dc:	8c 8b       	std	Y+20, r24	; 0x14
     2de:	8e 89       	ldd	r24, Y+22	; 0x16
     2e0:	9f 89       	ldd	r25, Y+23	; 0x17
     2e2:	01 96       	adiw	r24, 0x01	; 1
     2e4:	b9 01       	movw	r22, r18
     2e6:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <__divmodhi4>
     2ea:	9f 8b       	std	Y+23, r25	; 0x17
     2ec:	8e 8b       	std	Y+22, r24	; 0x16
     2ee:	88 0f       	add	r24, r24
     2f0:	99 1f       	adc	r25, r25
     2f2:	c8 0f       	add	r28, r24
     2f4:	d9 1f       	adc	r29, r25
     2f6:	18 83       	st	Y, r17
     2f8:	09 83       	std	Y+1, r16	; 0x01
     2fa:	0f 93       	push	r16
     2fc:	1f 93       	push	r17
     2fe:	8e e7       	ldi	r24, 0x7E	; 126
     300:	91 e0       	ldi	r25, 0x01	; 1
     302:	9f 93       	push	r25
     304:	8f 93       	push	r24
     306:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <printf>
     30a:	0f 90       	pop	r0
     30c:	0f 90       	pop	r0
     30e:	0f 90       	pop	r0
     310:	0f 90       	pop	r0
     312:	33 c0       	rjmp	.+102    	; 0x37a <enqueue+0xc6>
     314:	ce 01       	movw	r24, r28
     316:	0e 94 3e 01 	call	0x27c	; 0x27c <isEmpty>
     31a:	89 2b       	or	r24, r25
     31c:	99 f0       	breq	.+38     	; 0x344 <enqueue+0x90>
     31e:	1d 8a       	std	Y+21, r1	; 0x15
     320:	1c 8a       	std	Y+20, r1	; 0x14
     322:	1f 8a       	std	Y+23, r1	; 0x17
     324:	1e 8a       	std	Y+22, r1	; 0x16
     326:	18 83       	st	Y, r17
     328:	09 83       	std	Y+1, r16	; 0x01
     32a:	0f 93       	push	r16
     32c:	1f 93       	push	r17
     32e:	85 ea       	ldi	r24, 0xA5	; 165
     330:	91 e0       	ldi	r25, 0x01	; 1
     332:	9f 93       	push	r25
     334:	8f 93       	push	r24
     336:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <printf>
     33a:	0f 90       	pop	r0
     33c:	0f 90       	pop	r0
     33e:	0f 90       	pop	r0
     340:	0f 90       	pop	r0
     342:	1b c0       	rjmp	.+54     	; 0x37a <enqueue+0xc6>
     344:	8e 89       	ldd	r24, Y+22	; 0x16
     346:	9f 89       	ldd	r25, Y+23	; 0x17
     348:	01 96       	adiw	r24, 0x01	; 1
     34a:	6a e0       	ldi	r22, 0x0A	; 10
     34c:	70 e0       	ldi	r23, 0x00	; 0
     34e:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <__divmodhi4>
     352:	9f 8b       	std	Y+23, r25	; 0x17
     354:	8e 8b       	std	Y+22, r24	; 0x16
     356:	88 0f       	add	r24, r24
     358:	99 1f       	adc	r25, r25
     35a:	c8 0f       	add	r28, r24
     35c:	d9 1f       	adc	r29, r25
     35e:	18 83       	st	Y, r17
     360:	09 83       	std	Y+1, r16	; 0x01
     362:	0f 93       	push	r16
     364:	1f 93       	push	r17
     366:	85 ea       	ldi	r24, 0xA5	; 165
     368:	91 e0       	ldi	r25, 0x01	; 1
     36a:	9f 93       	push	r25
     36c:	8f 93       	push	r24
     36e:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <printf>
     372:	0f 90       	pop	r0
     374:	0f 90       	pop	r0
     376:	0f 90       	pop	r0
     378:	0f 90       	pop	r0
     37a:	df 91       	pop	r29
     37c:	cf 91       	pop	r28
     37e:	1f 91       	pop	r17
     380:	0f 91       	pop	r16
     382:	08 95       	ret

00000384 <peekFront>:
     384:	0f 93       	push	r16
     386:	1f 93       	push	r17
     388:	cf 93       	push	r28
     38a:	df 93       	push	r29
     38c:	ec 01       	movw	r28, r24
     38e:	8b 01       	movw	r16, r22
     390:	0e 94 3e 01 	call	0x27c	; 0x27c <isEmpty>
     394:	00 97       	sbiw	r24, 0x00	; 0
     396:	61 f4       	brne	.+24     	; 0x3b0 <peekFront+0x2c>
     398:	ec 89       	ldd	r30, Y+20	; 0x14
     39a:	fd 89       	ldd	r31, Y+21	; 0x15
     39c:	ee 0f       	add	r30, r30
     39e:	ff 1f       	adc	r31, r31
     3a0:	ec 0f       	add	r30, r28
     3a2:	fd 1f       	adc	r31, r29
     3a4:	20 81       	ld	r18, Z
     3a6:	31 81       	ldd	r19, Z+1	; 0x01
     3a8:	f8 01       	movw	r30, r16
     3aa:	31 83       	std	Z+1, r19	; 0x01
     3ac:	20 83       	st	Z, r18
     3ae:	02 c0       	rjmp	.+4      	; 0x3b4 <peekFront+0x30>
     3b0:	8f ef       	ldi	r24, 0xFF	; 255
     3b2:	9f ef       	ldi	r25, 0xFF	; 255
     3b4:	df 91       	pop	r29
     3b6:	cf 91       	pop	r28
     3b8:	1f 91       	pop	r17
     3ba:	0f 91       	pop	r16
     3bc:	08 95       	ret

000003be <peekRear>:
     3be:	0f 93       	push	r16
     3c0:	1f 93       	push	r17
     3c2:	cf 93       	push	r28
     3c4:	df 93       	push	r29
     3c6:	ec 01       	movw	r28, r24
     3c8:	8b 01       	movw	r16, r22
     3ca:	0e 94 3e 01 	call	0x27c	; 0x27c <isEmpty>
     3ce:	00 97       	sbiw	r24, 0x00	; 0
     3d0:	61 f4       	brne	.+24     	; 0x3ea <peekRear+0x2c>
     3d2:	ee 89       	ldd	r30, Y+22	; 0x16
     3d4:	ff 89       	ldd	r31, Y+23	; 0x17
     3d6:	ee 0f       	add	r30, r30
     3d8:	ff 1f       	adc	r31, r31
     3da:	ec 0f       	add	r30, r28
     3dc:	fd 1f       	adc	r31, r29
     3de:	20 81       	ld	r18, Z
     3e0:	31 81       	ldd	r19, Z+1	; 0x01
     3e2:	f8 01       	movw	r30, r16
     3e4:	31 83       	std	Z+1, r19	; 0x01
     3e6:	20 83       	st	Z, r18
     3e8:	02 c0       	rjmp	.+4      	; 0x3ee <peekRear+0x30>
     3ea:	8f ef       	ldi	r24, 0xFF	; 255
     3ec:	9f ef       	ldi	r25, 0xFF	; 255
     3ee:	df 91       	pop	r29
     3f0:	cf 91       	pop	r28
     3f2:	1f 91       	pop	r17
     3f4:	0f 91       	pop	r16
     3f6:	08 95       	ret

000003f8 <initStrQueue>:
     3f8:	2f ef       	ldi	r18, 0xFF	; 255
     3fa:	3f ef       	ldi	r19, 0xFF	; 255
     3fc:	fc 01       	movw	r30, r24
     3fe:	35 8b       	std	Z+21, r19	; 0x15
     400:	24 8b       	std	Z+20, r18	; 0x14
     402:	37 8b       	std	Z+23, r19	; 0x17
     404:	26 8b       	std	Z+22, r18	; 0x16
     406:	20 e0       	ldi	r18, 0x00	; 0
     408:	30 e0       	ldi	r19, 0x00	; 0
     40a:	09 c0       	rjmp	.+18     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
     40c:	f9 01       	movw	r30, r18
     40e:	ee 0f       	add	r30, r30
     410:	ff 1f       	adc	r31, r31
     412:	e8 0f       	add	r30, r24
     414:	f9 1f       	adc	r31, r25
     416:	11 82       	std	Z+1, r1	; 0x01
     418:	10 82       	st	Z, r1
     41a:	2f 5f       	subi	r18, 0xFF	; 255
     41c:	3f 4f       	sbci	r19, 0xFF	; 255
     41e:	2a 30       	cpi	r18, 0x0A	; 10
     420:	31 05       	cpc	r19, r1
     422:	a4 f3       	brlt	.-24     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
     424:	08 95       	ret

00000426 <isStrQueueEmpty>:
     426:	fc 01       	movw	r30, r24
     428:	24 89       	ldd	r18, Z+20	; 0x14
     42a:	35 89       	ldd	r19, Z+21	; 0x15
     42c:	81 e0       	ldi	r24, 0x01	; 1
     42e:	2f 3f       	cpi	r18, 0xFF	; 255
     430:	3f 4f       	sbci	r19, 0xFF	; 255
     432:	09 f0       	breq	.+2      	; 0x436 <isStrQueueEmpty+0x10>
     434:	80 e0       	ldi	r24, 0x00	; 0
     436:	90 e0       	ldi	r25, 0x00	; 0
     438:	08 95       	ret

0000043a <peekFrontStr>:
     43a:	0f 93       	push	r16
     43c:	1f 93       	push	r17
     43e:	cf 93       	push	r28
     440:	df 93       	push	r29
     442:	ec 01       	movw	r28, r24
     444:	8b 01       	movw	r16, r22
     446:	0e 94 13 02 	call	0x426	; 0x426 <isStrQueueEmpty>
     44a:	00 97       	sbiw	r24, 0x00	; 0
     44c:	61 f4       	brne	.+24     	; 0x466 <peekFrontStr+0x2c>
     44e:	ec 89       	ldd	r30, Y+20	; 0x14
     450:	fd 89       	ldd	r31, Y+21	; 0x15
     452:	ee 0f       	add	r30, r30
     454:	ff 1f       	adc	r31, r31
     456:	ec 0f       	add	r30, r28
     458:	fd 1f       	adc	r31, r29
     45a:	20 81       	ld	r18, Z
     45c:	31 81       	ldd	r19, Z+1	; 0x01
     45e:	f8 01       	movw	r30, r16
     460:	31 83       	std	Z+1, r19	; 0x01
     462:	20 83       	st	Z, r18
     464:	02 c0       	rjmp	.+4      	; 0x46a <peekFrontStr+0x30>
     466:	8f ef       	ldi	r24, 0xFF	; 255
     468:	9f ef       	ldi	r25, 0xFF	; 255
     46a:	df 91       	pop	r29
     46c:	cf 91       	pop	r28
     46e:	1f 91       	pop	r17
     470:	0f 91       	pop	r16
     472:	08 95       	ret

00000474 <TIMER0_INIT>:
     474:	87 b1       	in	r24, 0x07	; 7
     476:	84 60       	ori	r24, 0x04	; 4
     478:	87 b9       	out	0x07, r24	; 7
     47a:	88 b1       	in	r24, 0x08	; 8
     47c:	8b 7f       	andi	r24, 0xFB	; 251
     47e:	88 b9       	out	0x08, r24	; 8
     480:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     484:	87 e0       	ldi	r24, 0x07	; 7
     486:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
     48a:	81 e0       	ldi	r24, 0x01	; 1
     48c:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
     490:	78 94       	sei
     492:	08 95       	ret

00000494 <LED_SYSTEM_ACTIVE_INIT>:
     494:	87 b1       	in	r24, 0x07	; 7
     496:	82 60       	ori	r24, 0x02	; 2
     498:	87 b9       	out	0x07, r24	; 7
     49a:	88 b1       	in	r24, 0x08	; 8
     49c:	8d 7f       	andi	r24, 0xFD	; 253
     49e:	88 b9       	out	0x08, r24	; 8
     4a0:	08 95       	ret

000004a2 <LED_system_active_off>:
     4a2:	88 b1       	in	r24, 0x08	; 8
     4a4:	8d 7f       	andi	r24, 0xFD	; 253
     4a6:	88 b9       	out	0x08, r24	; 8
     4a8:	08 95       	ret

000004aa <LED_system_active_on>:
     4aa:	88 b1       	in	r24, 0x08	; 8
     4ac:	82 60       	ori	r24, 0x02	; 2
     4ae:	88 b9       	out	0x08, r24	; 8
     4b0:	08 95       	ret

000004b2 <LCD_1602A_latch>:
     4b2:	85 b1       	in	r24, 0x05	; 5
     4b4:	82 60       	ori	r24, 0x02	; 2
     4b6:	85 b9       	out	0x05, r24	; 5
     4b8:	85 e0       	ldi	r24, 0x05	; 5
     4ba:	8a 95       	dec	r24
     4bc:	f1 f7       	brne	.-4      	; 0x4ba <LCD_1602A_latch+0x8>
     4be:	00 00       	nop
     4c0:	85 b1       	in	r24, 0x05	; 5
     4c2:	8d 7f       	andi	r24, 0xFD	; 253
     4c4:	85 b9       	out	0x05, r24	; 5
     4c6:	8f e8       	ldi	r24, 0x8F	; 143
     4c8:	91 e0       	ldi	r25, 0x01	; 1
     4ca:	01 97       	sbiw	r24, 0x01	; 1
     4cc:	f1 f7       	brne	.-4      	; 0x4ca <LCD_1602A_latch+0x18>
     4ce:	00 c0       	rjmp	.+0      	; 0x4d0 <LCD_1602A_latch+0x1e>
     4d0:	00 00       	nop
     4d2:	08 95       	ret

000004d4 <LCD_1602A_send_nibble>:
     4d4:	9b b1       	in	r25, 0x0b	; 11
     4d6:	9f 70       	andi	r25, 0x0F	; 15
     4d8:	9b b9       	out	0x0b, r25	; 11
     4da:	80 ff       	sbrs	r24, 0
     4dc:	03 c0       	rjmp	.+6      	; 0x4e4 <LCD_1602A_send_nibble+0x10>
     4de:	9b b1       	in	r25, 0x0b	; 11
     4e0:	90 61       	ori	r25, 0x10	; 16
     4e2:	9b b9       	out	0x0b, r25	; 11
     4e4:	81 ff       	sbrs	r24, 1
     4e6:	03 c0       	rjmp	.+6      	; 0x4ee <LCD_1602A_send_nibble+0x1a>
     4e8:	9b b1       	in	r25, 0x0b	; 11
     4ea:	90 62       	ori	r25, 0x20	; 32
     4ec:	9b b9       	out	0x0b, r25	; 11
     4ee:	82 ff       	sbrs	r24, 2
     4f0:	03 c0       	rjmp	.+6      	; 0x4f8 <LCD_1602A_send_nibble+0x24>
     4f2:	9b b1       	in	r25, 0x0b	; 11
     4f4:	90 64       	ori	r25, 0x40	; 64
     4f6:	9b b9       	out	0x0b, r25	; 11
     4f8:	83 ff       	sbrs	r24, 3
     4fa:	03 c0       	rjmp	.+6      	; 0x502 <LCD_1602A_send_nibble+0x2e>
     4fc:	8b b1       	in	r24, 0x0b	; 11
     4fe:	80 68       	ori	r24, 0x80	; 128
     500:	8b b9       	out	0x0b, r24	; 11
     502:	0e 94 59 02 	call	0x4b2	; 0x4b2 <LCD_1602A_latch>
     506:	08 95       	ret

00000508 <LCD_1602A_load_command>:
     508:	cf 93       	push	r28
     50a:	c8 2f       	mov	r28, r24
     50c:	85 b1       	in	r24, 0x05	; 5
     50e:	8e 7f       	andi	r24, 0xFE	; 254
     510:	85 b9       	out	0x05, r24	; 5
     512:	8c 2f       	mov	r24, r28
     514:	82 95       	swap	r24
     516:	8f 70       	andi	r24, 0x0F	; 15
     518:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <LCD_1602A_send_nibble>
     51c:	8c 2f       	mov	r24, r28
     51e:	8f 70       	andi	r24, 0x0F	; 15
     520:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <LCD_1602A_send_nibble>
     524:	cf 91       	pop	r28
     526:	08 95       	ret

00000528 <LCD_1602A_load_data>:
     528:	cf 93       	push	r28
     52a:	c8 2f       	mov	r28, r24
     52c:	85 b1       	in	r24, 0x05	; 5
     52e:	81 60       	ori	r24, 0x01	; 1
     530:	85 b9       	out	0x05, r24	; 5
     532:	8c 2f       	mov	r24, r28
     534:	82 95       	swap	r24
     536:	8f 70       	andi	r24, 0x0F	; 15
     538:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <LCD_1602A_send_nibble>
     53c:	8c 2f       	mov	r24, r28
     53e:	8f 70       	andi	r24, 0x0F	; 15
     540:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <LCD_1602A_send_nibble>
     544:	cf 91       	pop	r28
     546:	08 95       	ret

00000548 <LCD_1602A_create_char>:

void LCD_1602A_create_char(uint8_t location, uint8_t charmap[])
{
     548:	0f 93       	push	r16
     54a:	1f 93       	push	r17
     54c:	cf 93       	push	r28
     54e:	8b 01       	movw	r16, r22
    location &= 0x07;                               // only 0–7 valid
     550:	87 70       	andi	r24, 0x07	; 7
    LCD_1602A_load_command(0x40 | (location << 3)); // Set CGRAM address
     552:	90 e0       	ldi	r25, 0x00	; 0
     554:	88 0f       	add	r24, r24
     556:	99 1f       	adc	r25, r25
     558:	88 0f       	add	r24, r24
     55a:	99 1f       	adc	r25, r25
     55c:	88 0f       	add	r24, r24
     55e:	99 1f       	adc	r25, r25
     560:	80 64       	ori	r24, 0x40	; 64
     562:	0e 94 84 02 	call	0x508	; 0x508 <LCD_1602A_load_command>

    for (uint8_t i = 0; i < 8; i++)
     566:	c0 e0       	ldi	r28, 0x00	; 0
     568:	07 c0       	rjmp	.+14     	; 0x578 <LCD_1602A_create_char+0x30>
    {
        LCD_1602A_load_data(charmap[i]); // write pixel pattern
     56a:	f8 01       	movw	r30, r16
     56c:	ec 0f       	add	r30, r28
     56e:	f1 1d       	adc	r31, r1
     570:	80 81       	ld	r24, Z
     572:	0e 94 94 02 	call	0x528	; 0x528 <LCD_1602A_load_data>
void LCD_1602A_create_char(uint8_t location, uint8_t charmap[])
{
    location &= 0x07;                               // only 0–7 valid
    LCD_1602A_load_command(0x40 | (location << 3)); // Set CGRAM address

    for (uint8_t i = 0; i < 8; i++)
     576:	cf 5f       	subi	r28, 0xFF	; 255
     578:	c8 30       	cpi	r28, 0x08	; 8
     57a:	b8 f3       	brcs	.-18     	; 0x56a <LCD_1602A_create_char+0x22>
    {
        LCD_1602A_load_data(charmap[i]); // write pixel pattern
    }

    // Return to DDRAM (display memory)
    LCD_1602A_load_command(0x80);
     57c:	80 e8       	ldi	r24, 0x80	; 128
     57e:	0e 94 84 02 	call	0x508	; 0x508 <LCD_1602A_load_command>
}
     582:	cf 91       	pop	r28
     584:	1f 91       	pop	r17
     586:	0f 91       	pop	r16
     588:	08 95       	ret

0000058a <LCD_1602A_init>:
    params: void
    returns: void
*/
void LCD_1602A_init(void)
{
    LCD_1602A_CTRL_DDR |= (1 << LCD_1602A_RS) | (1 << LCD_1602A_EN);
     58a:	84 b1       	in	r24, 0x04	; 4
     58c:	83 60       	ori	r24, 0x03	; 3
     58e:	84 b9       	out	0x04, r24	; 4
    LCD_1602A_DATA_DDR |= (1 << LCD_1602A_D4) | (1 << LCD_1602A_D5) | (1 << LCD_1602A_D6) | (1 << LCD_1602A_D7);
     590:	8a b1       	in	r24, 0x0a	; 10
     592:	80 6f       	ori	r24, 0xF0	; 240
     594:	8a b9       	out	0x0a, r24	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     596:	2f ef       	ldi	r18, 0xFF	; 255
     598:	89 ef       	ldi	r24, 0xF9	; 249
     59a:	90 e0       	ldi	r25, 0x00	; 0
     59c:	21 50       	subi	r18, 0x01	; 1
     59e:	80 40       	sbci	r24, 0x00	; 0
     5a0:	90 40       	sbci	r25, 0x00	; 0
     5a2:	e1 f7       	brne	.-8      	; 0x59c <LCD_1602A_init+0x12>
     5a4:	00 c0       	rjmp	.+0      	; 0x5a6 <LCD_1602A_init+0x1c>
     5a6:	00 00       	nop

    _delay_ms(20); // Wait for LCD power up
    LCD_1602A_send_nibble(DISPLAY_WAIT_POWER_UP);
     5a8:	83 e0       	ldi	r24, 0x03	; 3
     5aa:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <LCD_1602A_send_nibble>
     5ae:	8f e1       	ldi	r24, 0x1F	; 31
     5b0:	9e e4       	ldi	r25, 0x4E	; 78
     5b2:	01 97       	sbiw	r24, 0x01	; 1
     5b4:	f1 f7       	brne	.-4      	; 0x5b2 <LCD_1602A_init+0x28>
     5b6:	00 c0       	rjmp	.+0      	; 0x5b8 <LCD_1602A_init+0x2e>
     5b8:	00 00       	nop
    _delay_ms(5);
    LCD_1602A_send_nibble(DISPLAY_WAIT_POWER_UP);
     5ba:	83 e0       	ldi	r24, 0x03	; 3
     5bc:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <LCD_1602A_send_nibble>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5c0:	87 e5       	ldi	r24, 0x57	; 87
     5c2:	92 e0       	ldi	r25, 0x02	; 2
     5c4:	01 97       	sbiw	r24, 0x01	; 1
     5c6:	f1 f7       	brne	.-4      	; 0x5c4 <LCD_1602A_init+0x3a>
     5c8:	00 c0       	rjmp	.+0      	; 0x5ca <LCD_1602A_init+0x40>
     5ca:	00 00       	nop
    _delay_us(150);
    LCD_1602A_send_nibble(DISPLAY_WAIT_POWER_UP);
     5cc:	83 e0       	ldi	r24, 0x03	; 3
     5ce:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <LCD_1602A_send_nibble>

    LCD_1602A_send_nibble(DISPLAY_4_BIT_MODE); // Switch to 4-bit mode
     5d2:	82 e0       	ldi	r24, 0x02	; 2
     5d4:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <LCD_1602A_send_nibble>

    LCD_1602A_load_command(DISPLAY_FUNCTION_SET_4BIT_2LINE);
     5d8:	88 e2       	ldi	r24, 0x28	; 40
     5da:	0e 94 84 02 	call	0x508	; 0x508 <LCD_1602A_load_command>
    LCD_1602A_load_command(DISPLAY_DISPLAY_ON_CURSOR_OFF);
     5de:	8c e0       	ldi	r24, 0x0C	; 12
     5e0:	0e 94 84 02 	call	0x508	; 0x508 <LCD_1602A_load_command>
    LCD_1602A_load_command(DISPLAY_ENTRY_MODE_SET);
     5e4:	86 e0       	ldi	r24, 0x06	; 6
     5e6:	0e 94 84 02 	call	0x508	; 0x508 <LCD_1602A_load_command>
    LCD_1602A_load_command(DISPLAY_CLEAR_SCREEN);
     5ea:	81 e0       	ldi	r24, 0x01	; 1
     5ec:	0e 94 84 02 	call	0x508	; 0x508 <LCD_1602A_load_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5f0:	8f e3       	ldi	r24, 0x3F	; 63
     5f2:	9f e1       	ldi	r25, 0x1F	; 31
     5f4:	01 97       	sbiw	r24, 0x01	; 1
     5f6:	f1 f7       	brne	.-4      	; 0x5f4 <LCD_1602A_init+0x6a>
     5f8:	00 c0       	rjmp	.+0      	; 0x5fa <LCD_1602A_init+0x70>
     5fa:	00 00       	nop
     5fc:	08 95       	ret

000005fe <DS18B20_reset>:
    params: void
    returns: uint8_t - 1 if presence pulse detected, 0 otherwise
*/
uint8_t DS18B20_reset(void)
{
    DS18B20_OUTPUT();
     5fe:	87 b1       	in	r24, 0x07	; 7
     600:	81 60       	ori	r24, 0x01	; 1
     602:	87 b9       	out	0x07, r24	; 7
    DS18B20_LOW();
     604:	88 b1       	in	r24, 0x08	; 8
     606:	8e 7f       	andi	r24, 0xFE	; 254
     608:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     60a:	8f e7       	ldi	r24, 0x7F	; 127
     60c:	97 e0       	ldi	r25, 0x07	; 7
     60e:	01 97       	sbiw	r24, 0x01	; 1
     610:	f1 f7       	brne	.-4      	; 0x60e <DS18B20_reset+0x10>
     612:	00 c0       	rjmp	.+0      	; 0x614 <DS18B20_reset+0x16>
     614:	00 00       	nop
    _delay_us(480);
    DS18B20_INPUT();
     616:	87 b1       	in	r24, 0x07	; 7
     618:	8e 7f       	andi	r24, 0xFE	; 254
     61a:	87 b9       	out	0x07, r24	; 7
     61c:	ef ee       	ldi	r30, 0xEF	; 239
     61e:	f0 e0       	ldi	r31, 0x00	; 0
     620:	31 97       	sbiw	r30, 0x01	; 1
     622:	f1 f7       	brne	.-4      	; 0x620 <DS18B20_reset+0x22>
     624:	00 c0       	rjmp	.+0      	; 0x626 <DS18B20_reset+0x28>
     626:	00 00       	nop
    _delay_us(60);

    uint8_t presence = !(DS18B20_PIN & (1 << DS18B20_DQ));
     628:	96 b1       	in	r25, 0x06	; 6
     62a:	81 e0       	ldi	r24, 0x01	; 1
     62c:	89 27       	eor	r24, r25
     62e:	81 70       	andi	r24, 0x01	; 1
     630:	ef e8       	ldi	r30, 0x8F	; 143
     632:	f6 e0       	ldi	r31, 0x06	; 6
     634:	31 97       	sbiw	r30, 0x01	; 1
     636:	f1 f7       	brne	.-4      	; 0x634 <DS18B20_reset+0x36>
     638:	00 c0       	rjmp	.+0      	; 0x63a <DS18B20_reset+0x3c>
     63a:	00 00       	nop
    _delay_us(420);
    return presence;
}
     63c:	08 95       	ret

0000063e <DS18B20_write_bit>:
    params: uint8_t bit - the bit to write (0 or 1)
    returns: void
*/
void DS18B20_write_bit(uint8_t bit)
{
    DS18B20_OUTPUT();
     63e:	97 b1       	in	r25, 0x07	; 7
     640:	91 60       	ori	r25, 0x01	; 1
     642:	97 b9       	out	0x07, r25	; 7
    DS18B20_LOW();
     644:	98 b1       	in	r25, 0x08	; 8
     646:	9e 7f       	andi	r25, 0xFE	; 254
     648:	98 b9       	out	0x08, r25	; 8
    if (bit)
     64a:	88 23       	and	r24, r24
     64c:	71 f0       	breq	.+28     	; 0x66a <DS18B20_write_bit+0x2c>
     64e:	85 e0       	ldi	r24, 0x05	; 5
     650:	8a 95       	dec	r24
     652:	f1 f7       	brne	.-4      	; 0x650 <DS18B20_write_bit+0x12>
     654:	00 00       	nop
    {
        _delay_us(1);
        DS18B20_INPUT();
     656:	87 b1       	in	r24, 0x07	; 7
     658:	8e 7f       	andi	r24, 0xFE	; 254
     65a:	87 b9       	out	0x07, r24	; 7
     65c:	8f ee       	ldi	r24, 0xEF	; 239
     65e:	90 e0       	ldi	r25, 0x00	; 0
     660:	01 97       	sbiw	r24, 0x01	; 1
     662:	f1 f7       	brne	.-4      	; 0x660 <DS18B20_write_bit+0x22>
     664:	00 c0       	rjmp	.+0      	; 0x666 <DS18B20_write_bit+0x28>
     666:	00 00       	nop
     668:	08 95       	ret
     66a:	8f ee       	ldi	r24, 0xEF	; 239
     66c:	90 e0       	ldi	r25, 0x00	; 0
     66e:	01 97       	sbiw	r24, 0x01	; 1
     670:	f1 f7       	brne	.-4      	; 0x66e <DS18B20_write_bit+0x30>
     672:	00 c0       	rjmp	.+0      	; 0x674 <DS18B20_write_bit+0x36>
     674:	00 00       	nop
        _delay_us(60);
    }
    else
    {
        _delay_us(60);
        DS18B20_INPUT();
     676:	87 b1       	in	r24, 0x07	; 7
     678:	8e 7f       	andi	r24, 0xFE	; 254
     67a:	87 b9       	out	0x07, r24	; 7
     67c:	08 95       	ret

0000067e <DS18B20_write_byte>:
    write a byte to the DS18B20 sensor
    params: uint8_t data - the byte to write
    returns: void
*/
void DS18B20_write_byte(uint8_t data)
{
     67e:	cf 93       	push	r28
     680:	df 93       	push	r29
     682:	d8 2f       	mov	r29, r24
    for (uint8_t i = 0; i < 8; i++)
     684:	c0 e0       	ldi	r28, 0x00	; 0
     686:	06 c0       	rjmp	.+12     	; 0x694 <DS18B20_write_byte+0x16>
    {
        DS18B20_write_bit(data & 0x01);
     688:	8d 2f       	mov	r24, r29
     68a:	81 70       	andi	r24, 0x01	; 1
     68c:	0e 94 1f 03 	call	0x63e	; 0x63e <DS18B20_write_bit>
        data >>= 1;
     690:	d6 95       	lsr	r29
    params: uint8_t data - the byte to write
    returns: void
*/
void DS18B20_write_byte(uint8_t data)
{
    for (uint8_t i = 0; i < 8; i++)
     692:	cf 5f       	subi	r28, 0xFF	; 255
     694:	c8 30       	cpi	r28, 0x08	; 8
     696:	c0 f3       	brcs	.-16     	; 0x688 <DS18B20_write_byte+0xa>
    {
        DS18B20_write_bit(data & 0x01);
        data >>= 1;
    }
}
     698:	df 91       	pop	r29
     69a:	cf 91       	pop	r28
     69c:	08 95       	ret

0000069e <DS18B20_read_bit>:
    returns: uint8_t - the bit read (0 or 1)
*/
uint8_t DS18B20_read_bit(void)
{
    uint8_t bit;
    DS18B20_OUTPUT();
     69e:	87 b1       	in	r24, 0x07	; 7
     6a0:	81 60       	ori	r24, 0x01	; 1
     6a2:	87 b9       	out	0x07, r24	; 7
    DS18B20_LOW();
     6a4:	88 b1       	in	r24, 0x08	; 8
     6a6:	8e 7f       	andi	r24, 0xFE	; 254
     6a8:	88 b9       	out	0x08, r24	; 8
     6aa:	8a e0       	ldi	r24, 0x0A	; 10
     6ac:	8a 95       	dec	r24
     6ae:	f1 f7       	brne	.-4      	; 0x6ac <DS18B20_read_bit+0xe>
     6b0:	00 c0       	rjmp	.+0      	; 0x6b2 <DS18B20_read_bit+0x14>
    _delay_us(2);
    DS18B20_INPUT();
     6b2:	87 b1       	in	r24, 0x07	; 7
     6b4:	8e 7f       	andi	r24, 0xFE	; 254
     6b6:	87 b9       	out	0x07, r24	; 7
     6b8:	e5 e3       	ldi	r30, 0x35	; 53
     6ba:	ea 95       	dec	r30
     6bc:	f1 f7       	brne	.-4      	; 0x6ba <DS18B20_read_bit+0x1c>
     6be:	00 00       	nop
    _delay_us(10);
    bit = (DS18B20_PIN & (1 << DS18B20_DQ)) ? 1 : 0;
     6c0:	86 b1       	in	r24, 0x06	; 6
     6c2:	81 70       	andi	r24, 0x01	; 1
     6c4:	e7 ec       	ldi	r30, 0xC7	; 199
     6c6:	f0 e0       	ldi	r31, 0x00	; 0
     6c8:	31 97       	sbiw	r30, 0x01	; 1
     6ca:	f1 f7       	brne	.-4      	; 0x6c8 <DS18B20_read_bit+0x2a>
     6cc:	00 c0       	rjmp	.+0      	; 0x6ce <DS18B20_read_bit+0x30>
     6ce:	00 00       	nop
    _delay_us(50);
    return bit;
}
     6d0:	08 95       	ret

000006d2 <DS18B20_read_byte>:
    read a byte from the DS18B20 sensor
    params: void
    returns: uint8_t - the byte read
*/
uint8_t DS18B20_read_byte(void)
{
     6d2:	cf 93       	push	r28
     6d4:	df 93       	push	r29
    uint8_t data = 0;
    for (uint8_t i = 0; i < 8; i++)
     6d6:	c0 e0       	ldi	r28, 0x00	; 0
    params: void
    returns: uint8_t - the byte read
*/
uint8_t DS18B20_read_byte(void)
{
    uint8_t data = 0;
     6d8:	d0 e0       	ldi	r29, 0x00	; 0
    for (uint8_t i = 0; i < 8; i++)
     6da:	06 c0       	rjmp	.+12     	; 0x6e8 <DS18B20_read_byte+0x16>
    {
        data >>= 1;
     6dc:	d6 95       	lsr	r29
        if (DS18B20_read_bit())
     6de:	0e 94 4f 03 	call	0x69e	; 0x69e <DS18B20_read_bit>
     6e2:	81 11       	cpse	r24, r1
            data |= 0x80;
     6e4:	d0 68       	ori	r29, 0x80	; 128
    returns: uint8_t - the byte read
*/
uint8_t DS18B20_read_byte(void)
{
    uint8_t data = 0;
    for (uint8_t i = 0; i < 8; i++)
     6e6:	cf 5f       	subi	r28, 0xFF	; 255
     6e8:	c8 30       	cpi	r28, 0x08	; 8
     6ea:	c0 f3       	brcs	.-16     	; 0x6dc <DS18B20_read_byte+0xa>
        data >>= 1;
        if (DS18B20_read_bit())
            data |= 0x80;
    }
    return data;
}
     6ec:	8d 2f       	mov	r24, r29
     6ee:	df 91       	pop	r29
     6f0:	cf 91       	pop	r28
     6f2:	08 95       	ret

000006f4 <DS18B20_read_temperature>:
    read temperature from the DS18B20 sensor
    params: void
    returns: float - the temperature in degrees Celsius
*/
float DS18B20_read_temperature(void)
{
     6f4:	cf 93       	push	r28
    uint8_t temp_l, temp_h;
    int16_t temp;

    DS18B20_reset();
     6f6:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DS18B20_reset>
    DS18B20_write_byte(0xCC);
     6fa:	8c ec       	ldi	r24, 0xCC	; 204
     6fc:	0e 94 3f 03 	call	0x67e	; 0x67e <DS18B20_write_byte>
    DS18B20_write_byte(0x44);
     700:	84 e4       	ldi	r24, 0x44	; 68
     702:	0e 94 3f 03 	call	0x67e	; 0x67e <DS18B20_write_byte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     706:	2f ef       	ldi	r18, 0xFF	; 255
     708:	8e e9       	ldi	r24, 0x9E	; 158
     70a:	94 e2       	ldi	r25, 0x24	; 36
     70c:	21 50       	subi	r18, 0x01	; 1
     70e:	80 40       	sbci	r24, 0x00	; 0
     710:	90 40       	sbci	r25, 0x00	; 0
     712:	e1 f7       	brne	.-8      	; 0x70c <DS18B20_read_temperature+0x18>
     714:	00 c0       	rjmp	.+0      	; 0x716 <DS18B20_read_temperature+0x22>
     716:	00 00       	nop
    _delay_ms(750);

    DS18B20_reset();
     718:	0e 94 ff 02 	call	0x5fe	; 0x5fe <DS18B20_reset>
    DS18B20_write_byte(0xCC);
     71c:	8c ec       	ldi	r24, 0xCC	; 204
     71e:	0e 94 3f 03 	call	0x67e	; 0x67e <DS18B20_write_byte>
    DS18B20_write_byte(0xBE);
     722:	8e eb       	ldi	r24, 0xBE	; 190
     724:	0e 94 3f 03 	call	0x67e	; 0x67e <DS18B20_write_byte>

    temp_l = DS18B20_read_byte();
     728:	0e 94 69 03 	call	0x6d2	; 0x6d2 <DS18B20_read_byte>
     72c:	c8 2f       	mov	r28, r24
    temp_h = DS18B20_read_byte();
     72e:	0e 94 69 03 	call	0x6d2	; 0x6d2 <DS18B20_read_byte>

    temp = (temp_h << 8) | temp_l;
     732:	68 2f       	mov	r22, r24
     734:	70 e0       	ldi	r23, 0x00	; 0
     736:	76 2f       	mov	r23, r22
     738:	66 27       	eor	r22, r22
     73a:	6c 2b       	or	r22, r28

    return (float)temp / 16.0;
     73c:	07 2e       	mov	r0, r23
     73e:	00 0c       	add	r0, r0
     740:	88 0b       	sbc	r24, r24
     742:	99 0b       	sbc	r25, r25
     744:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <__floatsisf>
     748:	20 e0       	ldi	r18, 0x00	; 0
     74a:	30 e0       	ldi	r19, 0x00	; 0
     74c:	40 e8       	ldi	r20, 0x80	; 128
     74e:	5d e3       	ldi	r21, 0x3D	; 61
     750:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <__mulsf3>
}
     754:	cf 91       	pop	r28
     756:	08 95       	ret

00000758 <HCSR04_init>:
    params: void
    returns: void
*/
void HCSR04_init(void)
{
    HCSR04_TRIG_DDR |= (1 << HCSR04_TRIG_PIN);
     758:	8a b1       	in	r24, 0x0a	; 10
     75a:	84 60       	ori	r24, 0x04	; 4
     75c:	8a b9       	out	0x0a, r24	; 10
    HCSR04_ECHO_DDR &= ~(1 << HCSR04_ECHO_PIN);
     75e:	8a b1       	in	r24, 0x0a	; 10
     760:	87 7f       	andi	r24, 0xF7	; 247
     762:	8a b9       	out	0x0a, r24	; 10
     764:	08 95       	ret

00000766 <HCSR04_trigger>:
    params: void
    returns: void
*/
void HCSR04_trigger(void)
{
    HCSR04_TRIG_PORT &= ~(1 << HCSR04_TRIG_PIN);
     766:	8b b1       	in	r24, 0x0b	; 11
     768:	8b 7f       	andi	r24, 0xFB	; 251
     76a:	8b b9       	out	0x0b, r24	; 11
     76c:	2f ef       	ldi	r18, 0xFF	; 255
     76e:	87 e8       	ldi	r24, 0x87	; 135
     770:	93 e1       	ldi	r25, 0x13	; 19
     772:	21 50       	subi	r18, 0x01	; 1
     774:	80 40       	sbci	r24, 0x00	; 0
     776:	90 40       	sbci	r25, 0x00	; 0
     778:	e1 f7       	brne	.-8      	; 0x772 <HCSR04_trigger+0xc>
     77a:	00 c0       	rjmp	.+0      	; 0x77c <HCSR04_trigger+0x16>
     77c:	00 00       	nop
    _delay_ms(400);
    HCSR04_TRIG_PORT |= (1 << HCSR04_TRIG_PIN);
     77e:	8b b1       	in	r24, 0x0b	; 11
     780:	84 60       	ori	r24, 0x04	; 4
     782:	8b b9       	out	0x0b, r24	; 11
     784:	2f ef       	ldi	r18, 0xFF	; 255
     786:	87 e8       	ldi	r24, 0x87	; 135
     788:	93 e1       	ldi	r25, 0x13	; 19
     78a:	21 50       	subi	r18, 0x01	; 1
     78c:	80 40       	sbci	r24, 0x00	; 0
     78e:	90 40       	sbci	r25, 0x00	; 0
     790:	e1 f7       	brne	.-8      	; 0x78a <HCSR04_trigger+0x24>
     792:	00 c0       	rjmp	.+0      	; 0x794 <HCSR04_trigger+0x2e>
     794:	00 00       	nop
    _delay_ms(400);
    HCSR04_TRIG_PORT &= ~(1 << HCSR04_TRIG_PIN);
     796:	8b b1       	in	r24, 0x0b	; 11
     798:	8b 7f       	andi	r24, 0xFB	; 251
     79a:	8b b9       	out	0x0b, r24	; 11
     79c:	08 95       	ret

0000079e <HCSR04_read>:
*/
uint16_t HCSR04_read(void)
{
    uint32_t count = 0;

    while (!(HCSR04_ECHO_DEF_PIN & (1 << HCSR04_ECHO_PIN)));
     79e:	4b 9b       	sbis	0x09, 3	; 9
     7a0:	fe cf       	rjmp	.-4      	; 0x79e <HCSR04_read>
     7a2:	60 e0       	ldi	r22, 0x00	; 0
     7a4:	70 e0       	ldi	r23, 0x00	; 0
     7a6:	cb 01       	movw	r24, r22
     7a8:	08 c0       	rjmp	.+16     	; 0x7ba <HCSR04_read+0x1c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7aa:	25 e0       	ldi	r18, 0x05	; 5
     7ac:	2a 95       	dec	r18
     7ae:	f1 f7       	brne	.-4      	; 0x7ac <HCSR04_read+0xe>
     7b0:	00 00       	nop

    while (HCSR04_ECHO_DEF_PIN & (1 << HCSR04_ECHO_PIN))
    {
        _delay_us(1);
        count++;
     7b2:	6f 5f       	subi	r22, 0xFF	; 255
     7b4:	7f 4f       	sbci	r23, 0xFF	; 255
     7b6:	8f 4f       	sbci	r24, 0xFF	; 255
     7b8:	9f 4f       	sbci	r25, 0xFF	; 255
{
    uint32_t count = 0;

    while (!(HCSR04_ECHO_DEF_PIN & (1 << HCSR04_ECHO_PIN)));

    while (HCSR04_ECHO_DEF_PIN & (1 << HCSR04_ECHO_PIN))
     7ba:	4b 99       	sbic	0x09, 3	; 9
     7bc:	f6 cf       	rjmp	.-20     	; 0x7aa <HCSR04_read+0xc>
    {
        _delay_us(1);
        count++;
    }

    return (uint16_t)(count / 58.0);
     7be:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <__floatunsisf>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	48 e6       	ldi	r20, 0x68	; 104
     7c8:	52 e4       	ldi	r21, 0x42	; 66
     7ca:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <__divsf3>
     7ce:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <__fixunssfsi>
}
     7d2:	cb 01       	movw	r24, r22
     7d4:	08 95       	ret

000007d6 <HCSR04_get_distance>:
    params: void
    returns: uint16_t - the distance in centimeters
*/
uint16_t HCSR04_get_distance(void)
{
    HCSR04_trigger();
     7d6:	0e 94 b3 03 	call	0x766	; 0x766 <HCSR04_trigger>
    return HCSR04_read();
     7da:	0e 94 cf 03 	call	0x79e	; 0x79e <HCSR04_read>
}
     7de:	08 95       	ret

000007e0 <KEYPAD_init>:
    params: void
    returns: void
*/
void KEYPAD_init(void)
{
    KEYPAD_DDR &= ~((1 << KEYPAD_KEY_1) | (1 << KEYPAD_KEY_2) | (1 << KEYPAD_KEY_3) | (1 << KEYPAD_KEY_4));
     7e0:	84 b1       	in	r24, 0x04	; 4
     7e2:	83 7c       	andi	r24, 0xC3	; 195
     7e4:	84 b9       	out	0x04, r24	; 4
    KEYPAD_PORT |= (1 << KEYPAD_KEY_1) | (1 << KEYPAD_KEY_2) | (1 << KEYPAD_KEY_3) | (1 << KEYPAD_KEY_4);
     7e6:	85 b1       	in	r24, 0x05	; 5
     7e8:	8c 63       	ori	r24, 0x3C	; 60
     7ea:	85 b9       	out	0x05, r24	; 5
     7ec:	08 95       	ret

000007ee <KEYPAD_read>:
    params: void
    returns: uint8_t - the key number (1-4) or KEYPAD_NO_KEY if no key is pressed
*/
uint8_t KEYPAD_read(void)
{
    if (!(KEYPAD_PIN & (1 << KEYPAD_KEY_1))) return 1;
     7ee:	1a 9b       	sbis	0x03, 2	; 3
     7f0:	08 c0       	rjmp	.+16     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
    if (!(KEYPAD_PIN & (1 << KEYPAD_KEY_2))) return 2;
     7f2:	1b 9b       	sbis	0x03, 3	; 3
     7f4:	08 c0       	rjmp	.+16     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
    if (!(KEYPAD_PIN & (1 << KEYPAD_KEY_3))) return 3;
     7f6:	1c 9b       	sbis	0x03, 4	; 3
     7f8:	08 c0       	rjmp	.+16     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
    if (!(KEYPAD_PIN & (1 << KEYPAD_KEY_4))) return 4;
     7fa:	1d 99       	sbic	0x03, 5	; 3
     7fc:	08 c0       	rjmp	.+16     	; 0x80e <__DATA_REGION_LENGTH__+0xe>
     7fe:	84 e0       	ldi	r24, 0x04	; 4
     800:	08 95       	ret
    params: void
    returns: uint8_t - the key number (1-4) or KEYPAD_NO_KEY if no key is pressed
*/
uint8_t KEYPAD_read(void)
{
    if (!(KEYPAD_PIN & (1 << KEYPAD_KEY_1))) return 1;
     802:	81 e0       	ldi	r24, 0x01	; 1
     804:	08 95       	ret
    if (!(KEYPAD_PIN & (1 << KEYPAD_KEY_2))) return 2;
     806:	82 e0       	ldi	r24, 0x02	; 2
     808:	08 95       	ret
    if (!(KEYPAD_PIN & (1 << KEYPAD_KEY_3))) return 3;
     80a:	83 e0       	ldi	r24, 0x03	; 3
     80c:	08 95       	ret
    if (!(KEYPAD_PIN & (1 << KEYPAD_KEY_4))) return 4;
    return KEYPAD_NO_KEY;
     80e:	85 e0       	ldi	r24, 0x05	; 5
}
     810:	08 95       	ret

00000812 <display_set>:
    params: const unsigned char* title - title string (max 12 chars)
            const unsigned char* data - data string (max 16 chars)
    returns: void
*/
void display_set(const unsigned char *title, const unsigned char *data)
{
     812:	0f 93       	push	r16
     814:	1f 93       	push	r17
     816:	cf 93       	push	r28
     818:	df 93       	push	r29
     81a:	cd b7       	in	r28, 0x3d	; 61
     81c:	de b7       	in	r29, 0x3e	; 62
     81e:	ec 97       	sbiw	r28, 0x3c	; 60
     820:	0f b6       	in	r0, 0x3f	; 63
     822:	f8 94       	cli
     824:	de bf       	out	0x3e, r29	; 62
     826:	0f be       	out	0x3f, r0	; 63
     828:	cd bf       	out	0x3d, r28	; 61
     82a:	dc 01       	movw	r26, r24
     82c:	8b 01       	movw	r16, r22
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     82e:	8f e3       	ldi	r24, 0x3F	; 63
     830:	9f e1       	ldi	r25, 0x1F	; 31
     832:	01 97       	sbiw	r24, 0x01	; 1
     834:	f1 f7       	brne	.-4      	; 0x832 <display_set+0x20>
     836:	00 c0       	rjmp	.+0      	; 0x838 <display_set+0x26>
     838:	00 00       	nop

    unsigned char line1[12];
    unsigned char line2[16];

    // prepare line1: copy up to 12 chars from title, pad with spaces
    int i = 0;
     83a:	20 e0       	ldi	r18, 0x00	; 0
     83c:	30 e0       	ldi	r19, 0x00	; 0
    for (; i < 12 && *title; ++i)
     83e:	0a c0       	rjmp	.+20     	; 0x854 <display_set+0x42>
        line1[i] = *title++;
     840:	11 96       	adiw	r26, 0x01	; 1
     842:	e1 e0       	ldi	r30, 0x01	; 1
     844:	f0 e0       	ldi	r31, 0x00	; 0
     846:	ec 0f       	add	r30, r28
     848:	fd 1f       	adc	r31, r29
     84a:	e2 0f       	add	r30, r18
     84c:	f3 1f       	adc	r31, r19
     84e:	80 83       	st	Z, r24
    unsigned char line1[12];
    unsigned char line2[16];

    // prepare line1: copy up to 12 chars from title, pad with spaces
    int i = 0;
    for (; i < 12 && *title; ++i)
     850:	2f 5f       	subi	r18, 0xFF	; 255
     852:	3f 4f       	sbci	r19, 0xFF	; 255
     854:	2c 30       	cpi	r18, 0x0C	; 12
     856:	31 05       	cpc	r19, r1
     858:	74 f4       	brge	.+28     	; 0x876 <display_set+0x64>
     85a:	8c 91       	ld	r24, X
     85c:	81 11       	cpse	r24, r1
     85e:	f0 cf       	rjmp	.-32     	; 0x840 <display_set+0x2e>
     860:	0a c0       	rjmp	.+20     	; 0x876 <display_set+0x64>
        line1[i] = *title++;

    for (; i < 12; ++i)
        line1[i] = ' ';
     862:	e1 e0       	ldi	r30, 0x01	; 1
     864:	f0 e0       	ldi	r31, 0x00	; 0
     866:	ec 0f       	add	r30, r28
     868:	fd 1f       	adc	r31, r29
     86a:	e2 0f       	add	r30, r18
     86c:	f3 1f       	adc	r31, r19
     86e:	80 e2       	ldi	r24, 0x20	; 32
     870:	80 83       	st	Z, r24
    // prepare line1: copy up to 12 chars from title, pad with spaces
    int i = 0;
    for (; i < 12 && *title; ++i)
        line1[i] = *title++;

    for (; i < 12; ++i)
     872:	2f 5f       	subi	r18, 0xFF	; 255
     874:	3f 4f       	sbci	r19, 0xFF	; 255
     876:	2c 30       	cpi	r18, 0x0C	; 12
     878:	31 05       	cpc	r19, r1
     87a:	9c f3       	brlt	.-26     	; 0x862 <display_set+0x50>
        line1[i] = ' ';

    uint8_t arrow_down[8] = {
     87c:	88 e0       	ldi	r24, 0x08	; 8
     87e:	e8 e4       	ldi	r30, 0x48	; 72
     880:	f1 e0       	ldi	r31, 0x01	; 1
     882:	de 01       	movw	r26, r28
     884:	5d 96       	adiw	r26, 0x1d	; 29
     886:	01 90       	ld	r0, Z+
     888:	0d 92       	st	X+, r0
     88a:	8a 95       	dec	r24
     88c:	e1 f7       	brne	.-8      	; 0x886 <display_set+0x74>
        0x0E,
        0x04,
        0x00
    };

    uint8_t arrow_up[8] = {
     88e:	88 e0       	ldi	r24, 0x08	; 8
     890:	e0 e5       	ldi	r30, 0x50	; 80
     892:	f1 e0       	ldi	r31, 0x01	; 1
     894:	de 01       	movw	r26, r28
     896:	95 96       	adiw	r26, 0x25	; 37
     898:	01 90       	ld	r0, Z+
     89a:	0d 92       	st	X+, r0
     89c:	8a 95       	dec	r24
     89e:	e1 f7       	brne	.-8      	; 0x898 <display_set+0x86>
        0x04,
        0x04,
        0x00
    };

    uint8_t arrow_right[8] = {
     8a0:	88 e0       	ldi	r24, 0x08	; 8
     8a2:	e8 e5       	ldi	r30, 0x58	; 88
     8a4:	f1 e0       	ldi	r31, 0x01	; 1
     8a6:	de 01       	movw	r26, r28
     8a8:	9d 96       	adiw	r26, 0x2d	; 45
     8aa:	01 90       	ld	r0, Z+
     8ac:	0d 92       	st	X+, r0
     8ae:	8a 95       	dec	r24
     8b0:	e1 f7       	brne	.-8      	; 0x8aa <display_set+0x98>
        0x04,
        0x00,
        0x00
    };

    uint8_t arrow_left[8] = {
     8b2:	88 e0       	ldi	r24, 0x08	; 8
     8b4:	e0 e6       	ldi	r30, 0x60	; 96
     8b6:	f1 e0       	ldi	r31, 0x01	; 1
     8b8:	de 01       	movw	r26, r28
     8ba:	d5 96       	adiw	r26, 0x35	; 53
     8bc:	01 90       	ld	r0, Z+
     8be:	0d 92       	st	X+, r0
     8c0:	8a 95       	dec	r24
     8c2:	e1 f7       	brne	.-8      	; 0x8bc <display_set+0xaa>
        0x04,
        0x00,
        0x00
    };

    LCD_1602A_create_char(0, arrow_down); // store at location 0
     8c4:	be 01       	movw	r22, r28
     8c6:	63 5e       	subi	r22, 0xE3	; 227
     8c8:	7f 4f       	sbci	r23, 0xFF	; 255
     8ca:	80 e0       	ldi	r24, 0x00	; 0
     8cc:	0e 94 a4 02 	call	0x548	; 0x548 <LCD_1602A_create_char>
    LCD_1602A_create_char(1, arrow_up);   // store at location 1
     8d0:	be 01       	movw	r22, r28
     8d2:	6b 5d       	subi	r22, 0xDB	; 219
     8d4:	7f 4f       	sbci	r23, 0xFF	; 255
     8d6:	81 e0       	ldi	r24, 0x01	; 1
     8d8:	0e 94 a4 02 	call	0x548	; 0x548 <LCD_1602A_create_char>
    LCD_1602A_create_char(2, arrow_left);   // store at location 2
     8dc:	be 01       	movw	r22, r28
     8de:	6b 5c       	subi	r22, 0xCB	; 203
     8e0:	7f 4f       	sbci	r23, 0xFF	; 255
     8e2:	82 e0       	ldi	r24, 0x02	; 2
     8e4:	0e 94 a4 02 	call	0x548	; 0x548 <LCD_1602A_create_char>
    LCD_1602A_create_char(3, arrow_right);   // store at location 3
     8e8:	be 01       	movw	r22, r28
     8ea:	63 5d       	subi	r22, 0xD3	; 211
     8ec:	7f 4f       	sbci	r23, 0xFF	; 255
     8ee:	83 e0       	ldi	r24, 0x03	; 3
     8f0:	0e 94 a4 02 	call	0x548	; 0x548 <LCD_1602A_create_char>

    // prepare line2: copy up to 16 chars from data, pad with spaces
    i = 0;
     8f4:	80 e0       	ldi	r24, 0x00	; 0
     8f6:	90 e0       	ldi	r25, 0x00	; 0
    for (; i < 16 && *data; ++i)
     8f8:	0a c0       	rjmp	.+20     	; 0x90e <__stack+0xf>
        line2[i] = *data++;
     8fa:	0f 5f       	subi	r16, 0xFF	; 255
     8fc:	1f 4f       	sbci	r17, 0xFF	; 255
     8fe:	ed e0       	ldi	r30, 0x0D	; 13
     900:	f0 e0       	ldi	r31, 0x00	; 0
     902:	ec 0f       	add	r30, r28
     904:	fd 1f       	adc	r31, r29
     906:	e8 0f       	add	r30, r24
     908:	f9 1f       	adc	r31, r25
     90a:	20 83       	st	Z, r18
    LCD_1602A_create_char(2, arrow_left);   // store at location 2
    LCD_1602A_create_char(3, arrow_right);   // store at location 3

    // prepare line2: copy up to 16 chars from data, pad with spaces
    i = 0;
    for (; i < 16 && *data; ++i)
     90c:	01 96       	adiw	r24, 0x01	; 1
     90e:	80 31       	cpi	r24, 0x10	; 16
     910:	91 05       	cpc	r25, r1
     912:	74 f4       	brge	.+28     	; 0x930 <__stack+0x31>
     914:	f8 01       	movw	r30, r16
     916:	20 81       	ld	r18, Z
     918:	21 11       	cpse	r18, r1
     91a:	ef cf       	rjmp	.-34     	; 0x8fa <display_set+0xe8>
     91c:	09 c0       	rjmp	.+18     	; 0x930 <__stack+0x31>
        line2[i] = *data++;

    // LCD_1602A_load_data(0);

    for (; i < 16; ++i)
        line2[i] = ' ';
     91e:	ed e0       	ldi	r30, 0x0D	; 13
     920:	f0 e0       	ldi	r31, 0x00	; 0
     922:	ec 0f       	add	r30, r28
     924:	fd 1f       	adc	r31, r29
     926:	e8 0f       	add	r30, r24
     928:	f9 1f       	adc	r31, r25
     92a:	20 e2       	ldi	r18, 0x20	; 32
     92c:	20 83       	st	Z, r18
    for (; i < 16 && *data; ++i)
        line2[i] = *data++;

    // LCD_1602A_load_data(0);

    for (; i < 16; ++i)
     92e:	01 96       	adiw	r24, 0x01	; 1
     930:	80 31       	cpi	r24, 0x10	; 16
     932:	91 05       	cpc	r25, r1
     934:	a4 f3       	brlt	.-24     	; 0x91e <__stack+0x1f>
        line2[i] = ' ';

    // reset cursor to first line and write 12 chars
    LCD_1602A_load_command(DISPLAY_SET_CURSOR_LINE_1);
     936:	80 e8       	ldi	r24, 0x80	; 128
     938:	0e 94 84 02 	call	0x508	; 0x508 <LCD_1602A_load_command>
    for (i = 0; i < 12; ++i)
     93c:	00 e0       	ldi	r16, 0x00	; 0
     93e:	10 e0       	ldi	r17, 0x00	; 0
     940:	0b c0       	rjmp	.+22     	; 0x958 <__stack+0x59>
    {
        LCD_1602A_load_data(line1[i]);
     942:	e1 e0       	ldi	r30, 0x01	; 1
     944:	f0 e0       	ldi	r31, 0x00	; 0
     946:	ec 0f       	add	r30, r28
     948:	fd 1f       	adc	r31, r29
     94a:	e0 0f       	add	r30, r16
     94c:	f1 1f       	adc	r31, r17
     94e:	80 81       	ld	r24, Z
     950:	0e 94 94 02 	call	0x528	; 0x528 <LCD_1602A_load_data>
    for (; i < 16; ++i)
        line2[i] = ' ';

    // reset cursor to first line and write 12 chars
    LCD_1602A_load_command(DISPLAY_SET_CURSOR_LINE_1);
    for (i = 0; i < 12; ++i)
     954:	0f 5f       	subi	r16, 0xFF	; 255
     956:	1f 4f       	sbci	r17, 0xFF	; 255
     958:	0c 30       	cpi	r16, 0x0C	; 12
     95a:	11 05       	cpc	r17, r1
     95c:	94 f3       	brlt	.-28     	; 0x942 <__stack+0x43>
    {
        LCD_1602A_load_data(line1[i]);
    }

    LCD_1602A_load_data(2);
     95e:	82 e0       	ldi	r24, 0x02	; 2
     960:	0e 94 94 02 	call	0x528	; 0x528 <LCD_1602A_load_data>
    LCD_1602A_load_data(0);
     964:	80 e0       	ldi	r24, 0x00	; 0
     966:	0e 94 94 02 	call	0x528	; 0x528 <LCD_1602A_load_data>
    LCD_1602A_load_data(1);
     96a:	81 e0       	ldi	r24, 0x01	; 1
     96c:	0e 94 94 02 	call	0x528	; 0x528 <LCD_1602A_load_data>
    LCD_1602A_load_data(3);
     970:	83 e0       	ldi	r24, 0x03	; 3
     972:	0e 94 94 02 	call	0x528	; 0x528 <LCD_1602A_load_data>

    // reset cursor to second line and write 16 chars
    LCD_1602A_load_command(DISPLAY_SET_CURSOR_LINE_2);
     976:	80 ec       	ldi	r24, 0xC0	; 192
     978:	0e 94 84 02 	call	0x508	; 0x508 <LCD_1602A_load_command>
    for (i = 0; i < 16; ++i)
     97c:	00 e0       	ldi	r16, 0x00	; 0
     97e:	10 e0       	ldi	r17, 0x00	; 0
     980:	0b c0       	rjmp	.+22     	; 0x998 <__stack+0x99>
    {
        LCD_1602A_load_data(line2[i]);
     982:	ed e0       	ldi	r30, 0x0D	; 13
     984:	f0 e0       	ldi	r31, 0x00	; 0
     986:	ec 0f       	add	r30, r28
     988:	fd 1f       	adc	r31, r29
     98a:	e0 0f       	add	r30, r16
     98c:	f1 1f       	adc	r31, r17
     98e:	80 81       	ld	r24, Z
     990:	0e 94 94 02 	call	0x528	; 0x528 <LCD_1602A_load_data>
    LCD_1602A_load_data(1);
    LCD_1602A_load_data(3);

    // reset cursor to second line and write 16 chars
    LCD_1602A_load_command(DISPLAY_SET_CURSOR_LINE_2);
    for (i = 0; i < 16; ++i)
     994:	0f 5f       	subi	r16, 0xFF	; 255
     996:	1f 4f       	sbci	r17, 0xFF	; 255
     998:	00 31       	cpi	r16, 0x10	; 16
     99a:	11 05       	cpc	r17, r1
     99c:	94 f3       	brlt	.-28     	; 0x982 <__stack+0x83>
    {
        LCD_1602A_load_data(line2[i]);
    }
}
     99e:	ec 96       	adiw	r28, 0x3c	; 60
     9a0:	0f b6       	in	r0, 0x3f	; 63
     9a2:	f8 94       	cli
     9a4:	de bf       	out	0x3e, r29	; 62
     9a6:	0f be       	out	0x3f, r0	; 63
     9a8:	cd bf       	out	0x3d, r28	; 61
     9aa:	df 91       	pop	r29
     9ac:	cf 91       	pop	r28
     9ae:	1f 91       	pop	r17
     9b0:	0f 91       	pop	r16
     9b2:	08 95       	ret

000009b4 <get_tank_capacity_at_height>:


float get_tank_capacity_at_height(int water_depth)
{
     9b4:	cf 92       	push	r12
     9b6:	df 92       	push	r13
     9b8:	ef 92       	push	r14
     9ba:	ff 92       	push	r15
    float water_height = (float)TANK_HEIGHT_IN_CM - (float)water_depth;
     9bc:	bc 01       	movw	r22, r24
     9be:	99 0f       	add	r25, r25
     9c0:	88 0b       	sbc	r24, r24
     9c2:	99 0b       	sbc	r25, r25
     9c4:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <__floatsisf>
     9c8:	9b 01       	movw	r18, r22
     9ca:	ac 01       	movw	r20, r24
     9cc:	6a e9       	ldi	r22, 0x9A	; 154
     9ce:	79 e9       	ldi	r23, 0x99	; 153
     9d0:	89 e7       	ldi	r24, 0x79	; 121
     9d2:	91 e4       	ldi	r25, 0x41	; 65
     9d4:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <__subsf3>

    // // The following formula assumes the tank is a perfect cylinder: V = π * r^2 * h
    float volume = (PI * ((float)TANK_RADIUS_IN_CM * (float)TANK_RADIUS_IN_CM) * water_height) / 1000.0; // convert cm^3 to liters
     9d8:	20 ed       	ldi	r18, 0xD0	; 208
     9da:	3f e0       	ldi	r19, 0x0F	; 15
     9dc:	49 e4       	ldi	r20, 0x49	; 73
     9de:	53 e4       	ldi	r21, 0x43	; 67
     9e0:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <__mulsf3>
     9e4:	20 e0       	ldi	r18, 0x00	; 0
     9e6:	30 e0       	ldi	r19, 0x00	; 0
     9e8:	4a e7       	ldi	r20, 0x7A	; 122
     9ea:	54 e4       	ldi	r21, 0x44	; 68
     9ec:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <__divsf3>
     9f0:	6b 01       	movw	r12, r22
     9f2:	7c 01       	movw	r14, r24

    if (volume < 0.0)
     9f4:	20 e0       	ldi	r18, 0x00	; 0
     9f6:	30 e0       	ldi	r19, 0x00	; 0
     9f8:	a9 01       	movw	r20, r18
     9fa:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <__cmpsf2>
     9fe:	88 23       	and	r24, r24
     a00:	1c f4       	brge	.+6      	; 0xa08 <get_tank_capacity_at_height+0x54>
    {
        volume = 0.0;
     a02:	c1 2c       	mov	r12, r1
     a04:	d1 2c       	mov	r13, r1
     a06:	76 01       	movw	r14, r12
    }

    return volume;
}
     a08:	c7 01       	movw	r24, r14
     a0a:	b6 01       	movw	r22, r12
     a0c:	ff 90       	pop	r15
     a0e:	ef 90       	pop	r14
     a10:	df 90       	pop	r13
     a12:	cf 90       	pop	r12
     a14:	08 95       	ret

00000a16 <get_tank_capacity>:
    get the tank capacity based on sonar distance measurement
    params: void
    returns: float - the tank capacity in liters
*/
float get_tank_capacity()
{
     a16:	cf 92       	push	r12
     a18:	df 92       	push	r13
     a1a:	ef 92       	push	r14
     a1c:	ff 92       	push	r15

    uint16_t water_depth = HCSR04_get_distance();
     a1e:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <HCSR04_get_distance>
    water_depth *= 1.5; // convert to float
     a22:	bc 01       	movw	r22, r24
     a24:	80 e0       	ldi	r24, 0x00	; 0
     a26:	90 e0       	ldi	r25, 0x00	; 0
     a28:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <__floatunsisf>
     a2c:	20 e0       	ldi	r18, 0x00	; 0
     a2e:	30 e0       	ldi	r19, 0x00	; 0
     a30:	40 ec       	ldi	r20, 0xC0	; 192
     a32:	5f e3       	ldi	r21, 0x3F	; 63
     a34:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <__mulsf3>
     a38:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <__fixunssfsi>

    float water_height = TANK_HEIGHT_IN_CM - water_depth;
     a3c:	80 e0       	ldi	r24, 0x00	; 0
     a3e:	90 e0       	ldi	r25, 0x00	; 0
     a40:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <__floatunsisf>
     a44:	9b 01       	movw	r18, r22
     a46:	ac 01       	movw	r20, r24
     a48:	6a e9       	ldi	r22, 0x9A	; 154
     a4a:	79 e9       	ldi	r23, 0x99	; 153
     a4c:	89 e7       	ldi	r24, 0x79	; 121
     a4e:	91 e4       	ldi	r25, 0x41	; 65
     a50:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <__subsf3>

    // // The following formula assumes the tank is a perfect cylinder: V = π * r^2 * h
    float volume = (PI * ((float)TANK_RADIUS_IN_CM * (float)TANK_RADIUS_IN_CM) * water_height) / 1000.0; // convert cm^3 to liters
     a54:	20 ed       	ldi	r18, 0xD0	; 208
     a56:	3f e0       	ldi	r19, 0x0F	; 15
     a58:	49 e4       	ldi	r20, 0x49	; 73
     a5a:	53 e4       	ldi	r21, 0x43	; 67
     a5c:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <__mulsf3>
     a60:	20 e0       	ldi	r18, 0x00	; 0
     a62:	30 e0       	ldi	r19, 0x00	; 0
     a64:	4a e7       	ldi	r20, 0x7A	; 122
     a66:	54 e4       	ldi	r21, 0x44	; 68
     a68:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <__divsf3>
     a6c:	6b 01       	movw	r12, r22
     a6e:	7c 01       	movw	r14, r24
    if (volume < 0.0) {
     a70:	20 e0       	ldi	r18, 0x00	; 0
     a72:	30 e0       	ldi	r19, 0x00	; 0
     a74:	a9 01       	movw	r20, r18
     a76:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <__cmpsf2>
     a7a:	88 23       	and	r24, r24
     a7c:	1c f4       	brge	.+6      	; 0xa84 <get_tank_capacity+0x6e>
        volume = 0.0;
     a7e:	c1 2c       	mov	r12, r1
     a80:	d1 2c       	mov	r13, r1
     a82:	76 01       	movw	r14, r12
    }
    return volume;
}
     a84:	c7 01       	movw	r24, r14
     a86:	b6 01       	movw	r22, r12
     a88:	ff 90       	pop	r15
     a8a:	ef 90       	pop	r14
     a8c:	df 90       	pop	r13
     a8e:	cf 90       	pop	r12
     a90:	08 95       	ret

00000a92 <get_refill_rate>:
    get the refill rate based on tank capacity change over time
    params: void
    returns: float - the refill rate in liters per minute
*/
float get_refill_rate()
{
     a92:	8f 92       	push	r8
     a94:	9f 92       	push	r9
     a96:	af 92       	push	r10
     a98:	bf 92       	push	r11
     a9a:	cf 92       	push	r12
     a9c:	df 92       	push	r13
     a9e:	ef 92       	push	r14
     aa0:	ff 92       	push	r15
     aa2:	cf 93       	push	r28
     aa4:	df 93       	push	r29
     aa6:	00 d0       	rcall	.+0      	; 0xaa8 <get_refill_rate+0x16>
     aa8:	00 d0       	rcall	.+0      	; 0xaaa <get_refill_rate+0x18>
     aaa:	cd b7       	in	r28, 0x3d	; 61
     aac:	de b7       	in	r29, 0x3e	; 62
    int height_1;
    peekRear(&height_per_second, &height_1);
     aae:	be 01       	movw	r22, r28
     ab0:	6f 5f       	subi	r22, 0xFF	; 255
     ab2:	7f 4f       	sbci	r23, 0xFF	; 255
     ab4:	8c e9       	ldi	r24, 0x9C	; 156
     ab6:	94 e0       	ldi	r25, 0x04	; 4
     ab8:	0e 94 df 01 	call	0x3be	; 0x3be <peekRear>

    int height_2;
    peekFront(&height_per_second, &height_2);
     abc:	be 01       	movw	r22, r28
     abe:	6d 5f       	subi	r22, 0xFD	; 253
     ac0:	7f 4f       	sbci	r23, 0xFF	; 255
     ac2:	8c e9       	ldi	r24, 0x9C	; 156
     ac4:	94 e0       	ldi	r25, 0x04	; 4
     ac6:	0e 94 c2 01 	call	0x384	; 0x384 <peekFront>

    float capacity_at_1 = get_tank_capacity_at_height(height_1 * 1.5);
     aca:	69 81       	ldd	r22, Y+1	; 0x01
     acc:	7a 81       	ldd	r23, Y+2	; 0x02
     ace:	07 2e       	mov	r0, r23
     ad0:	00 0c       	add	r0, r0
     ad2:	88 0b       	sbc	r24, r24
     ad4:	99 0b       	sbc	r25, r25
     ad6:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <__floatsisf>
     ada:	20 e0       	ldi	r18, 0x00	; 0
     adc:	30 e0       	ldi	r19, 0x00	; 0
     ade:	40 ec       	ldi	r20, 0xC0	; 192
     ae0:	5f e3       	ldi	r21, 0x3F	; 63
     ae2:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <__mulsf3>
     ae6:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <__fixsfsi>
     aea:	cb 01       	movw	r24, r22
     aec:	0e 94 da 04 	call	0x9b4	; 0x9b4 <get_tank_capacity_at_height>
     af0:	4b 01       	movw	r8, r22
     af2:	5c 01       	movw	r10, r24
    float capacity_at_2 = get_tank_capacity_at_height(height_2 * 1.5);
     af4:	6b 81       	ldd	r22, Y+3	; 0x03
     af6:	7c 81       	ldd	r23, Y+4	; 0x04
     af8:	07 2e       	mov	r0, r23
     afa:	00 0c       	add	r0, r0
     afc:	88 0b       	sbc	r24, r24
     afe:	99 0b       	sbc	r25, r25
     b00:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <__floatsisf>
     b04:	20 e0       	ldi	r18, 0x00	; 0
     b06:	30 e0       	ldi	r19, 0x00	; 0
     b08:	40 ec       	ldi	r20, 0xC0	; 192
     b0a:	5f e3       	ldi	r21, 0x3F	; 63
     b0c:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <__mulsf3>
     b10:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <__fixsfsi>
     b14:	cb 01       	movw	r24, r22
     b16:	0e 94 da 04 	call	0x9b4	; 0x9b4 <get_tank_capacity_at_height>
     b1a:	6b 01       	movw	r12, r22
     b1c:	7c 01       	movw	r14, r24

    if (capacity_at_1 > capacity_at_2)
     b1e:	9b 01       	movw	r18, r22
     b20:	ac 01       	movw	r20, r24
     b22:	c5 01       	movw	r24, r10
     b24:	b4 01       	movw	r22, r8
     b26:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <__gesf2>
     b2a:	18 16       	cp	r1, r24
     b2c:	9c f0       	brlt	.+38     	; 0xb54 <get_refill_rate+0xc2>
    {
        return 0.0; // no leak detected
    }

    float leak_rate_per_second = (capacity_at_2 - capacity_at_1) / 2.0;
     b2e:	a5 01       	movw	r20, r10
     b30:	94 01       	movw	r18, r8
     b32:	c7 01       	movw	r24, r14
     b34:	b6 01       	movw	r22, r12
     b36:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <__subsf3>
     b3a:	20 e0       	ldi	r18, 0x00	; 0
     b3c:	30 e0       	ldi	r19, 0x00	; 0
     b3e:	40 e0       	ldi	r20, 0x00	; 0
     b40:	5f e3       	ldi	r21, 0x3F	; 63
     b42:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <__mulsf3>

    return leak_rate_per_second * 60.0; // convert to liters per minute
     b46:	20 e0       	ldi	r18, 0x00	; 0
     b48:	30 e0       	ldi	r19, 0x00	; 0
     b4a:	40 e7       	ldi	r20, 0x70	; 112
     b4c:	52 e4       	ldi	r21, 0x42	; 66
     b4e:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <__mulsf3>
     b52:	03 c0       	rjmp	.+6      	; 0xb5a <get_refill_rate+0xc8>
    float capacity_at_1 = get_tank_capacity_at_height(height_1 * 1.5);
    float capacity_at_2 = get_tank_capacity_at_height(height_2 * 1.5);

    if (capacity_at_1 > capacity_at_2)
    {
        return 0.0; // no leak detected
     b54:	60 e0       	ldi	r22, 0x00	; 0
     b56:	70 e0       	ldi	r23, 0x00	; 0
     b58:	cb 01       	movw	r24, r22
    }

    float leak_rate_per_second = (capacity_at_2 - capacity_at_1) / 2.0;

    return leak_rate_per_second * 60.0; // convert to liters per minute
}
     b5a:	0f 90       	pop	r0
     b5c:	0f 90       	pop	r0
     b5e:	0f 90       	pop	r0
     b60:	0f 90       	pop	r0
     b62:	df 91       	pop	r29
     b64:	cf 91       	pop	r28
     b66:	ff 90       	pop	r15
     b68:	ef 90       	pop	r14
     b6a:	df 90       	pop	r13
     b6c:	cf 90       	pop	r12
     b6e:	bf 90       	pop	r11
     b70:	af 90       	pop	r10
     b72:	9f 90       	pop	r9
     b74:	8f 90       	pop	r8
     b76:	08 95       	ret

00000b78 <get_leak_rate>:
    get the leak rate based on tank capacity change over time
    params: void
    returns: float - the leak rate in liters per minute
*/
float get_leak_rate()
{
     b78:	8f 92       	push	r8
     b7a:	9f 92       	push	r9
     b7c:	af 92       	push	r10
     b7e:	bf 92       	push	r11
     b80:	cf 92       	push	r12
     b82:	df 92       	push	r13
     b84:	ef 92       	push	r14
     b86:	ff 92       	push	r15
     b88:	cf 93       	push	r28
     b8a:	df 93       	push	r29
     b8c:	00 d0       	rcall	.+0      	; 0xb8e <get_leak_rate+0x16>
     b8e:	00 d0       	rcall	.+0      	; 0xb90 <get_leak_rate+0x18>
     b90:	cd b7       	in	r28, 0x3d	; 61
     b92:	de b7       	in	r29, 0x3e	; 62
    int height_1;
    peekRear(&height_per_second, &height_1);
     b94:	be 01       	movw	r22, r28
     b96:	6f 5f       	subi	r22, 0xFF	; 255
     b98:	7f 4f       	sbci	r23, 0xFF	; 255
     b9a:	8c e9       	ldi	r24, 0x9C	; 156
     b9c:	94 e0       	ldi	r25, 0x04	; 4
     b9e:	0e 94 df 01 	call	0x3be	; 0x3be <peekRear>

    int height_2;
    peekFront(&height_per_second, &height_2);
     ba2:	be 01       	movw	r22, r28
     ba4:	6d 5f       	subi	r22, 0xFD	; 253
     ba6:	7f 4f       	sbci	r23, 0xFF	; 255
     ba8:	8c e9       	ldi	r24, 0x9C	; 156
     baa:	94 e0       	ldi	r25, 0x04	; 4
     bac:	0e 94 c2 01 	call	0x384	; 0x384 <peekFront>

    float capacity_at_1 = get_tank_capacity_at_height(height_1 * 1.5);
     bb0:	69 81       	ldd	r22, Y+1	; 0x01
     bb2:	7a 81       	ldd	r23, Y+2	; 0x02
     bb4:	07 2e       	mov	r0, r23
     bb6:	00 0c       	add	r0, r0
     bb8:	88 0b       	sbc	r24, r24
     bba:	99 0b       	sbc	r25, r25
     bbc:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <__floatsisf>
     bc0:	20 e0       	ldi	r18, 0x00	; 0
     bc2:	30 e0       	ldi	r19, 0x00	; 0
     bc4:	40 ec       	ldi	r20, 0xC0	; 192
     bc6:	5f e3       	ldi	r21, 0x3F	; 63
     bc8:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <__mulsf3>
     bcc:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <__fixsfsi>
     bd0:	cb 01       	movw	r24, r22
     bd2:	0e 94 da 04 	call	0x9b4	; 0x9b4 <get_tank_capacity_at_height>
     bd6:	6b 01       	movw	r12, r22
     bd8:	7c 01       	movw	r14, r24
    float capacity_at_2 = get_tank_capacity_at_height(height_2 * 1.5);
     bda:	6b 81       	ldd	r22, Y+3	; 0x03
     bdc:	7c 81       	ldd	r23, Y+4	; 0x04
     bde:	07 2e       	mov	r0, r23
     be0:	00 0c       	add	r0, r0
     be2:	88 0b       	sbc	r24, r24
     be4:	99 0b       	sbc	r25, r25
     be6:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <__floatsisf>
     bea:	20 e0       	ldi	r18, 0x00	; 0
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	40 ec       	ldi	r20, 0xC0	; 192
     bf0:	5f e3       	ldi	r21, 0x3F	; 63
     bf2:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <__mulsf3>
     bf6:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <__fixsfsi>
     bfa:	cb 01       	movw	r24, r22
     bfc:	0e 94 da 04 	call	0x9b4	; 0x9b4 <get_tank_capacity_at_height>
     c00:	4b 01       	movw	r8, r22
     c02:	5c 01       	movw	r10, r24

    if (capacity_at_1 < capacity_at_2) {
     c04:	9b 01       	movw	r18, r22
     c06:	ac 01       	movw	r20, r24
     c08:	c7 01       	movw	r24, r14
     c0a:	b6 01       	movw	r22, r12
     c0c:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <__cmpsf2>
     c10:	88 23       	and	r24, r24
     c12:	9c f0       	brlt	.+38     	; 0xc3a <get_leak_rate+0xc2>
        return 0.0; // no leak detected
    }
    float leak_rate_per_second = (capacity_at_1 - capacity_at_2) / 2.0;
     c14:	a5 01       	movw	r20, r10
     c16:	94 01       	movw	r18, r8
     c18:	c7 01       	movw	r24, r14
     c1a:	b6 01       	movw	r22, r12
     c1c:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <__subsf3>
     c20:	20 e0       	ldi	r18, 0x00	; 0
     c22:	30 e0       	ldi	r19, 0x00	; 0
     c24:	40 e0       	ldi	r20, 0x00	; 0
     c26:	5f e3       	ldi	r21, 0x3F	; 63
     c28:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <__mulsf3>

    return leak_rate_per_second * 60.0; // convert to liters per minute
     c2c:	20 e0       	ldi	r18, 0x00	; 0
     c2e:	30 e0       	ldi	r19, 0x00	; 0
     c30:	40 e7       	ldi	r20, 0x70	; 112
     c32:	52 e4       	ldi	r21, 0x42	; 66
     c34:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <__mulsf3>
     c38:	03 c0       	rjmp	.+6      	; 0xc40 <get_leak_rate+0xc8>

    float capacity_at_1 = get_tank_capacity_at_height(height_1 * 1.5);
    float capacity_at_2 = get_tank_capacity_at_height(height_2 * 1.5);

    if (capacity_at_1 < capacity_at_2) {
        return 0.0; // no leak detected
     c3a:	60 e0       	ldi	r22, 0x00	; 0
     c3c:	70 e0       	ldi	r23, 0x00	; 0
     c3e:	cb 01       	movw	r24, r22
    }
    float leak_rate_per_second = (capacity_at_1 - capacity_at_2) / 2.0;

    return leak_rate_per_second * 60.0; // convert to liters per minute
}
     c40:	0f 90       	pop	r0
     c42:	0f 90       	pop	r0
     c44:	0f 90       	pop	r0
     c46:	0f 90       	pop	r0
     c48:	df 91       	pop	r29
     c4a:	cf 91       	pop	r28
     c4c:	ff 90       	pop	r15
     c4e:	ef 90       	pop	r14
     c50:	df 90       	pop	r13
     c52:	cf 90       	pop	r12
     c54:	bf 90       	pop	r11
     c56:	af 90       	pop	r10
     c58:	9f 90       	pop	r9
     c5a:	8f 90       	pop	r8
     c5c:	08 95       	ret

00000c5e <get_soil_temperature>:

float get_soil_temperature()
{
    return DS18B20_read_temperature();
     c5e:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <DS18B20_read_temperature>
}
     c62:	08 95       	ret

00000c64 <ui_show_display>:
    update the display based on the current active menu and hover indices
    params: void
    returns: void
*/
void ui_show_display(void)
{
     c64:	ef 92       	push	r14
     c66:	ff 92       	push	r15
     c68:	0f 93       	push	r16
     c6a:	cf 93       	push	r28
     c6c:	df 93       	push	r29
     c6e:	00 d0       	rcall	.+0      	; 0xc70 <ui_show_display+0xc>
     c70:	cd b7       	in	r28, 0x3d	; 61
     c72:	de b7       	in	r29, 0x3e	; 62
    if (active_menu_index == -1)
     c74:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <active_menu_index>
     c78:	f0 91 21 01 	lds	r31, 0x0121	; 0x800121 <active_menu_index+0x1>
     c7c:	ef 3f       	cpi	r30, 0xFF	; 255
     c7e:	2f ef       	ldi	r18, 0xFF	; 255
     c80:	f2 07       	cpc	r31, r18
     c82:	79 f4       	brne	.+30     	; 0xca2 <ui_show_display+0x3e>
    {
        display_set("MAIN MENU", MENU_BUFFER[menu_hover_index]);
     c84:	e0 91 89 04 	lds	r30, 0x0489	; 0x800489 <menu_hover_index>
     c88:	f0 91 8a 04 	lds	r31, 0x048A	; 0x80048a <menu_hover_index+0x1>
     c8c:	ee 0f       	add	r30, r30
     c8e:	ff 1f       	adc	r31, r31
     c90:	e8 5c       	subi	r30, 0xC8	; 200
     c92:	fe 4f       	sbci	r31, 0xFE	; 254
     c94:	60 81       	ld	r22, Z
     c96:	71 81       	ldd	r23, Z+1	; 0x01
     c98:	8a e3       	ldi	r24, 0x3A	; 58
     c9a:	92 e0       	ldi	r25, 0x02	; 2
     c9c:	0e 94 09 04 	call	0x812	; 0x812 <display_set>
     ca0:	6f c2       	rjmp	.+1246   	; 0x1180 <ui_show_display+0x51c>
    }
    else
    {
        switch (active_menu_index)
     ca2:	e8 30       	cpi	r30, 0x08	; 8
     ca4:	f1 05       	cpc	r31, r1
     ca6:	08 f0       	brcs	.+2      	; 0xcaa <ui_show_display+0x46>
     ca8:	65 c2       	rjmp	.+1226   	; 0x1174 <ui_show_display+0x510>
     caa:	ec 5c       	subi	r30, 0xCC	; 204
     cac:	ff 4f       	sbci	r31, 0xFF	; 255
     cae:	0c 94 c6 0e 	jmp	0x1d8c	; 0x1d8c <__tablejump2__>
        {
        case 0:
            display_set("TANK CAPACITY", "Loading...");
     cb2:	64 e4       	ldi	r22, 0x44	; 68
     cb4:	72 e0       	ldi	r23, 0x02	; 2
     cb6:	8f e4       	ldi	r24, 0x4F	; 79
     cb8:	92 e0       	ldi	r25, 0x02	; 2
     cba:	0e 94 09 04 	call	0x812	; 0x812 <display_set>
            format_float(buffer, sizeof(buffer), get_tank_capacity(), 1, "Ltrs");
     cbe:	0e 94 0b 05 	call	0xa16	; 0xa16 <get_tank_capacity>
     cc2:	9b 01       	movw	r18, r22
     cc4:	ac 01       	movw	r20, r24
     cc6:	0f 2e       	mov	r0, r31
     cc8:	fd e5       	ldi	r31, 0x5D	; 93
     cca:	ef 2e       	mov	r14, r31
     ccc:	f2 e0       	ldi	r31, 0x02	; 2
     cce:	ff 2e       	mov	r15, r31
     cd0:	f0 2d       	mov	r31, r0
     cd2:	01 e0       	ldi	r16, 0x01	; 1
     cd4:	60 e1       	ldi	r22, 0x10	; 16
     cd6:	70 e0       	ldi	r23, 0x00	; 0
     cd8:	8c e8       	ldi	r24, 0x8C	; 140
     cda:	94 e0       	ldi	r25, 0x04	; 4
     cdc:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <format_float>
            display_set("TANK CAPACITY", buffer);
     ce0:	6c e8       	ldi	r22, 0x8C	; 140
     ce2:	74 e0       	ldi	r23, 0x04	; 4
     ce4:	8f e4       	ldi	r24, 0x4F	; 79
     ce6:	92 e0       	ldi	r25, 0x02	; 2
     ce8:	0e 94 09 04 	call	0x812	; 0x812 <display_set>
            break;
     cec:	49 c2       	rjmp	.+1170   	; 0x1180 <ui_show_display+0x51c>
        case 1:
            display_set("REFILL RATE", "Loading...");
     cee:	64 e4       	ldi	r22, 0x44	; 68
     cf0:	72 e0       	ldi	r23, 0x02	; 2
     cf2:	82 e6       	ldi	r24, 0x62	; 98
     cf4:	92 e0       	ldi	r25, 0x02	; 2
     cf6:	0e 94 09 04 	call	0x812	; 0x812 <display_set>
            format_float(buffer, sizeof(buffer), get_refill_rate(), 1, "Ltrs per hour");
     cfa:	0e 94 49 05 	call	0xa92	; 0xa92 <get_refill_rate>
     cfe:	9b 01       	movw	r18, r22
     d00:	ac 01       	movw	r20, r24
     d02:	0f 2e       	mov	r0, r31
     d04:	fe e6       	ldi	r31, 0x6E	; 110
     d06:	ef 2e       	mov	r14, r31
     d08:	f2 e0       	ldi	r31, 0x02	; 2
     d0a:	ff 2e       	mov	r15, r31
     d0c:	f0 2d       	mov	r31, r0
     d0e:	01 e0       	ldi	r16, 0x01	; 1
     d10:	60 e1       	ldi	r22, 0x10	; 16
     d12:	70 e0       	ldi	r23, 0x00	; 0
     d14:	8c e8       	ldi	r24, 0x8C	; 140
     d16:	94 e0       	ldi	r25, 0x04	; 4
     d18:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <format_float>
            display_set("REFILL RATE", buffer);
     d1c:	6c e8       	ldi	r22, 0x8C	; 140
     d1e:	74 e0       	ldi	r23, 0x04	; 4
     d20:	82 e6       	ldi	r24, 0x62	; 98
     d22:	92 e0       	ldi	r25, 0x02	; 2
     d24:	0e 94 09 04 	call	0x812	; 0x812 <display_set>
            break;
     d28:	2b c2       	rjmp	.+1110   	; 0x1180 <ui_show_display+0x51c>
        case 2:
            display_set("LEAKAGE RATE", "Loading...");
     d2a:	64 e4       	ldi	r22, 0x44	; 68
     d2c:	72 e0       	ldi	r23, 0x02	; 2
     d2e:	8c e7       	ldi	r24, 0x7C	; 124
     d30:	92 e0       	ldi	r25, 0x02	; 2
     d32:	0e 94 09 04 	call	0x812	; 0x812 <display_set>
            format_float(buffer, sizeof(buffer), get_leak_rate(), 1, "Ltrs per min");
     d36:	0e 94 bc 05 	call	0xb78	; 0xb78 <get_leak_rate>
     d3a:	9b 01       	movw	r18, r22
     d3c:	ac 01       	movw	r20, r24
     d3e:	0f 2e       	mov	r0, r31
     d40:	f9 e8       	ldi	r31, 0x89	; 137
     d42:	ef 2e       	mov	r14, r31
     d44:	f2 e0       	ldi	r31, 0x02	; 2
     d46:	ff 2e       	mov	r15, r31
     d48:	f0 2d       	mov	r31, r0
     d4a:	01 e0       	ldi	r16, 0x01	; 1
     d4c:	60 e1       	ldi	r22, 0x10	; 16
     d4e:	70 e0       	ldi	r23, 0x00	; 0
     d50:	8c e8       	ldi	r24, 0x8C	; 140
     d52:	94 e0       	ldi	r25, 0x04	; 4
     d54:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <format_float>
            display_set("LEAKAGE RATE", buffer);
     d58:	6c e8       	ldi	r22, 0x8C	; 140
     d5a:	74 e0       	ldi	r23, 0x04	; 4
     d5c:	8c e7       	ldi	r24, 0x7C	; 124
     d5e:	92 e0       	ldi	r25, 0x02	; 2
     d60:	0e 94 09 04 	call	0x812	; 0x812 <display_set>
            break;
     d64:	0d c2       	rjmp	.+1050   	; 0x1180 <ui_show_display+0x51c>
        case 3:
            display_set("SOIL TEMPERATURE", "Loading...");
     d66:	64 e4       	ldi	r22, 0x44	; 68
     d68:	72 e0       	ldi	r23, 0x02	; 2
     d6a:	86 e9       	ldi	r24, 0x96	; 150
     d6c:	92 e0       	ldi	r25, 0x02	; 2
     d6e:	0e 94 09 04 	call	0x812	; 0x812 <display_set>
            format_float(buffer, sizeof(buffer), get_soil_temperature(), 1, "degrees");
     d72:	0e 94 2f 06 	call	0xc5e	; 0xc5e <get_soil_temperature>
     d76:	9b 01       	movw	r18, r22
     d78:	ac 01       	movw	r20, r24
     d7a:	0f 2e       	mov	r0, r31
     d7c:	f7 ea       	ldi	r31, 0xA7	; 167
     d7e:	ef 2e       	mov	r14, r31
     d80:	f2 e0       	ldi	r31, 0x02	; 2
     d82:	ff 2e       	mov	r15, r31
     d84:	f0 2d       	mov	r31, r0
     d86:	01 e0       	ldi	r16, 0x01	; 1
     d88:	60 e1       	ldi	r22, 0x10	; 16
     d8a:	70 e0       	ldi	r23, 0x00	; 0
     d8c:	8c e8       	ldi	r24, 0x8C	; 140
     d8e:	94 e0       	ldi	r25, 0x04	; 4
     d90:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <format_float>
            display_set("SOIL TEMPERATURE", buffer);
     d94:	6c e8       	ldi	r22, 0x8C	; 140
     d96:	74 e0       	ldi	r23, 0x04	; 4
     d98:	86 e9       	ldi	r24, 0x96	; 150
     d9a:	92 e0       	ldi	r25, 0x02	; 2
     d9c:	0e 94 09 04 	call	0x812	; 0x812 <display_set>
            break;
     da0:	ef c1       	rjmp	.+990    	; 0x1180 <ui_show_display+0x51c>
        case 4:
            if (active_live_view_index == -1)
     da2:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <active_live_view_index>
     da6:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <active_live_view_index+0x1>
     daa:	01 96       	adiw	r24, 0x01	; 1
     dac:	79 f4       	brne	.+30     	; 0xdcc <ui_show_display+0x168>
            {
                display_set("LIVE VIEW", LIVE_VIEW_BUFFER[live_view_hover_index]);
     dae:	e0 91 81 04 	lds	r30, 0x0481	; 0x800481 <live_view_hover_index>
     db2:	f0 91 82 04 	lds	r31, 0x0482	; 0x800482 <live_view_hover_index+0x1>
     db6:	ee 0f       	add	r30, r30
     db8:	ff 1f       	adc	r31, r31
     dba:	e0 5d       	subi	r30, 0xD0	; 208
     dbc:	fe 4f       	sbci	r31, 0xFE	; 254
     dbe:	60 81       	ld	r22, Z
     dc0:	71 81       	ldd	r23, Z+1	; 0x01
     dc2:	8f ea       	ldi	r24, 0xAF	; 175
     dc4:	92 e0       	ldi	r25, 0x02	; 2
     dc6:	0e 94 09 04 	call	0x812	; 0x812 <display_set>
     dca:	da c1       	rjmp	.+948    	; 0x1180 <ui_show_display+0x51c>
            }
            else
            {
                switch (live_view_hover_index)
     dcc:	80 91 81 04 	lds	r24, 0x0481	; 0x800481 <live_view_hover_index>
     dd0:	90 91 82 04 	lds	r25, 0x0482	; 0x800482 <live_view_hover_index+0x1>
     dd4:	81 30       	cpi	r24, 0x01	; 1
     dd6:	91 05       	cpc	r25, r1
     dd8:	39 f1       	breq	.+78     	; 0xe28 <ui_show_display+0x1c4>
     dda:	1c f4       	brge	.+6      	; 0xde2 <ui_show_display+0x17e>
     ddc:	89 2b       	or	r24, r25
     dde:	41 f0       	breq	.+16     	; 0xdf0 <ui_show_display+0x18c>
     de0:	77 c0       	rjmp	.+238    	; 0xed0 <ui_show_display+0x26c>
     de2:	82 30       	cpi	r24, 0x02	; 2
     de4:	91 05       	cpc	r25, r1
     de6:	e1 f1       	breq	.+120    	; 0xe60 <ui_show_display+0x1fc>
     de8:	03 97       	sbiw	r24, 0x03	; 3
     dea:	09 f4       	brne	.+2      	; 0xdee <ui_show_display+0x18a>
     dec:	55 c0       	rjmp	.+170    	; 0xe98 <ui_show_display+0x234>
     dee:	70 c0       	rjmp	.+224    	; 0xed0 <ui_show_display+0x26c>
                {
                case 0:
                    format_float(buffer, sizeof(buffer), current_tank_capacity, 1, "Ltrs");
     df0:	20 91 7d 04 	lds	r18, 0x047D	; 0x80047d <current_tank_capacity>
     df4:	30 91 7e 04 	lds	r19, 0x047E	; 0x80047e <current_tank_capacity+0x1>
     df8:	40 91 7f 04 	lds	r20, 0x047F	; 0x80047f <current_tank_capacity+0x2>
     dfc:	50 91 80 04 	lds	r21, 0x0480	; 0x800480 <current_tank_capacity+0x3>
     e00:	0f 2e       	mov	r0, r31
     e02:	fd e5       	ldi	r31, 0x5D	; 93
     e04:	ef 2e       	mov	r14, r31
     e06:	f2 e0       	ldi	r31, 0x02	; 2
     e08:	ff 2e       	mov	r15, r31
     e0a:	f0 2d       	mov	r31, r0
     e0c:	01 e0       	ldi	r16, 0x01	; 1
     e0e:	60 e1       	ldi	r22, 0x10	; 16
     e10:	70 e0       	ldi	r23, 0x00	; 0
     e12:	8c e8       	ldi	r24, 0x8C	; 140
     e14:	94 e0       	ldi	r25, 0x04	; 4
     e16:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <format_float>
                    display_set("CAPACITY", buffer);
     e1a:	6c e8       	ldi	r22, 0x8C	; 140
     e1c:	74 e0       	ldi	r23, 0x04	; 4
     e1e:	84 e5       	ldi	r24, 0x54	; 84
     e20:	92 e0       	ldi	r25, 0x02	; 2
     e22:	0e 94 09 04 	call	0x812	; 0x812 <display_set>
                    break;
     e26:	ac c1       	rjmp	.+856    	; 0x1180 <ui_show_display+0x51c>
                case 1:
                    format_float(buffer, sizeof(buffer), current_refill_rate, 1, "Ltrs per min");
     e28:	20 91 79 04 	lds	r18, 0x0479	; 0x800479 <current_refill_rate>
     e2c:	30 91 7a 04 	lds	r19, 0x047A	; 0x80047a <current_refill_rate+0x1>
     e30:	40 91 7b 04 	lds	r20, 0x047B	; 0x80047b <current_refill_rate+0x2>
     e34:	50 91 7c 04 	lds	r21, 0x047C	; 0x80047c <current_refill_rate+0x3>
     e38:	0f 2e       	mov	r0, r31
     e3a:	f9 e8       	ldi	r31, 0x89	; 137
     e3c:	ef 2e       	mov	r14, r31
     e3e:	f2 e0       	ldi	r31, 0x02	; 2
     e40:	ff 2e       	mov	r15, r31
     e42:	f0 2d       	mov	r31, r0
     e44:	01 e0       	ldi	r16, 0x01	; 1
     e46:	60 e1       	ldi	r22, 0x10	; 16
     e48:	70 e0       	ldi	r23, 0x00	; 0
     e4a:	8c e8       	ldi	r24, 0x8C	; 140
     e4c:	94 e0       	ldi	r25, 0x04	; 4
     e4e:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <format_float>
                    display_set("REFILL RATE", buffer);
     e52:	6c e8       	ldi	r22, 0x8C	; 140
     e54:	74 e0       	ldi	r23, 0x04	; 4
     e56:	82 e6       	ldi	r24, 0x62	; 98
     e58:	92 e0       	ldi	r25, 0x02	; 2
     e5a:	0e 94 09 04 	call	0x812	; 0x812 <display_set>
                    break;
     e5e:	90 c1       	rjmp	.+800    	; 0x1180 <ui_show_display+0x51c>
                case 2:
                    format_float(buffer, sizeof(buffer), current_leak_rate, 1, "Ltrs per min");
     e60:	20 91 75 04 	lds	r18, 0x0475	; 0x800475 <current_leak_rate>
     e64:	30 91 76 04 	lds	r19, 0x0476	; 0x800476 <current_leak_rate+0x1>
     e68:	40 91 77 04 	lds	r20, 0x0477	; 0x800477 <current_leak_rate+0x2>
     e6c:	50 91 78 04 	lds	r21, 0x0478	; 0x800478 <current_leak_rate+0x3>
     e70:	0f 2e       	mov	r0, r31
     e72:	f9 e8       	ldi	r31, 0x89	; 137
     e74:	ef 2e       	mov	r14, r31
     e76:	f2 e0       	ldi	r31, 0x02	; 2
     e78:	ff 2e       	mov	r15, r31
     e7a:	f0 2d       	mov	r31, r0
     e7c:	01 e0       	ldi	r16, 0x01	; 1
     e7e:	60 e1       	ldi	r22, 0x10	; 16
     e80:	70 e0       	ldi	r23, 0x00	; 0
     e82:	8c e8       	ldi	r24, 0x8C	; 140
     e84:	94 e0       	ldi	r25, 0x04	; 4
     e86:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <format_float>
                    display_set("LEAK RATE", buffer);
     e8a:	6c e8       	ldi	r22, 0x8C	; 140
     e8c:	74 e0       	ldi	r23, 0x04	; 4
     e8e:	89 eb       	ldi	r24, 0xB9	; 185
     e90:	92 e0       	ldi	r25, 0x02	; 2
     e92:	0e 94 09 04 	call	0x812	; 0x812 <display_set>
                    break;
     e96:	74 c1       	rjmp	.+744    	; 0x1180 <ui_show_display+0x51c>
                case 3:
                    format_float(buffer, sizeof(buffer), current_soil_temperature, 1, "degrees");
     e98:	20 91 71 04 	lds	r18, 0x0471	; 0x800471 <current_soil_temperature>
     e9c:	30 91 72 04 	lds	r19, 0x0472	; 0x800472 <current_soil_temperature+0x1>
     ea0:	40 91 73 04 	lds	r20, 0x0473	; 0x800473 <current_soil_temperature+0x2>
     ea4:	50 91 74 04 	lds	r21, 0x0474	; 0x800474 <current_soil_temperature+0x3>
     ea8:	0f 2e       	mov	r0, r31
     eaa:	f7 ea       	ldi	r31, 0xA7	; 167
     eac:	ef 2e       	mov	r14, r31
     eae:	f2 e0       	ldi	r31, 0x02	; 2
     eb0:	ff 2e       	mov	r15, r31
     eb2:	f0 2d       	mov	r31, r0
     eb4:	01 e0       	ldi	r16, 0x01	; 1
     eb6:	60 e1       	ldi	r22, 0x10	; 16
     eb8:	70 e0       	ldi	r23, 0x00	; 0
     eba:	8c e8       	ldi	r24, 0x8C	; 140
     ebc:	94 e0       	ldi	r25, 0x04	; 4
     ebe:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <format_float>
                    display_set("SOIL TEMP", buffer);
     ec2:	6c e8       	ldi	r22, 0x8C	; 140
     ec4:	74 e0       	ldi	r23, 0x04	; 4
     ec6:	83 ec       	ldi	r24, 0xC3	; 195
     ec8:	92 e0       	ldi	r25, 0x02	; 2
     eca:	0e 94 09 04 	call	0x812	; 0x812 <display_set>
                    break;
     ece:	58 c1       	rjmp	.+688    	; 0x1180 <ui_show_display+0x51c>
                default:
                    display_set("ERROR", "Invalid live view");
     ed0:	6d ec       	ldi	r22, 0xCD	; 205
     ed2:	72 e0       	ldi	r23, 0x02	; 2
     ed4:	8f ed       	ldi	r24, 0xDF	; 223
     ed6:	92 e0       	ldi	r25, 0x02	; 2
     ed8:	0e 94 09 04 	call	0x812	; 0x812 <display_set>
                    break;
     edc:	51 c1       	rjmp	.+674    	; 0x1180 <ui_show_display+0x51c>
                }
            }
            break;
        case 5:
            if (active_trigger_index == -1)
     ede:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <active_trigger_index>
     ee2:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <active_trigger_index+0x1>
     ee6:	8f 3f       	cpi	r24, 0xFF	; 255
     ee8:	2f ef       	ldi	r18, 0xFF	; 255
     eea:	92 07       	cpc	r25, r18
     eec:	79 f4       	brne	.+30     	; 0xf0c <ui_show_display+0x2a8>
            {
                display_set("TRIGGERS", TRIGGERS_BUFFER[trigger_hover_index]);
     eee:	e0 91 87 04 	lds	r30, 0x0487	; 0x800487 <trigger_hover_index>
     ef2:	f0 91 88 04 	lds	r31, 0x0488	; 0x800488 <trigger_hover_index+0x1>
     ef6:	ee 0f       	add	r30, r30
     ef8:	ff 1f       	adc	r31, r31
     efa:	e4 5d       	subi	r30, 0xD4	; 212
     efc:	fe 4f       	sbci	r31, 0xFE	; 254
     efe:	60 81       	ld	r22, Z
     f00:	71 81       	ldd	r23, Z+1	; 0x01
     f02:	8d e5       	ldi	r24, 0x5D	; 93
     f04:	93 e0       	ldi	r25, 0x03	; 3
     f06:	0e 94 09 04 	call	0x812	; 0x812 <display_set>
     f0a:	3a c1       	rjmp	.+628    	; 0x1180 <ui_show_display+0x51c>
            }
            else
            {
                switch (active_trigger_index)
     f0c:	00 97       	sbiw	r24, 0x00	; 0
     f0e:	19 f0       	breq	.+6      	; 0xf16 <ui_show_display+0x2b2>
     f10:	01 97       	sbiw	r24, 0x01	; 1
     f12:	e9 f0       	breq	.+58     	; 0xf4e <ui_show_display+0x2ea>
     f14:	38 c0       	rjmp	.+112    	; 0xf86 <ui_show_display+0x322>
                {
                case 0:
                    format_float(buffer, sizeof(buffer), MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER, 1, "Ltrs");
     f16:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER>
     f1a:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x1>
     f1e:	40 91 18 01 	lds	r20, 0x0118	; 0x800118 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x2>
     f22:	50 91 19 01 	lds	r21, 0x0119	; 0x800119 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x3>
     f26:	0f 2e       	mov	r0, r31
     f28:	fd e5       	ldi	r31, 0x5D	; 93
     f2a:	ef 2e       	mov	r14, r31
     f2c:	f2 e0       	ldi	r31, 0x02	; 2
     f2e:	ff 2e       	mov	r15, r31
     f30:	f0 2d       	mov	r31, r0
     f32:	01 e0       	ldi	r16, 0x01	; 1
     f34:	60 e1       	ldi	r22, 0x10	; 16
     f36:	70 e0       	ldi	r23, 0x00	; 0
     f38:	8c e8       	ldi	r24, 0x8C	; 140
     f3a:	94 e0       	ldi	r25, 0x04	; 4
     f3c:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <format_float>
                    display_set("MIN CAPACITY", buffer);
     f40:	6c e8       	ldi	r22, 0x8C	; 140
     f42:	74 e0       	ldi	r23, 0x04	; 4
     f44:	85 ee       	ldi	r24, 0xE5	; 229
     f46:	92 e0       	ldi	r25, 0x02	; 2
     f48:	0e 94 09 04 	call	0x812	; 0x812 <display_set>
                    break;
     f4c:	19 c1       	rjmp	.+562    	; 0x1180 <ui_show_display+0x51c>
                case 1:
                    format_float(buffer, sizeof(buffer), MAXIMUM_TEMPERATURE_BEFORE_PUMPING, 2, "degrees");
     f4e:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING>
     f52:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x1>
     f56:	40 91 14 01 	lds	r20, 0x0114	; 0x800114 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x2>
     f5a:	50 91 15 01 	lds	r21, 0x0115	; 0x800115 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x3>
     f5e:	0f 2e       	mov	r0, r31
     f60:	f7 ea       	ldi	r31, 0xA7	; 167
     f62:	ef 2e       	mov	r14, r31
     f64:	f2 e0       	ldi	r31, 0x02	; 2
     f66:	ff 2e       	mov	r15, r31
     f68:	f0 2d       	mov	r31, r0
     f6a:	02 e0       	ldi	r16, 0x02	; 2
     f6c:	60 e1       	ldi	r22, 0x10	; 16
     f6e:	70 e0       	ldi	r23, 0x00	; 0
     f70:	8c e8       	ldi	r24, 0x8C	; 140
     f72:	94 e0       	ldi	r25, 0x04	; 4
     f74:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <format_float>
                    display_set("MAX TEMP", buffer);
     f78:	6c e8       	ldi	r22, 0x8C	; 140
     f7a:	74 e0       	ldi	r23, 0x04	; 4
     f7c:	82 ef       	ldi	r24, 0xF2	; 242
     f7e:	92 e0       	ldi	r25, 0x02	; 2
     f80:	0e 94 09 04 	call	0x812	; 0x812 <display_set>
                    break;
     f84:	fd c0       	rjmp	.+506    	; 0x1180 <ui_show_display+0x51c>
                default:
                    display_set("ERROR", "Invalid trigger");
     f86:	6b ef       	ldi	r22, 0xFB	; 251
     f88:	72 e0       	ldi	r23, 0x02	; 2
     f8a:	8f ed       	ldi	r24, 0xDF	; 223
     f8c:	92 e0       	ldi	r25, 0x02	; 2
     f8e:	0e 94 09 04 	call	0x812	; 0x812 <display_set>
                    break;
     f92:	f6 c0       	rjmp	.+492    	; 0x1180 <ui_show_display+0x51c>
            break;

        case 6:
            // if the messages queue is not empty, show the first (oldest) message
			{
                char *msgptr = NULL;
     f94:	1a 82       	std	Y+2, r1	; 0x02
     f96:	19 82       	std	Y+1, r1	; 0x01
                if (!isStrQueueEmpty(&MESSAGES_Q))
     f98:	84 eb       	ldi	r24, 0xB4	; 180
     f9a:	94 e0       	ldi	r25, 0x04	; 4
     f9c:	0e 94 13 02 	call	0x426	; 0x426 <isStrQueueEmpty>
     fa0:	89 2b       	or	r24, r25
     fa2:	a9 f4       	brne	.+42     	; 0xfce <ui_show_display+0x36a>
                {
                    if (peekFrontStr(&MESSAGES_Q, &msgptr) == 0 && msgptr)
     fa4:	be 01       	movw	r22, r28
     fa6:	6f 5f       	subi	r22, 0xFF	; 255
     fa8:	7f 4f       	sbci	r23, 0xFF	; 255
     faa:	84 eb       	ldi	r24, 0xB4	; 180
     fac:	94 e0       	ldi	r25, 0x04	; 4
     fae:	0e 94 1d 02 	call	0x43a	; 0x43a <peekFrontStr>
     fb2:	89 2b       	or	r24, r25
     fb4:	09 f0       	breq	.+2      	; 0xfb8 <ui_show_display+0x354>
     fb6:	e4 c0       	rjmp	.+456    	; 0x1180 <ui_show_display+0x51c>
     fb8:	69 81       	ldd	r22, Y+1	; 0x01
     fba:	7a 81       	ldd	r23, Y+2	; 0x02
     fbc:	61 15       	cp	r22, r1
     fbe:	71 05       	cpc	r23, r1
     fc0:	09 f4       	brne	.+2      	; 0xfc4 <ui_show_display+0x360>
     fc2:	de c0       	rjmp	.+444    	; 0x1180 <ui_show_display+0x51c>
                    {
                        display_set("MESSAGES", msgptr);
     fc4:	8b e0       	ldi	r24, 0x0B	; 11
     fc6:	93 e0       	ldi	r25, 0x03	; 3
     fc8:	0e 94 09 04 	call	0x812	; 0x812 <display_set>
     fcc:	d9 c0       	rjmp	.+434    	; 0x1180 <ui_show_display+0x51c>
                    }
                } else 
                {
                    display_set("MESSAGES", "No messages");
     fce:	64 e1       	ldi	r22, 0x14	; 20
     fd0:	73 e0       	ldi	r23, 0x03	; 3
     fd2:	8b e0       	ldi	r24, 0x0B	; 11
     fd4:	93 e0       	ldi	r25, 0x03	; 3
     fd6:	0e 94 09 04 	call	0x812	; 0x812 <display_set>
				}
            }
            break;
     fda:	d2 c0       	rjmp	.+420    	; 0x1180 <ui_show_display+0x51c>
        case 7:
            if (active_config_index == -1)
     fdc:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <active_config_index>
     fe0:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <active_config_index+0x1>
     fe4:	8f 3f       	cpi	r24, 0xFF	; 255
     fe6:	2f ef       	ldi	r18, 0xFF	; 255
     fe8:	92 07       	cpc	r25, r18
     fea:	79 f4       	brne	.+30     	; 0x100a <ui_show_display+0x3a6>
            {
                display_set("CONFIG", CONFIG_BUFFER[config_hover_index]);
     fec:	e0 91 85 04 	lds	r30, 0x0485	; 0x800485 <config_hover_index>
     ff0:	f0 91 86 04 	lds	r31, 0x0486	; 0x800486 <config_hover_index+0x1>
     ff4:	ee 0f       	add	r30, r30
     ff6:	ff 1f       	adc	r31, r31
     ff8:	ee 5d       	subi	r30, 0xDE	; 222
     ffa:	fe 4f       	sbci	r31, 0xFE	; 254
     ffc:	60 81       	ld	r22, Z
     ffe:	71 81       	ldd	r23, Z+1	; 0x01
    1000:	80 e2       	ldi	r24, 0x20	; 32
    1002:	93 e0       	ldi	r25, 0x03	; 3
    1004:	0e 94 09 04 	call	0x812	; 0x812 <display_set>
    1008:	bb c0       	rjmp	.+374    	; 0x1180 <ui_show_display+0x51c>
            }
            else
            {
                switch (active_config_index)
    100a:	82 30       	cpi	r24, 0x02	; 2
    100c:	91 05       	cpc	r25, r1
    100e:	09 f4       	brne	.+2      	; 0x1012 <ui_show_display+0x3ae>
    1010:	46 c0       	rjmp	.+140    	; 0x109e <ui_show_display+0x43a>
    1012:	2c f4       	brge	.+10     	; 0x101e <ui_show_display+0x3ba>
    1014:	00 97       	sbiw	r24, 0x00	; 0
    1016:	59 f0       	breq	.+22     	; 0x102e <ui_show_display+0x3ca>
    1018:	01 97       	sbiw	r24, 0x01	; 1
    101a:	29 f1       	breq	.+74     	; 0x1066 <ui_show_display+0x402>
    101c:	a4 c0       	rjmp	.+328    	; 0x1166 <ui_show_display+0x502>
    101e:	83 30       	cpi	r24, 0x03	; 3
    1020:	91 05       	cpc	r25, r1
    1022:	09 f4       	brne	.+2      	; 0x1026 <ui_show_display+0x3c2>
    1024:	58 c0       	rjmp	.+176    	; 0x10d6 <ui_show_display+0x472>
    1026:	04 97       	sbiw	r24, 0x04	; 4
    1028:	09 f4       	brne	.+2      	; 0x102c <ui_show_display+0x3c8>
    102a:	79 c0       	rjmp	.+242    	; 0x111e <ui_show_display+0x4ba>
    102c:	9c c0       	rjmp	.+312    	; 0x1166 <ui_show_display+0x502>
                {
                case 0:
                    format_float(buffer, sizeof(buffer), STEP_SIZE_FOR_INCREMENTS, 1, "Units");
    102e:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <STEP_SIZE_FOR_INCREMENTS>
    1032:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <STEP_SIZE_FOR_INCREMENTS+0x1>
    1036:	40 91 10 01 	lds	r20, 0x0110	; 0x800110 <STEP_SIZE_FOR_INCREMENTS+0x2>
    103a:	50 91 11 01 	lds	r21, 0x0111	; 0x800111 <STEP_SIZE_FOR_INCREMENTS+0x3>
    103e:	0f 2e       	mov	r0, r31
    1040:	f7 e2       	ldi	r31, 0x27	; 39
    1042:	ef 2e       	mov	r14, r31
    1044:	f3 e0       	ldi	r31, 0x03	; 3
    1046:	ff 2e       	mov	r15, r31
    1048:	f0 2d       	mov	r31, r0
    104a:	01 e0       	ldi	r16, 0x01	; 1
    104c:	60 e1       	ldi	r22, 0x10	; 16
    104e:	70 e0       	ldi	r23, 0x00	; 0
    1050:	8c e8       	ldi	r24, 0x8C	; 140
    1052:	94 e0       	ldi	r25, 0x04	; 4
    1054:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <format_float>
                    display_set("STEP SIZE", buffer);
    1058:	6c e8       	ldi	r22, 0x8C	; 140
    105a:	74 e0       	ldi	r23, 0x04	; 4
    105c:	8d e2       	ldi	r24, 0x2D	; 45
    105e:	93 e0       	ldi	r25, 0x03	; 3
    1060:	0e 94 09 04 	call	0x812	; 0x812 <display_set>
                    break;
    1064:	8d c0       	rjmp	.+282    	; 0x1180 <ui_show_display+0x51c>
                case 1:
                    format_float(buffer, sizeof(buffer), PUMP_THRESHOLD, 1, "Ltrs");
    1066:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <PUMP_THRESHOLD>
    106a:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <PUMP_THRESHOLD+0x1>
    106e:	40 91 08 01 	lds	r20, 0x0108	; 0x800108 <PUMP_THRESHOLD+0x2>
    1072:	50 91 09 01 	lds	r21, 0x0109	; 0x800109 <PUMP_THRESHOLD+0x3>
    1076:	0f 2e       	mov	r0, r31
    1078:	fd e5       	ldi	r31, 0x5D	; 93
    107a:	ef 2e       	mov	r14, r31
    107c:	f2 e0       	ldi	r31, 0x02	; 2
    107e:	ff 2e       	mov	r15, r31
    1080:	f0 2d       	mov	r31, r0
    1082:	01 e0       	ldi	r16, 0x01	; 1
    1084:	60 e1       	ldi	r22, 0x10	; 16
    1086:	70 e0       	ldi	r23, 0x00	; 0
    1088:	8c e8       	ldi	r24, 0x8C	; 140
    108a:	94 e0       	ldi	r25, 0x04	; 4
    108c:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <format_float>
                    display_set("PUMP THRESHOLD", buffer);
    1090:	6c e8       	ldi	r22, 0x8C	; 140
    1092:	74 e0       	ldi	r23, 0x04	; 4
    1094:	87 e3       	ldi	r24, 0x37	; 55
    1096:	93 e0       	ldi	r25, 0x03	; 3
    1098:	0e 94 09 04 	call	0x812	; 0x812 <display_set>
                    break;
    109c:	71 c0       	rjmp	.+226    	; 0x1180 <ui_show_display+0x51c>
                case 2:
                    format_float(buffer, sizeof(buffer), SPRAY_THRESHOLD, 1, "degrees");
    109e:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <SPRAY_THRESHOLD>
    10a2:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <SPRAY_THRESHOLD+0x1>
    10a6:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <SPRAY_THRESHOLD+0x2>
    10aa:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <SPRAY_THRESHOLD+0x3>
    10ae:	0f 2e       	mov	r0, r31
    10b0:	f7 ea       	ldi	r31, 0xA7	; 167
    10b2:	ef 2e       	mov	r14, r31
    10b4:	f2 e0       	ldi	r31, 0x02	; 2
    10b6:	ff 2e       	mov	r15, r31
    10b8:	f0 2d       	mov	r31, r0
    10ba:	01 e0       	ldi	r16, 0x01	; 1
    10bc:	60 e1       	ldi	r22, 0x10	; 16
    10be:	70 e0       	ldi	r23, 0x00	; 0
    10c0:	8c e8       	ldi	r24, 0x8C	; 140
    10c2:	94 e0       	ldi	r25, 0x04	; 4
    10c4:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <format_float>
                    display_set("SPRAY THRESHOLD", buffer);
    10c8:	6c e8       	ldi	r22, 0x8C	; 140
    10ca:	74 e0       	ldi	r23, 0x04	; 4
    10cc:	86 e4       	ldi	r24, 0x46	; 70
    10ce:	93 e0       	ldi	r25, 0x03	; 3
    10d0:	0e 94 09 04 	call	0x812	; 0x812 <display_set>
                    break;
    10d4:	55 c0       	rjmp	.+170    	; 0x1180 <ui_show_display+0x51c>
                case 3:
                    snprintf(buffer, sizeof(buffer), "%s", ENABLE_TRIGGER_VALUE ? "Enabled" : "Disabled");
    10d6:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <ENABLE_TRIGGER_VALUE>
    10da:	88 23       	and	r24, r24
    10dc:	19 f0       	breq	.+6      	; 0x10e4 <ui_show_display+0x480>
    10de:	89 e2       	ldi	r24, 0x29	; 41
    10e0:	92 e0       	ldi	r25, 0x02	; 2
    10e2:	02 c0       	rjmp	.+4      	; 0x10e8 <ui_show_display+0x484>
    10e4:	81 e3       	ldi	r24, 0x31	; 49
    10e6:	92 e0       	ldi	r25, 0x02	; 2
    10e8:	9f 93       	push	r25
    10ea:	8f 93       	push	r24
    10ec:	8b e6       	ldi	r24, 0x6B	; 107
    10ee:	91 e0       	ldi	r25, 0x01	; 1
    10f0:	9f 93       	push	r25
    10f2:	8f 93       	push	r24
    10f4:	1f 92       	push	r1
    10f6:	80 e1       	ldi	r24, 0x10	; 16
    10f8:	8f 93       	push	r24
    10fa:	8c e8       	ldi	r24, 0x8C	; 140
    10fc:	94 e0       	ldi	r25, 0x04	; 4
    10fe:	9f 93       	push	r25
    1100:	8f 93       	push	r24
    1102:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <snprintf>
                    display_set("ENABLE TRIGGERS", buffer);
    1106:	6c e8       	ldi	r22, 0x8C	; 140
    1108:	74 e0       	ldi	r23, 0x04	; 4
    110a:	86 e5       	ldi	r24, 0x56	; 86
    110c:	93 e0       	ldi	r25, 0x03	; 3
    110e:	0e 94 09 04 	call	0x812	; 0x812 <display_set>
                    break;
    1112:	0f b6       	in	r0, 0x3f	; 63
    1114:	f8 94       	cli
    1116:	de bf       	out	0x3e, r29	; 62
    1118:	0f be       	out	0x3f, r0	; 63
    111a:	cd bf       	out	0x3d, r28	; 61
    111c:	31 c0       	rjmp	.+98     	; 0x1180 <ui_show_display+0x51c>
                case 4:
                    snprintf(buffer, sizeof(buffer), "%s", ENABLE_ALERT_VALUE ? "Enabled" : "Disabled");
    111e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1122:	88 23       	and	r24, r24
    1124:	19 f0       	breq	.+6      	; 0x112c <ui_show_display+0x4c8>
    1126:	89 e2       	ldi	r24, 0x29	; 41
    1128:	92 e0       	ldi	r25, 0x02	; 2
    112a:	02 c0       	rjmp	.+4      	; 0x1130 <ui_show_display+0x4cc>
    112c:	81 e3       	ldi	r24, 0x31	; 49
    112e:	92 e0       	ldi	r25, 0x02	; 2
    1130:	9f 93       	push	r25
    1132:	8f 93       	push	r24
    1134:	8b e6       	ldi	r24, 0x6B	; 107
    1136:	91 e0       	ldi	r25, 0x01	; 1
    1138:	9f 93       	push	r25
    113a:	8f 93       	push	r24
    113c:	1f 92       	push	r1
    113e:	80 e1       	ldi	r24, 0x10	; 16
    1140:	8f 93       	push	r24
    1142:	8c e8       	ldi	r24, 0x8C	; 140
    1144:	94 e0       	ldi	r25, 0x04	; 4
    1146:	9f 93       	push	r25
    1148:	8f 93       	push	r24
    114a:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <snprintf>
                    display_set("ENABLE ALERTS", buffer);
    114e:	6c e8       	ldi	r22, 0x8C	; 140
    1150:	74 e0       	ldi	r23, 0x04	; 4
    1152:	86 e6       	ldi	r24, 0x66	; 102
    1154:	93 e0       	ldi	r25, 0x03	; 3
    1156:	0e 94 09 04 	call	0x812	; 0x812 <display_set>
                    break;
    115a:	0f b6       	in	r0, 0x3f	; 63
    115c:	f8 94       	cli
    115e:	de bf       	out	0x3e, r29	; 62
    1160:	0f be       	out	0x3f, r0	; 63
    1162:	cd bf       	out	0x3d, r28	; 61
    1164:	0d c0       	rjmp	.+26     	; 0x1180 <ui_show_display+0x51c>
                default:
                    display_set("ERROR", "Invalid config");
    1166:	64 e7       	ldi	r22, 0x74	; 116
    1168:	73 e0       	ldi	r23, 0x03	; 3
    116a:	8f ed       	ldi	r24, 0xDF	; 223
    116c:	92 e0       	ldi	r25, 0x02	; 2
    116e:	0e 94 09 04 	call	0x812	; 0x812 <display_set>
                    break;
    1172:	06 c0       	rjmp	.+12     	; 0x1180 <ui_show_display+0x51c>
                }
            }
            break;

        default:
            display_set("ERROR", "Invalid menu");
    1174:	63 e8       	ldi	r22, 0x83	; 131
    1176:	73 e0       	ldi	r23, 0x03	; 3
    1178:	8f ed       	ldi	r24, 0xDF	; 223
    117a:	92 e0       	ldi	r25, 0x02	; 2
    117c:	0e 94 09 04 	call	0x812	; 0x812 <display_set>
            break;
        }
    }
}
    1180:	0f 90       	pop	r0
    1182:	0f 90       	pop	r0
    1184:	df 91       	pop	r29
    1186:	cf 91       	pop	r28
    1188:	0f 91       	pop	r16
    118a:	ff 90       	pop	r15
    118c:	ef 90       	pop	r14
    118e:	08 95       	ret

00001190 <ui_process_key_command>:
    process a key command from the keypad and update the UI state
    params: uint8_t key - the key number (1-4)
    returns: void
*/
void ui_process_key_command (uint8_t key) {
    if (key == 1)
    1190:	81 30       	cpi	r24, 0x01	; 1
    1192:	a9 f5       	brne	.+106    	; 0x11fe <ui_process_key_command+0x6e>
    {
        if (active_menu_index == -1)
    1194:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <active_menu_index>
    1198:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <active_menu_index+0x1>
    119c:	01 96       	adiw	r24, 0x01	; 1
    119e:	09 f4       	brne	.+2      	; 0x11a2 <ui_process_key_command+0x12>
    11a0:	9b c2       	rjmp	.+1334   	; 0x16d8 <ui_process_key_command+0x548>
        {
            return;
        }
        else
        {
            if (active_trigger_index != -1)
    11a2:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <active_trigger_index>
    11a6:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <active_trigger_index+0x1>
    11aa:	01 96       	adiw	r24, 0x01	; 1
    11ac:	39 f0       	breq	.+14     	; 0x11bc <ui_process_key_command+0x2c>
            {
                active_trigger_index = -1;
    11ae:	8f ef       	ldi	r24, 0xFF	; 255
    11b0:	9f ef       	ldi	r25, 0xFF	; 255
    11b2:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <active_trigger_index+0x1>
    11b6:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <active_trigger_index>
    11ba:	08 95       	ret
            }
            else if (active_config_index != -1)
    11bc:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <active_config_index>
    11c0:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <active_config_index+0x1>
    11c4:	01 96       	adiw	r24, 0x01	; 1
    11c6:	39 f0       	breq	.+14     	; 0x11d6 <ui_process_key_command+0x46>
            {
                active_config_index = -1;
    11c8:	8f ef       	ldi	r24, 0xFF	; 255
    11ca:	9f ef       	ldi	r25, 0xFF	; 255
    11cc:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <active_config_index+0x1>
    11d0:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <active_config_index>
    11d4:	08 95       	ret
            }
            else if (active_live_view_index != -1)
    11d6:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <active_live_view_index>
    11da:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <active_live_view_index+0x1>
    11de:	01 96       	adiw	r24, 0x01	; 1
    11e0:	39 f0       	breq	.+14     	; 0x11f0 <ui_process_key_command+0x60>
            {
                active_live_view_index = -1;
    11e2:	8f ef       	ldi	r24, 0xFF	; 255
    11e4:	9f ef       	ldi	r25, 0xFF	; 255
    11e6:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <active_live_view_index+0x1>
    11ea:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <active_live_view_index>
    11ee:	08 95       	ret
            }
            else
            {
                active_menu_index = -1;
    11f0:	8f ef       	ldi	r24, 0xFF	; 255
    11f2:	9f ef       	ldi	r25, 0xFF	; 255
    11f4:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <active_menu_index+0x1>
    11f8:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <active_menu_index>
    11fc:	08 95       	ret
            }
        }
    }
    else if (key == 2)
    11fe:	82 30       	cpi	r24, 0x02	; 2
    1200:	09 f0       	breq	.+2      	; 0x1204 <ui_process_key_command+0x74>
    1202:	0e c1       	rjmp	.+540    	; 0x1420 <ui_process_key_command+0x290>
    {
        if (active_menu_index == -1)
    1204:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <active_menu_index>
    1208:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <active_menu_index+0x1>
    120c:	8f 3f       	cpi	r24, 0xFF	; 255
    120e:	2f ef       	ldi	r18, 0xFF	; 255
    1210:	92 07       	cpc	r25, r18
    1212:	71 f4       	brne	.+28     	; 0x1230 <ui_process_key_command+0xa0>
        {
            if (menu_hover_index < (sizeof(MENU_BUFFER)/sizeof(MENU_BUFFER[0]) - 1))
    1214:	80 91 89 04 	lds	r24, 0x0489	; 0x800489 <menu_hover_index>
    1218:	90 91 8a 04 	lds	r25, 0x048A	; 0x80048a <menu_hover_index+0x1>
    121c:	87 30       	cpi	r24, 0x07	; 7
    121e:	91 05       	cpc	r25, r1
    1220:	08 f0       	brcs	.+2      	; 0x1224 <ui_process_key_command+0x94>
    1222:	5a c2       	rjmp	.+1204   	; 0x16d8 <ui_process_key_command+0x548>
                menu_hover_index++; // navigate downwards on the main menu
    1224:	01 96       	adiw	r24, 0x01	; 1
    1226:	90 93 8a 04 	sts	0x048A, r25	; 0x80048a <menu_hover_index+0x1>
    122a:	80 93 89 04 	sts	0x0489, r24	; 0x800489 <menu_hover_index>
    122e:	08 95       	ret
        }
        else if (active_menu_index == 4)
    1230:	84 30       	cpi	r24, 0x04	; 4
    1232:	91 05       	cpc	r25, r1
    1234:	71 f4       	brne	.+28     	; 0x1252 <ui_process_key_command+0xc2>
        {
            // user is in the live view menu
            if (live_view_hover_index < (sizeof(LIVE_VIEW_BUFFER)/sizeof(LIVE_VIEW_BUFFER[0]) - 1))
    1236:	80 91 81 04 	lds	r24, 0x0481	; 0x800481 <live_view_hover_index>
    123a:	90 91 82 04 	lds	r25, 0x0482	; 0x800482 <live_view_hover_index+0x1>
    123e:	83 30       	cpi	r24, 0x03	; 3
    1240:	91 05       	cpc	r25, r1
    1242:	08 f0       	brcs	.+2      	; 0x1246 <ui_process_key_command+0xb6>
    1244:	49 c2       	rjmp	.+1170   	; 0x16d8 <ui_process_key_command+0x548>
                live_view_hover_index++; // navigate downwards on the live view menu
    1246:	01 96       	adiw	r24, 0x01	; 1
    1248:	90 93 82 04 	sts	0x0482, r25	; 0x800482 <live_view_hover_index+0x1>
    124c:	80 93 81 04 	sts	0x0481, r24	; 0x800481 <live_view_hover_index>
    1250:	08 95       	ret
        }
        else if (active_menu_index == 5) 
    1252:	85 30       	cpi	r24, 0x05	; 5
    1254:	91 05       	cpc	r25, r1
    1256:	09 f0       	breq	.+2      	; 0x125a <ui_process_key_command+0xca>
    1258:	50 c0       	rjmp	.+160    	; 0x12fa <ui_process_key_command+0x16a>
        {
            // user is in the triggers menu
            if (active_trigger_index == -1)
    125a:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <active_trigger_index>
    125e:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <active_trigger_index+0x1>
    1262:	8f 3f       	cpi	r24, 0xFF	; 255
    1264:	2f ef       	ldi	r18, 0xFF	; 255
    1266:	92 07       	cpc	r25, r18
    1268:	69 f4       	brne	.+26     	; 0x1284 <ui_process_key_command+0xf4>
            {
                if (trigger_hover_index < (sizeof(TRIGGERS_BUFFER)/sizeof(TRIGGERS_BUFFER[0]) - 1))
    126a:	80 91 87 04 	lds	r24, 0x0487	; 0x800487 <trigger_hover_index>
    126e:	90 91 88 04 	lds	r25, 0x0488	; 0x800488 <trigger_hover_index+0x1>
    1272:	00 97       	sbiw	r24, 0x00	; 0
    1274:	09 f0       	breq	.+2      	; 0x1278 <ui_process_key_command+0xe8>
    1276:	30 c2       	rjmp	.+1120   	; 0x16d8 <ui_process_key_command+0x548>
                    trigger_hover_index++; // navigate downwards on the triggers menu
    1278:	01 96       	adiw	r24, 0x01	; 1
    127a:	90 93 88 04 	sts	0x0488, r25	; 0x800488 <trigger_hover_index+0x1>
    127e:	80 93 87 04 	sts	0x0487, r24	; 0x800487 <trigger_hover_index>
    1282:	08 95       	ret
            } else {
                switch (active_trigger_index) {
    1284:	00 97       	sbiw	r24, 0x00	; 0
    1286:	19 f0       	breq	.+6      	; 0x128e <ui_process_key_command+0xfe>
    1288:	01 97       	sbiw	r24, 0x01	; 1
    128a:	e1 f0       	breq	.+56     	; 0x12c4 <ui_process_key_command+0x134>
    128c:	08 95       	ret
                    case 0:
                        // adjust MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER - decrease
                        MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER -= STEP_SIZE_FOR_INCREMENTS;
    128e:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <STEP_SIZE_FOR_INCREMENTS>
    1292:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <STEP_SIZE_FOR_INCREMENTS+0x1>
    1296:	40 91 10 01 	lds	r20, 0x0110	; 0x800110 <STEP_SIZE_FOR_INCREMENTS+0x2>
    129a:	50 91 11 01 	lds	r21, 0x0111	; 0x800111 <STEP_SIZE_FOR_INCREMENTS+0x3>
    129e:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER>
    12a2:	70 91 17 01 	lds	r23, 0x0117	; 0x800117 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x1>
    12a6:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x2>
    12aa:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x3>
    12ae:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <__subsf3>
    12b2:	60 93 16 01 	sts	0x0116, r22	; 0x800116 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER>
    12b6:	70 93 17 01 	sts	0x0117, r23	; 0x800117 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x1>
    12ba:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x2>
    12be:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x3>
                        break;
    12c2:	08 95       	ret
                    case 1:
                        // adjust MAXIMUM_TEMPERATURE_BEFORE_PUMPING - decrease
                        MAXIMUM_TEMPERATURE_BEFORE_PUMPING -= STEP_SIZE_FOR_INCREMENTS;
    12c4:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <STEP_SIZE_FOR_INCREMENTS>
    12c8:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <STEP_SIZE_FOR_INCREMENTS+0x1>
    12cc:	40 91 10 01 	lds	r20, 0x0110	; 0x800110 <STEP_SIZE_FOR_INCREMENTS+0x2>
    12d0:	50 91 11 01 	lds	r21, 0x0111	; 0x800111 <STEP_SIZE_FOR_INCREMENTS+0x3>
    12d4:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING>
    12d8:	70 91 13 01 	lds	r23, 0x0113	; 0x800113 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x1>
    12dc:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x2>
    12e0:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x3>
    12e4:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <__subsf3>
    12e8:	60 93 12 01 	sts	0x0112, r22	; 0x800112 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING>
    12ec:	70 93 13 01 	sts	0x0113, r23	; 0x800113 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x1>
    12f0:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x2>
    12f4:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x3>
                        break;
    12f8:	08 95       	ret
                    default:
                        break;
                }
            }
        }
        else if (active_menu_index == 6) {
    12fa:	86 30       	cpi	r24, 0x06	; 6
    12fc:	91 05       	cpc	r25, r1
    12fe:	71 f4       	brne	.+28     	; 0x131c <ui_process_key_command+0x18c>
            if (message_hover_index < MSG_BUFFER_SIZE - 1)
    1300:	80 91 83 04 	lds	r24, 0x0483	; 0x800483 <message_hover_index>
    1304:	90 91 84 04 	lds	r25, 0x0484	; 0x800484 <message_hover_index+0x1>
    1308:	83 30       	cpi	r24, 0x03	; 3
    130a:	91 05       	cpc	r25, r1
    130c:	0c f0       	brlt	.+2      	; 0x1310 <ui_process_key_command+0x180>
    130e:	e4 c1       	rjmp	.+968    	; 0x16d8 <ui_process_key_command+0x548>
                message_hover_index++;
    1310:	01 96       	adiw	r24, 0x01	; 1
    1312:	90 93 84 04 	sts	0x0484, r25	; 0x800484 <message_hover_index+0x1>
    1316:	80 93 83 04 	sts	0x0483, r24	; 0x800483 <message_hover_index>
    131a:	08 95       	ret
        }
        else if (active_menu_index == 7)
    131c:	07 97       	sbiw	r24, 0x07	; 7
    131e:	09 f0       	breq	.+2      	; 0x1322 <ui_process_key_command+0x192>
    1320:	db c1       	rjmp	.+950    	; 0x16d8 <ui_process_key_command+0x548>
        {
            if (active_config_index == -1)
    1322:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <active_config_index>
    1326:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <active_config_index+0x1>
    132a:	8f 3f       	cpi	r24, 0xFF	; 255
    132c:	2f ef       	ldi	r18, 0xFF	; 255
    132e:	92 07       	cpc	r25, r18
    1330:	71 f4       	brne	.+28     	; 0x134e <ui_process_key_command+0x1be>
            {
                if (config_hover_index < (sizeof(CONFIG_BUFFER)/sizeof(CONFIG_BUFFER[0]) - 1))
    1332:	80 91 85 04 	lds	r24, 0x0485	; 0x800485 <config_hover_index>
    1336:	90 91 86 04 	lds	r25, 0x0486	; 0x800486 <config_hover_index+0x1>
    133a:	84 30       	cpi	r24, 0x04	; 4
    133c:	91 05       	cpc	r25, r1
    133e:	08 f0       	brcs	.+2      	; 0x1342 <ui_process_key_command+0x1b2>
    1340:	cb c1       	rjmp	.+918    	; 0x16d8 <ui_process_key_command+0x548>
                    config_hover_index++; // navigate downwards on the config menu
    1342:	01 96       	adiw	r24, 0x01	; 1
    1344:	90 93 86 04 	sts	0x0486, r25	; 0x800486 <config_hover_index+0x1>
    1348:	80 93 85 04 	sts	0x0485, r24	; 0x800485 <config_hover_index>
    134c:	08 95       	ret
            } else {
                switch (active_config_index)
    134e:	82 30       	cpi	r24, 0x02	; 2
    1350:	91 05       	cpc	r25, r1
    1352:	09 f4       	brne	.+2      	; 0x1356 <ui_process_key_command+0x1c6>
    1354:	44 c0       	rjmp	.+136    	; 0x13de <ui_process_key_command+0x24e>
    1356:	2c f4       	brge	.+10     	; 0x1362 <ui_process_key_command+0x1d2>
    1358:	00 97       	sbiw	r24, 0x00	; 0
    135a:	59 f0       	breq	.+22     	; 0x1372 <ui_process_key_command+0x1e2>
    135c:	01 97       	sbiw	r24, 0x01	; 1
    135e:	21 f1       	breq	.+72     	; 0x13a8 <ui_process_key_command+0x218>
    1360:	08 95       	ret
    1362:	83 30       	cpi	r24, 0x03	; 3
    1364:	91 05       	cpc	r25, r1
    1366:	09 f4       	brne	.+2      	; 0x136a <ui_process_key_command+0x1da>
    1368:	55 c0       	rjmp	.+170    	; 0x1414 <ui_process_key_command+0x284>
    136a:	04 97       	sbiw	r24, 0x04	; 4
    136c:	09 f4       	brne	.+2      	; 0x1370 <ui_process_key_command+0x1e0>
    136e:	55 c0       	rjmp	.+170    	; 0x141a <ui_process_key_command+0x28a>
    1370:	08 95       	ret
                {
                case 0:
                    // adjust STEP_SIZE_FOR_INCREMENTS - decrease
                    STEP_SIZE_FOR_INCREMENTS -= STEP_INCREMENT;
    1372:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <STEP_INCREMENT>
    1376:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <STEP_INCREMENT+0x1>
    137a:	40 91 0c 01 	lds	r20, 0x010C	; 0x80010c <STEP_INCREMENT+0x2>
    137e:	50 91 0d 01 	lds	r21, 0x010D	; 0x80010d <STEP_INCREMENT+0x3>
    1382:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <STEP_SIZE_FOR_INCREMENTS>
    1386:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <STEP_SIZE_FOR_INCREMENTS+0x1>
    138a:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <STEP_SIZE_FOR_INCREMENTS+0x2>
    138e:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <STEP_SIZE_FOR_INCREMENTS+0x3>
    1392:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <__subsf3>
    1396:	60 93 0e 01 	sts	0x010E, r22	; 0x80010e <STEP_SIZE_FOR_INCREMENTS>
    139a:	70 93 0f 01 	sts	0x010F, r23	; 0x80010f <STEP_SIZE_FOR_INCREMENTS+0x1>
    139e:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <STEP_SIZE_FOR_INCREMENTS+0x2>
    13a2:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <STEP_SIZE_FOR_INCREMENTS+0x3>
                    break;
    13a6:	08 95       	ret
                case 1:
                    // adjust PUMP_THRESHOLD - decrease
                    PUMP_THRESHOLD -= STEP_SIZE_FOR_INCREMENTS;
    13a8:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <STEP_SIZE_FOR_INCREMENTS>
    13ac:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <STEP_SIZE_FOR_INCREMENTS+0x1>
    13b0:	40 91 10 01 	lds	r20, 0x0110	; 0x800110 <STEP_SIZE_FOR_INCREMENTS+0x2>
    13b4:	50 91 11 01 	lds	r21, 0x0111	; 0x800111 <STEP_SIZE_FOR_INCREMENTS+0x3>
    13b8:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <PUMP_THRESHOLD>
    13bc:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <PUMP_THRESHOLD+0x1>
    13c0:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <PUMP_THRESHOLD+0x2>
    13c4:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <PUMP_THRESHOLD+0x3>
    13c8:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <__subsf3>
    13cc:	60 93 06 01 	sts	0x0106, r22	; 0x800106 <PUMP_THRESHOLD>
    13d0:	70 93 07 01 	sts	0x0107, r23	; 0x800107 <PUMP_THRESHOLD+0x1>
    13d4:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <PUMP_THRESHOLD+0x2>
    13d8:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <PUMP_THRESHOLD+0x3>
                    break;
    13dc:	08 95       	ret
                case 2:
                    // adjust SPRAY_THRESHOLD - decrease
                    SPRAY_THRESHOLD -= STEP_SIZE_FOR_INCREMENTS;
    13de:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <STEP_SIZE_FOR_INCREMENTS>
    13e2:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <STEP_SIZE_FOR_INCREMENTS+0x1>
    13e6:	40 91 10 01 	lds	r20, 0x0110	; 0x800110 <STEP_SIZE_FOR_INCREMENTS+0x2>
    13ea:	50 91 11 01 	lds	r21, 0x0111	; 0x800111 <STEP_SIZE_FOR_INCREMENTS+0x3>
    13ee:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <SPRAY_THRESHOLD>
    13f2:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <SPRAY_THRESHOLD+0x1>
    13f6:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <SPRAY_THRESHOLD+0x2>
    13fa:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <SPRAY_THRESHOLD+0x3>
    13fe:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <__subsf3>
    1402:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <SPRAY_THRESHOLD>
    1406:	70 93 03 01 	sts	0x0103, r23	; 0x800103 <SPRAY_THRESHOLD+0x1>
    140a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <SPRAY_THRESHOLD+0x2>
    140e:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <SPRAY_THRESHOLD+0x3>
                    break;
    1412:	08 95       	ret
                case 3:
                    // adjust ENABLE_TRIGGER_VALUE - toggle
                    ENABLE_TRIGGER_VALUE = 0;
    1414:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <ENABLE_TRIGGER_VALUE>
                    break;
    1418:	08 95       	ret
                case 4:
                    // adjust ENABLE_ALERT_VALUE - toggle
                    ENABLE_ALERT_VALUE = 0;
    141a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
                    break;
    141e:	08 95       	ret
                    break;
                }
            }
        }
    }
    else if (key == 3)
    1420:	83 30       	cpi	r24, 0x03	; 3
    1422:	09 f0       	breq	.+2      	; 0x1426 <ui_process_key_command+0x296>
    1424:	11 c1       	rjmp	.+546    	; 0x1648 <ui_process_key_command+0x4b8>
    {
        if (active_menu_index == -1)
    1426:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <active_menu_index>
    142a:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <active_menu_index+0x1>
    142e:	8f 3f       	cpi	r24, 0xFF	; 255
    1430:	2f ef       	ldi	r18, 0xFF	; 255
    1432:	92 07       	cpc	r25, r18
    1434:	71 f4       	brne	.+28     	; 0x1452 <ui_process_key_command+0x2c2>
        {
            if (menu_hover_index > 0)
    1436:	80 91 89 04 	lds	r24, 0x0489	; 0x800489 <menu_hover_index>
    143a:	90 91 8a 04 	lds	r25, 0x048A	; 0x80048a <menu_hover_index+0x1>
    143e:	18 16       	cp	r1, r24
    1440:	19 06       	cpc	r1, r25
    1442:	0c f0       	brlt	.+2      	; 0x1446 <ui_process_key_command+0x2b6>
    1444:	49 c1       	rjmp	.+658    	; 0x16d8 <ui_process_key_command+0x548>
                menu_hover_index--;
    1446:	01 97       	sbiw	r24, 0x01	; 1
    1448:	90 93 8a 04 	sts	0x048A, r25	; 0x80048a <menu_hover_index+0x1>
    144c:	80 93 89 04 	sts	0x0489, r24	; 0x800489 <menu_hover_index>
    1450:	08 95       	ret
        }
        else if (active_menu_index == 4)
    1452:	84 30       	cpi	r24, 0x04	; 4
    1454:	91 05       	cpc	r25, r1
    1456:	71 f4       	brne	.+28     	; 0x1474 <ui_process_key_command+0x2e4>
        {
            // user is in the live view menu
            if (live_view_hover_index > 0)
    1458:	80 91 81 04 	lds	r24, 0x0481	; 0x800481 <live_view_hover_index>
    145c:	90 91 82 04 	lds	r25, 0x0482	; 0x800482 <live_view_hover_index+0x1>
    1460:	18 16       	cp	r1, r24
    1462:	19 06       	cpc	r1, r25
    1464:	0c f0       	brlt	.+2      	; 0x1468 <ui_process_key_command+0x2d8>
    1466:	38 c1       	rjmp	.+624    	; 0x16d8 <ui_process_key_command+0x548>
                live_view_hover_index--;
    1468:	01 97       	sbiw	r24, 0x01	; 1
    146a:	90 93 82 04 	sts	0x0482, r25	; 0x800482 <live_view_hover_index+0x1>
    146e:	80 93 81 04 	sts	0x0481, r24	; 0x800481 <live_view_hover_index>
    1472:	08 95       	ret
        }
        else if (active_menu_index == 5)
    1474:	85 30       	cpi	r24, 0x05	; 5
    1476:	91 05       	cpc	r25, r1
    1478:	09 f0       	breq	.+2      	; 0x147c <ui_process_key_command+0x2ec>
    147a:	51 c0       	rjmp	.+162    	; 0x151e <ui_process_key_command+0x38e>
        {
            if (active_trigger_index == -1)
    147c:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <active_trigger_index>
    1480:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <active_trigger_index+0x1>
    1484:	8f 3f       	cpi	r24, 0xFF	; 255
    1486:	2f ef       	ldi	r18, 0xFF	; 255
    1488:	92 07       	cpc	r25, r18
    148a:	71 f4       	brne	.+28     	; 0x14a8 <ui_process_key_command+0x318>
            {
                if (trigger_hover_index > 0)
    148c:	80 91 87 04 	lds	r24, 0x0487	; 0x800487 <trigger_hover_index>
    1490:	90 91 88 04 	lds	r25, 0x0488	; 0x800488 <trigger_hover_index+0x1>
    1494:	18 16       	cp	r1, r24
    1496:	19 06       	cpc	r1, r25
    1498:	0c f0       	brlt	.+2      	; 0x149c <ui_process_key_command+0x30c>
    149a:	1e c1       	rjmp	.+572    	; 0x16d8 <ui_process_key_command+0x548>
                    trigger_hover_index--;
    149c:	01 97       	sbiw	r24, 0x01	; 1
    149e:	90 93 88 04 	sts	0x0488, r25	; 0x800488 <trigger_hover_index+0x1>
    14a2:	80 93 87 04 	sts	0x0487, r24	; 0x800487 <trigger_hover_index>
    14a6:	08 95       	ret
            } else {
                switch (active_trigger_index) {
    14a8:	00 97       	sbiw	r24, 0x00	; 0
    14aa:	19 f0       	breq	.+6      	; 0x14b2 <ui_process_key_command+0x322>
    14ac:	01 97       	sbiw	r24, 0x01	; 1
    14ae:	e1 f0       	breq	.+56     	; 0x14e8 <ui_process_key_command+0x358>
    14b0:	08 95       	ret
                    case 0:
                        // adjust MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER - decrease
                        MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER += STEP_SIZE_FOR_INCREMENTS;
    14b2:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <STEP_SIZE_FOR_INCREMENTS>
    14b6:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <STEP_SIZE_FOR_INCREMENTS+0x1>
    14ba:	40 91 10 01 	lds	r20, 0x0110	; 0x800110 <STEP_SIZE_FOR_INCREMENTS+0x2>
    14be:	50 91 11 01 	lds	r21, 0x0111	; 0x800111 <STEP_SIZE_FOR_INCREMENTS+0x3>
    14c2:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER>
    14c6:	70 91 17 01 	lds	r23, 0x0117	; 0x800117 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x1>
    14ca:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x2>
    14ce:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x3>
    14d2:	0e 94 75 0c 	call	0x18ea	; 0x18ea <__addsf3>
    14d6:	60 93 16 01 	sts	0x0116, r22	; 0x800116 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER>
    14da:	70 93 17 01 	sts	0x0117, r23	; 0x800117 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x1>
    14de:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x2>
    14e2:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x3>
                        break;
    14e6:	08 95       	ret
                    case 1:
                        // adjust MAXIMUM_TEMPERATURE_BEFORE_PUMPING - decrease
                        MAXIMUM_TEMPERATURE_BEFORE_PUMPING += STEP_SIZE_FOR_INCREMENTS;
    14e8:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <STEP_SIZE_FOR_INCREMENTS>
    14ec:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <STEP_SIZE_FOR_INCREMENTS+0x1>
    14f0:	40 91 10 01 	lds	r20, 0x0110	; 0x800110 <STEP_SIZE_FOR_INCREMENTS+0x2>
    14f4:	50 91 11 01 	lds	r21, 0x0111	; 0x800111 <STEP_SIZE_FOR_INCREMENTS+0x3>
    14f8:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING>
    14fc:	70 91 13 01 	lds	r23, 0x0113	; 0x800113 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x1>
    1500:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x2>
    1504:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x3>
    1508:	0e 94 75 0c 	call	0x18ea	; 0x18ea <__addsf3>
    150c:	60 93 12 01 	sts	0x0112, r22	; 0x800112 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING>
    1510:	70 93 13 01 	sts	0x0113, r23	; 0x800113 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x1>
    1514:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x2>
    1518:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x3>
                        break;
    151c:	08 95       	ret
                    default:
                        break;
                }
            }
        } 
        else if (active_menu_index == 6) {
    151e:	86 30       	cpi	r24, 0x06	; 6
    1520:	91 05       	cpc	r25, r1
    1522:	71 f4       	brne	.+28     	; 0x1540 <ui_process_key_command+0x3b0>
            if (message_hover_index > 0)
    1524:	80 91 83 04 	lds	r24, 0x0483	; 0x800483 <message_hover_index>
    1528:	90 91 84 04 	lds	r25, 0x0484	; 0x800484 <message_hover_index+0x1>
    152c:	18 16       	cp	r1, r24
    152e:	19 06       	cpc	r1, r25
    1530:	0c f0       	brlt	.+2      	; 0x1534 <ui_process_key_command+0x3a4>
    1532:	d2 c0       	rjmp	.+420    	; 0x16d8 <ui_process_key_command+0x548>
                message_hover_index--;
    1534:	01 97       	sbiw	r24, 0x01	; 1
    1536:	90 93 84 04 	sts	0x0484, r25	; 0x800484 <message_hover_index+0x1>
    153a:	80 93 83 04 	sts	0x0483, r24	; 0x800483 <message_hover_index>
    153e:	08 95       	ret
        }
        else if (active_menu_index == 7)
    1540:	07 97       	sbiw	r24, 0x07	; 7
    1542:	09 f0       	breq	.+2      	; 0x1546 <ui_process_key_command+0x3b6>
    1544:	c9 c0       	rjmp	.+402    	; 0x16d8 <ui_process_key_command+0x548>
        {
            if (active_config_index == -1)
    1546:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <active_config_index>
    154a:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <active_config_index+0x1>
    154e:	8f 3f       	cpi	r24, 0xFF	; 255
    1550:	2f ef       	ldi	r18, 0xFF	; 255
    1552:	92 07       	cpc	r25, r18
    1554:	71 f4       	brne	.+28     	; 0x1572 <ui_process_key_command+0x3e2>
            {
                if (config_hover_index > 0)
    1556:	80 91 85 04 	lds	r24, 0x0485	; 0x800485 <config_hover_index>
    155a:	90 91 86 04 	lds	r25, 0x0486	; 0x800486 <config_hover_index+0x1>
    155e:	18 16       	cp	r1, r24
    1560:	19 06       	cpc	r1, r25
    1562:	0c f0       	brlt	.+2      	; 0x1566 <ui_process_key_command+0x3d6>
    1564:	b9 c0       	rjmp	.+370    	; 0x16d8 <ui_process_key_command+0x548>
                    config_hover_index--;
    1566:	01 97       	sbiw	r24, 0x01	; 1
    1568:	90 93 86 04 	sts	0x0486, r25	; 0x800486 <config_hover_index+0x1>
    156c:	80 93 85 04 	sts	0x0485, r24	; 0x800485 <config_hover_index>
    1570:	08 95       	ret
            } else {
            switch (active_config_index)
    1572:	82 30       	cpi	r24, 0x02	; 2
    1574:	91 05       	cpc	r25, r1
    1576:	09 f4       	brne	.+2      	; 0x157a <ui_process_key_command+0x3ea>
    1578:	44 c0       	rjmp	.+136    	; 0x1602 <ui_process_key_command+0x472>
    157a:	2c f4       	brge	.+10     	; 0x1586 <ui_process_key_command+0x3f6>
    157c:	00 97       	sbiw	r24, 0x00	; 0
    157e:	59 f0       	breq	.+22     	; 0x1596 <ui_process_key_command+0x406>
    1580:	01 97       	sbiw	r24, 0x01	; 1
    1582:	21 f1       	breq	.+72     	; 0x15cc <ui_process_key_command+0x43c>
    1584:	08 95       	ret
    1586:	83 30       	cpi	r24, 0x03	; 3
    1588:	91 05       	cpc	r25, r1
    158a:	09 f4       	brne	.+2      	; 0x158e <ui_process_key_command+0x3fe>
    158c:	55 c0       	rjmp	.+170    	; 0x1638 <ui_process_key_command+0x4a8>
    158e:	04 97       	sbiw	r24, 0x04	; 4
    1590:	09 f4       	brne	.+2      	; 0x1594 <ui_process_key_command+0x404>
    1592:	56 c0       	rjmp	.+172    	; 0x1640 <ui_process_key_command+0x4b0>
    1594:	08 95       	ret
                {
                case 0:
                    // adjust STEP_SIZE_FOR_INCREMENTS - decrease
                    STEP_SIZE_FOR_INCREMENTS += STEP_INCREMENT;
    1596:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <STEP_INCREMENT>
    159a:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <STEP_INCREMENT+0x1>
    159e:	40 91 0c 01 	lds	r20, 0x010C	; 0x80010c <STEP_INCREMENT+0x2>
    15a2:	50 91 0d 01 	lds	r21, 0x010D	; 0x80010d <STEP_INCREMENT+0x3>
    15a6:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <STEP_SIZE_FOR_INCREMENTS>
    15aa:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <STEP_SIZE_FOR_INCREMENTS+0x1>
    15ae:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <STEP_SIZE_FOR_INCREMENTS+0x2>
    15b2:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <STEP_SIZE_FOR_INCREMENTS+0x3>
    15b6:	0e 94 75 0c 	call	0x18ea	; 0x18ea <__addsf3>
    15ba:	60 93 0e 01 	sts	0x010E, r22	; 0x80010e <STEP_SIZE_FOR_INCREMENTS>
    15be:	70 93 0f 01 	sts	0x010F, r23	; 0x80010f <STEP_SIZE_FOR_INCREMENTS+0x1>
    15c2:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <STEP_SIZE_FOR_INCREMENTS+0x2>
    15c6:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <STEP_SIZE_FOR_INCREMENTS+0x3>
                    break;
    15ca:	08 95       	ret
                case 1:
                    // adjust PUMP_THRESHOLD - decrease
                    PUMP_THRESHOLD += STEP_SIZE_FOR_INCREMENTS;
    15cc:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <STEP_SIZE_FOR_INCREMENTS>
    15d0:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <STEP_SIZE_FOR_INCREMENTS+0x1>
    15d4:	40 91 10 01 	lds	r20, 0x0110	; 0x800110 <STEP_SIZE_FOR_INCREMENTS+0x2>
    15d8:	50 91 11 01 	lds	r21, 0x0111	; 0x800111 <STEP_SIZE_FOR_INCREMENTS+0x3>
    15dc:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <PUMP_THRESHOLD>
    15e0:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <PUMP_THRESHOLD+0x1>
    15e4:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <PUMP_THRESHOLD+0x2>
    15e8:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <PUMP_THRESHOLD+0x3>
    15ec:	0e 94 75 0c 	call	0x18ea	; 0x18ea <__addsf3>
    15f0:	60 93 06 01 	sts	0x0106, r22	; 0x800106 <PUMP_THRESHOLD>
    15f4:	70 93 07 01 	sts	0x0107, r23	; 0x800107 <PUMP_THRESHOLD+0x1>
    15f8:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <PUMP_THRESHOLD+0x2>
    15fc:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <PUMP_THRESHOLD+0x3>
                    break;
    1600:	08 95       	ret
                case 2:
                    // adjust SPRAY_THRESHOLD - decrease
                    SPRAY_THRESHOLD += STEP_SIZE_FOR_INCREMENTS;
    1602:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <STEP_SIZE_FOR_INCREMENTS>
    1606:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <STEP_SIZE_FOR_INCREMENTS+0x1>
    160a:	40 91 10 01 	lds	r20, 0x0110	; 0x800110 <STEP_SIZE_FOR_INCREMENTS+0x2>
    160e:	50 91 11 01 	lds	r21, 0x0111	; 0x800111 <STEP_SIZE_FOR_INCREMENTS+0x3>
    1612:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <SPRAY_THRESHOLD>
    1616:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <SPRAY_THRESHOLD+0x1>
    161a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <SPRAY_THRESHOLD+0x2>
    161e:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <SPRAY_THRESHOLD+0x3>
    1622:	0e 94 75 0c 	call	0x18ea	; 0x18ea <__addsf3>
    1626:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <SPRAY_THRESHOLD>
    162a:	70 93 03 01 	sts	0x0103, r23	; 0x800103 <SPRAY_THRESHOLD+0x1>
    162e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <SPRAY_THRESHOLD+0x2>
    1632:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <SPRAY_THRESHOLD+0x3>
                    break;
    1636:	08 95       	ret
                case 3:
                    // adjust ENABLE_TRIGGER_VALUE - toggle
                    ENABLE_TRIGGER_VALUE = 1;
    1638:	81 e0       	ldi	r24, 0x01	; 1
    163a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <ENABLE_TRIGGER_VALUE>
                    break;
    163e:	08 95       	ret
                case 4:
                    // adjust ENABLE_ALERT_VALUE - toggle
                    ENABLE_ALERT_VALUE = 1;
    1640:	81 e0       	ldi	r24, 0x01	; 1
    1642:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
                    break;
    1646:	08 95       	ret
                    break;
                }
            }
        }
    }
    else if (key == 4)
    1648:	84 30       	cpi	r24, 0x04	; 4
    164a:	09 f0       	breq	.+2      	; 0x164e <ui_process_key_command+0x4be>
    164c:	45 c0       	rjmp	.+138    	; 0x16d8 <ui_process_key_command+0x548>
    {
        if (active_menu_index == -1)
    164e:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <active_menu_index>
    1652:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <active_menu_index+0x1>
    1656:	8f 3f       	cpi	r24, 0xFF	; 255
    1658:	2f ef       	ldi	r18, 0xFF	; 255
    165a:	92 07       	cpc	r25, r18
    165c:	49 f4       	brne	.+18     	; 0x1670 <ui_process_key_command+0x4e0>
        {
            active_menu_index = menu_hover_index;
    165e:	80 91 89 04 	lds	r24, 0x0489	; 0x800489 <menu_hover_index>
    1662:	90 91 8a 04 	lds	r25, 0x048A	; 0x80048a <menu_hover_index+0x1>
    1666:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <active_menu_index+0x1>
    166a:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <active_menu_index>
    166e:	08 95       	ret
        }
        else if (active_menu_index == 4)
    1670:	84 30       	cpi	r24, 0x04	; 4
    1672:	91 05       	cpc	r25, r1
    1674:	79 f4       	brne	.+30     	; 0x1694 <ui_process_key_command+0x504>
        {
            if (active_live_view_index == -1)
    1676:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <active_live_view_index>
    167a:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <active_live_view_index+0x1>
    167e:	01 96       	adiw	r24, 0x01	; 1
    1680:	59 f5       	brne	.+86     	; 0x16d8 <ui_process_key_command+0x548>
            {
                active_live_view_index = live_view_hover_index;
    1682:	80 91 81 04 	lds	r24, 0x0481	; 0x800481 <live_view_hover_index>
    1686:	90 91 82 04 	lds	r25, 0x0482	; 0x800482 <live_view_hover_index+0x1>
    168a:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <active_live_view_index+0x1>
    168e:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <active_live_view_index>
    1692:	08 95       	ret
            }
        }
        else if (active_menu_index == 5)
    1694:	85 30       	cpi	r24, 0x05	; 5
    1696:	91 05       	cpc	r25, r1
    1698:	79 f4       	brne	.+30     	; 0x16b8 <ui_process_key_command+0x528>
        {
            if (active_trigger_index == -1)
    169a:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <active_trigger_index>
    169e:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <active_trigger_index+0x1>
    16a2:	01 96       	adiw	r24, 0x01	; 1
    16a4:	c9 f4       	brne	.+50     	; 0x16d8 <ui_process_key_command+0x548>
            {
                active_trigger_index = trigger_hover_index;
    16a6:	80 91 87 04 	lds	r24, 0x0487	; 0x800487 <trigger_hover_index>
    16aa:	90 91 88 04 	lds	r25, 0x0488	; 0x800488 <trigger_hover_index+0x1>
    16ae:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <active_trigger_index+0x1>
    16b2:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <active_trigger_index>
    16b6:	08 95       	ret
            }
        }
        else if (active_menu_index == 7)
    16b8:	07 97       	sbiw	r24, 0x07	; 7
    16ba:	71 f4       	brne	.+28     	; 0x16d8 <ui_process_key_command+0x548>
        {
            if (active_config_index == -1)
    16bc:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <active_config_index>
    16c0:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <active_config_index+0x1>
    16c4:	01 96       	adiw	r24, 0x01	; 1
    16c6:	41 f4       	brne	.+16     	; 0x16d8 <ui_process_key_command+0x548>
            {
                active_config_index = config_hover_index;
    16c8:	80 91 85 04 	lds	r24, 0x0485	; 0x800485 <config_hover_index>
    16cc:	90 91 86 04 	lds	r25, 0x0486	; 0x800486 <config_hover_index+0x1>
    16d0:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <active_config_index+0x1>
    16d4:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <active_config_index>
    16d8:	08 95       	ret

000016da <__vector_9>:
        }
    }
}

ISR(TIMER2_OVF_vect)
{
    16da:	1f 92       	push	r1
    16dc:	0f 92       	push	r0
    16de:	0f b6       	in	r0, 0x3f	; 63
    16e0:	0f 92       	push	r0
    16e2:	11 24       	eor	r1, r1
    16e4:	2f 93       	push	r18
    16e6:	3f 93       	push	r19
    16e8:	4f 93       	push	r20
    16ea:	5f 93       	push	r21
    16ec:	6f 93       	push	r22
    16ee:	7f 93       	push	r23
    16f0:	8f 93       	push	r24
    16f2:	9f 93       	push	r25
    16f4:	af 93       	push	r26
    16f6:	bf 93       	push	r27
    16f8:	ef 93       	push	r30
    16fa:	ff 93       	push	r31
    tick++;
    16fc:	80 91 8b 04 	lds	r24, 0x048B	; 0x80048b <tick>
    1700:	8f 5f       	subi	r24, 0xFF	; 255
    1702:	80 93 8b 04 	sts	0x048B, r24	; 0x80048b <tick>
   
    if (tick >= 62) {
    1706:	80 91 8b 04 	lds	r24, 0x048B	; 0x80048b <tick>
    170a:	8e 33       	cpi	r24, 0x3E	; 62
    170c:	68 f0       	brcs	.+26     	; 0x1728 <__vector_9+0x4e>
        tick = 0;
    170e:	10 92 8b 04 	sts	0x048B, r1	; 0x80048b <tick>
        enqueue(&height_per_second, HCSR04_get_distance());
    1712:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <HCSR04_get_distance>
    1716:	bc 01       	movw	r22, r24
    1718:	8c e9       	ldi	r24, 0x9C	; 156
    171a:	94 e0       	ldi	r25, 0x04	; 4
    171c:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <enqueue>
        PORTC ^= (1 << PC2); // toggle PC2 every second    
    1720:	98 b1       	in	r25, 0x08	; 8
    1722:	84 e0       	ldi	r24, 0x04	; 4
    1724:	89 27       	eor	r24, r25
    1726:	88 b9       	out	0x08, r24	; 8
    }
    
}
    1728:	ff 91       	pop	r31
    172a:	ef 91       	pop	r30
    172c:	bf 91       	pop	r27
    172e:	af 91       	pop	r26
    1730:	9f 91       	pop	r25
    1732:	8f 91       	pop	r24
    1734:	7f 91       	pop	r23
    1736:	6f 91       	pop	r22
    1738:	5f 91       	pop	r21
    173a:	4f 91       	pop	r20
    173c:	3f 91       	pop	r19
    173e:	2f 91       	pop	r18
    1740:	0f 90       	pop	r0
    1742:	0f be       	out	0x3f, r0	; 63
    1744:	0f 90       	pop	r0
    1746:	1f 90       	pop	r1
    1748:	18 95       	reti

0000174a <main>:

int main(void)
{
    initQueue(&height_per_second);
    174a:	8c e9       	ldi	r24, 0x9C	; 156
    174c:	94 e0       	ldi	r25, 0x04	; 4
    174e:	0e 94 36 01 	call	0x26c	; 0x26c <initQueue>
    initStrQueue(&MESSAGES_Q);
    1752:	84 eb       	ldi	r24, 0xB4	; 180
    1754:	94 e0       	ldi	r25, 0x04	; 4
    1756:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <initStrQueue>
    LCD_1602A_init();
    175a:	0e 94 c5 02 	call	0x58a	; 0x58a <LCD_1602A_init>
    HCSR04_init();
    175e:	0e 94 ac 03 	call	0x758	; 0x758 <HCSR04_init>
    KEYPAD_init();
    1762:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <KEYPAD_init>

    LED_SYSTEM_ACTIVE_INIT();
    1766:	0e 94 4a 02 	call	0x494	; 0x494 <LED_SYSTEM_ACTIVE_INIT>
    TIMER0_INIT();
    176a:	0e 94 3a 02 	call	0x474	; 0x474 <TIMER0_INIT>
    176e:	99 c0       	rjmp	.+306    	; 0x18a2 <main+0x158>
    while (1)
    {
        while (active_menu_index == 4 && active_live_view_index != -1)
        {
            // in live view, continuously update values
            LED_system_active_on();
    1770:	0e 94 55 02 	call	0x4aa	; 0x4aa <LED_system_active_on>
            switch (live_view_hover_index)
    1774:	80 91 81 04 	lds	r24, 0x0481	; 0x800481 <live_view_hover_index>
    1778:	90 91 82 04 	lds	r25, 0x0482	; 0x800482 <live_view_hover_index+0x1>
    177c:	81 30       	cpi	r24, 0x01	; 1
    177e:	91 05       	cpc	r25, r1
    1780:	19 f1       	breq	.+70     	; 0x17c8 <main+0x7e>
    1782:	1c f4       	brge	.+6      	; 0x178a <main+0x40>
    1784:	89 2b       	or	r24, r25
    1786:	41 f0       	breq	.+16     	; 0x1798 <main+0x4e>
    1788:	66 c0       	rjmp	.+204    	; 0x1856 <main+0x10c>
    178a:	82 30       	cpi	r24, 0x02	; 2
    178c:	91 05       	cpc	r25, r1
    178e:	a1 f1       	breq	.+104    	; 0x17f8 <main+0xae>
    1790:	03 97       	sbiw	r24, 0x03	; 3
    1792:	09 f4       	brne	.+2      	; 0x1796 <main+0x4c>
    1794:	49 c0       	rjmp	.+146    	; 0x1828 <main+0xde>
    1796:	5f c0       	rjmp	.+190    	; 0x1856 <main+0x10c>
            {
                case 0:
                    if (!(SHOW_LOADING_WIDGET)) {
    1798:	80 91 70 04 	lds	r24, 0x0470	; 0x800470 <__data_end>
    179c:	81 11       	cpse	r24, r1
    179e:	09 c0       	rjmp	.+18     	; 0x17b2 <main+0x68>
                        display_set("CAPACITY", "Updating...");
    17a0:	60 e9       	ldi	r22, 0x90	; 144
    17a2:	73 e0       	ldi	r23, 0x03	; 3
    17a4:	84 e5       	ldi	r24, 0x54	; 84
    17a6:	92 e0       	ldi	r25, 0x02	; 2
    17a8:	0e 94 09 04 	call	0x812	; 0x812 <display_set>
                        SHOW_LOADING_WIDGET = 1;
    17ac:	81 e0       	ldi	r24, 0x01	; 1
    17ae:	80 93 70 04 	sts	0x0470, r24	; 0x800470 <__data_end>
                    }
                    
                    current_tank_capacity = get_tank_capacity();
    17b2:	0e 94 0b 05 	call	0xa16	; 0xa16 <get_tank_capacity>
    17b6:	60 93 7d 04 	sts	0x047D, r22	; 0x80047d <current_tank_capacity>
    17ba:	70 93 7e 04 	sts	0x047E, r23	; 0x80047e <current_tank_capacity+0x1>
    17be:	80 93 7f 04 	sts	0x047F, r24	; 0x80047f <current_tank_capacity+0x2>
    17c2:	90 93 80 04 	sts	0x0480, r25	; 0x800480 <current_tank_capacity+0x3>
                    break;
    17c6:	47 c0       	rjmp	.+142    	; 0x1856 <main+0x10c>
                case 1:
                    if (!(SHOW_LOADING_WIDGET))
    17c8:	80 91 70 04 	lds	r24, 0x0470	; 0x800470 <__data_end>
    17cc:	81 11       	cpse	r24, r1
    17ce:	09 c0       	rjmp	.+18     	; 0x17e2 <main+0x98>
                    {
                        display_set("REFILL RATE", "Updating...");
    17d0:	60 e9       	ldi	r22, 0x90	; 144
    17d2:	73 e0       	ldi	r23, 0x03	; 3
    17d4:	82 e6       	ldi	r24, 0x62	; 98
    17d6:	92 e0       	ldi	r25, 0x02	; 2
    17d8:	0e 94 09 04 	call	0x812	; 0x812 <display_set>
                        SHOW_LOADING_WIDGET = 1;
    17dc:	81 e0       	ldi	r24, 0x01	; 1
    17de:	80 93 70 04 	sts	0x0470, r24	; 0x800470 <__data_end>
                    }
                    
                    current_refill_rate = get_refill_rate();
    17e2:	0e 94 49 05 	call	0xa92	; 0xa92 <get_refill_rate>
    17e6:	60 93 79 04 	sts	0x0479, r22	; 0x800479 <current_refill_rate>
    17ea:	70 93 7a 04 	sts	0x047A, r23	; 0x80047a <current_refill_rate+0x1>
    17ee:	80 93 7b 04 	sts	0x047B, r24	; 0x80047b <current_refill_rate+0x2>
    17f2:	90 93 7c 04 	sts	0x047C, r25	; 0x80047c <current_refill_rate+0x3>
                    break;
    17f6:	2f c0       	rjmp	.+94     	; 0x1856 <main+0x10c>
                case 2:
                    if (!(SHOW_LOADING_WIDGET))
    17f8:	80 91 70 04 	lds	r24, 0x0470	; 0x800470 <__data_end>
    17fc:	81 11       	cpse	r24, r1
    17fe:	09 c0       	rjmp	.+18     	; 0x1812 <main+0xc8>
                    {
                        display_set("LEAK RATE", "Updating...");
    1800:	60 e9       	ldi	r22, 0x90	; 144
    1802:	73 e0       	ldi	r23, 0x03	; 3
    1804:	89 eb       	ldi	r24, 0xB9	; 185
    1806:	92 e0       	ldi	r25, 0x02	; 2
    1808:	0e 94 09 04 	call	0x812	; 0x812 <display_set>
                        SHOW_LOADING_WIDGET = 1;
    180c:	81 e0       	ldi	r24, 0x01	; 1
    180e:	80 93 70 04 	sts	0x0470, r24	; 0x800470 <__data_end>
                    }
                    
                    current_leak_rate = get_leak_rate();
    1812:	0e 94 bc 05 	call	0xb78	; 0xb78 <get_leak_rate>
    1816:	60 93 75 04 	sts	0x0475, r22	; 0x800475 <current_leak_rate>
    181a:	70 93 76 04 	sts	0x0476, r23	; 0x800476 <current_leak_rate+0x1>
    181e:	80 93 77 04 	sts	0x0477, r24	; 0x800477 <current_leak_rate+0x2>
    1822:	90 93 78 04 	sts	0x0478, r25	; 0x800478 <current_leak_rate+0x3>
                    break;
    1826:	17 c0       	rjmp	.+46     	; 0x1856 <main+0x10c>

                case 3:
                    if (!(SHOW_LOADING_WIDGET))
    1828:	80 91 70 04 	lds	r24, 0x0470	; 0x800470 <__data_end>
    182c:	81 11       	cpse	r24, r1
    182e:	09 c0       	rjmp	.+18     	; 0x1842 <main+0xf8>
                    {
                        display_set("SOIL TEMP", "Updating...");
    1830:	60 e9       	ldi	r22, 0x90	; 144
    1832:	73 e0       	ldi	r23, 0x03	; 3
    1834:	83 ec       	ldi	r24, 0xC3	; 195
    1836:	92 e0       	ldi	r25, 0x02	; 2
    1838:	0e 94 09 04 	call	0x812	; 0x812 <display_set>
                        SHOW_LOADING_WIDGET = 1;
    183c:	81 e0       	ldi	r24, 0x01	; 1
    183e:	80 93 70 04 	sts	0x0470, r24	; 0x800470 <__data_end>
                    }
                    
                    current_soil_temperature = get_soil_temperature();
    1842:	0e 94 2f 06 	call	0xc5e	; 0xc5e <get_soil_temperature>
    1846:	60 93 71 04 	sts	0x0471, r22	; 0x800471 <current_soil_temperature>
    184a:	70 93 72 04 	sts	0x0472, r23	; 0x800472 <current_soil_temperature+0x1>
    184e:	80 93 73 04 	sts	0x0473, r24	; 0x800473 <current_soil_temperature+0x2>
    1852:	90 93 74 04 	sts	0x0474, r25	; 0x800474 <current_soil_temperature+0x3>
                    break;
            }
            LED_system_active_off();
    1856:	0e 94 51 02 	call	0x4a2	; 0x4a2 <LED_system_active_off>

            ui_show_display();
    185a:	0e 94 32 06 	call	0xc64	; 0xc64 <ui_show_display>
    185e:	2f ef       	ldi	r18, 0xFF	; 255
    1860:	83 ed       	ldi	r24, 0xD3	; 211
    1862:	90 e3       	ldi	r25, 0x30	; 48
    1864:	21 50       	subi	r18, 0x01	; 1
    1866:	80 40       	sbci	r24, 0x00	; 0
    1868:	90 40       	sbci	r25, 0x00	; 0
    186a:	e1 f7       	brne	.-8      	; 0x1864 <main+0x11a>
    186c:	00 c0       	rjmp	.+0      	; 0x186e <main+0x124>
    186e:	00 00       	nop
            _delay_ms(1000);

            if ((pressed_key = KEYPAD_read()) != KEYPAD_NO_KEY)
    1870:	0e 94 f7 03 	call	0x7ee	; 0x7ee <KEYPAD_read>
    1874:	c8 2f       	mov	r28, r24
    1876:	85 30       	cpi	r24, 0x05	; 5
    1878:	a1 f0       	breq	.+40     	; 0x18a2 <main+0x158>
            {
                if (pressed_key == 1)
    187a:	81 30       	cpi	r24, 0x01	; 1
    187c:	51 f4       	brne	.+20     	; 0x1892 <main+0x148>
                {
                    // exit live view on key 1 press
                    active_menu_index = -1;
    187e:	8f ef       	ldi	r24, 0xFF	; 255
    1880:	9f ef       	ldi	r25, 0xFF	; 255
    1882:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <active_menu_index+0x1>
    1886:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <active_menu_index>
                    pressed_key = KEYPAD_NO_KEY;
                    SHOW_LOADING_WIDGET = 0;
    188a:	10 92 70 04 	sts	0x0470, r1	; 0x800470 <__data_end>
            {
                if (pressed_key == 1)
                {
                    // exit live view on key 1 press
                    active_menu_index = -1;
                    pressed_key = KEYPAD_NO_KEY;
    188e:	c5 e0       	ldi	r28, 0x05	; 5
                    SHOW_LOADING_WIDGET = 0;
                    break;
    1890:	15 c0       	rjmp	.+42     	; 0x18bc <main+0x172>
                }
                ui_process_key_command(pressed_key);
    1892:	0e 94 c8 08 	call	0x1190	; 0x1190 <ui_process_key_command>
                while (KEYPAD_read() != KEYPAD_NO_KEY); // wait until the key is released
    1896:	0e 94 f7 03 	call	0x7ee	; 0x7ee <KEYPAD_read>
    189a:	85 30       	cpi	r24, 0x05	; 5
    189c:	e1 f7       	brne	.-8      	; 0x1896 <main+0x14c>
    189e:	01 c0       	rjmp	.+2      	; 0x18a2 <main+0x158>
        {
            ui_process_key_command(pressed_key);
            while (KEYPAD_read() != KEYPAD_NO_KEY); // wait until the key is released
        }

        pressed_key = KEYPAD_NO_KEY;
    18a0:	c5 e0       	ldi	r28, 0x05	; 5

    uint8_t pressed_key;

    while (1)
    {
        while (active_menu_index == 4 && active_live_view_index != -1)
    18a2:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <active_menu_index>
    18a6:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <active_menu_index+0x1>
    18aa:	04 97       	sbiw	r24, 0x04	; 4
    18ac:	39 f4       	brne	.+14     	; 0x18bc <main+0x172>
    18ae:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <active_live_view_index>
    18b2:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <active_live_view_index+0x1>
    18b6:	01 96       	adiw	r24, 0x01	; 1
    18b8:	09 f0       	breq	.+2      	; 0x18bc <main+0x172>
    18ba:	5a cf       	rjmp	.-332    	; 0x1770 <main+0x26>
                while (KEYPAD_read() != KEYPAD_NO_KEY); // wait until the key is released
            }
        }
        

        ui_show_display();
    18bc:	0e 94 32 06 	call	0xc64	; 0xc64 <ui_show_display>
        // _delay_ms(20);

        if (pressed_key == KEYPAD_NO_KEY) {
    18c0:	c5 30       	cpi	r28, 0x05	; 5
    18c2:	29 f4       	brne	.+10     	; 0x18ce <main+0x184>
            while ((pressed_key = KEYPAD_read()) == KEYPAD_NO_KEY);
    18c4:	0e 94 f7 03 	call	0x7ee	; 0x7ee <KEYPAD_read>
    18c8:	c8 2f       	mov	r28, r24
    18ca:	85 30       	cpi	r24, 0x05	; 5
    18cc:	d9 f3       	breq	.-10     	; 0x18c4 <main+0x17a>
        }
        
        // _delay_ms(20);
        if (KEYPAD_read() == pressed_key)
    18ce:	0e 94 f7 03 	call	0x7ee	; 0x7ee <KEYPAD_read>
    18d2:	c8 13       	cpse	r28, r24
    18d4:	e5 cf       	rjmp	.-54     	; 0x18a0 <main+0x156>
        {
            ui_process_key_command(pressed_key);
    18d6:	8c 2f       	mov	r24, r28
    18d8:	0e 94 c8 08 	call	0x1190	; 0x1190 <ui_process_key_command>
            while (KEYPAD_read() != KEYPAD_NO_KEY); // wait until the key is released
    18dc:	0e 94 f7 03 	call	0x7ee	; 0x7ee <KEYPAD_read>
    18e0:	85 30       	cpi	r24, 0x05	; 5
    18e2:	e1 f7       	brne	.-8      	; 0x18dc <main+0x192>
        }

        pressed_key = KEYPAD_NO_KEY;
    18e4:	c5 e0       	ldi	r28, 0x05	; 5
    18e6:	dd cf       	rjmp	.-70     	; 0x18a2 <main+0x158>

000018e8 <__subsf3>:
    18e8:	50 58       	subi	r21, 0x80	; 128

000018ea <__addsf3>:
    18ea:	bb 27       	eor	r27, r27
    18ec:	aa 27       	eor	r26, r26
    18ee:	0e 94 8c 0c 	call	0x1918	; 0x1918 <__addsf3x>
    18f2:	0c 94 06 0e 	jmp	0x1c0c	; 0x1c0c <__fp_round>
    18f6:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <__fp_pscA>
    18fa:	38 f0       	brcs	.+14     	; 0x190a <__addsf3+0x20>
    18fc:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <__fp_pscB>
    1900:	20 f0       	brcs	.+8      	; 0x190a <__addsf3+0x20>
    1902:	39 f4       	brne	.+14     	; 0x1912 <__addsf3+0x28>
    1904:	9f 3f       	cpi	r25, 0xFF	; 255
    1906:	19 f4       	brne	.+6      	; 0x190e <__addsf3+0x24>
    1908:	26 f4       	brtc	.+8      	; 0x1912 <__addsf3+0x28>
    190a:	0c 94 f5 0d 	jmp	0x1bea	; 0x1bea <__fp_nan>
    190e:	0e f4       	brtc	.+2      	; 0x1912 <__addsf3+0x28>
    1910:	e0 95       	com	r30
    1912:	e7 fb       	bst	r30, 7
    1914:	0c 94 ef 0d 	jmp	0x1bde	; 0x1bde <__fp_inf>

00001918 <__addsf3x>:
    1918:	e9 2f       	mov	r30, r25
    191a:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <__fp_split3>
    191e:	58 f3       	brcs	.-42     	; 0x18f6 <__addsf3+0xc>
    1920:	ba 17       	cp	r27, r26
    1922:	62 07       	cpc	r22, r18
    1924:	73 07       	cpc	r23, r19
    1926:	84 07       	cpc	r24, r20
    1928:	95 07       	cpc	r25, r21
    192a:	20 f0       	brcs	.+8      	; 0x1934 <__addsf3x+0x1c>
    192c:	79 f4       	brne	.+30     	; 0x194c <__addsf3x+0x34>
    192e:	a6 f5       	brtc	.+104    	; 0x1998 <__addsf3x+0x80>
    1930:	0c 94 39 0e 	jmp	0x1c72	; 0x1c72 <__fp_zero>
    1934:	0e f4       	brtc	.+2      	; 0x1938 <__addsf3x+0x20>
    1936:	e0 95       	com	r30
    1938:	0b 2e       	mov	r0, r27
    193a:	ba 2f       	mov	r27, r26
    193c:	a0 2d       	mov	r26, r0
    193e:	0b 01       	movw	r0, r22
    1940:	b9 01       	movw	r22, r18
    1942:	90 01       	movw	r18, r0
    1944:	0c 01       	movw	r0, r24
    1946:	ca 01       	movw	r24, r20
    1948:	a0 01       	movw	r20, r0
    194a:	11 24       	eor	r1, r1
    194c:	ff 27       	eor	r31, r31
    194e:	59 1b       	sub	r21, r25
    1950:	99 f0       	breq	.+38     	; 0x1978 <__addsf3x+0x60>
    1952:	59 3f       	cpi	r21, 0xF9	; 249
    1954:	50 f4       	brcc	.+20     	; 0x196a <__addsf3x+0x52>
    1956:	50 3e       	cpi	r21, 0xE0	; 224
    1958:	68 f1       	brcs	.+90     	; 0x19b4 <__addsf3x+0x9c>
    195a:	1a 16       	cp	r1, r26
    195c:	f0 40       	sbci	r31, 0x00	; 0
    195e:	a2 2f       	mov	r26, r18
    1960:	23 2f       	mov	r18, r19
    1962:	34 2f       	mov	r19, r20
    1964:	44 27       	eor	r20, r20
    1966:	58 5f       	subi	r21, 0xF8	; 248
    1968:	f3 cf       	rjmp	.-26     	; 0x1950 <__addsf3x+0x38>
    196a:	46 95       	lsr	r20
    196c:	37 95       	ror	r19
    196e:	27 95       	ror	r18
    1970:	a7 95       	ror	r26
    1972:	f0 40       	sbci	r31, 0x00	; 0
    1974:	53 95       	inc	r21
    1976:	c9 f7       	brne	.-14     	; 0x196a <__addsf3x+0x52>
    1978:	7e f4       	brtc	.+30     	; 0x1998 <__addsf3x+0x80>
    197a:	1f 16       	cp	r1, r31
    197c:	ba 0b       	sbc	r27, r26
    197e:	62 0b       	sbc	r22, r18
    1980:	73 0b       	sbc	r23, r19
    1982:	84 0b       	sbc	r24, r20
    1984:	ba f0       	brmi	.+46     	; 0x19b4 <__addsf3x+0x9c>
    1986:	91 50       	subi	r25, 0x01	; 1
    1988:	a1 f0       	breq	.+40     	; 0x19b2 <__addsf3x+0x9a>
    198a:	ff 0f       	add	r31, r31
    198c:	bb 1f       	adc	r27, r27
    198e:	66 1f       	adc	r22, r22
    1990:	77 1f       	adc	r23, r23
    1992:	88 1f       	adc	r24, r24
    1994:	c2 f7       	brpl	.-16     	; 0x1986 <__addsf3x+0x6e>
    1996:	0e c0       	rjmp	.+28     	; 0x19b4 <__addsf3x+0x9c>
    1998:	ba 0f       	add	r27, r26
    199a:	62 1f       	adc	r22, r18
    199c:	73 1f       	adc	r23, r19
    199e:	84 1f       	adc	r24, r20
    19a0:	48 f4       	brcc	.+18     	; 0x19b4 <__addsf3x+0x9c>
    19a2:	87 95       	ror	r24
    19a4:	77 95       	ror	r23
    19a6:	67 95       	ror	r22
    19a8:	b7 95       	ror	r27
    19aa:	f7 95       	ror	r31
    19ac:	9e 3f       	cpi	r25, 0xFE	; 254
    19ae:	08 f0       	brcs	.+2      	; 0x19b2 <__addsf3x+0x9a>
    19b0:	b0 cf       	rjmp	.-160    	; 0x1912 <__addsf3+0x28>
    19b2:	93 95       	inc	r25
    19b4:	88 0f       	add	r24, r24
    19b6:	08 f0       	brcs	.+2      	; 0x19ba <__addsf3x+0xa2>
    19b8:	99 27       	eor	r25, r25
    19ba:	ee 0f       	add	r30, r30
    19bc:	97 95       	ror	r25
    19be:	87 95       	ror	r24
    19c0:	08 95       	ret

000019c2 <__cmpsf2>:
    19c2:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <__fp_cmp>
    19c6:	08 f4       	brcc	.+2      	; 0x19ca <__cmpsf2+0x8>
    19c8:	81 e0       	ldi	r24, 0x01	; 1
    19ca:	08 95       	ret

000019cc <__divsf3>:
    19cc:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <__divsf3x>
    19d0:	0c 94 06 0e 	jmp	0x1c0c	; 0x1c0c <__fp_round>
    19d4:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <__fp_pscB>
    19d8:	58 f0       	brcs	.+22     	; 0x19f0 <__divsf3+0x24>
    19da:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <__fp_pscA>
    19de:	40 f0       	brcs	.+16     	; 0x19f0 <__divsf3+0x24>
    19e0:	29 f4       	brne	.+10     	; 0x19ec <__divsf3+0x20>
    19e2:	5f 3f       	cpi	r21, 0xFF	; 255
    19e4:	29 f0       	breq	.+10     	; 0x19f0 <__divsf3+0x24>
    19e6:	0c 94 ef 0d 	jmp	0x1bde	; 0x1bde <__fp_inf>
    19ea:	51 11       	cpse	r21, r1
    19ec:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__fp_szero>
    19f0:	0c 94 f5 0d 	jmp	0x1bea	; 0x1bea <__fp_nan>

000019f4 <__divsf3x>:
    19f4:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <__fp_split3>
    19f8:	68 f3       	brcs	.-38     	; 0x19d4 <__divsf3+0x8>

000019fa <__divsf3_pse>:
    19fa:	99 23       	and	r25, r25
    19fc:	b1 f3       	breq	.-20     	; 0x19ea <__divsf3+0x1e>
    19fe:	55 23       	and	r21, r21
    1a00:	91 f3       	breq	.-28     	; 0x19e6 <__divsf3+0x1a>
    1a02:	95 1b       	sub	r25, r21
    1a04:	55 0b       	sbc	r21, r21
    1a06:	bb 27       	eor	r27, r27
    1a08:	aa 27       	eor	r26, r26
    1a0a:	62 17       	cp	r22, r18
    1a0c:	73 07       	cpc	r23, r19
    1a0e:	84 07       	cpc	r24, r20
    1a10:	38 f0       	brcs	.+14     	; 0x1a20 <__divsf3_pse+0x26>
    1a12:	9f 5f       	subi	r25, 0xFF	; 255
    1a14:	5f 4f       	sbci	r21, 0xFF	; 255
    1a16:	22 0f       	add	r18, r18
    1a18:	33 1f       	adc	r19, r19
    1a1a:	44 1f       	adc	r20, r20
    1a1c:	aa 1f       	adc	r26, r26
    1a1e:	a9 f3       	breq	.-22     	; 0x1a0a <__divsf3_pse+0x10>
    1a20:	35 d0       	rcall	.+106    	; 0x1a8c <__divsf3_pse+0x92>
    1a22:	0e 2e       	mov	r0, r30
    1a24:	3a f0       	brmi	.+14     	; 0x1a34 <__divsf3_pse+0x3a>
    1a26:	e0 e8       	ldi	r30, 0x80	; 128
    1a28:	32 d0       	rcall	.+100    	; 0x1a8e <__divsf3_pse+0x94>
    1a2a:	91 50       	subi	r25, 0x01	; 1
    1a2c:	50 40       	sbci	r21, 0x00	; 0
    1a2e:	e6 95       	lsr	r30
    1a30:	00 1c       	adc	r0, r0
    1a32:	ca f7       	brpl	.-14     	; 0x1a26 <__divsf3_pse+0x2c>
    1a34:	2b d0       	rcall	.+86     	; 0x1a8c <__divsf3_pse+0x92>
    1a36:	fe 2f       	mov	r31, r30
    1a38:	29 d0       	rcall	.+82     	; 0x1a8c <__divsf3_pse+0x92>
    1a3a:	66 0f       	add	r22, r22
    1a3c:	77 1f       	adc	r23, r23
    1a3e:	88 1f       	adc	r24, r24
    1a40:	bb 1f       	adc	r27, r27
    1a42:	26 17       	cp	r18, r22
    1a44:	37 07       	cpc	r19, r23
    1a46:	48 07       	cpc	r20, r24
    1a48:	ab 07       	cpc	r26, r27
    1a4a:	b0 e8       	ldi	r27, 0x80	; 128
    1a4c:	09 f0       	breq	.+2      	; 0x1a50 <__divsf3_pse+0x56>
    1a4e:	bb 0b       	sbc	r27, r27
    1a50:	80 2d       	mov	r24, r0
    1a52:	bf 01       	movw	r22, r30
    1a54:	ff 27       	eor	r31, r31
    1a56:	93 58       	subi	r25, 0x83	; 131
    1a58:	5f 4f       	sbci	r21, 0xFF	; 255
    1a5a:	3a f0       	brmi	.+14     	; 0x1a6a <__divsf3_pse+0x70>
    1a5c:	9e 3f       	cpi	r25, 0xFE	; 254
    1a5e:	51 05       	cpc	r21, r1
    1a60:	78 f0       	brcs	.+30     	; 0x1a80 <__divsf3_pse+0x86>
    1a62:	0c 94 ef 0d 	jmp	0x1bde	; 0x1bde <__fp_inf>
    1a66:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__fp_szero>
    1a6a:	5f 3f       	cpi	r21, 0xFF	; 255
    1a6c:	e4 f3       	brlt	.-8      	; 0x1a66 <__divsf3_pse+0x6c>
    1a6e:	98 3e       	cpi	r25, 0xE8	; 232
    1a70:	d4 f3       	brlt	.-12     	; 0x1a66 <__divsf3_pse+0x6c>
    1a72:	86 95       	lsr	r24
    1a74:	77 95       	ror	r23
    1a76:	67 95       	ror	r22
    1a78:	b7 95       	ror	r27
    1a7a:	f7 95       	ror	r31
    1a7c:	9f 5f       	subi	r25, 0xFF	; 255
    1a7e:	c9 f7       	brne	.-14     	; 0x1a72 <__divsf3_pse+0x78>
    1a80:	88 0f       	add	r24, r24
    1a82:	91 1d       	adc	r25, r1
    1a84:	96 95       	lsr	r25
    1a86:	87 95       	ror	r24
    1a88:	97 f9       	bld	r25, 7
    1a8a:	08 95       	ret
    1a8c:	e1 e0       	ldi	r30, 0x01	; 1
    1a8e:	66 0f       	add	r22, r22
    1a90:	77 1f       	adc	r23, r23
    1a92:	88 1f       	adc	r24, r24
    1a94:	bb 1f       	adc	r27, r27
    1a96:	62 17       	cp	r22, r18
    1a98:	73 07       	cpc	r23, r19
    1a9a:	84 07       	cpc	r24, r20
    1a9c:	ba 07       	cpc	r27, r26
    1a9e:	20 f0       	brcs	.+8      	; 0x1aa8 <__divsf3_pse+0xae>
    1aa0:	62 1b       	sub	r22, r18
    1aa2:	73 0b       	sbc	r23, r19
    1aa4:	84 0b       	sbc	r24, r20
    1aa6:	ba 0b       	sbc	r27, r26
    1aa8:	ee 1f       	adc	r30, r30
    1aaa:	88 f7       	brcc	.-30     	; 0x1a8e <__divsf3_pse+0x94>
    1aac:	e0 95       	com	r30
    1aae:	08 95       	ret

00001ab0 <__fixsfsi>:
    1ab0:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <__fixunssfsi>
    1ab4:	68 94       	set
    1ab6:	b1 11       	cpse	r27, r1
    1ab8:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__fp_szero>
    1abc:	08 95       	ret

00001abe <__fixunssfsi>:
    1abe:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <__fp_splitA>
    1ac2:	88 f0       	brcs	.+34     	; 0x1ae6 <__fixunssfsi+0x28>
    1ac4:	9f 57       	subi	r25, 0x7F	; 127
    1ac6:	98 f0       	brcs	.+38     	; 0x1aee <__fixunssfsi+0x30>
    1ac8:	b9 2f       	mov	r27, r25
    1aca:	99 27       	eor	r25, r25
    1acc:	b7 51       	subi	r27, 0x17	; 23
    1ace:	b0 f0       	brcs	.+44     	; 0x1afc <__fixunssfsi+0x3e>
    1ad0:	e1 f0       	breq	.+56     	; 0x1b0a <__fixunssfsi+0x4c>
    1ad2:	66 0f       	add	r22, r22
    1ad4:	77 1f       	adc	r23, r23
    1ad6:	88 1f       	adc	r24, r24
    1ad8:	99 1f       	adc	r25, r25
    1ada:	1a f0       	brmi	.+6      	; 0x1ae2 <__fixunssfsi+0x24>
    1adc:	ba 95       	dec	r27
    1ade:	c9 f7       	brne	.-14     	; 0x1ad2 <__fixunssfsi+0x14>
    1ae0:	14 c0       	rjmp	.+40     	; 0x1b0a <__fixunssfsi+0x4c>
    1ae2:	b1 30       	cpi	r27, 0x01	; 1
    1ae4:	91 f0       	breq	.+36     	; 0x1b0a <__fixunssfsi+0x4c>
    1ae6:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <__fp_zero>
    1aea:	b1 e0       	ldi	r27, 0x01	; 1
    1aec:	08 95       	ret
    1aee:	0c 94 39 0e 	jmp	0x1c72	; 0x1c72 <__fp_zero>
    1af2:	67 2f       	mov	r22, r23
    1af4:	78 2f       	mov	r23, r24
    1af6:	88 27       	eor	r24, r24
    1af8:	b8 5f       	subi	r27, 0xF8	; 248
    1afa:	39 f0       	breq	.+14     	; 0x1b0a <__fixunssfsi+0x4c>
    1afc:	b9 3f       	cpi	r27, 0xF9	; 249
    1afe:	cc f3       	brlt	.-14     	; 0x1af2 <__fixunssfsi+0x34>
    1b00:	86 95       	lsr	r24
    1b02:	77 95       	ror	r23
    1b04:	67 95       	ror	r22
    1b06:	b3 95       	inc	r27
    1b08:	d9 f7       	brne	.-10     	; 0x1b00 <__fixunssfsi+0x42>
    1b0a:	3e f4       	brtc	.+14     	; 0x1b1a <__fixunssfsi+0x5c>
    1b0c:	90 95       	com	r25
    1b0e:	80 95       	com	r24
    1b10:	70 95       	com	r23
    1b12:	61 95       	neg	r22
    1b14:	7f 4f       	sbci	r23, 0xFF	; 255
    1b16:	8f 4f       	sbci	r24, 0xFF	; 255
    1b18:	9f 4f       	sbci	r25, 0xFF	; 255
    1b1a:	08 95       	ret

00001b1c <__floatunsisf>:
    1b1c:	e8 94       	clt
    1b1e:	09 c0       	rjmp	.+18     	; 0x1b32 <__floatsisf+0x12>

00001b20 <__floatsisf>:
    1b20:	97 fb       	bst	r25, 7
    1b22:	3e f4       	brtc	.+14     	; 0x1b32 <__floatsisf+0x12>
    1b24:	90 95       	com	r25
    1b26:	80 95       	com	r24
    1b28:	70 95       	com	r23
    1b2a:	61 95       	neg	r22
    1b2c:	7f 4f       	sbci	r23, 0xFF	; 255
    1b2e:	8f 4f       	sbci	r24, 0xFF	; 255
    1b30:	9f 4f       	sbci	r25, 0xFF	; 255
    1b32:	99 23       	and	r25, r25
    1b34:	a9 f0       	breq	.+42     	; 0x1b60 <__floatsisf+0x40>
    1b36:	f9 2f       	mov	r31, r25
    1b38:	96 e9       	ldi	r25, 0x96	; 150
    1b3a:	bb 27       	eor	r27, r27
    1b3c:	93 95       	inc	r25
    1b3e:	f6 95       	lsr	r31
    1b40:	87 95       	ror	r24
    1b42:	77 95       	ror	r23
    1b44:	67 95       	ror	r22
    1b46:	b7 95       	ror	r27
    1b48:	f1 11       	cpse	r31, r1
    1b4a:	f8 cf       	rjmp	.-16     	; 0x1b3c <__floatsisf+0x1c>
    1b4c:	fa f4       	brpl	.+62     	; 0x1b8c <__floatsisf+0x6c>
    1b4e:	bb 0f       	add	r27, r27
    1b50:	11 f4       	brne	.+4      	; 0x1b56 <__floatsisf+0x36>
    1b52:	60 ff       	sbrs	r22, 0
    1b54:	1b c0       	rjmp	.+54     	; 0x1b8c <__floatsisf+0x6c>
    1b56:	6f 5f       	subi	r22, 0xFF	; 255
    1b58:	7f 4f       	sbci	r23, 0xFF	; 255
    1b5a:	8f 4f       	sbci	r24, 0xFF	; 255
    1b5c:	9f 4f       	sbci	r25, 0xFF	; 255
    1b5e:	16 c0       	rjmp	.+44     	; 0x1b8c <__floatsisf+0x6c>
    1b60:	88 23       	and	r24, r24
    1b62:	11 f0       	breq	.+4      	; 0x1b68 <__floatsisf+0x48>
    1b64:	96 e9       	ldi	r25, 0x96	; 150
    1b66:	11 c0       	rjmp	.+34     	; 0x1b8a <__floatsisf+0x6a>
    1b68:	77 23       	and	r23, r23
    1b6a:	21 f0       	breq	.+8      	; 0x1b74 <__floatsisf+0x54>
    1b6c:	9e e8       	ldi	r25, 0x8E	; 142
    1b6e:	87 2f       	mov	r24, r23
    1b70:	76 2f       	mov	r23, r22
    1b72:	05 c0       	rjmp	.+10     	; 0x1b7e <__floatsisf+0x5e>
    1b74:	66 23       	and	r22, r22
    1b76:	71 f0       	breq	.+28     	; 0x1b94 <__floatsisf+0x74>
    1b78:	96 e8       	ldi	r25, 0x86	; 134
    1b7a:	86 2f       	mov	r24, r22
    1b7c:	70 e0       	ldi	r23, 0x00	; 0
    1b7e:	60 e0       	ldi	r22, 0x00	; 0
    1b80:	2a f0       	brmi	.+10     	; 0x1b8c <__floatsisf+0x6c>
    1b82:	9a 95       	dec	r25
    1b84:	66 0f       	add	r22, r22
    1b86:	77 1f       	adc	r23, r23
    1b88:	88 1f       	adc	r24, r24
    1b8a:	da f7       	brpl	.-10     	; 0x1b82 <__floatsisf+0x62>
    1b8c:	88 0f       	add	r24, r24
    1b8e:	96 95       	lsr	r25
    1b90:	87 95       	ror	r24
    1b92:	97 f9       	bld	r25, 7
    1b94:	08 95       	ret

00001b96 <__fp_cmp>:
    1b96:	99 0f       	add	r25, r25
    1b98:	00 08       	sbc	r0, r0
    1b9a:	55 0f       	add	r21, r21
    1b9c:	aa 0b       	sbc	r26, r26
    1b9e:	e0 e8       	ldi	r30, 0x80	; 128
    1ba0:	fe ef       	ldi	r31, 0xFE	; 254
    1ba2:	16 16       	cp	r1, r22
    1ba4:	17 06       	cpc	r1, r23
    1ba6:	e8 07       	cpc	r30, r24
    1ba8:	f9 07       	cpc	r31, r25
    1baa:	c0 f0       	brcs	.+48     	; 0x1bdc <__fp_cmp+0x46>
    1bac:	12 16       	cp	r1, r18
    1bae:	13 06       	cpc	r1, r19
    1bb0:	e4 07       	cpc	r30, r20
    1bb2:	f5 07       	cpc	r31, r21
    1bb4:	98 f0       	brcs	.+38     	; 0x1bdc <__fp_cmp+0x46>
    1bb6:	62 1b       	sub	r22, r18
    1bb8:	73 0b       	sbc	r23, r19
    1bba:	84 0b       	sbc	r24, r20
    1bbc:	95 0b       	sbc	r25, r21
    1bbe:	39 f4       	brne	.+14     	; 0x1bce <__fp_cmp+0x38>
    1bc0:	0a 26       	eor	r0, r26
    1bc2:	61 f0       	breq	.+24     	; 0x1bdc <__fp_cmp+0x46>
    1bc4:	23 2b       	or	r18, r19
    1bc6:	24 2b       	or	r18, r20
    1bc8:	25 2b       	or	r18, r21
    1bca:	21 f4       	brne	.+8      	; 0x1bd4 <__fp_cmp+0x3e>
    1bcc:	08 95       	ret
    1bce:	0a 26       	eor	r0, r26
    1bd0:	09 f4       	brne	.+2      	; 0x1bd4 <__fp_cmp+0x3e>
    1bd2:	a1 40       	sbci	r26, 0x01	; 1
    1bd4:	a6 95       	lsr	r26
    1bd6:	8f ef       	ldi	r24, 0xFF	; 255
    1bd8:	81 1d       	adc	r24, r1
    1bda:	81 1d       	adc	r24, r1
    1bdc:	08 95       	ret

00001bde <__fp_inf>:
    1bde:	97 f9       	bld	r25, 7
    1be0:	9f 67       	ori	r25, 0x7F	; 127
    1be2:	80 e8       	ldi	r24, 0x80	; 128
    1be4:	70 e0       	ldi	r23, 0x00	; 0
    1be6:	60 e0       	ldi	r22, 0x00	; 0
    1be8:	08 95       	ret

00001bea <__fp_nan>:
    1bea:	9f ef       	ldi	r25, 0xFF	; 255
    1bec:	80 ec       	ldi	r24, 0xC0	; 192
    1bee:	08 95       	ret

00001bf0 <__fp_pscA>:
    1bf0:	00 24       	eor	r0, r0
    1bf2:	0a 94       	dec	r0
    1bf4:	16 16       	cp	r1, r22
    1bf6:	17 06       	cpc	r1, r23
    1bf8:	18 06       	cpc	r1, r24
    1bfa:	09 06       	cpc	r0, r25
    1bfc:	08 95       	ret

00001bfe <__fp_pscB>:
    1bfe:	00 24       	eor	r0, r0
    1c00:	0a 94       	dec	r0
    1c02:	12 16       	cp	r1, r18
    1c04:	13 06       	cpc	r1, r19
    1c06:	14 06       	cpc	r1, r20
    1c08:	05 06       	cpc	r0, r21
    1c0a:	08 95       	ret

00001c0c <__fp_round>:
    1c0c:	09 2e       	mov	r0, r25
    1c0e:	03 94       	inc	r0
    1c10:	00 0c       	add	r0, r0
    1c12:	11 f4       	brne	.+4      	; 0x1c18 <__fp_round+0xc>
    1c14:	88 23       	and	r24, r24
    1c16:	52 f0       	brmi	.+20     	; 0x1c2c <__fp_round+0x20>
    1c18:	bb 0f       	add	r27, r27
    1c1a:	40 f4       	brcc	.+16     	; 0x1c2c <__fp_round+0x20>
    1c1c:	bf 2b       	or	r27, r31
    1c1e:	11 f4       	brne	.+4      	; 0x1c24 <__fp_round+0x18>
    1c20:	60 ff       	sbrs	r22, 0
    1c22:	04 c0       	rjmp	.+8      	; 0x1c2c <__fp_round+0x20>
    1c24:	6f 5f       	subi	r22, 0xFF	; 255
    1c26:	7f 4f       	sbci	r23, 0xFF	; 255
    1c28:	8f 4f       	sbci	r24, 0xFF	; 255
    1c2a:	9f 4f       	sbci	r25, 0xFF	; 255
    1c2c:	08 95       	ret

00001c2e <__fp_split3>:
    1c2e:	57 fd       	sbrc	r21, 7
    1c30:	90 58       	subi	r25, 0x80	; 128
    1c32:	44 0f       	add	r20, r20
    1c34:	55 1f       	adc	r21, r21
    1c36:	59 f0       	breq	.+22     	; 0x1c4e <__fp_splitA+0x10>
    1c38:	5f 3f       	cpi	r21, 0xFF	; 255
    1c3a:	71 f0       	breq	.+28     	; 0x1c58 <__fp_splitA+0x1a>
    1c3c:	47 95       	ror	r20

00001c3e <__fp_splitA>:
    1c3e:	88 0f       	add	r24, r24
    1c40:	97 fb       	bst	r25, 7
    1c42:	99 1f       	adc	r25, r25
    1c44:	61 f0       	breq	.+24     	; 0x1c5e <__fp_splitA+0x20>
    1c46:	9f 3f       	cpi	r25, 0xFF	; 255
    1c48:	79 f0       	breq	.+30     	; 0x1c68 <__fp_splitA+0x2a>
    1c4a:	87 95       	ror	r24
    1c4c:	08 95       	ret
    1c4e:	12 16       	cp	r1, r18
    1c50:	13 06       	cpc	r1, r19
    1c52:	14 06       	cpc	r1, r20
    1c54:	55 1f       	adc	r21, r21
    1c56:	f2 cf       	rjmp	.-28     	; 0x1c3c <__fp_split3+0xe>
    1c58:	46 95       	lsr	r20
    1c5a:	f1 df       	rcall	.-30     	; 0x1c3e <__fp_splitA>
    1c5c:	08 c0       	rjmp	.+16     	; 0x1c6e <__fp_splitA+0x30>
    1c5e:	16 16       	cp	r1, r22
    1c60:	17 06       	cpc	r1, r23
    1c62:	18 06       	cpc	r1, r24
    1c64:	99 1f       	adc	r25, r25
    1c66:	f1 cf       	rjmp	.-30     	; 0x1c4a <__fp_splitA+0xc>
    1c68:	86 95       	lsr	r24
    1c6a:	71 05       	cpc	r23, r1
    1c6c:	61 05       	cpc	r22, r1
    1c6e:	08 94       	sec
    1c70:	08 95       	ret

00001c72 <__fp_zero>:
    1c72:	e8 94       	clt

00001c74 <__fp_szero>:
    1c74:	bb 27       	eor	r27, r27
    1c76:	66 27       	eor	r22, r22
    1c78:	77 27       	eor	r23, r23
    1c7a:	cb 01       	movw	r24, r22
    1c7c:	97 f9       	bld	r25, 7
    1c7e:	08 95       	ret

00001c80 <__gesf2>:
    1c80:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <__fp_cmp>
    1c84:	08 f4       	brcc	.+2      	; 0x1c88 <__gesf2+0x8>
    1c86:	8f ef       	ldi	r24, 0xFF	; 255
    1c88:	08 95       	ret

00001c8a <__mulsf3>:
    1c8a:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <__mulsf3x>
    1c8e:	0c 94 06 0e 	jmp	0x1c0c	; 0x1c0c <__fp_round>
    1c92:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <__fp_pscA>
    1c96:	38 f0       	brcs	.+14     	; 0x1ca6 <__mulsf3+0x1c>
    1c98:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <__fp_pscB>
    1c9c:	20 f0       	brcs	.+8      	; 0x1ca6 <__mulsf3+0x1c>
    1c9e:	95 23       	and	r25, r21
    1ca0:	11 f0       	breq	.+4      	; 0x1ca6 <__mulsf3+0x1c>
    1ca2:	0c 94 ef 0d 	jmp	0x1bde	; 0x1bde <__fp_inf>
    1ca6:	0c 94 f5 0d 	jmp	0x1bea	; 0x1bea <__fp_nan>
    1caa:	11 24       	eor	r1, r1
    1cac:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__fp_szero>

00001cb0 <__mulsf3x>:
    1cb0:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <__fp_split3>
    1cb4:	70 f3       	brcs	.-36     	; 0x1c92 <__mulsf3+0x8>

00001cb6 <__mulsf3_pse>:
    1cb6:	95 9f       	mul	r25, r21
    1cb8:	c1 f3       	breq	.-16     	; 0x1caa <__mulsf3+0x20>
    1cba:	95 0f       	add	r25, r21
    1cbc:	50 e0       	ldi	r21, 0x00	; 0
    1cbe:	55 1f       	adc	r21, r21
    1cc0:	62 9f       	mul	r22, r18
    1cc2:	f0 01       	movw	r30, r0
    1cc4:	72 9f       	mul	r23, r18
    1cc6:	bb 27       	eor	r27, r27
    1cc8:	f0 0d       	add	r31, r0
    1cca:	b1 1d       	adc	r27, r1
    1ccc:	63 9f       	mul	r22, r19
    1cce:	aa 27       	eor	r26, r26
    1cd0:	f0 0d       	add	r31, r0
    1cd2:	b1 1d       	adc	r27, r1
    1cd4:	aa 1f       	adc	r26, r26
    1cd6:	64 9f       	mul	r22, r20
    1cd8:	66 27       	eor	r22, r22
    1cda:	b0 0d       	add	r27, r0
    1cdc:	a1 1d       	adc	r26, r1
    1cde:	66 1f       	adc	r22, r22
    1ce0:	82 9f       	mul	r24, r18
    1ce2:	22 27       	eor	r18, r18
    1ce4:	b0 0d       	add	r27, r0
    1ce6:	a1 1d       	adc	r26, r1
    1ce8:	62 1f       	adc	r22, r18
    1cea:	73 9f       	mul	r23, r19
    1cec:	b0 0d       	add	r27, r0
    1cee:	a1 1d       	adc	r26, r1
    1cf0:	62 1f       	adc	r22, r18
    1cf2:	83 9f       	mul	r24, r19
    1cf4:	a0 0d       	add	r26, r0
    1cf6:	61 1d       	adc	r22, r1
    1cf8:	22 1f       	adc	r18, r18
    1cfa:	74 9f       	mul	r23, r20
    1cfc:	33 27       	eor	r19, r19
    1cfe:	a0 0d       	add	r26, r0
    1d00:	61 1d       	adc	r22, r1
    1d02:	23 1f       	adc	r18, r19
    1d04:	84 9f       	mul	r24, r20
    1d06:	60 0d       	add	r22, r0
    1d08:	21 1d       	adc	r18, r1
    1d0a:	82 2f       	mov	r24, r18
    1d0c:	76 2f       	mov	r23, r22
    1d0e:	6a 2f       	mov	r22, r26
    1d10:	11 24       	eor	r1, r1
    1d12:	9f 57       	subi	r25, 0x7F	; 127
    1d14:	50 40       	sbci	r21, 0x00	; 0
    1d16:	9a f0       	brmi	.+38     	; 0x1d3e <__mulsf3_pse+0x88>
    1d18:	f1 f0       	breq	.+60     	; 0x1d56 <__mulsf3_pse+0xa0>
    1d1a:	88 23       	and	r24, r24
    1d1c:	4a f0       	brmi	.+18     	; 0x1d30 <__mulsf3_pse+0x7a>
    1d1e:	ee 0f       	add	r30, r30
    1d20:	ff 1f       	adc	r31, r31
    1d22:	bb 1f       	adc	r27, r27
    1d24:	66 1f       	adc	r22, r22
    1d26:	77 1f       	adc	r23, r23
    1d28:	88 1f       	adc	r24, r24
    1d2a:	91 50       	subi	r25, 0x01	; 1
    1d2c:	50 40       	sbci	r21, 0x00	; 0
    1d2e:	a9 f7       	brne	.-22     	; 0x1d1a <__mulsf3_pse+0x64>
    1d30:	9e 3f       	cpi	r25, 0xFE	; 254
    1d32:	51 05       	cpc	r21, r1
    1d34:	80 f0       	brcs	.+32     	; 0x1d56 <__mulsf3_pse+0xa0>
    1d36:	0c 94 ef 0d 	jmp	0x1bde	; 0x1bde <__fp_inf>
    1d3a:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__fp_szero>
    1d3e:	5f 3f       	cpi	r21, 0xFF	; 255
    1d40:	e4 f3       	brlt	.-8      	; 0x1d3a <__mulsf3_pse+0x84>
    1d42:	98 3e       	cpi	r25, 0xE8	; 232
    1d44:	d4 f3       	brlt	.-12     	; 0x1d3a <__mulsf3_pse+0x84>
    1d46:	86 95       	lsr	r24
    1d48:	77 95       	ror	r23
    1d4a:	67 95       	ror	r22
    1d4c:	b7 95       	ror	r27
    1d4e:	f7 95       	ror	r31
    1d50:	e7 95       	ror	r30
    1d52:	9f 5f       	subi	r25, 0xFF	; 255
    1d54:	c1 f7       	brne	.-16     	; 0x1d46 <__mulsf3_pse+0x90>
    1d56:	fe 2b       	or	r31, r30
    1d58:	88 0f       	add	r24, r24
    1d5a:	91 1d       	adc	r25, r1
    1d5c:	96 95       	lsr	r25
    1d5e:	87 95       	ror	r24
    1d60:	97 f9       	bld	r25, 7
    1d62:	08 95       	ret

00001d64 <__divmodhi4>:
    1d64:	97 fb       	bst	r25, 7
    1d66:	07 2e       	mov	r0, r23
    1d68:	16 f4       	brtc	.+4      	; 0x1d6e <__divmodhi4+0xa>
    1d6a:	00 94       	com	r0
    1d6c:	07 d0       	rcall	.+14     	; 0x1d7c <__divmodhi4_neg1>
    1d6e:	77 fd       	sbrc	r23, 7
    1d70:	09 d0       	rcall	.+18     	; 0x1d84 <__divmodhi4_neg2>
    1d72:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <__udivmodhi4>
    1d76:	07 fc       	sbrc	r0, 7
    1d78:	05 d0       	rcall	.+10     	; 0x1d84 <__divmodhi4_neg2>
    1d7a:	3e f4       	brtc	.+14     	; 0x1d8a <__divmodhi4_exit>

00001d7c <__divmodhi4_neg1>:
    1d7c:	90 95       	com	r25
    1d7e:	81 95       	neg	r24
    1d80:	9f 4f       	sbci	r25, 0xFF	; 255
    1d82:	08 95       	ret

00001d84 <__divmodhi4_neg2>:
    1d84:	70 95       	com	r23
    1d86:	61 95       	neg	r22
    1d88:	7f 4f       	sbci	r23, 0xFF	; 255

00001d8a <__divmodhi4_exit>:
    1d8a:	08 95       	ret

00001d8c <__tablejump2__>:
    1d8c:	ee 0f       	add	r30, r30
    1d8e:	ff 1f       	adc	r31, r31
    1d90:	05 90       	lpm	r0, Z+
    1d92:	f4 91       	lpm	r31, Z
    1d94:	e0 2d       	mov	r30, r0
    1d96:	09 94       	ijmp

00001d98 <__udivmodhi4>:
    1d98:	aa 1b       	sub	r26, r26
    1d9a:	bb 1b       	sub	r27, r27
    1d9c:	51 e1       	ldi	r21, 0x11	; 17
    1d9e:	07 c0       	rjmp	.+14     	; 0x1dae <__udivmodhi4_ep>

00001da0 <__udivmodhi4_loop>:
    1da0:	aa 1f       	adc	r26, r26
    1da2:	bb 1f       	adc	r27, r27
    1da4:	a6 17       	cp	r26, r22
    1da6:	b7 07       	cpc	r27, r23
    1da8:	10 f0       	brcs	.+4      	; 0x1dae <__udivmodhi4_ep>
    1daa:	a6 1b       	sub	r26, r22
    1dac:	b7 0b       	sbc	r27, r23

00001dae <__udivmodhi4_ep>:
    1dae:	88 1f       	adc	r24, r24
    1db0:	99 1f       	adc	r25, r25
    1db2:	5a 95       	dec	r21
    1db4:	a9 f7       	brne	.-22     	; 0x1da0 <__udivmodhi4_loop>
    1db6:	80 95       	com	r24
    1db8:	90 95       	com	r25
    1dba:	bc 01       	movw	r22, r24
    1dbc:	cd 01       	movw	r24, r26
    1dbe:	08 95       	ret

00001dc0 <dtostrf>:
    1dc0:	ef 92       	push	r14
    1dc2:	0f 93       	push	r16
    1dc4:	1f 93       	push	r17
    1dc6:	cf 93       	push	r28
    1dc8:	df 93       	push	r29
    1dca:	e8 01       	movw	r28, r16
    1dcc:	47 fd       	sbrc	r20, 7
    1dce:	02 c0       	rjmp	.+4      	; 0x1dd4 <dtostrf+0x14>
    1dd0:	34 e0       	ldi	r19, 0x04	; 4
    1dd2:	01 c0       	rjmp	.+2      	; 0x1dd6 <dtostrf+0x16>
    1dd4:	34 e1       	ldi	r19, 0x14	; 20
    1dd6:	04 2e       	mov	r0, r20
    1dd8:	00 0c       	add	r0, r0
    1dda:	55 0b       	sbc	r21, r21
    1ddc:	57 ff       	sbrs	r21, 7
    1dde:	03 c0       	rjmp	.+6      	; 0x1de6 <dtostrf+0x26>
    1de0:	51 95       	neg	r21
    1de2:	41 95       	neg	r20
    1de4:	51 09       	sbc	r21, r1
    1de6:	e3 2e       	mov	r14, r19
    1de8:	02 2f       	mov	r16, r18
    1dea:	24 2f       	mov	r18, r20
    1dec:	ae 01       	movw	r20, r28
    1dee:	0e 94 27 11 	call	0x224e	; 0x224e <dtoa_prf>
    1df2:	ce 01       	movw	r24, r28
    1df4:	df 91       	pop	r29
    1df6:	cf 91       	pop	r28
    1df8:	1f 91       	pop	r17
    1dfa:	0f 91       	pop	r16
    1dfc:	ef 90       	pop	r14
    1dfe:	08 95       	ret

00001e00 <printf>:
    1e00:	a0 e0       	ldi	r26, 0x00	; 0
    1e02:	b0 e0       	ldi	r27, 0x00	; 0
    1e04:	e6 e0       	ldi	r30, 0x06	; 6
    1e06:	ff e0       	ldi	r31, 0x0F	; 15
    1e08:	0c 94 19 14 	jmp	0x2832	; 0x2832 <__prologue_saves__+0x20>
    1e0c:	ae 01       	movw	r20, r28
    1e0e:	4b 5f       	subi	r20, 0xFB	; 251
    1e10:	5f 4f       	sbci	r21, 0xFF	; 255
    1e12:	fa 01       	movw	r30, r20
    1e14:	61 91       	ld	r22, Z+
    1e16:	71 91       	ld	r23, Z+
    1e18:	af 01       	movw	r20, r30
    1e1a:	80 91 ce 04 	lds	r24, 0x04CE	; 0x8004ce <__iob+0x2>
    1e1e:	90 91 cf 04 	lds	r25, 0x04CF	; 0x8004cf <__iob+0x3>
    1e22:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <vfprintf>
    1e26:	e2 e0       	ldi	r30, 0x02	; 2
    1e28:	0c 94 35 14 	jmp	0x286a	; 0x286a <__epilogue_restores__+0x20>

00001e2c <snprintf>:
    1e2c:	ae e0       	ldi	r26, 0x0E	; 14
    1e2e:	b0 e0       	ldi	r27, 0x00	; 0
    1e30:	ec e1       	ldi	r30, 0x1C	; 28
    1e32:	ff e0       	ldi	r31, 0x0F	; 15
    1e34:	0c 94 17 14 	jmp	0x282e	; 0x282e <__prologue_saves__+0x1c>
    1e38:	0d 89       	ldd	r16, Y+21	; 0x15
    1e3a:	1e 89       	ldd	r17, Y+22	; 0x16
    1e3c:	8f 89       	ldd	r24, Y+23	; 0x17
    1e3e:	98 8d       	ldd	r25, Y+24	; 0x18
    1e40:	26 e0       	ldi	r18, 0x06	; 6
    1e42:	2c 83       	std	Y+4, r18	; 0x04
    1e44:	1a 83       	std	Y+2, r17	; 0x02
    1e46:	09 83       	std	Y+1, r16	; 0x01
    1e48:	97 ff       	sbrs	r25, 7
    1e4a:	02 c0       	rjmp	.+4      	; 0x1e50 <snprintf+0x24>
    1e4c:	80 e0       	ldi	r24, 0x00	; 0
    1e4e:	90 e8       	ldi	r25, 0x80	; 128
    1e50:	01 97       	sbiw	r24, 0x01	; 1
    1e52:	9e 83       	std	Y+6, r25	; 0x06
    1e54:	8d 83       	std	Y+5, r24	; 0x05
    1e56:	ae 01       	movw	r20, r28
    1e58:	45 5e       	subi	r20, 0xE5	; 229
    1e5a:	5f 4f       	sbci	r21, 0xFF	; 255
    1e5c:	69 8d       	ldd	r22, Y+25	; 0x19
    1e5e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e60:	ce 01       	movw	r24, r28
    1e62:	01 96       	adiw	r24, 0x01	; 1
    1e64:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <vfprintf>
    1e68:	4d 81       	ldd	r20, Y+5	; 0x05
    1e6a:	5e 81       	ldd	r21, Y+6	; 0x06
    1e6c:	57 fd       	sbrc	r21, 7
    1e6e:	0a c0       	rjmp	.+20     	; 0x1e84 <snprintf+0x58>
    1e70:	2f 81       	ldd	r18, Y+7	; 0x07
    1e72:	38 85       	ldd	r19, Y+8	; 0x08
    1e74:	42 17       	cp	r20, r18
    1e76:	53 07       	cpc	r21, r19
    1e78:	0c f4       	brge	.+2      	; 0x1e7c <snprintf+0x50>
    1e7a:	9a 01       	movw	r18, r20
    1e7c:	f8 01       	movw	r30, r16
    1e7e:	e2 0f       	add	r30, r18
    1e80:	f3 1f       	adc	r31, r19
    1e82:	10 82       	st	Z, r1
    1e84:	2e 96       	adiw	r28, 0x0e	; 14
    1e86:	e4 e0       	ldi	r30, 0x04	; 4
    1e88:	0c 94 33 14 	jmp	0x2866	; 0x2866 <__epilogue_restores__+0x1c>

00001e8c <vfprintf>:
    1e8c:	ab e0       	ldi	r26, 0x0B	; 11
    1e8e:	b0 e0       	ldi	r27, 0x00	; 0
    1e90:	ec e4       	ldi	r30, 0x4C	; 76
    1e92:	ff e0       	ldi	r31, 0x0F	; 15
    1e94:	0c 94 09 14 	jmp	0x2812	; 0x2812 <__prologue_saves__>
    1e98:	6c 01       	movw	r12, r24
    1e9a:	7b 01       	movw	r14, r22
    1e9c:	8a 01       	movw	r16, r20
    1e9e:	fc 01       	movw	r30, r24
    1ea0:	17 82       	std	Z+7, r1	; 0x07
    1ea2:	16 82       	std	Z+6, r1	; 0x06
    1ea4:	83 81       	ldd	r24, Z+3	; 0x03
    1ea6:	81 ff       	sbrs	r24, 1
    1ea8:	cc c1       	rjmp	.+920    	; 0x2242 <vfprintf+0x3b6>
    1eaa:	ce 01       	movw	r24, r28
    1eac:	01 96       	adiw	r24, 0x01	; 1
    1eae:	3c 01       	movw	r6, r24
    1eb0:	f6 01       	movw	r30, r12
    1eb2:	93 81       	ldd	r25, Z+3	; 0x03
    1eb4:	f7 01       	movw	r30, r14
    1eb6:	93 fd       	sbrc	r25, 3
    1eb8:	85 91       	lpm	r24, Z+
    1eba:	93 ff       	sbrs	r25, 3
    1ebc:	81 91       	ld	r24, Z+
    1ebe:	7f 01       	movw	r14, r30
    1ec0:	88 23       	and	r24, r24
    1ec2:	09 f4       	brne	.+2      	; 0x1ec6 <vfprintf+0x3a>
    1ec4:	ba c1       	rjmp	.+884    	; 0x223a <vfprintf+0x3ae>
    1ec6:	85 32       	cpi	r24, 0x25	; 37
    1ec8:	39 f4       	brne	.+14     	; 0x1ed8 <vfprintf+0x4c>
    1eca:	93 fd       	sbrc	r25, 3
    1ecc:	85 91       	lpm	r24, Z+
    1ece:	93 ff       	sbrs	r25, 3
    1ed0:	81 91       	ld	r24, Z+
    1ed2:	7f 01       	movw	r14, r30
    1ed4:	85 32       	cpi	r24, 0x25	; 37
    1ed6:	29 f4       	brne	.+10     	; 0x1ee2 <vfprintf+0x56>
    1ed8:	b6 01       	movw	r22, r12
    1eda:	90 e0       	ldi	r25, 0x00	; 0
    1edc:	0e 94 6f 13 	call	0x26de	; 0x26de <fputc>
    1ee0:	e7 cf       	rjmp	.-50     	; 0x1eb0 <vfprintf+0x24>
    1ee2:	91 2c       	mov	r9, r1
    1ee4:	21 2c       	mov	r2, r1
    1ee6:	31 2c       	mov	r3, r1
    1ee8:	ff e1       	ldi	r31, 0x1F	; 31
    1eea:	f3 15       	cp	r31, r3
    1eec:	d8 f0       	brcs	.+54     	; 0x1f24 <vfprintf+0x98>
    1eee:	8b 32       	cpi	r24, 0x2B	; 43
    1ef0:	79 f0       	breq	.+30     	; 0x1f10 <vfprintf+0x84>
    1ef2:	38 f4       	brcc	.+14     	; 0x1f02 <vfprintf+0x76>
    1ef4:	80 32       	cpi	r24, 0x20	; 32
    1ef6:	79 f0       	breq	.+30     	; 0x1f16 <vfprintf+0x8a>
    1ef8:	83 32       	cpi	r24, 0x23	; 35
    1efa:	a1 f4       	brne	.+40     	; 0x1f24 <vfprintf+0x98>
    1efc:	23 2d       	mov	r18, r3
    1efe:	20 61       	ori	r18, 0x10	; 16
    1f00:	1d c0       	rjmp	.+58     	; 0x1f3c <vfprintf+0xb0>
    1f02:	8d 32       	cpi	r24, 0x2D	; 45
    1f04:	61 f0       	breq	.+24     	; 0x1f1e <vfprintf+0x92>
    1f06:	80 33       	cpi	r24, 0x30	; 48
    1f08:	69 f4       	brne	.+26     	; 0x1f24 <vfprintf+0x98>
    1f0a:	23 2d       	mov	r18, r3
    1f0c:	21 60       	ori	r18, 0x01	; 1
    1f0e:	16 c0       	rjmp	.+44     	; 0x1f3c <vfprintf+0xb0>
    1f10:	83 2d       	mov	r24, r3
    1f12:	82 60       	ori	r24, 0x02	; 2
    1f14:	38 2e       	mov	r3, r24
    1f16:	e3 2d       	mov	r30, r3
    1f18:	e4 60       	ori	r30, 0x04	; 4
    1f1a:	3e 2e       	mov	r3, r30
    1f1c:	2a c0       	rjmp	.+84     	; 0x1f72 <vfprintf+0xe6>
    1f1e:	f3 2d       	mov	r31, r3
    1f20:	f8 60       	ori	r31, 0x08	; 8
    1f22:	1d c0       	rjmp	.+58     	; 0x1f5e <vfprintf+0xd2>
    1f24:	37 fc       	sbrc	r3, 7
    1f26:	2d c0       	rjmp	.+90     	; 0x1f82 <vfprintf+0xf6>
    1f28:	20 ed       	ldi	r18, 0xD0	; 208
    1f2a:	28 0f       	add	r18, r24
    1f2c:	2a 30       	cpi	r18, 0x0A	; 10
    1f2e:	40 f0       	brcs	.+16     	; 0x1f40 <vfprintf+0xb4>
    1f30:	8e 32       	cpi	r24, 0x2E	; 46
    1f32:	b9 f4       	brne	.+46     	; 0x1f62 <vfprintf+0xd6>
    1f34:	36 fc       	sbrc	r3, 6
    1f36:	81 c1       	rjmp	.+770    	; 0x223a <vfprintf+0x3ae>
    1f38:	23 2d       	mov	r18, r3
    1f3a:	20 64       	ori	r18, 0x40	; 64
    1f3c:	32 2e       	mov	r3, r18
    1f3e:	19 c0       	rjmp	.+50     	; 0x1f72 <vfprintf+0xe6>
    1f40:	36 fe       	sbrs	r3, 6
    1f42:	06 c0       	rjmp	.+12     	; 0x1f50 <vfprintf+0xc4>
    1f44:	8a e0       	ldi	r24, 0x0A	; 10
    1f46:	98 9e       	mul	r9, r24
    1f48:	20 0d       	add	r18, r0
    1f4a:	11 24       	eor	r1, r1
    1f4c:	92 2e       	mov	r9, r18
    1f4e:	11 c0       	rjmp	.+34     	; 0x1f72 <vfprintf+0xe6>
    1f50:	ea e0       	ldi	r30, 0x0A	; 10
    1f52:	2e 9e       	mul	r2, r30
    1f54:	20 0d       	add	r18, r0
    1f56:	11 24       	eor	r1, r1
    1f58:	22 2e       	mov	r2, r18
    1f5a:	f3 2d       	mov	r31, r3
    1f5c:	f0 62       	ori	r31, 0x20	; 32
    1f5e:	3f 2e       	mov	r3, r31
    1f60:	08 c0       	rjmp	.+16     	; 0x1f72 <vfprintf+0xe6>
    1f62:	8c 36       	cpi	r24, 0x6C	; 108
    1f64:	21 f4       	brne	.+8      	; 0x1f6e <vfprintf+0xe2>
    1f66:	83 2d       	mov	r24, r3
    1f68:	80 68       	ori	r24, 0x80	; 128
    1f6a:	38 2e       	mov	r3, r24
    1f6c:	02 c0       	rjmp	.+4      	; 0x1f72 <vfprintf+0xe6>
    1f6e:	88 36       	cpi	r24, 0x68	; 104
    1f70:	41 f4       	brne	.+16     	; 0x1f82 <vfprintf+0xf6>
    1f72:	f7 01       	movw	r30, r14
    1f74:	93 fd       	sbrc	r25, 3
    1f76:	85 91       	lpm	r24, Z+
    1f78:	93 ff       	sbrs	r25, 3
    1f7a:	81 91       	ld	r24, Z+
    1f7c:	7f 01       	movw	r14, r30
    1f7e:	81 11       	cpse	r24, r1
    1f80:	b3 cf       	rjmp	.-154    	; 0x1ee8 <vfprintf+0x5c>
    1f82:	98 2f       	mov	r25, r24
    1f84:	9f 7d       	andi	r25, 0xDF	; 223
    1f86:	95 54       	subi	r25, 0x45	; 69
    1f88:	93 30       	cpi	r25, 0x03	; 3
    1f8a:	28 f4       	brcc	.+10     	; 0x1f96 <vfprintf+0x10a>
    1f8c:	0c 5f       	subi	r16, 0xFC	; 252
    1f8e:	1f 4f       	sbci	r17, 0xFF	; 255
    1f90:	9f e3       	ldi	r25, 0x3F	; 63
    1f92:	99 83       	std	Y+1, r25	; 0x01
    1f94:	0d c0       	rjmp	.+26     	; 0x1fb0 <vfprintf+0x124>
    1f96:	83 36       	cpi	r24, 0x63	; 99
    1f98:	31 f0       	breq	.+12     	; 0x1fa6 <vfprintf+0x11a>
    1f9a:	83 37       	cpi	r24, 0x73	; 115
    1f9c:	71 f0       	breq	.+28     	; 0x1fba <vfprintf+0x12e>
    1f9e:	83 35       	cpi	r24, 0x53	; 83
    1fa0:	09 f0       	breq	.+2      	; 0x1fa4 <vfprintf+0x118>
    1fa2:	59 c0       	rjmp	.+178    	; 0x2056 <vfprintf+0x1ca>
    1fa4:	21 c0       	rjmp	.+66     	; 0x1fe8 <vfprintf+0x15c>
    1fa6:	f8 01       	movw	r30, r16
    1fa8:	80 81       	ld	r24, Z
    1faa:	89 83       	std	Y+1, r24	; 0x01
    1fac:	0e 5f       	subi	r16, 0xFE	; 254
    1fae:	1f 4f       	sbci	r17, 0xFF	; 255
    1fb0:	88 24       	eor	r8, r8
    1fb2:	83 94       	inc	r8
    1fb4:	91 2c       	mov	r9, r1
    1fb6:	53 01       	movw	r10, r6
    1fb8:	13 c0       	rjmp	.+38     	; 0x1fe0 <vfprintf+0x154>
    1fba:	28 01       	movw	r4, r16
    1fbc:	f2 e0       	ldi	r31, 0x02	; 2
    1fbe:	4f 0e       	add	r4, r31
    1fc0:	51 1c       	adc	r5, r1
    1fc2:	f8 01       	movw	r30, r16
    1fc4:	a0 80       	ld	r10, Z
    1fc6:	b1 80       	ldd	r11, Z+1	; 0x01
    1fc8:	36 fe       	sbrs	r3, 6
    1fca:	03 c0       	rjmp	.+6      	; 0x1fd2 <vfprintf+0x146>
    1fcc:	69 2d       	mov	r22, r9
    1fce:	70 e0       	ldi	r23, 0x00	; 0
    1fd0:	02 c0       	rjmp	.+4      	; 0x1fd6 <vfprintf+0x14a>
    1fd2:	6f ef       	ldi	r22, 0xFF	; 255
    1fd4:	7f ef       	ldi	r23, 0xFF	; 255
    1fd6:	c5 01       	movw	r24, r10
    1fd8:	0e 94 64 13 	call	0x26c8	; 0x26c8 <strnlen>
    1fdc:	4c 01       	movw	r8, r24
    1fde:	82 01       	movw	r16, r4
    1fe0:	f3 2d       	mov	r31, r3
    1fe2:	ff 77       	andi	r31, 0x7F	; 127
    1fe4:	3f 2e       	mov	r3, r31
    1fe6:	16 c0       	rjmp	.+44     	; 0x2014 <vfprintf+0x188>
    1fe8:	28 01       	movw	r4, r16
    1fea:	22 e0       	ldi	r18, 0x02	; 2
    1fec:	42 0e       	add	r4, r18
    1fee:	51 1c       	adc	r5, r1
    1ff0:	f8 01       	movw	r30, r16
    1ff2:	a0 80       	ld	r10, Z
    1ff4:	b1 80       	ldd	r11, Z+1	; 0x01
    1ff6:	36 fe       	sbrs	r3, 6
    1ff8:	03 c0       	rjmp	.+6      	; 0x2000 <vfprintf+0x174>
    1ffa:	69 2d       	mov	r22, r9
    1ffc:	70 e0       	ldi	r23, 0x00	; 0
    1ffe:	02 c0       	rjmp	.+4      	; 0x2004 <vfprintf+0x178>
    2000:	6f ef       	ldi	r22, 0xFF	; 255
    2002:	7f ef       	ldi	r23, 0xFF	; 255
    2004:	c5 01       	movw	r24, r10
    2006:	0e 94 59 13 	call	0x26b2	; 0x26b2 <strnlen_P>
    200a:	4c 01       	movw	r8, r24
    200c:	f3 2d       	mov	r31, r3
    200e:	f0 68       	ori	r31, 0x80	; 128
    2010:	3f 2e       	mov	r3, r31
    2012:	82 01       	movw	r16, r4
    2014:	33 fc       	sbrc	r3, 3
    2016:	1b c0       	rjmp	.+54     	; 0x204e <vfprintf+0x1c2>
    2018:	82 2d       	mov	r24, r2
    201a:	90 e0       	ldi	r25, 0x00	; 0
    201c:	88 16       	cp	r8, r24
    201e:	99 06       	cpc	r9, r25
    2020:	b0 f4       	brcc	.+44     	; 0x204e <vfprintf+0x1c2>
    2022:	b6 01       	movw	r22, r12
    2024:	80 e2       	ldi	r24, 0x20	; 32
    2026:	90 e0       	ldi	r25, 0x00	; 0
    2028:	0e 94 6f 13 	call	0x26de	; 0x26de <fputc>
    202c:	2a 94       	dec	r2
    202e:	f4 cf       	rjmp	.-24     	; 0x2018 <vfprintf+0x18c>
    2030:	f5 01       	movw	r30, r10
    2032:	37 fc       	sbrc	r3, 7
    2034:	85 91       	lpm	r24, Z+
    2036:	37 fe       	sbrs	r3, 7
    2038:	81 91       	ld	r24, Z+
    203a:	5f 01       	movw	r10, r30
    203c:	b6 01       	movw	r22, r12
    203e:	90 e0       	ldi	r25, 0x00	; 0
    2040:	0e 94 6f 13 	call	0x26de	; 0x26de <fputc>
    2044:	21 10       	cpse	r2, r1
    2046:	2a 94       	dec	r2
    2048:	21 e0       	ldi	r18, 0x01	; 1
    204a:	82 1a       	sub	r8, r18
    204c:	91 08       	sbc	r9, r1
    204e:	81 14       	cp	r8, r1
    2050:	91 04       	cpc	r9, r1
    2052:	71 f7       	brne	.-36     	; 0x2030 <vfprintf+0x1a4>
    2054:	e8 c0       	rjmp	.+464    	; 0x2226 <vfprintf+0x39a>
    2056:	84 36       	cpi	r24, 0x64	; 100
    2058:	11 f0       	breq	.+4      	; 0x205e <vfprintf+0x1d2>
    205a:	89 36       	cpi	r24, 0x69	; 105
    205c:	41 f5       	brne	.+80     	; 0x20ae <vfprintf+0x222>
    205e:	f8 01       	movw	r30, r16
    2060:	37 fe       	sbrs	r3, 7
    2062:	07 c0       	rjmp	.+14     	; 0x2072 <vfprintf+0x1e6>
    2064:	60 81       	ld	r22, Z
    2066:	71 81       	ldd	r23, Z+1	; 0x01
    2068:	82 81       	ldd	r24, Z+2	; 0x02
    206a:	93 81       	ldd	r25, Z+3	; 0x03
    206c:	0c 5f       	subi	r16, 0xFC	; 252
    206e:	1f 4f       	sbci	r17, 0xFF	; 255
    2070:	08 c0       	rjmp	.+16     	; 0x2082 <vfprintf+0x1f6>
    2072:	60 81       	ld	r22, Z
    2074:	71 81       	ldd	r23, Z+1	; 0x01
    2076:	07 2e       	mov	r0, r23
    2078:	00 0c       	add	r0, r0
    207a:	88 0b       	sbc	r24, r24
    207c:	99 0b       	sbc	r25, r25
    207e:	0e 5f       	subi	r16, 0xFE	; 254
    2080:	1f 4f       	sbci	r17, 0xFF	; 255
    2082:	f3 2d       	mov	r31, r3
    2084:	ff 76       	andi	r31, 0x6F	; 111
    2086:	3f 2e       	mov	r3, r31
    2088:	97 ff       	sbrs	r25, 7
    208a:	09 c0       	rjmp	.+18     	; 0x209e <vfprintf+0x212>
    208c:	90 95       	com	r25
    208e:	80 95       	com	r24
    2090:	70 95       	com	r23
    2092:	61 95       	neg	r22
    2094:	7f 4f       	sbci	r23, 0xFF	; 255
    2096:	8f 4f       	sbci	r24, 0xFF	; 255
    2098:	9f 4f       	sbci	r25, 0xFF	; 255
    209a:	f0 68       	ori	r31, 0x80	; 128
    209c:	3f 2e       	mov	r3, r31
    209e:	2a e0       	ldi	r18, 0x0A	; 10
    20a0:	30 e0       	ldi	r19, 0x00	; 0
    20a2:	a3 01       	movw	r20, r6
    20a4:	0e 94 ab 13 	call	0x2756	; 0x2756 <__ultoa_invert>
    20a8:	88 2e       	mov	r8, r24
    20aa:	86 18       	sub	r8, r6
    20ac:	45 c0       	rjmp	.+138    	; 0x2138 <vfprintf+0x2ac>
    20ae:	85 37       	cpi	r24, 0x75	; 117
    20b0:	31 f4       	brne	.+12     	; 0x20be <vfprintf+0x232>
    20b2:	23 2d       	mov	r18, r3
    20b4:	2f 7e       	andi	r18, 0xEF	; 239
    20b6:	b2 2e       	mov	r11, r18
    20b8:	2a e0       	ldi	r18, 0x0A	; 10
    20ba:	30 e0       	ldi	r19, 0x00	; 0
    20bc:	25 c0       	rjmp	.+74     	; 0x2108 <vfprintf+0x27c>
    20be:	93 2d       	mov	r25, r3
    20c0:	99 7f       	andi	r25, 0xF9	; 249
    20c2:	b9 2e       	mov	r11, r25
    20c4:	8f 36       	cpi	r24, 0x6F	; 111
    20c6:	c1 f0       	breq	.+48     	; 0x20f8 <vfprintf+0x26c>
    20c8:	18 f4       	brcc	.+6      	; 0x20d0 <vfprintf+0x244>
    20ca:	88 35       	cpi	r24, 0x58	; 88
    20cc:	79 f0       	breq	.+30     	; 0x20ec <vfprintf+0x260>
    20ce:	b5 c0       	rjmp	.+362    	; 0x223a <vfprintf+0x3ae>
    20d0:	80 37       	cpi	r24, 0x70	; 112
    20d2:	19 f0       	breq	.+6      	; 0x20da <vfprintf+0x24e>
    20d4:	88 37       	cpi	r24, 0x78	; 120
    20d6:	21 f0       	breq	.+8      	; 0x20e0 <vfprintf+0x254>
    20d8:	b0 c0       	rjmp	.+352    	; 0x223a <vfprintf+0x3ae>
    20da:	e9 2f       	mov	r30, r25
    20dc:	e0 61       	ori	r30, 0x10	; 16
    20de:	be 2e       	mov	r11, r30
    20e0:	b4 fe       	sbrs	r11, 4
    20e2:	0d c0       	rjmp	.+26     	; 0x20fe <vfprintf+0x272>
    20e4:	fb 2d       	mov	r31, r11
    20e6:	f4 60       	ori	r31, 0x04	; 4
    20e8:	bf 2e       	mov	r11, r31
    20ea:	09 c0       	rjmp	.+18     	; 0x20fe <vfprintf+0x272>
    20ec:	34 fe       	sbrs	r3, 4
    20ee:	0a c0       	rjmp	.+20     	; 0x2104 <vfprintf+0x278>
    20f0:	29 2f       	mov	r18, r25
    20f2:	26 60       	ori	r18, 0x06	; 6
    20f4:	b2 2e       	mov	r11, r18
    20f6:	06 c0       	rjmp	.+12     	; 0x2104 <vfprintf+0x278>
    20f8:	28 e0       	ldi	r18, 0x08	; 8
    20fa:	30 e0       	ldi	r19, 0x00	; 0
    20fc:	05 c0       	rjmp	.+10     	; 0x2108 <vfprintf+0x27c>
    20fe:	20 e1       	ldi	r18, 0x10	; 16
    2100:	30 e0       	ldi	r19, 0x00	; 0
    2102:	02 c0       	rjmp	.+4      	; 0x2108 <vfprintf+0x27c>
    2104:	20 e1       	ldi	r18, 0x10	; 16
    2106:	32 e0       	ldi	r19, 0x02	; 2
    2108:	f8 01       	movw	r30, r16
    210a:	b7 fe       	sbrs	r11, 7
    210c:	07 c0       	rjmp	.+14     	; 0x211c <vfprintf+0x290>
    210e:	60 81       	ld	r22, Z
    2110:	71 81       	ldd	r23, Z+1	; 0x01
    2112:	82 81       	ldd	r24, Z+2	; 0x02
    2114:	93 81       	ldd	r25, Z+3	; 0x03
    2116:	0c 5f       	subi	r16, 0xFC	; 252
    2118:	1f 4f       	sbci	r17, 0xFF	; 255
    211a:	06 c0       	rjmp	.+12     	; 0x2128 <vfprintf+0x29c>
    211c:	60 81       	ld	r22, Z
    211e:	71 81       	ldd	r23, Z+1	; 0x01
    2120:	80 e0       	ldi	r24, 0x00	; 0
    2122:	90 e0       	ldi	r25, 0x00	; 0
    2124:	0e 5f       	subi	r16, 0xFE	; 254
    2126:	1f 4f       	sbci	r17, 0xFF	; 255
    2128:	a3 01       	movw	r20, r6
    212a:	0e 94 ab 13 	call	0x2756	; 0x2756 <__ultoa_invert>
    212e:	88 2e       	mov	r8, r24
    2130:	86 18       	sub	r8, r6
    2132:	fb 2d       	mov	r31, r11
    2134:	ff 77       	andi	r31, 0x7F	; 127
    2136:	3f 2e       	mov	r3, r31
    2138:	36 fe       	sbrs	r3, 6
    213a:	0d c0       	rjmp	.+26     	; 0x2156 <vfprintf+0x2ca>
    213c:	23 2d       	mov	r18, r3
    213e:	2e 7f       	andi	r18, 0xFE	; 254
    2140:	a2 2e       	mov	r10, r18
    2142:	89 14       	cp	r8, r9
    2144:	58 f4       	brcc	.+22     	; 0x215c <vfprintf+0x2d0>
    2146:	34 fe       	sbrs	r3, 4
    2148:	0b c0       	rjmp	.+22     	; 0x2160 <vfprintf+0x2d4>
    214a:	32 fc       	sbrc	r3, 2
    214c:	09 c0       	rjmp	.+18     	; 0x2160 <vfprintf+0x2d4>
    214e:	83 2d       	mov	r24, r3
    2150:	8e 7e       	andi	r24, 0xEE	; 238
    2152:	a8 2e       	mov	r10, r24
    2154:	05 c0       	rjmp	.+10     	; 0x2160 <vfprintf+0x2d4>
    2156:	b8 2c       	mov	r11, r8
    2158:	a3 2c       	mov	r10, r3
    215a:	03 c0       	rjmp	.+6      	; 0x2162 <vfprintf+0x2d6>
    215c:	b8 2c       	mov	r11, r8
    215e:	01 c0       	rjmp	.+2      	; 0x2162 <vfprintf+0x2d6>
    2160:	b9 2c       	mov	r11, r9
    2162:	a4 fe       	sbrs	r10, 4
    2164:	0f c0       	rjmp	.+30     	; 0x2184 <vfprintf+0x2f8>
    2166:	fe 01       	movw	r30, r28
    2168:	e8 0d       	add	r30, r8
    216a:	f1 1d       	adc	r31, r1
    216c:	80 81       	ld	r24, Z
    216e:	80 33       	cpi	r24, 0x30	; 48
    2170:	21 f4       	brne	.+8      	; 0x217a <vfprintf+0x2ee>
    2172:	9a 2d       	mov	r25, r10
    2174:	99 7e       	andi	r25, 0xE9	; 233
    2176:	a9 2e       	mov	r10, r25
    2178:	09 c0       	rjmp	.+18     	; 0x218c <vfprintf+0x300>
    217a:	a2 fe       	sbrs	r10, 2
    217c:	06 c0       	rjmp	.+12     	; 0x218a <vfprintf+0x2fe>
    217e:	b3 94       	inc	r11
    2180:	b3 94       	inc	r11
    2182:	04 c0       	rjmp	.+8      	; 0x218c <vfprintf+0x300>
    2184:	8a 2d       	mov	r24, r10
    2186:	86 78       	andi	r24, 0x86	; 134
    2188:	09 f0       	breq	.+2      	; 0x218c <vfprintf+0x300>
    218a:	b3 94       	inc	r11
    218c:	a3 fc       	sbrc	r10, 3
    218e:	11 c0       	rjmp	.+34     	; 0x21b2 <vfprintf+0x326>
    2190:	a0 fe       	sbrs	r10, 0
    2192:	06 c0       	rjmp	.+12     	; 0x21a0 <vfprintf+0x314>
    2194:	b2 14       	cp	r11, r2
    2196:	88 f4       	brcc	.+34     	; 0x21ba <vfprintf+0x32e>
    2198:	28 0c       	add	r2, r8
    219a:	92 2c       	mov	r9, r2
    219c:	9b 18       	sub	r9, r11
    219e:	0e c0       	rjmp	.+28     	; 0x21bc <vfprintf+0x330>
    21a0:	b2 14       	cp	r11, r2
    21a2:	60 f4       	brcc	.+24     	; 0x21bc <vfprintf+0x330>
    21a4:	b6 01       	movw	r22, r12
    21a6:	80 e2       	ldi	r24, 0x20	; 32
    21a8:	90 e0       	ldi	r25, 0x00	; 0
    21aa:	0e 94 6f 13 	call	0x26de	; 0x26de <fputc>
    21ae:	b3 94       	inc	r11
    21b0:	f7 cf       	rjmp	.-18     	; 0x21a0 <vfprintf+0x314>
    21b2:	b2 14       	cp	r11, r2
    21b4:	18 f4       	brcc	.+6      	; 0x21bc <vfprintf+0x330>
    21b6:	2b 18       	sub	r2, r11
    21b8:	02 c0       	rjmp	.+4      	; 0x21be <vfprintf+0x332>
    21ba:	98 2c       	mov	r9, r8
    21bc:	21 2c       	mov	r2, r1
    21be:	a4 fe       	sbrs	r10, 4
    21c0:	10 c0       	rjmp	.+32     	; 0x21e2 <vfprintf+0x356>
    21c2:	b6 01       	movw	r22, r12
    21c4:	80 e3       	ldi	r24, 0x30	; 48
    21c6:	90 e0       	ldi	r25, 0x00	; 0
    21c8:	0e 94 6f 13 	call	0x26de	; 0x26de <fputc>
    21cc:	a2 fe       	sbrs	r10, 2
    21ce:	17 c0       	rjmp	.+46     	; 0x21fe <vfprintf+0x372>
    21d0:	a1 fc       	sbrc	r10, 1
    21d2:	03 c0       	rjmp	.+6      	; 0x21da <vfprintf+0x34e>
    21d4:	88 e7       	ldi	r24, 0x78	; 120
    21d6:	90 e0       	ldi	r25, 0x00	; 0
    21d8:	02 c0       	rjmp	.+4      	; 0x21de <vfprintf+0x352>
    21da:	88 e5       	ldi	r24, 0x58	; 88
    21dc:	90 e0       	ldi	r25, 0x00	; 0
    21de:	b6 01       	movw	r22, r12
    21e0:	0c c0       	rjmp	.+24     	; 0x21fa <vfprintf+0x36e>
    21e2:	8a 2d       	mov	r24, r10
    21e4:	86 78       	andi	r24, 0x86	; 134
    21e6:	59 f0       	breq	.+22     	; 0x21fe <vfprintf+0x372>
    21e8:	a1 fe       	sbrs	r10, 1
    21ea:	02 c0       	rjmp	.+4      	; 0x21f0 <vfprintf+0x364>
    21ec:	8b e2       	ldi	r24, 0x2B	; 43
    21ee:	01 c0       	rjmp	.+2      	; 0x21f2 <vfprintf+0x366>
    21f0:	80 e2       	ldi	r24, 0x20	; 32
    21f2:	a7 fc       	sbrc	r10, 7
    21f4:	8d e2       	ldi	r24, 0x2D	; 45
    21f6:	b6 01       	movw	r22, r12
    21f8:	90 e0       	ldi	r25, 0x00	; 0
    21fa:	0e 94 6f 13 	call	0x26de	; 0x26de <fputc>
    21fe:	89 14       	cp	r8, r9
    2200:	38 f4       	brcc	.+14     	; 0x2210 <vfprintf+0x384>
    2202:	b6 01       	movw	r22, r12
    2204:	80 e3       	ldi	r24, 0x30	; 48
    2206:	90 e0       	ldi	r25, 0x00	; 0
    2208:	0e 94 6f 13 	call	0x26de	; 0x26de <fputc>
    220c:	9a 94       	dec	r9
    220e:	f7 cf       	rjmp	.-18     	; 0x21fe <vfprintf+0x372>
    2210:	8a 94       	dec	r8
    2212:	f3 01       	movw	r30, r6
    2214:	e8 0d       	add	r30, r8
    2216:	f1 1d       	adc	r31, r1
    2218:	80 81       	ld	r24, Z
    221a:	b6 01       	movw	r22, r12
    221c:	90 e0       	ldi	r25, 0x00	; 0
    221e:	0e 94 6f 13 	call	0x26de	; 0x26de <fputc>
    2222:	81 10       	cpse	r8, r1
    2224:	f5 cf       	rjmp	.-22     	; 0x2210 <vfprintf+0x384>
    2226:	22 20       	and	r2, r2
    2228:	09 f4       	brne	.+2      	; 0x222c <vfprintf+0x3a0>
    222a:	42 ce       	rjmp	.-892    	; 0x1eb0 <vfprintf+0x24>
    222c:	b6 01       	movw	r22, r12
    222e:	80 e2       	ldi	r24, 0x20	; 32
    2230:	90 e0       	ldi	r25, 0x00	; 0
    2232:	0e 94 6f 13 	call	0x26de	; 0x26de <fputc>
    2236:	2a 94       	dec	r2
    2238:	f6 cf       	rjmp	.-20     	; 0x2226 <vfprintf+0x39a>
    223a:	f6 01       	movw	r30, r12
    223c:	86 81       	ldd	r24, Z+6	; 0x06
    223e:	97 81       	ldd	r25, Z+7	; 0x07
    2240:	02 c0       	rjmp	.+4      	; 0x2246 <vfprintf+0x3ba>
    2242:	8f ef       	ldi	r24, 0xFF	; 255
    2244:	9f ef       	ldi	r25, 0xFF	; 255
    2246:	2b 96       	adiw	r28, 0x0b	; 11
    2248:	e2 e1       	ldi	r30, 0x12	; 18
    224a:	0c 94 25 14 	jmp	0x284a	; 0x284a <__epilogue_restores__>

0000224e <dtoa_prf>:
    224e:	a9 e0       	ldi	r26, 0x09	; 9
    2250:	b0 e0       	ldi	r27, 0x00	; 0
    2252:	ed e2       	ldi	r30, 0x2D	; 45
    2254:	f1 e1       	ldi	r31, 0x11	; 17
    2256:	0c 94 0f 14 	jmp	0x281e	; 0x281e <__prologue_saves__+0xc>
    225a:	6a 01       	movw	r12, r20
    225c:	12 2f       	mov	r17, r18
    225e:	b0 2e       	mov	r11, r16
    2260:	2b e3       	ldi	r18, 0x3B	; 59
    2262:	20 17       	cp	r18, r16
    2264:	20 f0       	brcs	.+8      	; 0x226e <dtoa_prf+0x20>
    2266:	ff 24       	eor	r15, r15
    2268:	f3 94       	inc	r15
    226a:	f0 0e       	add	r15, r16
    226c:	02 c0       	rjmp	.+4      	; 0x2272 <dtoa_prf+0x24>
    226e:	2c e3       	ldi	r18, 0x3C	; 60
    2270:	f2 2e       	mov	r15, r18
    2272:	0f 2d       	mov	r16, r15
    2274:	27 e0       	ldi	r18, 0x07	; 7
    2276:	ae 01       	movw	r20, r28
    2278:	4f 5f       	subi	r20, 0xFF	; 255
    227a:	5f 4f       	sbci	r21, 0xFF	; 255
    227c:	0e 94 81 12 	call	0x2502	; 0x2502 <__ftoa_engine>
    2280:	bc 01       	movw	r22, r24
    2282:	49 81       	ldd	r20, Y+1	; 0x01
    2284:	84 2f       	mov	r24, r20
    2286:	89 70       	andi	r24, 0x09	; 9
    2288:	81 30       	cpi	r24, 0x01	; 1
    228a:	31 f0       	breq	.+12     	; 0x2298 <dtoa_prf+0x4a>
    228c:	e1 fc       	sbrc	r14, 1
    228e:	06 c0       	rjmp	.+12     	; 0x229c <dtoa_prf+0x4e>
    2290:	e0 fe       	sbrs	r14, 0
    2292:	06 c0       	rjmp	.+12     	; 0x22a0 <dtoa_prf+0x52>
    2294:	90 e2       	ldi	r25, 0x20	; 32
    2296:	05 c0       	rjmp	.+10     	; 0x22a2 <dtoa_prf+0x54>
    2298:	9d e2       	ldi	r25, 0x2D	; 45
    229a:	03 c0       	rjmp	.+6      	; 0x22a2 <dtoa_prf+0x54>
    229c:	9b e2       	ldi	r25, 0x2B	; 43
    229e:	01 c0       	rjmp	.+2      	; 0x22a2 <dtoa_prf+0x54>
    22a0:	90 e0       	ldi	r25, 0x00	; 0
    22a2:	5e 2d       	mov	r21, r14
    22a4:	50 71       	andi	r21, 0x10	; 16
    22a6:	43 ff       	sbrs	r20, 3
    22a8:	3c c0       	rjmp	.+120    	; 0x2322 <dtoa_prf+0xd4>
    22aa:	91 11       	cpse	r25, r1
    22ac:	02 c0       	rjmp	.+4      	; 0x22b2 <dtoa_prf+0x64>
    22ae:	83 e0       	ldi	r24, 0x03	; 3
    22b0:	01 c0       	rjmp	.+2      	; 0x22b4 <dtoa_prf+0x66>
    22b2:	84 e0       	ldi	r24, 0x04	; 4
    22b4:	81 17       	cp	r24, r17
    22b6:	18 f4       	brcc	.+6      	; 0x22be <dtoa_prf+0x70>
    22b8:	21 2f       	mov	r18, r17
    22ba:	28 1b       	sub	r18, r24
    22bc:	01 c0       	rjmp	.+2      	; 0x22c0 <dtoa_prf+0x72>
    22be:	20 e0       	ldi	r18, 0x00	; 0
    22c0:	51 11       	cpse	r21, r1
    22c2:	0b c0       	rjmp	.+22     	; 0x22da <dtoa_prf+0x8c>
    22c4:	f6 01       	movw	r30, r12
    22c6:	82 2f       	mov	r24, r18
    22c8:	30 e2       	ldi	r19, 0x20	; 32
    22ca:	88 23       	and	r24, r24
    22cc:	19 f0       	breq	.+6      	; 0x22d4 <dtoa_prf+0x86>
    22ce:	31 93       	st	Z+, r19
    22d0:	81 50       	subi	r24, 0x01	; 1
    22d2:	fb cf       	rjmp	.-10     	; 0x22ca <dtoa_prf+0x7c>
    22d4:	c2 0e       	add	r12, r18
    22d6:	d1 1c       	adc	r13, r1
    22d8:	20 e0       	ldi	r18, 0x00	; 0
    22da:	99 23       	and	r25, r25
    22dc:	29 f0       	breq	.+10     	; 0x22e8 <dtoa_prf+0x9a>
    22de:	d6 01       	movw	r26, r12
    22e0:	9c 93       	st	X, r25
    22e2:	f6 01       	movw	r30, r12
    22e4:	31 96       	adiw	r30, 0x01	; 1
    22e6:	6f 01       	movw	r12, r30
    22e8:	c6 01       	movw	r24, r12
    22ea:	03 96       	adiw	r24, 0x03	; 3
    22ec:	e2 fe       	sbrs	r14, 2
    22ee:	0a c0       	rjmp	.+20     	; 0x2304 <dtoa_prf+0xb6>
    22f0:	3e e4       	ldi	r19, 0x4E	; 78
    22f2:	d6 01       	movw	r26, r12
    22f4:	3c 93       	st	X, r19
    22f6:	41 e4       	ldi	r20, 0x41	; 65
    22f8:	11 96       	adiw	r26, 0x01	; 1
    22fa:	4c 93       	st	X, r20
    22fc:	11 97       	sbiw	r26, 0x01	; 1
    22fe:	12 96       	adiw	r26, 0x02	; 2
    2300:	3c 93       	st	X, r19
    2302:	06 c0       	rjmp	.+12     	; 0x2310 <dtoa_prf+0xc2>
    2304:	3e e6       	ldi	r19, 0x6E	; 110
    2306:	f6 01       	movw	r30, r12
    2308:	30 83       	st	Z, r19
    230a:	41 e6       	ldi	r20, 0x61	; 97
    230c:	41 83       	std	Z+1, r20	; 0x01
    230e:	32 83       	std	Z+2, r19	; 0x02
    2310:	fc 01       	movw	r30, r24
    2312:	32 2f       	mov	r19, r18
    2314:	40 e2       	ldi	r20, 0x20	; 32
    2316:	33 23       	and	r19, r19
    2318:	09 f4       	brne	.+2      	; 0x231c <dtoa_prf+0xce>
    231a:	42 c0       	rjmp	.+132    	; 0x23a0 <dtoa_prf+0x152>
    231c:	41 93       	st	Z+, r20
    231e:	31 50       	subi	r19, 0x01	; 1
    2320:	fa cf       	rjmp	.-12     	; 0x2316 <dtoa_prf+0xc8>
    2322:	42 ff       	sbrs	r20, 2
    2324:	44 c0       	rjmp	.+136    	; 0x23ae <dtoa_prf+0x160>
    2326:	91 11       	cpse	r25, r1
    2328:	02 c0       	rjmp	.+4      	; 0x232e <dtoa_prf+0xe0>
    232a:	83 e0       	ldi	r24, 0x03	; 3
    232c:	01 c0       	rjmp	.+2      	; 0x2330 <dtoa_prf+0xe2>
    232e:	84 e0       	ldi	r24, 0x04	; 4
    2330:	81 17       	cp	r24, r17
    2332:	18 f4       	brcc	.+6      	; 0x233a <dtoa_prf+0xec>
    2334:	21 2f       	mov	r18, r17
    2336:	28 1b       	sub	r18, r24
    2338:	01 c0       	rjmp	.+2      	; 0x233c <dtoa_prf+0xee>
    233a:	20 e0       	ldi	r18, 0x00	; 0
    233c:	51 11       	cpse	r21, r1
    233e:	0b c0       	rjmp	.+22     	; 0x2356 <dtoa_prf+0x108>
    2340:	f6 01       	movw	r30, r12
    2342:	82 2f       	mov	r24, r18
    2344:	30 e2       	ldi	r19, 0x20	; 32
    2346:	88 23       	and	r24, r24
    2348:	19 f0       	breq	.+6      	; 0x2350 <dtoa_prf+0x102>
    234a:	31 93       	st	Z+, r19
    234c:	81 50       	subi	r24, 0x01	; 1
    234e:	fb cf       	rjmp	.-10     	; 0x2346 <dtoa_prf+0xf8>
    2350:	c2 0e       	add	r12, r18
    2352:	d1 1c       	adc	r13, r1
    2354:	20 e0       	ldi	r18, 0x00	; 0
    2356:	99 23       	and	r25, r25
    2358:	29 f0       	breq	.+10     	; 0x2364 <dtoa_prf+0x116>
    235a:	d6 01       	movw	r26, r12
    235c:	9c 93       	st	X, r25
    235e:	f6 01       	movw	r30, r12
    2360:	31 96       	adiw	r30, 0x01	; 1
    2362:	6f 01       	movw	r12, r30
    2364:	c6 01       	movw	r24, r12
    2366:	03 96       	adiw	r24, 0x03	; 3
    2368:	e2 fe       	sbrs	r14, 2
    236a:	0b c0       	rjmp	.+22     	; 0x2382 <dtoa_prf+0x134>
    236c:	39 e4       	ldi	r19, 0x49	; 73
    236e:	d6 01       	movw	r26, r12
    2370:	3c 93       	st	X, r19
    2372:	3e e4       	ldi	r19, 0x4E	; 78
    2374:	11 96       	adiw	r26, 0x01	; 1
    2376:	3c 93       	st	X, r19
    2378:	11 97       	sbiw	r26, 0x01	; 1
    237a:	36 e4       	ldi	r19, 0x46	; 70
    237c:	12 96       	adiw	r26, 0x02	; 2
    237e:	3c 93       	st	X, r19
    2380:	07 c0       	rjmp	.+14     	; 0x2390 <dtoa_prf+0x142>
    2382:	39 e6       	ldi	r19, 0x69	; 105
    2384:	f6 01       	movw	r30, r12
    2386:	30 83       	st	Z, r19
    2388:	3e e6       	ldi	r19, 0x6E	; 110
    238a:	31 83       	std	Z+1, r19	; 0x01
    238c:	36 e6       	ldi	r19, 0x66	; 102
    238e:	32 83       	std	Z+2, r19	; 0x02
    2390:	fc 01       	movw	r30, r24
    2392:	32 2f       	mov	r19, r18
    2394:	40 e2       	ldi	r20, 0x20	; 32
    2396:	33 23       	and	r19, r19
    2398:	19 f0       	breq	.+6      	; 0x23a0 <dtoa_prf+0x152>
    239a:	41 93       	st	Z+, r20
    239c:	31 50       	subi	r19, 0x01	; 1
    239e:	fb cf       	rjmp	.-10     	; 0x2396 <dtoa_prf+0x148>
    23a0:	fc 01       	movw	r30, r24
    23a2:	e2 0f       	add	r30, r18
    23a4:	f1 1d       	adc	r31, r1
    23a6:	10 82       	st	Z, r1
    23a8:	8e ef       	ldi	r24, 0xFE	; 254
    23aa:	9f ef       	ldi	r25, 0xFF	; 255
    23ac:	a6 c0       	rjmp	.+332    	; 0x24fa <dtoa_prf+0x2ac>
    23ae:	21 e0       	ldi	r18, 0x01	; 1
    23b0:	30 e0       	ldi	r19, 0x00	; 0
    23b2:	91 11       	cpse	r25, r1
    23b4:	02 c0       	rjmp	.+4      	; 0x23ba <dtoa_prf+0x16c>
    23b6:	20 e0       	ldi	r18, 0x00	; 0
    23b8:	30 e0       	ldi	r19, 0x00	; 0
    23ba:	16 16       	cp	r1, r22
    23bc:	17 06       	cpc	r1, r23
    23be:	1c f4       	brge	.+6      	; 0x23c6 <dtoa_prf+0x178>
    23c0:	fb 01       	movw	r30, r22
    23c2:	31 96       	adiw	r30, 0x01	; 1
    23c4:	02 c0       	rjmp	.+4      	; 0x23ca <dtoa_prf+0x17c>
    23c6:	e1 e0       	ldi	r30, 0x01	; 1
    23c8:	f0 e0       	ldi	r31, 0x00	; 0
    23ca:	2e 0f       	add	r18, r30
    23cc:	3f 1f       	adc	r19, r31
    23ce:	bb 20       	and	r11, r11
    23d0:	21 f0       	breq	.+8      	; 0x23da <dtoa_prf+0x18c>
    23d2:	eb 2d       	mov	r30, r11
    23d4:	f0 e0       	ldi	r31, 0x00	; 0
    23d6:	31 96       	adiw	r30, 0x01	; 1
    23d8:	02 c0       	rjmp	.+4      	; 0x23de <dtoa_prf+0x190>
    23da:	e0 e0       	ldi	r30, 0x00	; 0
    23dc:	f0 e0       	ldi	r31, 0x00	; 0
    23de:	2e 0f       	add	r18, r30
    23e0:	3f 1f       	adc	r19, r31
    23e2:	e1 2f       	mov	r30, r17
    23e4:	f0 e0       	ldi	r31, 0x00	; 0
    23e6:	2e 17       	cp	r18, r30
    23e8:	3f 07       	cpc	r19, r31
    23ea:	1c f4       	brge	.+6      	; 0x23f2 <dtoa_prf+0x1a4>
    23ec:	12 1b       	sub	r17, r18
    23ee:	21 2f       	mov	r18, r17
    23f0:	01 c0       	rjmp	.+2      	; 0x23f4 <dtoa_prf+0x1a6>
    23f2:	20 e0       	ldi	r18, 0x00	; 0
    23f4:	8e 2d       	mov	r24, r14
    23f6:	88 71       	andi	r24, 0x18	; 24
    23f8:	59 f4       	brne	.+22     	; 0x2410 <dtoa_prf+0x1c2>
    23fa:	f6 01       	movw	r30, r12
    23fc:	82 2f       	mov	r24, r18
    23fe:	30 e2       	ldi	r19, 0x20	; 32
    2400:	88 23       	and	r24, r24
    2402:	19 f0       	breq	.+6      	; 0x240a <dtoa_prf+0x1bc>
    2404:	31 93       	st	Z+, r19
    2406:	81 50       	subi	r24, 0x01	; 1
    2408:	fb cf       	rjmp	.-10     	; 0x2400 <dtoa_prf+0x1b2>
    240a:	c2 0e       	add	r12, r18
    240c:	d1 1c       	adc	r13, r1
    240e:	20 e0       	ldi	r18, 0x00	; 0
    2410:	99 23       	and	r25, r25
    2412:	29 f0       	breq	.+10     	; 0x241e <dtoa_prf+0x1d0>
    2414:	d6 01       	movw	r26, r12
    2416:	9c 93       	st	X, r25
    2418:	f6 01       	movw	r30, r12
    241a:	31 96       	adiw	r30, 0x01	; 1
    241c:	6f 01       	movw	r12, r30
    241e:	51 11       	cpse	r21, r1
    2420:	0b c0       	rjmp	.+22     	; 0x2438 <dtoa_prf+0x1ea>
    2422:	f6 01       	movw	r30, r12
    2424:	82 2f       	mov	r24, r18
    2426:	90 e3       	ldi	r25, 0x30	; 48
    2428:	88 23       	and	r24, r24
    242a:	19 f0       	breq	.+6      	; 0x2432 <dtoa_prf+0x1e4>
    242c:	91 93       	st	Z+, r25
    242e:	81 50       	subi	r24, 0x01	; 1
    2430:	fb cf       	rjmp	.-10     	; 0x2428 <dtoa_prf+0x1da>
    2432:	c2 0e       	add	r12, r18
    2434:	d1 1c       	adc	r13, r1
    2436:	20 e0       	ldi	r18, 0x00	; 0
    2438:	0f 2d       	mov	r16, r15
    243a:	06 0f       	add	r16, r22
    243c:	9a 81       	ldd	r25, Y+2	; 0x02
    243e:	34 2f       	mov	r19, r20
    2440:	30 71       	andi	r19, 0x10	; 16
    2442:	44 ff       	sbrs	r20, 4
    2444:	03 c0       	rjmp	.+6      	; 0x244c <dtoa_prf+0x1fe>
    2446:	91 33       	cpi	r25, 0x31	; 49
    2448:	09 f4       	brne	.+2      	; 0x244c <dtoa_prf+0x1fe>
    244a:	01 50       	subi	r16, 0x01	; 1
    244c:	10 16       	cp	r1, r16
    244e:	24 f4       	brge	.+8      	; 0x2458 <dtoa_prf+0x20a>
    2450:	09 30       	cpi	r16, 0x09	; 9
    2452:	18 f0       	brcs	.+6      	; 0x245a <dtoa_prf+0x20c>
    2454:	08 e0       	ldi	r16, 0x08	; 8
    2456:	01 c0       	rjmp	.+2      	; 0x245a <dtoa_prf+0x20c>
    2458:	01 e0       	ldi	r16, 0x01	; 1
    245a:	ab 01       	movw	r20, r22
    245c:	77 ff       	sbrs	r23, 7
    245e:	02 c0       	rjmp	.+4      	; 0x2464 <dtoa_prf+0x216>
    2460:	40 e0       	ldi	r20, 0x00	; 0
    2462:	50 e0       	ldi	r21, 0x00	; 0
    2464:	fb 01       	movw	r30, r22
    2466:	e4 1b       	sub	r30, r20
    2468:	f5 0b       	sbc	r31, r21
    246a:	a1 e0       	ldi	r26, 0x01	; 1
    246c:	b0 e0       	ldi	r27, 0x00	; 0
    246e:	ac 0f       	add	r26, r28
    2470:	bd 1f       	adc	r27, r29
    2472:	ea 0f       	add	r30, r26
    2474:	fb 1f       	adc	r31, r27
    2476:	8e e2       	ldi	r24, 0x2E	; 46
    2478:	a8 2e       	mov	r10, r24
    247a:	4b 01       	movw	r8, r22
    247c:	80 1a       	sub	r8, r16
    247e:	91 08       	sbc	r9, r1
    2480:	0b 2d       	mov	r16, r11
    2482:	10 e0       	ldi	r17, 0x00	; 0
    2484:	11 95       	neg	r17
    2486:	01 95       	neg	r16
    2488:	11 09       	sbc	r17, r1
    248a:	4f 3f       	cpi	r20, 0xFF	; 255
    248c:	bf ef       	ldi	r27, 0xFF	; 255
    248e:	5b 07       	cpc	r21, r27
    2490:	21 f4       	brne	.+8      	; 0x249a <dtoa_prf+0x24c>
    2492:	d6 01       	movw	r26, r12
    2494:	ac 92       	st	X, r10
    2496:	11 96       	adiw	r26, 0x01	; 1
    2498:	6d 01       	movw	r12, r26
    249a:	64 17       	cp	r22, r20
    249c:	75 07       	cpc	r23, r21
    249e:	2c f0       	brlt	.+10     	; 0x24aa <dtoa_prf+0x25c>
    24a0:	84 16       	cp	r8, r20
    24a2:	95 06       	cpc	r9, r21
    24a4:	14 f4       	brge	.+4      	; 0x24aa <dtoa_prf+0x25c>
    24a6:	81 81       	ldd	r24, Z+1	; 0x01
    24a8:	01 c0       	rjmp	.+2      	; 0x24ac <dtoa_prf+0x25e>
    24aa:	80 e3       	ldi	r24, 0x30	; 48
    24ac:	41 50       	subi	r20, 0x01	; 1
    24ae:	51 09       	sbc	r21, r1
    24b0:	31 96       	adiw	r30, 0x01	; 1
    24b2:	d6 01       	movw	r26, r12
    24b4:	11 96       	adiw	r26, 0x01	; 1
    24b6:	7d 01       	movw	r14, r26
    24b8:	40 17       	cp	r20, r16
    24ba:	51 07       	cpc	r21, r17
    24bc:	24 f0       	brlt	.+8      	; 0x24c6 <dtoa_prf+0x278>
    24be:	d6 01       	movw	r26, r12
    24c0:	8c 93       	st	X, r24
    24c2:	67 01       	movw	r12, r14
    24c4:	e2 cf       	rjmp	.-60     	; 0x248a <dtoa_prf+0x23c>
    24c6:	64 17       	cp	r22, r20
    24c8:	75 07       	cpc	r23, r21
    24ca:	39 f4       	brne	.+14     	; 0x24da <dtoa_prf+0x28c>
    24cc:	96 33       	cpi	r25, 0x36	; 54
    24ce:	20 f4       	brcc	.+8      	; 0x24d8 <dtoa_prf+0x28a>
    24d0:	95 33       	cpi	r25, 0x35	; 53
    24d2:	19 f4       	brne	.+6      	; 0x24da <dtoa_prf+0x28c>
    24d4:	31 11       	cpse	r19, r1
    24d6:	01 c0       	rjmp	.+2      	; 0x24da <dtoa_prf+0x28c>
    24d8:	81 e3       	ldi	r24, 0x31	; 49
    24da:	f6 01       	movw	r30, r12
    24dc:	80 83       	st	Z, r24
    24de:	f7 01       	movw	r30, r14
    24e0:	82 2f       	mov	r24, r18
    24e2:	90 e2       	ldi	r25, 0x20	; 32
    24e4:	88 23       	and	r24, r24
    24e6:	19 f0       	breq	.+6      	; 0x24ee <dtoa_prf+0x2a0>
    24e8:	91 93       	st	Z+, r25
    24ea:	81 50       	subi	r24, 0x01	; 1
    24ec:	fb cf       	rjmp	.-10     	; 0x24e4 <dtoa_prf+0x296>
    24ee:	f7 01       	movw	r30, r14
    24f0:	e2 0f       	add	r30, r18
    24f2:	f1 1d       	adc	r31, r1
    24f4:	10 82       	st	Z, r1
    24f6:	80 e0       	ldi	r24, 0x00	; 0
    24f8:	90 e0       	ldi	r25, 0x00	; 0
    24fa:	29 96       	adiw	r28, 0x09	; 9
    24fc:	ec e0       	ldi	r30, 0x0C	; 12
    24fe:	0c 94 2b 14 	jmp	0x2856	; 0x2856 <__epilogue_restores__+0xc>

00002502 <__ftoa_engine>:
    2502:	28 30       	cpi	r18, 0x08	; 8
    2504:	08 f0       	brcs	.+2      	; 0x2508 <__ftoa_engine+0x6>
    2506:	27 e0       	ldi	r18, 0x07	; 7
    2508:	33 27       	eor	r19, r19
    250a:	da 01       	movw	r26, r20
    250c:	99 0f       	add	r25, r25
    250e:	31 1d       	adc	r19, r1
    2510:	87 fd       	sbrc	r24, 7
    2512:	91 60       	ori	r25, 0x01	; 1
    2514:	00 96       	adiw	r24, 0x00	; 0
    2516:	61 05       	cpc	r22, r1
    2518:	71 05       	cpc	r23, r1
    251a:	39 f4       	brne	.+14     	; 0x252a <__ftoa_engine+0x28>
    251c:	32 60       	ori	r19, 0x02	; 2
    251e:	2e 5f       	subi	r18, 0xFE	; 254
    2520:	3d 93       	st	X+, r19
    2522:	30 e3       	ldi	r19, 0x30	; 48
    2524:	2a 95       	dec	r18
    2526:	e1 f7       	brne	.-8      	; 0x2520 <__ftoa_engine+0x1e>
    2528:	08 95       	ret
    252a:	9f 3f       	cpi	r25, 0xFF	; 255
    252c:	30 f0       	brcs	.+12     	; 0x253a <__ftoa_engine+0x38>
    252e:	80 38       	cpi	r24, 0x80	; 128
    2530:	71 05       	cpc	r23, r1
    2532:	61 05       	cpc	r22, r1
    2534:	09 f0       	breq	.+2      	; 0x2538 <__ftoa_engine+0x36>
    2536:	3c 5f       	subi	r19, 0xFC	; 252
    2538:	3c 5f       	subi	r19, 0xFC	; 252
    253a:	3d 93       	st	X+, r19
    253c:	91 30       	cpi	r25, 0x01	; 1
    253e:	08 f0       	brcs	.+2      	; 0x2542 <__ftoa_engine+0x40>
    2540:	80 68       	ori	r24, 0x80	; 128
    2542:	91 1d       	adc	r25, r1
    2544:	df 93       	push	r29
    2546:	cf 93       	push	r28
    2548:	1f 93       	push	r17
    254a:	0f 93       	push	r16
    254c:	ff 92       	push	r15
    254e:	ef 92       	push	r14
    2550:	19 2f       	mov	r17, r25
    2552:	98 7f       	andi	r25, 0xF8	; 248
    2554:	96 95       	lsr	r25
    2556:	e9 2f       	mov	r30, r25
    2558:	96 95       	lsr	r25
    255a:	96 95       	lsr	r25
    255c:	e9 0f       	add	r30, r25
    255e:	ff 27       	eor	r31, r31
    2560:	ee 52       	subi	r30, 0x2E	; 46
    2562:	ff 4f       	sbci	r31, 0xFF	; 255
    2564:	99 27       	eor	r25, r25
    2566:	33 27       	eor	r19, r19
    2568:	ee 24       	eor	r14, r14
    256a:	ff 24       	eor	r15, r15
    256c:	a7 01       	movw	r20, r14
    256e:	e7 01       	movw	r28, r14
    2570:	05 90       	lpm	r0, Z+
    2572:	08 94       	sec
    2574:	07 94       	ror	r0
    2576:	28 f4       	brcc	.+10     	; 0x2582 <__ftoa_engine+0x80>
    2578:	36 0f       	add	r19, r22
    257a:	e7 1e       	adc	r14, r23
    257c:	f8 1e       	adc	r15, r24
    257e:	49 1f       	adc	r20, r25
    2580:	51 1d       	adc	r21, r1
    2582:	66 0f       	add	r22, r22
    2584:	77 1f       	adc	r23, r23
    2586:	88 1f       	adc	r24, r24
    2588:	99 1f       	adc	r25, r25
    258a:	06 94       	lsr	r0
    258c:	a1 f7       	brne	.-24     	; 0x2576 <__ftoa_engine+0x74>
    258e:	05 90       	lpm	r0, Z+
    2590:	07 94       	ror	r0
    2592:	28 f4       	brcc	.+10     	; 0x259e <__ftoa_engine+0x9c>
    2594:	e7 0e       	add	r14, r23
    2596:	f8 1e       	adc	r15, r24
    2598:	49 1f       	adc	r20, r25
    259a:	56 1f       	adc	r21, r22
    259c:	c1 1d       	adc	r28, r1
    259e:	77 0f       	add	r23, r23
    25a0:	88 1f       	adc	r24, r24
    25a2:	99 1f       	adc	r25, r25
    25a4:	66 1f       	adc	r22, r22
    25a6:	06 94       	lsr	r0
    25a8:	a1 f7       	brne	.-24     	; 0x2592 <__ftoa_engine+0x90>
    25aa:	05 90       	lpm	r0, Z+
    25ac:	07 94       	ror	r0
    25ae:	28 f4       	brcc	.+10     	; 0x25ba <__ftoa_engine+0xb8>
    25b0:	f8 0e       	add	r15, r24
    25b2:	49 1f       	adc	r20, r25
    25b4:	56 1f       	adc	r21, r22
    25b6:	c7 1f       	adc	r28, r23
    25b8:	d1 1d       	adc	r29, r1
    25ba:	88 0f       	add	r24, r24
    25bc:	99 1f       	adc	r25, r25
    25be:	66 1f       	adc	r22, r22
    25c0:	77 1f       	adc	r23, r23
    25c2:	06 94       	lsr	r0
    25c4:	a1 f7       	brne	.-24     	; 0x25ae <__ftoa_engine+0xac>
    25c6:	05 90       	lpm	r0, Z+
    25c8:	07 94       	ror	r0
    25ca:	20 f4       	brcc	.+8      	; 0x25d4 <__ftoa_engine+0xd2>
    25cc:	49 0f       	add	r20, r25
    25ce:	56 1f       	adc	r21, r22
    25d0:	c7 1f       	adc	r28, r23
    25d2:	d8 1f       	adc	r29, r24
    25d4:	99 0f       	add	r25, r25
    25d6:	66 1f       	adc	r22, r22
    25d8:	77 1f       	adc	r23, r23
    25da:	88 1f       	adc	r24, r24
    25dc:	06 94       	lsr	r0
    25de:	a9 f7       	brne	.-22     	; 0x25ca <__ftoa_engine+0xc8>
    25e0:	84 91       	lpm	r24, Z
    25e2:	10 95       	com	r17
    25e4:	17 70       	andi	r17, 0x07	; 7
    25e6:	41 f0       	breq	.+16     	; 0x25f8 <__ftoa_engine+0xf6>
    25e8:	d6 95       	lsr	r29
    25ea:	c7 95       	ror	r28
    25ec:	57 95       	ror	r21
    25ee:	47 95       	ror	r20
    25f0:	f7 94       	ror	r15
    25f2:	e7 94       	ror	r14
    25f4:	1a 95       	dec	r17
    25f6:	c1 f7       	brne	.-16     	; 0x25e8 <__ftoa_engine+0xe6>
    25f8:	e8 e7       	ldi	r30, 0x78	; 120
    25fa:	f0 e0       	ldi	r31, 0x00	; 0
    25fc:	68 94       	set
    25fe:	15 90       	lpm	r1, Z+
    2600:	15 91       	lpm	r17, Z+
    2602:	35 91       	lpm	r19, Z+
    2604:	65 91       	lpm	r22, Z+
    2606:	95 91       	lpm	r25, Z+
    2608:	05 90       	lpm	r0, Z+
    260a:	7f e2       	ldi	r23, 0x2F	; 47
    260c:	73 95       	inc	r23
    260e:	e1 18       	sub	r14, r1
    2610:	f1 0a       	sbc	r15, r17
    2612:	43 0b       	sbc	r20, r19
    2614:	56 0b       	sbc	r21, r22
    2616:	c9 0b       	sbc	r28, r25
    2618:	d0 09       	sbc	r29, r0
    261a:	c0 f7       	brcc	.-16     	; 0x260c <__ftoa_engine+0x10a>
    261c:	e1 0c       	add	r14, r1
    261e:	f1 1e       	adc	r15, r17
    2620:	43 1f       	adc	r20, r19
    2622:	56 1f       	adc	r21, r22
    2624:	c9 1f       	adc	r28, r25
    2626:	d0 1d       	adc	r29, r0
    2628:	7e f4       	brtc	.+30     	; 0x2648 <__ftoa_engine+0x146>
    262a:	70 33       	cpi	r23, 0x30	; 48
    262c:	11 f4       	brne	.+4      	; 0x2632 <__ftoa_engine+0x130>
    262e:	8a 95       	dec	r24
    2630:	e6 cf       	rjmp	.-52     	; 0x25fe <__ftoa_engine+0xfc>
    2632:	e8 94       	clt
    2634:	01 50       	subi	r16, 0x01	; 1
    2636:	30 f0       	brcs	.+12     	; 0x2644 <__ftoa_engine+0x142>
    2638:	08 0f       	add	r16, r24
    263a:	0a f4       	brpl	.+2      	; 0x263e <__ftoa_engine+0x13c>
    263c:	00 27       	eor	r16, r16
    263e:	02 17       	cp	r16, r18
    2640:	08 f4       	brcc	.+2      	; 0x2644 <__ftoa_engine+0x142>
    2642:	20 2f       	mov	r18, r16
    2644:	23 95       	inc	r18
    2646:	02 2f       	mov	r16, r18
    2648:	7a 33       	cpi	r23, 0x3A	; 58
    264a:	28 f0       	brcs	.+10     	; 0x2656 <__ftoa_engine+0x154>
    264c:	79 e3       	ldi	r23, 0x39	; 57
    264e:	7d 93       	st	X+, r23
    2650:	2a 95       	dec	r18
    2652:	e9 f7       	brne	.-6      	; 0x264e <__ftoa_engine+0x14c>
    2654:	10 c0       	rjmp	.+32     	; 0x2676 <__ftoa_engine+0x174>
    2656:	7d 93       	st	X+, r23
    2658:	2a 95       	dec	r18
    265a:	89 f6       	brne	.-94     	; 0x25fe <__ftoa_engine+0xfc>
    265c:	06 94       	lsr	r0
    265e:	97 95       	ror	r25
    2660:	67 95       	ror	r22
    2662:	37 95       	ror	r19
    2664:	17 95       	ror	r17
    2666:	17 94       	ror	r1
    2668:	e1 18       	sub	r14, r1
    266a:	f1 0a       	sbc	r15, r17
    266c:	43 0b       	sbc	r20, r19
    266e:	56 0b       	sbc	r21, r22
    2670:	c9 0b       	sbc	r28, r25
    2672:	d0 09       	sbc	r29, r0
    2674:	98 f0       	brcs	.+38     	; 0x269c <__ftoa_engine+0x19a>
    2676:	23 95       	inc	r18
    2678:	7e 91       	ld	r23, -X
    267a:	73 95       	inc	r23
    267c:	7a 33       	cpi	r23, 0x3A	; 58
    267e:	08 f0       	brcs	.+2      	; 0x2682 <__ftoa_engine+0x180>
    2680:	70 e3       	ldi	r23, 0x30	; 48
    2682:	7c 93       	st	X, r23
    2684:	20 13       	cpse	r18, r16
    2686:	b8 f7       	brcc	.-18     	; 0x2676 <__ftoa_engine+0x174>
    2688:	7e 91       	ld	r23, -X
    268a:	70 61       	ori	r23, 0x10	; 16
    268c:	7d 93       	st	X+, r23
    268e:	30 f0       	brcs	.+12     	; 0x269c <__ftoa_engine+0x19a>
    2690:	83 95       	inc	r24
    2692:	71 e3       	ldi	r23, 0x31	; 49
    2694:	7d 93       	st	X+, r23
    2696:	70 e3       	ldi	r23, 0x30	; 48
    2698:	2a 95       	dec	r18
    269a:	e1 f7       	brne	.-8      	; 0x2694 <__ftoa_engine+0x192>
    269c:	11 24       	eor	r1, r1
    269e:	ef 90       	pop	r14
    26a0:	ff 90       	pop	r15
    26a2:	0f 91       	pop	r16
    26a4:	1f 91       	pop	r17
    26a6:	cf 91       	pop	r28
    26a8:	df 91       	pop	r29
    26aa:	99 27       	eor	r25, r25
    26ac:	87 fd       	sbrc	r24, 7
    26ae:	90 95       	com	r25
    26b0:	08 95       	ret

000026b2 <strnlen_P>:
    26b2:	fc 01       	movw	r30, r24
    26b4:	05 90       	lpm	r0, Z+
    26b6:	61 50       	subi	r22, 0x01	; 1
    26b8:	70 40       	sbci	r23, 0x00	; 0
    26ba:	01 10       	cpse	r0, r1
    26bc:	d8 f7       	brcc	.-10     	; 0x26b4 <strnlen_P+0x2>
    26be:	80 95       	com	r24
    26c0:	90 95       	com	r25
    26c2:	8e 0f       	add	r24, r30
    26c4:	9f 1f       	adc	r25, r31
    26c6:	08 95       	ret

000026c8 <strnlen>:
    26c8:	fc 01       	movw	r30, r24
    26ca:	61 50       	subi	r22, 0x01	; 1
    26cc:	70 40       	sbci	r23, 0x00	; 0
    26ce:	01 90       	ld	r0, Z+
    26d0:	01 10       	cpse	r0, r1
    26d2:	d8 f7       	brcc	.-10     	; 0x26ca <strnlen+0x2>
    26d4:	80 95       	com	r24
    26d6:	90 95       	com	r25
    26d8:	8e 0f       	add	r24, r30
    26da:	9f 1f       	adc	r25, r31
    26dc:	08 95       	ret

000026de <fputc>:
    26de:	0f 93       	push	r16
    26e0:	1f 93       	push	r17
    26e2:	cf 93       	push	r28
    26e4:	df 93       	push	r29
    26e6:	fb 01       	movw	r30, r22
    26e8:	23 81       	ldd	r18, Z+3	; 0x03
    26ea:	21 fd       	sbrc	r18, 1
    26ec:	03 c0       	rjmp	.+6      	; 0x26f4 <fputc+0x16>
    26ee:	8f ef       	ldi	r24, 0xFF	; 255
    26f0:	9f ef       	ldi	r25, 0xFF	; 255
    26f2:	2c c0       	rjmp	.+88     	; 0x274c <fputc+0x6e>
    26f4:	22 ff       	sbrs	r18, 2
    26f6:	16 c0       	rjmp	.+44     	; 0x2724 <fputc+0x46>
    26f8:	46 81       	ldd	r20, Z+6	; 0x06
    26fa:	57 81       	ldd	r21, Z+7	; 0x07
    26fc:	24 81       	ldd	r18, Z+4	; 0x04
    26fe:	35 81       	ldd	r19, Z+5	; 0x05
    2700:	42 17       	cp	r20, r18
    2702:	53 07       	cpc	r21, r19
    2704:	44 f4       	brge	.+16     	; 0x2716 <fputc+0x38>
    2706:	a0 81       	ld	r26, Z
    2708:	b1 81       	ldd	r27, Z+1	; 0x01
    270a:	9d 01       	movw	r18, r26
    270c:	2f 5f       	subi	r18, 0xFF	; 255
    270e:	3f 4f       	sbci	r19, 0xFF	; 255
    2710:	31 83       	std	Z+1, r19	; 0x01
    2712:	20 83       	st	Z, r18
    2714:	8c 93       	st	X, r24
    2716:	26 81       	ldd	r18, Z+6	; 0x06
    2718:	37 81       	ldd	r19, Z+7	; 0x07
    271a:	2f 5f       	subi	r18, 0xFF	; 255
    271c:	3f 4f       	sbci	r19, 0xFF	; 255
    271e:	37 83       	std	Z+7, r19	; 0x07
    2720:	26 83       	std	Z+6, r18	; 0x06
    2722:	14 c0       	rjmp	.+40     	; 0x274c <fputc+0x6e>
    2724:	8b 01       	movw	r16, r22
    2726:	ec 01       	movw	r28, r24
    2728:	fb 01       	movw	r30, r22
    272a:	00 84       	ldd	r0, Z+8	; 0x08
    272c:	f1 85       	ldd	r31, Z+9	; 0x09
    272e:	e0 2d       	mov	r30, r0
    2730:	09 95       	icall
    2732:	89 2b       	or	r24, r25
    2734:	e1 f6       	brne	.-72     	; 0x26ee <fputc+0x10>
    2736:	d8 01       	movw	r26, r16
    2738:	16 96       	adiw	r26, 0x06	; 6
    273a:	8d 91       	ld	r24, X+
    273c:	9c 91       	ld	r25, X
    273e:	17 97       	sbiw	r26, 0x07	; 7
    2740:	01 96       	adiw	r24, 0x01	; 1
    2742:	17 96       	adiw	r26, 0x07	; 7
    2744:	9c 93       	st	X, r25
    2746:	8e 93       	st	-X, r24
    2748:	16 97       	sbiw	r26, 0x06	; 6
    274a:	ce 01       	movw	r24, r28
    274c:	df 91       	pop	r29
    274e:	cf 91       	pop	r28
    2750:	1f 91       	pop	r17
    2752:	0f 91       	pop	r16
    2754:	08 95       	ret

00002756 <__ultoa_invert>:
    2756:	fa 01       	movw	r30, r20
    2758:	aa 27       	eor	r26, r26
    275a:	28 30       	cpi	r18, 0x08	; 8
    275c:	51 f1       	breq	.+84     	; 0x27b2 <__ultoa_invert+0x5c>
    275e:	20 31       	cpi	r18, 0x10	; 16
    2760:	81 f1       	breq	.+96     	; 0x27c2 <__ultoa_invert+0x6c>
    2762:	e8 94       	clt
    2764:	6f 93       	push	r22
    2766:	6e 7f       	andi	r22, 0xFE	; 254
    2768:	6e 5f       	subi	r22, 0xFE	; 254
    276a:	7f 4f       	sbci	r23, 0xFF	; 255
    276c:	8f 4f       	sbci	r24, 0xFF	; 255
    276e:	9f 4f       	sbci	r25, 0xFF	; 255
    2770:	af 4f       	sbci	r26, 0xFF	; 255
    2772:	b1 e0       	ldi	r27, 0x01	; 1
    2774:	3e d0       	rcall	.+124    	; 0x27f2 <__ultoa_invert+0x9c>
    2776:	b4 e0       	ldi	r27, 0x04	; 4
    2778:	3c d0       	rcall	.+120    	; 0x27f2 <__ultoa_invert+0x9c>
    277a:	67 0f       	add	r22, r23
    277c:	78 1f       	adc	r23, r24
    277e:	89 1f       	adc	r24, r25
    2780:	9a 1f       	adc	r25, r26
    2782:	a1 1d       	adc	r26, r1
    2784:	68 0f       	add	r22, r24
    2786:	79 1f       	adc	r23, r25
    2788:	8a 1f       	adc	r24, r26
    278a:	91 1d       	adc	r25, r1
    278c:	a1 1d       	adc	r26, r1
    278e:	6a 0f       	add	r22, r26
    2790:	71 1d       	adc	r23, r1
    2792:	81 1d       	adc	r24, r1
    2794:	91 1d       	adc	r25, r1
    2796:	a1 1d       	adc	r26, r1
    2798:	20 d0       	rcall	.+64     	; 0x27da <__ultoa_invert+0x84>
    279a:	09 f4       	brne	.+2      	; 0x279e <__ultoa_invert+0x48>
    279c:	68 94       	set
    279e:	3f 91       	pop	r19
    27a0:	2a e0       	ldi	r18, 0x0A	; 10
    27a2:	26 9f       	mul	r18, r22
    27a4:	11 24       	eor	r1, r1
    27a6:	30 19       	sub	r19, r0
    27a8:	30 5d       	subi	r19, 0xD0	; 208
    27aa:	31 93       	st	Z+, r19
    27ac:	de f6       	brtc	.-74     	; 0x2764 <__ultoa_invert+0xe>
    27ae:	cf 01       	movw	r24, r30
    27b0:	08 95       	ret
    27b2:	46 2f       	mov	r20, r22
    27b4:	47 70       	andi	r20, 0x07	; 7
    27b6:	40 5d       	subi	r20, 0xD0	; 208
    27b8:	41 93       	st	Z+, r20
    27ba:	b3 e0       	ldi	r27, 0x03	; 3
    27bc:	0f d0       	rcall	.+30     	; 0x27dc <__ultoa_invert+0x86>
    27be:	c9 f7       	brne	.-14     	; 0x27b2 <__ultoa_invert+0x5c>
    27c0:	f6 cf       	rjmp	.-20     	; 0x27ae <__ultoa_invert+0x58>
    27c2:	46 2f       	mov	r20, r22
    27c4:	4f 70       	andi	r20, 0x0F	; 15
    27c6:	40 5d       	subi	r20, 0xD0	; 208
    27c8:	4a 33       	cpi	r20, 0x3A	; 58
    27ca:	18 f0       	brcs	.+6      	; 0x27d2 <__ultoa_invert+0x7c>
    27cc:	49 5d       	subi	r20, 0xD9	; 217
    27ce:	31 fd       	sbrc	r19, 1
    27d0:	40 52       	subi	r20, 0x20	; 32
    27d2:	41 93       	st	Z+, r20
    27d4:	02 d0       	rcall	.+4      	; 0x27da <__ultoa_invert+0x84>
    27d6:	a9 f7       	brne	.-22     	; 0x27c2 <__ultoa_invert+0x6c>
    27d8:	ea cf       	rjmp	.-44     	; 0x27ae <__ultoa_invert+0x58>
    27da:	b4 e0       	ldi	r27, 0x04	; 4
    27dc:	a6 95       	lsr	r26
    27de:	97 95       	ror	r25
    27e0:	87 95       	ror	r24
    27e2:	77 95       	ror	r23
    27e4:	67 95       	ror	r22
    27e6:	ba 95       	dec	r27
    27e8:	c9 f7       	brne	.-14     	; 0x27dc <__ultoa_invert+0x86>
    27ea:	00 97       	sbiw	r24, 0x00	; 0
    27ec:	61 05       	cpc	r22, r1
    27ee:	71 05       	cpc	r23, r1
    27f0:	08 95       	ret
    27f2:	9b 01       	movw	r18, r22
    27f4:	ac 01       	movw	r20, r24
    27f6:	0a 2e       	mov	r0, r26
    27f8:	06 94       	lsr	r0
    27fa:	57 95       	ror	r21
    27fc:	47 95       	ror	r20
    27fe:	37 95       	ror	r19
    2800:	27 95       	ror	r18
    2802:	ba 95       	dec	r27
    2804:	c9 f7       	brne	.-14     	; 0x27f8 <__ultoa_invert+0xa2>
    2806:	62 0f       	add	r22, r18
    2808:	73 1f       	adc	r23, r19
    280a:	84 1f       	adc	r24, r20
    280c:	95 1f       	adc	r25, r21
    280e:	a0 1d       	adc	r26, r0
    2810:	08 95       	ret

00002812 <__prologue_saves__>:
    2812:	2f 92       	push	r2
    2814:	3f 92       	push	r3
    2816:	4f 92       	push	r4
    2818:	5f 92       	push	r5
    281a:	6f 92       	push	r6
    281c:	7f 92       	push	r7
    281e:	8f 92       	push	r8
    2820:	9f 92       	push	r9
    2822:	af 92       	push	r10
    2824:	bf 92       	push	r11
    2826:	cf 92       	push	r12
    2828:	df 92       	push	r13
    282a:	ef 92       	push	r14
    282c:	ff 92       	push	r15
    282e:	0f 93       	push	r16
    2830:	1f 93       	push	r17
    2832:	cf 93       	push	r28
    2834:	df 93       	push	r29
    2836:	cd b7       	in	r28, 0x3d	; 61
    2838:	de b7       	in	r29, 0x3e	; 62
    283a:	ca 1b       	sub	r28, r26
    283c:	db 0b       	sbc	r29, r27
    283e:	0f b6       	in	r0, 0x3f	; 63
    2840:	f8 94       	cli
    2842:	de bf       	out	0x3e, r29	; 62
    2844:	0f be       	out	0x3f, r0	; 63
    2846:	cd bf       	out	0x3d, r28	; 61
    2848:	09 94       	ijmp

0000284a <__epilogue_restores__>:
    284a:	2a 88       	ldd	r2, Y+18	; 0x12
    284c:	39 88       	ldd	r3, Y+17	; 0x11
    284e:	48 88       	ldd	r4, Y+16	; 0x10
    2850:	5f 84       	ldd	r5, Y+15	; 0x0f
    2852:	6e 84       	ldd	r6, Y+14	; 0x0e
    2854:	7d 84       	ldd	r7, Y+13	; 0x0d
    2856:	8c 84       	ldd	r8, Y+12	; 0x0c
    2858:	9b 84       	ldd	r9, Y+11	; 0x0b
    285a:	aa 84       	ldd	r10, Y+10	; 0x0a
    285c:	b9 84       	ldd	r11, Y+9	; 0x09
    285e:	c8 84       	ldd	r12, Y+8	; 0x08
    2860:	df 80       	ldd	r13, Y+7	; 0x07
    2862:	ee 80       	ldd	r14, Y+6	; 0x06
    2864:	fd 80       	ldd	r15, Y+5	; 0x05
    2866:	0c 81       	ldd	r16, Y+4	; 0x04
    2868:	1b 81       	ldd	r17, Y+3	; 0x03
    286a:	aa 81       	ldd	r26, Y+2	; 0x02
    286c:	b9 81       	ldd	r27, Y+1	; 0x01
    286e:	ce 0f       	add	r28, r30
    2870:	d1 1d       	adc	r29, r1
    2872:	0f b6       	in	r0, 0x3f	; 63
    2874:	f8 94       	cli
    2876:	de bf       	out	0x3e, r29	; 62
    2878:	0f be       	out	0x3f, r0	; 63
    287a:	cd bf       	out	0x3d, r28	; 61
    287c:	ed 01       	movw	r28, r26
    287e:	08 95       	ret

00002880 <_exit>:
    2880:	f8 94       	cli

00002882 <__stop_program>:
    2882:	ff cf       	rjmp	.-2      	; 0x2882 <__stop_program>
