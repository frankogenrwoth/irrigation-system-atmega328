
workable.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000234  00800100  0000208e  00002122  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000208e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000018  00800334  00800334  00002356  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002356  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000023b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  000023f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001878  00000000  00000000  000024ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000995  00000000  00000000  00003d64  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000db3  00000000  00000000  000046f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000030c  00000000  00000000  000054ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000824  00000000  00000000  000057b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001015  00000000  00000000  00005fdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  00006ff1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b8 00 	jmp	0x170	; 0x170 <__ctors_end>
       4:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
       8:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
       c:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      10:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      14:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      18:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      1c:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      20:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      24:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      28:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      2c:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      30:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      34:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      38:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      3c:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      40:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      44:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      48:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      4c:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      50:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      54:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      58:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      5c:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      60:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      64:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      68:	72 04       	cpc	r7, r2
      6a:	90 04       	cpc	r9, r0
      6c:	ae 04       	cpc	r10, r14
      6e:	cc 04       	cpc	r12, r12
      70:	ea 04       	cpc	r14, r10
      72:	45 05       	cpc	r20, r5
      74:	54 05       	cpc	r21, r4

00000076 <__trampolines_end>:
      76:	00 40       	sbci	r16, 0x00	; 0
      78:	7a 10       	cpse	r7, r10
      7a:	f3 5a       	subi	r31, 0xA3	; 163
      7c:	00 a0       	ldd	r0, Z+32	; 0x20
      7e:	72 4e       	sbci	r23, 0xE2	; 226
      80:	18 09       	sbc	r17, r8
      82:	00 10       	cpse	r0, r0
      84:	a5 d4       	rcall	.+2378   	; 0x9d0 <__stack+0xd1>
      86:	e8 00       	.word	0x00e8	; ????
      88:	00 e8       	ldi	r16, 0x80	; 128
      8a:	76 48       	sbci	r23, 0x86	; 134
      8c:	17 00       	.word	0x0017	; ????
      8e:	00 e4       	ldi	r16, 0x40	; 64
      90:	0b 54       	subi	r16, 0x4B	; 75
      92:	02 00       	.word	0x0002	; ????
      94:	00 ca       	rjmp	.-3072   	; 0xfffff496 <__eeprom_end+0xff7ef496>
      96:	9a 3b       	cpi	r25, 0xBA	; 186
      98:	00 00       	nop
      9a:	00 e1       	ldi	r16, 0x10	; 16
      9c:	f5 05       	cpc	r31, r5
      9e:	00 00       	nop
      a0:	80 96       	adiw	r24, 0x20	; 32
      a2:	98 00       	.word	0x0098	; ????
      a4:	00 00       	nop
      a6:	40 42       	sbci	r20, 0x20	; 32
      a8:	0f 00       	.word	0x000f	; ????
      aa:	00 00       	nop
      ac:	a0 86       	std	Z+8, r10	; 0x08
      ae:	01 00       	.word	0x0001	; ????
      b0:	00 00       	nop
      b2:	10 27       	eor	r17, r16
      b4:	00 00       	nop
      b6:	00 00       	nop
      b8:	e8 03       	fmulsu	r22, r16
      ba:	00 00       	nop
      bc:	00 00       	nop
      be:	64 00       	.word	0x0064	; ????
      c0:	00 00       	nop
      c2:	00 00       	nop
      c4:	0a 00       	.word	0x000a	; ????
      c6:	00 00       	nop
      c8:	00 00       	nop
      ca:	01 00       	.word	0x0001	; ????
      cc:	00 00       	nop
      ce:	00 00       	nop
      d0:	2c 76       	andi	r18, 0x6C	; 108
      d2:	d8 88       	ldd	r13, Y+16	; 0x10
      d4:	dc 67       	ori	r29, 0x7C	; 124
      d6:	4f 08       	sbc	r4, r15
      d8:	23 df       	rcall	.-442    	; 0xffffff20 <__eeprom_end+0xff7eff20>
      da:	c1 df       	rcall	.-126    	; 0x5e <__SREG__+0x1f>
      dc:	ae 59       	subi	r26, 0x9E	; 158
      de:	e1 b1       	in	r30, 0x01	; 1
      e0:	b7 96       	adiw	r30, 0x27	; 39
      e2:	e5 e3       	ldi	r30, 0x35	; 53
      e4:	e4 53       	subi	r30, 0x34	; 52
      e6:	c6 3a       	cpi	r28, 0xA6	; 166
      e8:	e6 51       	subi	r30, 0x16	; 22
      ea:	99 76       	andi	r25, 0x69	; 105
      ec:	96 e8       	ldi	r25, 0x86	; 134
      ee:	e6 c2       	rjmp	.+1484   	; 0x6bc <display_set+0xf2>
      f0:	84 26       	eor	r8, r20
      f2:	eb 89       	ldd	r30, Y+19	; 0x13
      f4:	8c 9b       	sbis	0x11, 4	; 17
      f6:	62 ed       	ldi	r22, 0xD2	; 210
      f8:	40 7c       	andi	r20, 0xC0	; 192
      fa:	6f fc       	.word	0xfc6f	; ????
      fc:	ef bc       	out	0x2f, r14	; 47
      fe:	9c 9f       	mul	r25, r28
     100:	40 f2       	brcs	.-112    	; 0x92 <__trampolines_end+0x1c>
     102:	ba a5       	ldd	r27, Y+42	; 0x2a
     104:	6f a5       	ldd	r22, Y+47	; 0x2f
     106:	f4 90       	lpm	r15, Z
     108:	05 5a       	subi	r16, 0xA5	; 165
     10a:	2a f7       	brpl	.-54     	; 0xd6 <__trampolines_end+0x60>
     10c:	5c 93       	st	X, r21
     10e:	6b 6c       	ori	r22, 0xCB	; 203
     110:	f9 67       	ori	r31, 0x79	; 121
     112:	6d c1       	rjmp	.+730    	; 0x3ee <DS18B20_reset+0x38>
     114:	1b fc       	.word	0xfc1b	; ????
     116:	e0 e4       	ldi	r30, 0x40	; 64
     118:	0d 47       	sbci	r16, 0x7D	; 125
     11a:	fe f5       	brtc	.+126    	; 0x19a <.do_clear_bss_loop>
     11c:	20 e6       	ldi	r18, 0x60	; 96
     11e:	b5 00       	.word	0x00b5	; ????
     120:	d0 ed       	ldi	r29, 0xD0	; 208
     122:	90 2e       	mov	r9, r16
     124:	03 00       	.word	0x0003	; ????
     126:	94 35       	cpi	r25, 0x54	; 84
     128:	77 05       	cpc	r23, r7
     12a:	00 80       	ld	r0, Z
     12c:	84 1e       	adc	r8, r20
     12e:	08 00       	.word	0x0008	; ????
     130:	00 20       	and	r0, r0
     132:	4e 0a       	sbc	r4, r30
     134:	00 00       	nop
     136:	00 c8       	rjmp	.-4096   	; 0xfffff138 <__eeprom_end+0xff7ef138>
     138:	0c 33       	cpi	r16, 0x3C	; 60
     13a:	33 33       	cpi	r19, 0x33	; 51
     13c:	33 0f       	add	r19, r19
     13e:	98 6e       	ori	r25, 0xE8	; 232
     140:	12 83       	std	Z+2, r17	; 0x02
     142:	11 41       	sbci	r17, 0x11	; 17
     144:	ef 8d       	ldd	r30, Y+31	; 0x1f
     146:	21 14       	cp	r2, r1
     148:	89 3b       	cpi	r24, 0xB9	; 185
     14a:	e6 55       	subi	r30, 0x56	; 86
     14c:	16 cf       	rjmp	.-468    	; 0xffffff7a <__eeprom_end+0xff7eff7a>
     14e:	fe e6       	ldi	r31, 0x6E	; 110
     150:	db 18       	sub	r13, r11
     152:	d1 84       	ldd	r13, Z+9	; 0x09
     154:	4b 38       	cpi	r20, 0x8B	; 139
     156:	1b f7       	brvc	.-58     	; 0x11e <__trampolines_end+0xa8>
     158:	7c 1d       	adc	r23, r12
     15a:	90 1d       	adc	r25, r0
     15c:	a4 bb       	out	0x14, r26	; 20
     15e:	e4 24       	eor	r14, r4
     160:	20 32       	cpi	r18, 0x20	; 32
     162:	84 72       	andi	r24, 0x24	; 36
     164:	5e 22       	and	r5, r30
     166:	81 00       	.word	0x0081	; ????
     168:	c9 f1       	breq	.+114    	; 0x1dc <format_float+0x2e>
     16a:	24 ec       	ldi	r18, 0xC4	; 196
     16c:	a1 e5       	ldi	r26, 0x51	; 81
     16e:	3d 27       	eor	r19, r29

00000170 <__ctors_end>:
     170:	11 24       	eor	r1, r1
     172:	1f be       	out	0x3f, r1	; 63
     174:	cf ef       	ldi	r28, 0xFF	; 255
     176:	d8 e0       	ldi	r29, 0x08	; 8
     178:	de bf       	out	0x3e, r29	; 62
     17a:	cd bf       	out	0x3d, r28	; 61

0000017c <__do_copy_data>:
     17c:	13 e0       	ldi	r17, 0x03	; 3
     17e:	a0 e0       	ldi	r26, 0x00	; 0
     180:	b1 e0       	ldi	r27, 0x01	; 1
     182:	ee e8       	ldi	r30, 0x8E	; 142
     184:	f0 e2       	ldi	r31, 0x20	; 32
     186:	02 c0       	rjmp	.+4      	; 0x18c <__do_copy_data+0x10>
     188:	05 90       	lpm	r0, Z+
     18a:	0d 92       	st	X+, r0
     18c:	a4 33       	cpi	r26, 0x34	; 52
     18e:	b1 07       	cpc	r27, r17
     190:	d9 f7       	brne	.-10     	; 0x188 <__do_copy_data+0xc>

00000192 <__do_clear_bss>:
     192:	23 e0       	ldi	r18, 0x03	; 3
     194:	a4 e3       	ldi	r26, 0x34	; 52
     196:	b3 e0       	ldi	r27, 0x03	; 3
     198:	01 c0       	rjmp	.+2      	; 0x19c <.do_clear_bss_start>

0000019a <.do_clear_bss_loop>:
     19a:	1d 92       	st	X+, r1

0000019c <.do_clear_bss_start>:
     19c:	ac 34       	cpi	r26, 0x4C	; 76
     19e:	b2 07       	cpc	r27, r18
     1a0:	e1 f7       	brne	.-8      	; 0x19a <.do_clear_bss_loop>
     1a2:	0e 94 93 08 	call	0x1126	; 0x1126 <main>
     1a6:	0c 94 45 10 	jmp	0x208a	; 0x208a <_exit>

000001aa <__bad_interrupt>:
     1aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ae <format_float>:
{
    while (*str)
    {
        LCD_1602A_load_data(*str++);
    }
}
     1ae:	af 92       	push	r10
     1b0:	bf 92       	push	r11
     1b2:	cf 92       	push	r12
     1b4:	df 92       	push	r13
     1b6:	ef 92       	push	r14
     1b8:	ff 92       	push	r15
     1ba:	0f 93       	push	r16
     1bc:	1f 93       	push	r17
     1be:	cf 93       	push	r28
     1c0:	df 93       	push	r29
     1c2:	cd b7       	in	r28, 0x3d	; 61
     1c4:	de b7       	in	r29, 0x3e	; 62
     1c6:	68 97       	sbiw	r28, 0x18	; 24
     1c8:	0f b6       	in	r0, 0x3f	; 63
     1ca:	f8 94       	cli
     1cc:	de bf       	out	0x3e, r29	; 62
     1ce:	0f be       	out	0x3f, r0	; 63
     1d0:	cd bf       	out	0x3d, r28	; 61
     1d2:	d8 2e       	mov	r13, r24
     1d4:	c9 2e       	mov	r12, r25
     1d6:	b6 2e       	mov	r11, r22
     1d8:	a7 2e       	mov	r10, r23
     1da:	ca 01       	movw	r24, r20
     1dc:	b9 01       	movw	r22, r18
     1de:	20 2f       	mov	r18, r16
     1e0:	8e 01       	movw	r16, r28
     1e2:	0f 5f       	subi	r16, 0xFF	; 255
     1e4:	1f 4f       	sbci	r17, 0xFF	; 255
     1e6:	40 e0       	ldi	r20, 0x00	; 0
     1e8:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <dtostrf>
     1ec:	e1 14       	cp	r14, r1
     1ee:	f1 04       	cpc	r15, r1
     1f0:	c1 f0       	breq	.+48     	; 0x222 <format_float+0x74>
     1f2:	f7 01       	movw	r30, r14
     1f4:	80 81       	ld	r24, Z
     1f6:	88 23       	and	r24, r24
     1f8:	a1 f0       	breq	.+40     	; 0x222 <format_float+0x74>
     1fa:	ff 92       	push	r15
     1fc:	ef 92       	push	r14
     1fe:	1f 93       	push	r17
     200:	0f 93       	push	r16
     202:	84 e6       	ldi	r24, 0x64	; 100
     204:	91 e0       	ldi	r25, 0x01	; 1
     206:	9f 93       	push	r25
     208:	8f 93       	push	r24
     20a:	af 92       	push	r10
     20c:	bf 92       	push	r11
     20e:	cf 92       	push	r12
     210:	df 92       	push	r13
     212:	0e 94 1b 0b 	call	0x1636	; 0x1636 <snprintf>
     216:	0f b6       	in	r0, 0x3f	; 63
     218:	f8 94       	cli
     21a:	de bf       	out	0x3e, r29	; 62
     21c:	0f be       	out	0x3f, r0	; 63
     21e:	cd bf       	out	0x3d, r28	; 61
     220:	13 c0       	rjmp	.+38     	; 0x248 <format_float+0x9a>
     222:	ce 01       	movw	r24, r28
     224:	01 96       	adiw	r24, 0x01	; 1
     226:	9f 93       	push	r25
     228:	8f 93       	push	r24
     22a:	87 e6       	ldi	r24, 0x67	; 103
     22c:	91 e0       	ldi	r25, 0x01	; 1
     22e:	9f 93       	push	r25
     230:	8f 93       	push	r24
     232:	af 92       	push	r10
     234:	bf 92       	push	r11
     236:	cf 92       	push	r12
     238:	df 92       	push	r13
     23a:	0e 94 1b 0b 	call	0x1636	; 0x1636 <snprintf>
     23e:	0f b6       	in	r0, 0x3f	; 63
     240:	f8 94       	cli
     242:	de bf       	out	0x3e, r29	; 62
     244:	0f be       	out	0x3f, r0	; 63
     246:	cd bf       	out	0x3d, r28	; 61
     248:	68 96       	adiw	r28, 0x18	; 24
     24a:	0f b6       	in	r0, 0x3f	; 63
     24c:	f8 94       	cli
     24e:	de bf       	out	0x3e, r29	; 62
     250:	0f be       	out	0x3f, r0	; 63
     252:	cd bf       	out	0x3d, r28	; 61
     254:	df 91       	pop	r29
     256:	cf 91       	pop	r28
     258:	1f 91       	pop	r17
     25a:	0f 91       	pop	r16
     25c:	ff 90       	pop	r15
     25e:	ef 90       	pop	r14
     260:	df 90       	pop	r13
     262:	cf 90       	pop	r12
     264:	bf 90       	pop	r11
     266:	af 90       	pop	r10
     268:	08 95       	ret

0000026a <LCD_1602A_latch>:
     26a:	85 b1       	in	r24, 0x05	; 5
     26c:	81 60       	ori	r24, 0x01	; 1
     26e:	85 b9       	out	0x05, r24	; 5
     270:	85 e0       	ldi	r24, 0x05	; 5
     272:	8a 95       	dec	r24
     274:	f1 f7       	brne	.-4      	; 0x272 <LCD_1602A_latch+0x8>
     276:	00 00       	nop
     278:	85 b1       	in	r24, 0x05	; 5
     27a:	8e 7f       	andi	r24, 0xFE	; 254
     27c:	85 b9       	out	0x05, r24	; 5
     27e:	8f e8       	ldi	r24, 0x8F	; 143
     280:	91 e0       	ldi	r25, 0x01	; 1
     282:	01 97       	sbiw	r24, 0x01	; 1
     284:	f1 f7       	brne	.-4      	; 0x282 <LCD_1602A_latch+0x18>
     286:	00 c0       	rjmp	.+0      	; 0x288 <LCD_1602A_latch+0x1e>
     288:	00 00       	nop
     28a:	08 95       	ret

0000028c <LCD_1602A_send_nibble>:
     28c:	9b b1       	in	r25, 0x0b	; 11
     28e:	9f 70       	andi	r25, 0x0F	; 15
     290:	9b b9       	out	0x0b, r25	; 11
     292:	80 ff       	sbrs	r24, 0
     294:	03 c0       	rjmp	.+6      	; 0x29c <LCD_1602A_send_nibble+0x10>
     296:	9b b1       	in	r25, 0x0b	; 11
     298:	90 61       	ori	r25, 0x10	; 16
     29a:	9b b9       	out	0x0b, r25	; 11
     29c:	81 ff       	sbrs	r24, 1
     29e:	03 c0       	rjmp	.+6      	; 0x2a6 <LCD_1602A_send_nibble+0x1a>
     2a0:	9b b1       	in	r25, 0x0b	; 11
     2a2:	90 62       	ori	r25, 0x20	; 32
     2a4:	9b b9       	out	0x0b, r25	; 11
     2a6:	82 ff       	sbrs	r24, 2
     2a8:	03 c0       	rjmp	.+6      	; 0x2b0 <LCD_1602A_send_nibble+0x24>
     2aa:	9b b1       	in	r25, 0x0b	; 11
     2ac:	90 64       	ori	r25, 0x40	; 64
     2ae:	9b b9       	out	0x0b, r25	; 11
     2b0:	83 ff       	sbrs	r24, 3
     2b2:	03 c0       	rjmp	.+6      	; 0x2ba <LCD_1602A_send_nibble+0x2e>
     2b4:	8b b1       	in	r24, 0x0b	; 11
     2b6:	80 68       	ori	r24, 0x80	; 128
     2b8:	8b b9       	out	0x0b, r24	; 11
     2ba:	0e 94 35 01 	call	0x26a	; 0x26a <LCD_1602A_latch>
     2be:	08 95       	ret

000002c0 <LCD_1602A_load_command>:
     2c0:	cf 93       	push	r28
     2c2:	c8 2f       	mov	r28, r24
     2c4:	85 b1       	in	r24, 0x05	; 5
     2c6:	8d 7f       	andi	r24, 0xFD	; 253
     2c8:	85 b9       	out	0x05, r24	; 5
     2ca:	8c 2f       	mov	r24, r28
     2cc:	82 95       	swap	r24
     2ce:	8f 70       	andi	r24, 0x0F	; 15
     2d0:	0e 94 46 01 	call	0x28c	; 0x28c <LCD_1602A_send_nibble>
     2d4:	8c 2f       	mov	r24, r28
     2d6:	8f 70       	andi	r24, 0x0F	; 15
     2d8:	0e 94 46 01 	call	0x28c	; 0x28c <LCD_1602A_send_nibble>
     2dc:	cf 91       	pop	r28
     2de:	08 95       	ret

000002e0 <LCD_1602A_load_data>:
     2e0:	cf 93       	push	r28
     2e2:	c8 2f       	mov	r28, r24
     2e4:	85 b1       	in	r24, 0x05	; 5
     2e6:	82 60       	ori	r24, 0x02	; 2
     2e8:	85 b9       	out	0x05, r24	; 5
     2ea:	8c 2f       	mov	r24, r28
     2ec:	82 95       	swap	r24
     2ee:	8f 70       	andi	r24, 0x0F	; 15
     2f0:	0e 94 46 01 	call	0x28c	; 0x28c <LCD_1602A_send_nibble>
     2f4:	8c 2f       	mov	r24, r28
     2f6:	8f 70       	andi	r24, 0x0F	; 15
     2f8:	0e 94 46 01 	call	0x28c	; 0x28c <LCD_1602A_send_nibble>
     2fc:	cf 91       	pop	r28
     2fe:	08 95       	ret

00000300 <LCD_1602A_create_char>:

void LCD_1602A_create_char(uint8_t location, uint8_t charmap[])
{
     300:	0f 93       	push	r16
     302:	1f 93       	push	r17
     304:	cf 93       	push	r28
     306:	8b 01       	movw	r16, r22
    location &= 0x07;                               // only 0–7 valid
     308:	87 70       	andi	r24, 0x07	; 7
    LCD_1602A_load_command(0x40 | (location << 3)); // Set CGRAM address
     30a:	90 e0       	ldi	r25, 0x00	; 0
     30c:	88 0f       	add	r24, r24
     30e:	99 1f       	adc	r25, r25
     310:	88 0f       	add	r24, r24
     312:	99 1f       	adc	r25, r25
     314:	88 0f       	add	r24, r24
     316:	99 1f       	adc	r25, r25
     318:	80 64       	ori	r24, 0x40	; 64
     31a:	0e 94 60 01 	call	0x2c0	; 0x2c0 <LCD_1602A_load_command>

    for (uint8_t i = 0; i < 8; i++)
     31e:	c0 e0       	ldi	r28, 0x00	; 0
     320:	07 c0       	rjmp	.+14     	; 0x330 <LCD_1602A_create_char+0x30>
    {
        LCD_1602A_load_data(charmap[i]); // write pixel pattern
     322:	f8 01       	movw	r30, r16
     324:	ec 0f       	add	r30, r28
     326:	f1 1d       	adc	r31, r1
     328:	80 81       	ld	r24, Z
     32a:	0e 94 70 01 	call	0x2e0	; 0x2e0 <LCD_1602A_load_data>
void LCD_1602A_create_char(uint8_t location, uint8_t charmap[])
{
    location &= 0x07;                               // only 0–7 valid
    LCD_1602A_load_command(0x40 | (location << 3)); // Set CGRAM address

    for (uint8_t i = 0; i < 8; i++)
     32e:	cf 5f       	subi	r28, 0xFF	; 255
     330:	c8 30       	cpi	r28, 0x08	; 8
     332:	b8 f3       	brcs	.-18     	; 0x322 <LCD_1602A_create_char+0x22>
    {
        LCD_1602A_load_data(charmap[i]); // write pixel pattern
    }

    // Return to DDRAM (display memory)
    LCD_1602A_load_command(0x80);
     334:	80 e8       	ldi	r24, 0x80	; 128
     336:	0e 94 60 01 	call	0x2c0	; 0x2c0 <LCD_1602A_load_command>
}
     33a:	cf 91       	pop	r28
     33c:	1f 91       	pop	r17
     33e:	0f 91       	pop	r16
     340:	08 95       	ret

00000342 <LCD_1602A_init>:
    params: void
    returns: void
*/
void LCD_1602A_init(void)
{
    LCD_1602A_CTRL_DDR |= (1 << LCD_1602A_RS) | (1 << LCD_1602A_EN);
     342:	84 b1       	in	r24, 0x04	; 4
     344:	83 60       	ori	r24, 0x03	; 3
     346:	84 b9       	out	0x04, r24	; 4
    LCD_1602A_DATA_DDR |= (1 << LCD_1602A_D4) | (1 << LCD_1602A_D5) | (1 << LCD_1602A_D6) | (1 << LCD_1602A_D7);
     348:	8a b1       	in	r24, 0x0a	; 10
     34a:	80 6f       	ori	r24, 0xF0	; 240
     34c:	8a b9       	out	0x0a, r24	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     34e:	2f ef       	ldi	r18, 0xFF	; 255
     350:	89 ef       	ldi	r24, 0xF9	; 249
     352:	90 e0       	ldi	r25, 0x00	; 0
     354:	21 50       	subi	r18, 0x01	; 1
     356:	80 40       	sbci	r24, 0x00	; 0
     358:	90 40       	sbci	r25, 0x00	; 0
     35a:	e1 f7       	brne	.-8      	; 0x354 <LCD_1602A_init+0x12>
     35c:	00 c0       	rjmp	.+0      	; 0x35e <LCD_1602A_init+0x1c>
     35e:	00 00       	nop

    _delay_ms(20); // Wait for LCD power up
    LCD_1602A_send_nibble(DISPLAY_WAIT_POWER_UP);
     360:	83 e0       	ldi	r24, 0x03	; 3
     362:	0e 94 46 01 	call	0x28c	; 0x28c <LCD_1602A_send_nibble>
     366:	8f e1       	ldi	r24, 0x1F	; 31
     368:	9e e4       	ldi	r25, 0x4E	; 78
     36a:	01 97       	sbiw	r24, 0x01	; 1
     36c:	f1 f7       	brne	.-4      	; 0x36a <LCD_1602A_init+0x28>
     36e:	00 c0       	rjmp	.+0      	; 0x370 <LCD_1602A_init+0x2e>
     370:	00 00       	nop
    _delay_ms(5);
    LCD_1602A_send_nibble(DISPLAY_WAIT_POWER_UP);
     372:	83 e0       	ldi	r24, 0x03	; 3
     374:	0e 94 46 01 	call	0x28c	; 0x28c <LCD_1602A_send_nibble>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     378:	87 e5       	ldi	r24, 0x57	; 87
     37a:	92 e0       	ldi	r25, 0x02	; 2
     37c:	01 97       	sbiw	r24, 0x01	; 1
     37e:	f1 f7       	brne	.-4      	; 0x37c <LCD_1602A_init+0x3a>
     380:	00 c0       	rjmp	.+0      	; 0x382 <LCD_1602A_init+0x40>
     382:	00 00       	nop
    _delay_us(150);
    LCD_1602A_send_nibble(DISPLAY_WAIT_POWER_UP);
     384:	83 e0       	ldi	r24, 0x03	; 3
     386:	0e 94 46 01 	call	0x28c	; 0x28c <LCD_1602A_send_nibble>

    LCD_1602A_send_nibble(DISPLAY_4_BIT_MODE); // Switch to 4-bit mode
     38a:	82 e0       	ldi	r24, 0x02	; 2
     38c:	0e 94 46 01 	call	0x28c	; 0x28c <LCD_1602A_send_nibble>

    LCD_1602A_load_command(DISPLAY_FUNCTION_SET_4BIT_2LINE);
     390:	88 e2       	ldi	r24, 0x28	; 40
     392:	0e 94 60 01 	call	0x2c0	; 0x2c0 <LCD_1602A_load_command>
    LCD_1602A_load_command(DISPLAY_DISPLAY_ON_CURSOR_OFF);
     396:	8c e0       	ldi	r24, 0x0C	; 12
     398:	0e 94 60 01 	call	0x2c0	; 0x2c0 <LCD_1602A_load_command>
    LCD_1602A_load_command(DISPLAY_ENTRY_MODE_SET);
     39c:	86 e0       	ldi	r24, 0x06	; 6
     39e:	0e 94 60 01 	call	0x2c0	; 0x2c0 <LCD_1602A_load_command>
    LCD_1602A_load_command(DISPLAY_CLEAR_SCREEN);
     3a2:	81 e0       	ldi	r24, 0x01	; 1
     3a4:	0e 94 60 01 	call	0x2c0	; 0x2c0 <LCD_1602A_load_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3a8:	8f e3       	ldi	r24, 0x3F	; 63
     3aa:	9f e1       	ldi	r25, 0x1F	; 31
     3ac:	01 97       	sbiw	r24, 0x01	; 1
     3ae:	f1 f7       	brne	.-4      	; 0x3ac <LCD_1602A_init+0x6a>
     3b0:	00 c0       	rjmp	.+0      	; 0x3b2 <LCD_1602A_init+0x70>
     3b2:	00 00       	nop
     3b4:	08 95       	ret

000003b6 <DS18B20_reset>:
    params: void
    returns: uint8_t - 1 if presence pulse detected, 0 otherwise
*/
uint8_t DS18B20_reset(void)
{
    DS18B20_OUTPUT();
     3b6:	87 b1       	in	r24, 0x07	; 7
     3b8:	81 60       	ori	r24, 0x01	; 1
     3ba:	87 b9       	out	0x07, r24	; 7
    DS18B20_LOW();
     3bc:	88 b1       	in	r24, 0x08	; 8
     3be:	8e 7f       	andi	r24, 0xFE	; 254
     3c0:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3c2:	8f e7       	ldi	r24, 0x7F	; 127
     3c4:	97 e0       	ldi	r25, 0x07	; 7
     3c6:	01 97       	sbiw	r24, 0x01	; 1
     3c8:	f1 f7       	brne	.-4      	; 0x3c6 <DS18B20_reset+0x10>
     3ca:	00 c0       	rjmp	.+0      	; 0x3cc <DS18B20_reset+0x16>
     3cc:	00 00       	nop
    _delay_us(480);
    DS18B20_INPUT();
     3ce:	87 b1       	in	r24, 0x07	; 7
     3d0:	8e 7f       	andi	r24, 0xFE	; 254
     3d2:	87 b9       	out	0x07, r24	; 7
     3d4:	ef ee       	ldi	r30, 0xEF	; 239
     3d6:	f0 e0       	ldi	r31, 0x00	; 0
     3d8:	31 97       	sbiw	r30, 0x01	; 1
     3da:	f1 f7       	brne	.-4      	; 0x3d8 <DS18B20_reset+0x22>
     3dc:	00 c0       	rjmp	.+0      	; 0x3de <DS18B20_reset+0x28>
     3de:	00 00       	nop
    _delay_us(60);

    uint8_t presence = !(DS18B20_PIN & (1 << DS18B20_DQ));
     3e0:	96 b1       	in	r25, 0x06	; 6
     3e2:	81 e0       	ldi	r24, 0x01	; 1
     3e4:	89 27       	eor	r24, r25
     3e6:	81 70       	andi	r24, 0x01	; 1
     3e8:	ef e8       	ldi	r30, 0x8F	; 143
     3ea:	f6 e0       	ldi	r31, 0x06	; 6
     3ec:	31 97       	sbiw	r30, 0x01	; 1
     3ee:	f1 f7       	brne	.-4      	; 0x3ec <DS18B20_reset+0x36>
     3f0:	00 c0       	rjmp	.+0      	; 0x3f2 <DS18B20_reset+0x3c>
     3f2:	00 00       	nop
    _delay_us(420);
    return presence;
}
     3f4:	08 95       	ret

000003f6 <DS18B20_write_bit>:
    params: uint8_t bit - the bit to write (0 or 1)
    returns: void
*/
void DS18B20_write_bit(uint8_t bit)
{
    DS18B20_OUTPUT();
     3f6:	97 b1       	in	r25, 0x07	; 7
     3f8:	91 60       	ori	r25, 0x01	; 1
     3fa:	97 b9       	out	0x07, r25	; 7
    DS18B20_LOW();
     3fc:	98 b1       	in	r25, 0x08	; 8
     3fe:	9e 7f       	andi	r25, 0xFE	; 254
     400:	98 b9       	out	0x08, r25	; 8
    if (bit)
     402:	88 23       	and	r24, r24
     404:	71 f0       	breq	.+28     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
     406:	85 e0       	ldi	r24, 0x05	; 5
     408:	8a 95       	dec	r24
     40a:	f1 f7       	brne	.-4      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
     40c:	00 00       	nop
    {
        _delay_us(1);
        DS18B20_INPUT();
     40e:	87 b1       	in	r24, 0x07	; 7
     410:	8e 7f       	andi	r24, 0xFE	; 254
     412:	87 b9       	out	0x07, r24	; 7
     414:	8f ee       	ldi	r24, 0xEF	; 239
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	01 97       	sbiw	r24, 0x01	; 1
     41a:	f1 f7       	brne	.-4      	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
     41c:	00 c0       	rjmp	.+0      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
     41e:	00 00       	nop
     420:	08 95       	ret
     422:	8f ee       	ldi	r24, 0xEF	; 239
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	01 97       	sbiw	r24, 0x01	; 1
     428:	f1 f7       	brne	.-4      	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
     42a:	00 c0       	rjmp	.+0      	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
     42c:	00 00       	nop
        _delay_us(60);
    }
    else
    {
        _delay_us(60);
        DS18B20_INPUT();
     42e:	87 b1       	in	r24, 0x07	; 7
     430:	8e 7f       	andi	r24, 0xFE	; 254
     432:	87 b9       	out	0x07, r24	; 7
     434:	08 95       	ret

00000436 <DS18B20_write_byte>:
    write a byte to the DS18B20 sensor
    params: uint8_t data - the byte to write
    returns: void
*/
void DS18B20_write_byte(uint8_t data)
{
     436:	cf 93       	push	r28
     438:	df 93       	push	r29
     43a:	d8 2f       	mov	r29, r24
    for (uint8_t i = 0; i < 8; i++)
     43c:	c0 e0       	ldi	r28, 0x00	; 0
     43e:	06 c0       	rjmp	.+12     	; 0x44c <DS18B20_write_byte+0x16>
    {
        DS18B20_write_bit(data & 0x01);
     440:	8d 2f       	mov	r24, r29
     442:	81 70       	andi	r24, 0x01	; 1
     444:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <DS18B20_write_bit>
        data >>= 1;
     448:	d6 95       	lsr	r29
    params: uint8_t data - the byte to write
    returns: void
*/
void DS18B20_write_byte(uint8_t data)
{
    for (uint8_t i = 0; i < 8; i++)
     44a:	cf 5f       	subi	r28, 0xFF	; 255
     44c:	c8 30       	cpi	r28, 0x08	; 8
     44e:	c0 f3       	brcs	.-16     	; 0x440 <DS18B20_write_byte+0xa>
    {
        DS18B20_write_bit(data & 0x01);
        data >>= 1;
    }
}
     450:	df 91       	pop	r29
     452:	cf 91       	pop	r28
     454:	08 95       	ret

00000456 <DS18B20_read_bit>:
    returns: uint8_t - the bit read (0 or 1)
*/
uint8_t DS18B20_read_bit(void)
{
    uint8_t bit;
    DS18B20_OUTPUT();
     456:	87 b1       	in	r24, 0x07	; 7
     458:	81 60       	ori	r24, 0x01	; 1
     45a:	87 b9       	out	0x07, r24	; 7
    DS18B20_LOW();
     45c:	88 b1       	in	r24, 0x08	; 8
     45e:	8e 7f       	andi	r24, 0xFE	; 254
     460:	88 b9       	out	0x08, r24	; 8
     462:	8a e0       	ldi	r24, 0x0A	; 10
     464:	8a 95       	dec	r24
     466:	f1 f7       	brne	.-4      	; 0x464 <DS18B20_read_bit+0xe>
     468:	00 c0       	rjmp	.+0      	; 0x46a <DS18B20_read_bit+0x14>
    _delay_us(2);
    DS18B20_INPUT();
     46a:	87 b1       	in	r24, 0x07	; 7
     46c:	8e 7f       	andi	r24, 0xFE	; 254
     46e:	87 b9       	out	0x07, r24	; 7
     470:	e5 e3       	ldi	r30, 0x35	; 53
     472:	ea 95       	dec	r30
     474:	f1 f7       	brne	.-4      	; 0x472 <DS18B20_read_bit+0x1c>
     476:	00 00       	nop
    _delay_us(10);
    bit = (DS18B20_PIN & (1 << DS18B20_DQ)) ? 1 : 0;
     478:	86 b1       	in	r24, 0x06	; 6
     47a:	81 70       	andi	r24, 0x01	; 1
     47c:	e7 ec       	ldi	r30, 0xC7	; 199
     47e:	f0 e0       	ldi	r31, 0x00	; 0
     480:	31 97       	sbiw	r30, 0x01	; 1
     482:	f1 f7       	brne	.-4      	; 0x480 <DS18B20_read_bit+0x2a>
     484:	00 c0       	rjmp	.+0      	; 0x486 <DS18B20_read_bit+0x30>
     486:	00 00       	nop
    _delay_us(50);
    return bit;
}
     488:	08 95       	ret

0000048a <DS18B20_read_byte>:
    read a byte from the DS18B20 sensor
    params: void
    returns: uint8_t - the byte read
*/
uint8_t DS18B20_read_byte(void)
{
     48a:	cf 93       	push	r28
     48c:	df 93       	push	r29
    uint8_t data = 0;
    for (uint8_t i = 0; i < 8; i++)
     48e:	c0 e0       	ldi	r28, 0x00	; 0
    params: void
    returns: uint8_t - the byte read
*/
uint8_t DS18B20_read_byte(void)
{
    uint8_t data = 0;
     490:	d0 e0       	ldi	r29, 0x00	; 0
    for (uint8_t i = 0; i < 8; i++)
     492:	06 c0       	rjmp	.+12     	; 0x4a0 <DS18B20_read_byte+0x16>
    {
        data >>= 1;
     494:	d6 95       	lsr	r29
        if (DS18B20_read_bit())
     496:	0e 94 2b 02 	call	0x456	; 0x456 <DS18B20_read_bit>
     49a:	81 11       	cpse	r24, r1
            data |= 0x80;
     49c:	d0 68       	ori	r29, 0x80	; 128
    returns: uint8_t - the byte read
*/
uint8_t DS18B20_read_byte(void)
{
    uint8_t data = 0;
    for (uint8_t i = 0; i < 8; i++)
     49e:	cf 5f       	subi	r28, 0xFF	; 255
     4a0:	c8 30       	cpi	r28, 0x08	; 8
     4a2:	c0 f3       	brcs	.-16     	; 0x494 <DS18B20_read_byte+0xa>
        data >>= 1;
        if (DS18B20_read_bit())
            data |= 0x80;
    }
    return data;
}
     4a4:	8d 2f       	mov	r24, r29
     4a6:	df 91       	pop	r29
     4a8:	cf 91       	pop	r28
     4aa:	08 95       	ret

000004ac <DS18B20_read_temperature>:
    read temperature from the DS18B20 sensor
    params: void
    returns: float - the temperature in degrees Celsius
*/
float DS18B20_read_temperature(void)
{
     4ac:	cf 93       	push	r28
    uint8_t temp_l, temp_h;
    int16_t temp;

    DS18B20_reset();
     4ae:	0e 94 db 01 	call	0x3b6	; 0x3b6 <DS18B20_reset>
    DS18B20_write_byte(0xCC);
     4b2:	8c ec       	ldi	r24, 0xCC	; 204
     4b4:	0e 94 1b 02 	call	0x436	; 0x436 <DS18B20_write_byte>
    DS18B20_write_byte(0x44);
     4b8:	84 e4       	ldi	r24, 0x44	; 68
     4ba:	0e 94 1b 02 	call	0x436	; 0x436 <DS18B20_write_byte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4be:	2f ef       	ldi	r18, 0xFF	; 255
     4c0:	8e e9       	ldi	r24, 0x9E	; 158
     4c2:	94 e2       	ldi	r25, 0x24	; 36
     4c4:	21 50       	subi	r18, 0x01	; 1
     4c6:	80 40       	sbci	r24, 0x00	; 0
     4c8:	90 40       	sbci	r25, 0x00	; 0
     4ca:	e1 f7       	brne	.-8      	; 0x4c4 <DS18B20_read_temperature+0x18>
     4cc:	00 c0       	rjmp	.+0      	; 0x4ce <DS18B20_read_temperature+0x22>
     4ce:	00 00       	nop
    _delay_ms(750);

    DS18B20_reset();
     4d0:	0e 94 db 01 	call	0x3b6	; 0x3b6 <DS18B20_reset>
    DS18B20_write_byte(0xCC);
     4d4:	8c ec       	ldi	r24, 0xCC	; 204
     4d6:	0e 94 1b 02 	call	0x436	; 0x436 <DS18B20_write_byte>
    DS18B20_write_byte(0xBE);
     4da:	8e eb       	ldi	r24, 0xBE	; 190
     4dc:	0e 94 1b 02 	call	0x436	; 0x436 <DS18B20_write_byte>

    temp_l = DS18B20_read_byte();
     4e0:	0e 94 45 02 	call	0x48a	; 0x48a <DS18B20_read_byte>
     4e4:	c8 2f       	mov	r28, r24
    temp_h = DS18B20_read_byte();
     4e6:	0e 94 45 02 	call	0x48a	; 0x48a <DS18B20_read_byte>

    temp = (temp_h << 8) | temp_l;
     4ea:	68 2f       	mov	r22, r24
     4ec:	70 e0       	ldi	r23, 0x00	; 0
     4ee:	76 2f       	mov	r23, r22
     4f0:	66 27       	eor	r22, r22
     4f2:	6c 2b       	or	r22, r28

    return (float)temp / 16.0;
     4f4:	07 2e       	mov	r0, r23
     4f6:	00 0c       	add	r0, r0
     4f8:	88 0b       	sbc	r24, r24
     4fa:	99 0b       	sbc	r25, r25
     4fc:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <__floatsisf>
     500:	20 e0       	ldi	r18, 0x00	; 0
     502:	30 e0       	ldi	r19, 0x00	; 0
     504:	40 e8       	ldi	r20, 0x80	; 128
     506:	5d e3       	ldi	r21, 0x3D	; 61
     508:	0e 94 88 0a 	call	0x1510	; 0x1510 <__mulsf3>
}
     50c:	cf 91       	pop	r28
     50e:	08 95       	ret

00000510 <HCSR04_init>:
    params: void
    returns: void
*/
void HCSR04_init(void)
{
    HCSR04_TRIG_DDR |= (1 << HCSR04_TRIG_PIN);
     510:	8a b1       	in	r24, 0x0a	; 10
     512:	84 60       	ori	r24, 0x04	; 4
     514:	8a b9       	out	0x0a, r24	; 10
    HCSR04_ECHO_DDR &= ~(1 << HCSR04_ECHO_PIN);
     516:	8a b1       	in	r24, 0x0a	; 10
     518:	87 7f       	andi	r24, 0xF7	; 247
     51a:	8a b9       	out	0x0a, r24	; 10
     51c:	08 95       	ret

0000051e <HCSR04_trigger>:
    params: void
    returns: void
*/
void HCSR04_trigger(void)
{
    HCSR04_TRIG_PORT &= ~(1 << HCSR04_TRIG_PIN);
     51e:	8b b1       	in	r24, 0x0b	; 11
     520:	8b 7f       	andi	r24, 0xFB	; 251
     522:	8b b9       	out	0x0b, r24	; 11
     524:	2f ef       	ldi	r18, 0xFF	; 255
     526:	83 ec       	ldi	r24, 0xC3	; 195
     528:	99 e0       	ldi	r25, 0x09	; 9
     52a:	21 50       	subi	r18, 0x01	; 1
     52c:	80 40       	sbci	r24, 0x00	; 0
     52e:	90 40       	sbci	r25, 0x00	; 0
     530:	e1 f7       	brne	.-8      	; 0x52a <HCSR04_trigger+0xc>
     532:	00 c0       	rjmp	.+0      	; 0x534 <HCSR04_trigger+0x16>
     534:	00 00       	nop
    _delay_ms(200);
    HCSR04_TRIG_PORT |= (1 << HCSR04_TRIG_PIN);
     536:	8b b1       	in	r24, 0x0b	; 11
     538:	84 60       	ori	r24, 0x04	; 4
     53a:	8b b9       	out	0x0b, r24	; 11
     53c:	2f ef       	ldi	r18, 0xFF	; 255
     53e:	83 ec       	ldi	r24, 0xC3	; 195
     540:	99 e0       	ldi	r25, 0x09	; 9
     542:	21 50       	subi	r18, 0x01	; 1
     544:	80 40       	sbci	r24, 0x00	; 0
     546:	90 40       	sbci	r25, 0x00	; 0
     548:	e1 f7       	brne	.-8      	; 0x542 <HCSR04_trigger+0x24>
     54a:	00 c0       	rjmp	.+0      	; 0x54c <HCSR04_trigger+0x2e>
     54c:	00 00       	nop
    _delay_ms(200);
    HCSR04_TRIG_PORT &= ~(1 << HCSR04_TRIG_PIN);
     54e:	8b b1       	in	r24, 0x0b	; 11
     550:	8b 7f       	andi	r24, 0xFB	; 251
     552:	8b b9       	out	0x0b, r24	; 11
     554:	08 95       	ret

00000556 <HCSR04_read>:
*/
uint16_t HCSR04_read(void)
{
    uint32_t count = 0;

    while (!(HCSR04_ECHO_DEF_PIN & (1 << HCSR04_ECHO_PIN)));
     556:	4b 9b       	sbis	0x09, 3	; 9
     558:	fe cf       	rjmp	.-4      	; 0x556 <HCSR04_read>
     55a:	60 e0       	ldi	r22, 0x00	; 0
     55c:	70 e0       	ldi	r23, 0x00	; 0
     55e:	cb 01       	movw	r24, r22
     560:	08 c0       	rjmp	.+16     	; 0x572 <HCSR04_read+0x1c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     562:	25 e0       	ldi	r18, 0x05	; 5
     564:	2a 95       	dec	r18
     566:	f1 f7       	brne	.-4      	; 0x564 <HCSR04_read+0xe>
     568:	00 00       	nop

    while (HCSR04_ECHO_DEF_PIN & (1 << HCSR04_ECHO_PIN))
    {
        _delay_us(1);
        count++;
     56a:	6f 5f       	subi	r22, 0xFF	; 255
     56c:	7f 4f       	sbci	r23, 0xFF	; 255
     56e:	8f 4f       	sbci	r24, 0xFF	; 255
     570:	9f 4f       	sbci	r25, 0xFF	; 255
{
    uint32_t count = 0;

    while (!(HCSR04_ECHO_DEF_PIN & (1 << HCSR04_ECHO_PIN)));

    while (HCSR04_ECHO_DEF_PIN & (1 << HCSR04_ECHO_PIN))
     572:	4b 99       	sbic	0x09, 3	; 9
     574:	f6 cf       	rjmp	.-20     	; 0x562 <HCSR04_read+0xc>
    {
        _delay_us(1);
        count++;
    }

    return (uint16_t)(count / 58.0);
     576:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <__floatunsisf>
     57a:	20 e0       	ldi	r18, 0x00	; 0
     57c:	30 e0       	ldi	r19, 0x00	; 0
     57e:	48 e6       	ldi	r20, 0x68	; 104
     580:	52 e4       	ldi	r21, 0x42	; 66
     582:	0e 94 30 09 	call	0x1260	; 0x1260 <__divsf3>
     586:	0e 94 a2 09 	call	0x1344	; 0x1344 <__fixunssfsi>
}
     58a:	cb 01       	movw	r24, r22
     58c:	08 95       	ret

0000058e <HCSR04_get_distance>:
    params: void
    returns: uint16_t - the distance in centimeters
*/
uint16_t HCSR04_get_distance(void)
{
    HCSR04_trigger();
     58e:	0e 94 8f 02 	call	0x51e	; 0x51e <HCSR04_trigger>
    return HCSR04_read();
     592:	0e 94 ab 02 	call	0x556	; 0x556 <HCSR04_read>
}
     596:	08 95       	ret

00000598 <KEYPAD_init>:
    params: void
    returns: void
*/
void KEYPAD_init(void)
{
    KEYPAD_DDR &= ~((1 << KEYPAD_KEY_1) | (1 << KEYPAD_KEY_2) | (1 << KEYPAD_KEY_3) | (1 << KEYPAD_KEY_4));
     598:	84 b1       	in	r24, 0x04	; 4
     59a:	83 7c       	andi	r24, 0xC3	; 195
     59c:	84 b9       	out	0x04, r24	; 4
    KEYPAD_PORT |= (1 << KEYPAD_KEY_1) | (1 << KEYPAD_KEY_2) | (1 << KEYPAD_KEY_3) | (1 << KEYPAD_KEY_4);
     59e:	85 b1       	in	r24, 0x05	; 5
     5a0:	8c 63       	ori	r24, 0x3C	; 60
     5a2:	85 b9       	out	0x05, r24	; 5
     5a4:	08 95       	ret

000005a6 <KEYPAD_read>:
    params: void
    returns: uint8_t - the key number (1-4) or KEYPAD_NO_KEY if no key is pressed
*/
uint8_t KEYPAD_read(void)
{
    if (!(KEYPAD_PIN & (1 << KEYPAD_KEY_1))) return 1;
     5a6:	1a 9b       	sbis	0x03, 2	; 3
     5a8:	08 c0       	rjmp	.+16     	; 0x5ba <KEYPAD_read+0x14>
    if (!(KEYPAD_PIN & (1 << KEYPAD_KEY_2))) return 2;
     5aa:	1b 9b       	sbis	0x03, 3	; 3
     5ac:	08 c0       	rjmp	.+16     	; 0x5be <KEYPAD_read+0x18>
    if (!(KEYPAD_PIN & (1 << KEYPAD_KEY_3))) return 3;
     5ae:	1c 9b       	sbis	0x03, 4	; 3
     5b0:	08 c0       	rjmp	.+16     	; 0x5c2 <KEYPAD_read+0x1c>
    if (!(KEYPAD_PIN & (1 << KEYPAD_KEY_4))) return 4;
     5b2:	1d 99       	sbic	0x03, 5	; 3
     5b4:	08 c0       	rjmp	.+16     	; 0x5c6 <KEYPAD_read+0x20>
     5b6:	84 e0       	ldi	r24, 0x04	; 4
     5b8:	08 95       	ret
    params: void
    returns: uint8_t - the key number (1-4) or KEYPAD_NO_KEY if no key is pressed
*/
uint8_t KEYPAD_read(void)
{
    if (!(KEYPAD_PIN & (1 << KEYPAD_KEY_1))) return 1;
     5ba:	81 e0       	ldi	r24, 0x01	; 1
     5bc:	08 95       	ret
    if (!(KEYPAD_PIN & (1 << KEYPAD_KEY_2))) return 2;
     5be:	82 e0       	ldi	r24, 0x02	; 2
     5c0:	08 95       	ret
    if (!(KEYPAD_PIN & (1 << KEYPAD_KEY_3))) return 3;
     5c2:	83 e0       	ldi	r24, 0x03	; 3
     5c4:	08 95       	ret
    if (!(KEYPAD_PIN & (1 << KEYPAD_KEY_4))) return 4;
    return KEYPAD_NO_KEY;
     5c6:	85 e0       	ldi	r24, 0x05	; 5
}
     5c8:	08 95       	ret

000005ca <display_set>:
    params: const unsigned char* title - title string (max 12 chars)
            const unsigned char* data - data string (max 16 chars)
    returns: void
*/
void display_set(const unsigned char *title, const unsigned char *data)
{
     5ca:	0f 93       	push	r16
     5cc:	1f 93       	push	r17
     5ce:	cf 93       	push	r28
     5d0:	df 93       	push	r29
     5d2:	cd b7       	in	r28, 0x3d	; 61
     5d4:	de b7       	in	r29, 0x3e	; 62
     5d6:	ec 97       	sbiw	r28, 0x3c	; 60
     5d8:	0f b6       	in	r0, 0x3f	; 63
     5da:	f8 94       	cli
     5dc:	de bf       	out	0x3e, r29	; 62
     5de:	0f be       	out	0x3f, r0	; 63
     5e0:	cd bf       	out	0x3d, r28	; 61
     5e2:	dc 01       	movw	r26, r24
     5e4:	8b 01       	movw	r16, r22
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5e6:	8f e3       	ldi	r24, 0x3F	; 63
     5e8:	9f e1       	ldi	r25, 0x1F	; 31
     5ea:	01 97       	sbiw	r24, 0x01	; 1
     5ec:	f1 f7       	brne	.-4      	; 0x5ea <display_set+0x20>
     5ee:	00 c0       	rjmp	.+0      	; 0x5f0 <display_set+0x26>
     5f0:	00 00       	nop

    unsigned char line1[12];
    unsigned char line2[16];

    // prepare line1: copy up to 12 chars from title, pad with spaces
    int i = 0;
     5f2:	20 e0       	ldi	r18, 0x00	; 0
     5f4:	30 e0       	ldi	r19, 0x00	; 0
    for (; i < 12 && *title; ++i)
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <display_set+0x42>
        line1[i] = *title++;
     5f8:	11 96       	adiw	r26, 0x01	; 1
     5fa:	e1 e0       	ldi	r30, 0x01	; 1
     5fc:	f0 e0       	ldi	r31, 0x00	; 0
     5fe:	ec 0f       	add	r30, r28
     600:	fd 1f       	adc	r31, r29
     602:	e2 0f       	add	r30, r18
     604:	f3 1f       	adc	r31, r19
     606:	80 83       	st	Z, r24
    unsigned char line1[12];
    unsigned char line2[16];

    // prepare line1: copy up to 12 chars from title, pad with spaces
    int i = 0;
    for (; i < 12 && *title; ++i)
     608:	2f 5f       	subi	r18, 0xFF	; 255
     60a:	3f 4f       	sbci	r19, 0xFF	; 255
     60c:	2c 30       	cpi	r18, 0x0C	; 12
     60e:	31 05       	cpc	r19, r1
     610:	74 f4       	brge	.+28     	; 0x62e <display_set+0x64>
     612:	8c 91       	ld	r24, X
     614:	81 11       	cpse	r24, r1
     616:	f0 cf       	rjmp	.-32     	; 0x5f8 <display_set+0x2e>
     618:	0a c0       	rjmp	.+20     	; 0x62e <display_set+0x64>
        line1[i] = *title++;

    for (; i < 12; ++i)
        line1[i] = ' ';
     61a:	e1 e0       	ldi	r30, 0x01	; 1
     61c:	f0 e0       	ldi	r31, 0x00	; 0
     61e:	ec 0f       	add	r30, r28
     620:	fd 1f       	adc	r31, r29
     622:	e2 0f       	add	r30, r18
     624:	f3 1f       	adc	r31, r19
     626:	80 e2       	ldi	r24, 0x20	; 32
     628:	80 83       	st	Z, r24
    // prepare line1: copy up to 12 chars from title, pad with spaces
    int i = 0;
    for (; i < 12 && *title; ++i)
        line1[i] = *title++;

    for (; i < 12; ++i)
     62a:	2f 5f       	subi	r18, 0xFF	; 255
     62c:	3f 4f       	sbci	r19, 0xFF	; 255
     62e:	2c 30       	cpi	r18, 0x0C	; 12
     630:	31 05       	cpc	r19, r1
     632:	9c f3       	brlt	.-26     	; 0x61a <display_set+0x50>
        line1[i] = ' ';

    uint8_t arrow_down[8] = {
     634:	88 e0       	ldi	r24, 0x08	; 8
     636:	e4 e4       	ldi	r30, 0x44	; 68
     638:	f1 e0       	ldi	r31, 0x01	; 1
     63a:	de 01       	movw	r26, r28
     63c:	5d 96       	adiw	r26, 0x1d	; 29
     63e:	01 90       	ld	r0, Z+
     640:	0d 92       	st	X+, r0
     642:	8a 95       	dec	r24
     644:	e1 f7       	brne	.-8      	; 0x63e <display_set+0x74>
        0x0E,
        0x04,
        0x00
    };

    uint8_t arrow_up[8] = {
     646:	88 e0       	ldi	r24, 0x08	; 8
     648:	ec e4       	ldi	r30, 0x4C	; 76
     64a:	f1 e0       	ldi	r31, 0x01	; 1
     64c:	de 01       	movw	r26, r28
     64e:	95 96       	adiw	r26, 0x25	; 37
     650:	01 90       	ld	r0, Z+
     652:	0d 92       	st	X+, r0
     654:	8a 95       	dec	r24
     656:	e1 f7       	brne	.-8      	; 0x650 <display_set+0x86>
        0x04,
        0x04,
        0x00
    };

    uint8_t arrow_right[8] = {
     658:	88 e0       	ldi	r24, 0x08	; 8
     65a:	e4 e5       	ldi	r30, 0x54	; 84
     65c:	f1 e0       	ldi	r31, 0x01	; 1
     65e:	de 01       	movw	r26, r28
     660:	9d 96       	adiw	r26, 0x2d	; 45
     662:	01 90       	ld	r0, Z+
     664:	0d 92       	st	X+, r0
     666:	8a 95       	dec	r24
     668:	e1 f7       	brne	.-8      	; 0x662 <display_set+0x98>
        0x04,
        0x00,
        0x00
    };

    uint8_t arrow_left[8] = {
     66a:	88 e0       	ldi	r24, 0x08	; 8
     66c:	ec e5       	ldi	r30, 0x5C	; 92
     66e:	f1 e0       	ldi	r31, 0x01	; 1
     670:	de 01       	movw	r26, r28
     672:	d5 96       	adiw	r26, 0x35	; 53
     674:	01 90       	ld	r0, Z+
     676:	0d 92       	st	X+, r0
     678:	8a 95       	dec	r24
     67a:	e1 f7       	brne	.-8      	; 0x674 <display_set+0xaa>
        0x04,
        0x00,
        0x00
    };

    LCD_1602A_create_char(0, arrow_down); // store at location 0
     67c:	be 01       	movw	r22, r28
     67e:	63 5e       	subi	r22, 0xE3	; 227
     680:	7f 4f       	sbci	r23, 0xFF	; 255
     682:	80 e0       	ldi	r24, 0x00	; 0
     684:	0e 94 80 01 	call	0x300	; 0x300 <LCD_1602A_create_char>
    LCD_1602A_create_char(1, arrow_up);   // store at location 1
     688:	be 01       	movw	r22, r28
     68a:	6b 5d       	subi	r22, 0xDB	; 219
     68c:	7f 4f       	sbci	r23, 0xFF	; 255
     68e:	81 e0       	ldi	r24, 0x01	; 1
     690:	0e 94 80 01 	call	0x300	; 0x300 <LCD_1602A_create_char>
    LCD_1602A_create_char(2, arrow_left);   // store at location 2
     694:	be 01       	movw	r22, r28
     696:	6b 5c       	subi	r22, 0xCB	; 203
     698:	7f 4f       	sbci	r23, 0xFF	; 255
     69a:	82 e0       	ldi	r24, 0x02	; 2
     69c:	0e 94 80 01 	call	0x300	; 0x300 <LCD_1602A_create_char>
    LCD_1602A_create_char(3, arrow_right);   // store at location 3
     6a0:	be 01       	movw	r22, r28
     6a2:	63 5d       	subi	r22, 0xD3	; 211
     6a4:	7f 4f       	sbci	r23, 0xFF	; 255
     6a6:	83 e0       	ldi	r24, 0x03	; 3
     6a8:	0e 94 80 01 	call	0x300	; 0x300 <LCD_1602A_create_char>

    // prepare line2: copy up to 16 chars from data, pad with spaces
    i = 0;
     6ac:	80 e0       	ldi	r24, 0x00	; 0
     6ae:	90 e0       	ldi	r25, 0x00	; 0
    for (; i < 16 && *data; ++i)
     6b0:	0a c0       	rjmp	.+20     	; 0x6c6 <display_set+0xfc>
        line2[i] = *data++;
     6b2:	0f 5f       	subi	r16, 0xFF	; 255
     6b4:	1f 4f       	sbci	r17, 0xFF	; 255
     6b6:	ed e0       	ldi	r30, 0x0D	; 13
     6b8:	f0 e0       	ldi	r31, 0x00	; 0
     6ba:	ec 0f       	add	r30, r28
     6bc:	fd 1f       	adc	r31, r29
     6be:	e8 0f       	add	r30, r24
     6c0:	f9 1f       	adc	r31, r25
     6c2:	20 83       	st	Z, r18
    LCD_1602A_create_char(2, arrow_left);   // store at location 2
    LCD_1602A_create_char(3, arrow_right);   // store at location 3

    // prepare line2: copy up to 16 chars from data, pad with spaces
    i = 0;
    for (; i < 16 && *data; ++i)
     6c4:	01 96       	adiw	r24, 0x01	; 1
     6c6:	80 31       	cpi	r24, 0x10	; 16
     6c8:	91 05       	cpc	r25, r1
     6ca:	74 f4       	brge	.+28     	; 0x6e8 <display_set+0x11e>
     6cc:	f8 01       	movw	r30, r16
     6ce:	20 81       	ld	r18, Z
     6d0:	21 11       	cpse	r18, r1
     6d2:	ef cf       	rjmp	.-34     	; 0x6b2 <display_set+0xe8>
     6d4:	09 c0       	rjmp	.+18     	; 0x6e8 <display_set+0x11e>
        line2[i] = *data++;

    // LCD_1602A_load_data(0);

    for (; i < 16; ++i)
        line2[i] = ' ';
     6d6:	ed e0       	ldi	r30, 0x0D	; 13
     6d8:	f0 e0       	ldi	r31, 0x00	; 0
     6da:	ec 0f       	add	r30, r28
     6dc:	fd 1f       	adc	r31, r29
     6de:	e8 0f       	add	r30, r24
     6e0:	f9 1f       	adc	r31, r25
     6e2:	20 e2       	ldi	r18, 0x20	; 32
     6e4:	20 83       	st	Z, r18
    for (; i < 16 && *data; ++i)
        line2[i] = *data++;

    // LCD_1602A_load_data(0);

    for (; i < 16; ++i)
     6e6:	01 96       	adiw	r24, 0x01	; 1
     6e8:	80 31       	cpi	r24, 0x10	; 16
     6ea:	91 05       	cpc	r25, r1
     6ec:	a4 f3       	brlt	.-24     	; 0x6d6 <display_set+0x10c>
        line2[i] = ' ';

    // reset cursor to first line and write 12 chars
    LCD_1602A_load_command(DISPLAY_SET_CURSOR_LINE_1);
     6ee:	80 e8       	ldi	r24, 0x80	; 128
     6f0:	0e 94 60 01 	call	0x2c0	; 0x2c0 <LCD_1602A_load_command>
    for (i = 0; i < 12; ++i)
     6f4:	00 e0       	ldi	r16, 0x00	; 0
     6f6:	10 e0       	ldi	r17, 0x00	; 0
     6f8:	0b c0       	rjmp	.+22     	; 0x710 <display_set+0x146>
    {
        LCD_1602A_load_data(line1[i]);
     6fa:	e1 e0       	ldi	r30, 0x01	; 1
     6fc:	f0 e0       	ldi	r31, 0x00	; 0
     6fe:	ec 0f       	add	r30, r28
     700:	fd 1f       	adc	r31, r29
     702:	e0 0f       	add	r30, r16
     704:	f1 1f       	adc	r31, r17
     706:	80 81       	ld	r24, Z
     708:	0e 94 70 01 	call	0x2e0	; 0x2e0 <LCD_1602A_load_data>
    for (; i < 16; ++i)
        line2[i] = ' ';

    // reset cursor to first line and write 12 chars
    LCD_1602A_load_command(DISPLAY_SET_CURSOR_LINE_1);
    for (i = 0; i < 12; ++i)
     70c:	0f 5f       	subi	r16, 0xFF	; 255
     70e:	1f 4f       	sbci	r17, 0xFF	; 255
     710:	0c 30       	cpi	r16, 0x0C	; 12
     712:	11 05       	cpc	r17, r1
     714:	94 f3       	brlt	.-28     	; 0x6fa <display_set+0x130>
    {
        LCD_1602A_load_data(line1[i]);
    }

    LCD_1602A_load_data(2);
     716:	82 e0       	ldi	r24, 0x02	; 2
     718:	0e 94 70 01 	call	0x2e0	; 0x2e0 <LCD_1602A_load_data>
    LCD_1602A_load_data(0);
     71c:	80 e0       	ldi	r24, 0x00	; 0
     71e:	0e 94 70 01 	call	0x2e0	; 0x2e0 <LCD_1602A_load_data>
    LCD_1602A_load_data(1);
     722:	81 e0       	ldi	r24, 0x01	; 1
     724:	0e 94 70 01 	call	0x2e0	; 0x2e0 <LCD_1602A_load_data>
    LCD_1602A_load_data(3);
     728:	83 e0       	ldi	r24, 0x03	; 3
     72a:	0e 94 70 01 	call	0x2e0	; 0x2e0 <LCD_1602A_load_data>

    // reset cursor to second line and write 16 chars
    LCD_1602A_load_command(DISPLAY_SET_CURSOR_LINE_2);
     72e:	80 ec       	ldi	r24, 0xC0	; 192
     730:	0e 94 60 01 	call	0x2c0	; 0x2c0 <LCD_1602A_load_command>
    for (i = 0; i < 16; ++i)
     734:	00 e0       	ldi	r16, 0x00	; 0
     736:	10 e0       	ldi	r17, 0x00	; 0
     738:	0b c0       	rjmp	.+22     	; 0x750 <display_set+0x186>
    {
        LCD_1602A_load_data(line2[i]);
     73a:	ed e0       	ldi	r30, 0x0D	; 13
     73c:	f0 e0       	ldi	r31, 0x00	; 0
     73e:	ec 0f       	add	r30, r28
     740:	fd 1f       	adc	r31, r29
     742:	e0 0f       	add	r30, r16
     744:	f1 1f       	adc	r31, r17
     746:	80 81       	ld	r24, Z
     748:	0e 94 70 01 	call	0x2e0	; 0x2e0 <LCD_1602A_load_data>
    LCD_1602A_load_data(1);
    LCD_1602A_load_data(3);

    // reset cursor to second line and write 16 chars
    LCD_1602A_load_command(DISPLAY_SET_CURSOR_LINE_2);
    for (i = 0; i < 16; ++i)
     74c:	0f 5f       	subi	r16, 0xFF	; 255
     74e:	1f 4f       	sbci	r17, 0xFF	; 255
     750:	00 31       	cpi	r16, 0x10	; 16
     752:	11 05       	cpc	r17, r1
     754:	94 f3       	brlt	.-28     	; 0x73a <display_set+0x170>
    {
        LCD_1602A_load_data(line2[i]);
    }
}
     756:	ec 96       	adiw	r28, 0x3c	; 60
     758:	0f b6       	in	r0, 0x3f	; 63
     75a:	f8 94       	cli
     75c:	de bf       	out	0x3e, r29	; 62
     75e:	0f be       	out	0x3f, r0	; 63
     760:	cd bf       	out	0x3d, r28	; 61
     762:	df 91       	pop	r29
     764:	cf 91       	pop	r28
     766:	1f 91       	pop	r17
     768:	0f 91       	pop	r16
     76a:	08 95       	ret

0000076c <get_tank_capacity>:
    params: void
    returns: float - the tank capacity in liters
*/
float get_tank_capacity()
{
    uint16_t water_depth = HCSR04_get_distance();
     76c:	0e 94 c7 02 	call	0x58e	; 0x58e <HCSR04_get_distance>

    uint16_t water_height = TANK_HEIGHT_IN_CM - water_depth;
     770:	60 e2       	ldi	r22, 0x20	; 32
     772:	73 e0       	ldi	r23, 0x03	; 3
     774:	68 1b       	sub	r22, r24
     776:	79 0b       	sbc	r23, r25

    // The following formula assumes the tank is a perfect cylinder: V = π * r^2 * h
    float volume = (PI * ((float)TANK_RADIUS_IN_CM * (float)TANK_RADIUS_IN_CM) * (float)water_height) / 1000.0; // convert cm^3 to liters
     778:	80 e0       	ldi	r24, 0x00	; 0
     77a:	90 e0       	ldi	r25, 0x00	; 0
     77c:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <__floatunsisf>
     780:	2a e5       	ldi	r18, 0x5A	; 90
     782:	34 e1       	ldi	r19, 0x14	; 20
     784:	4d e9       	ldi	r20, 0x9D	; 157
     786:	52 e4       	ldi	r21, 0x42	; 66
     788:	0e 94 88 0a 	call	0x1510	; 0x1510 <__mulsf3>
     78c:	20 e0       	ldi	r18, 0x00	; 0
     78e:	30 e0       	ldi	r19, 0x00	; 0
     790:	4a e7       	ldi	r20, 0x7A	; 122
     792:	54 e4       	ldi	r21, 0x44	; 68
     794:	0e 94 30 09 	call	0x1260	; 0x1260 <__divsf3>
    return volume;
}
     798:	08 95       	ret

0000079a <get_refill_rate>:
    get the refill rate based on tank capacity change over time
    params: void
    returns: float - the refill rate in liters per minute
*/
float get_refill_rate()
{
     79a:	8f 92       	push	r8
     79c:	9f 92       	push	r9
     79e:	af 92       	push	r10
     7a0:	bf 92       	push	r11
     7a2:	cf 92       	push	r12
     7a4:	df 92       	push	r13
     7a6:	ef 92       	push	r14
     7a8:	ff 92       	push	r15
    float capacity_at_start = get_tank_capacity();
     7aa:	0e 94 b6 03 	call	0x76c	; 0x76c <get_tank_capacity>
     7ae:	4b 01       	movw	r8, r22
     7b0:	5c 01       	movw	r10, r24
     7b2:	2f ef       	ldi	r18, 0xFF	; 255
     7b4:	87 ea       	ldi	r24, 0xA7	; 167
     7b6:	91 e6       	ldi	r25, 0x61	; 97
     7b8:	21 50       	subi	r18, 0x01	; 1
     7ba:	80 40       	sbci	r24, 0x00	; 0
     7bc:	90 40       	sbci	r25, 0x00	; 0
     7be:	e1 f7       	brne	.-8      	; 0x7b8 <get_refill_rate+0x1e>
     7c0:	00 c0       	rjmp	.+0      	; 0x7c2 <get_refill_rate+0x28>
     7c2:	00 00       	nop
    _delay_ms(2000);
    float capacity_at_end = get_tank_capacity();
     7c4:	0e 94 b6 03 	call	0x76c	; 0x76c <get_tank_capacity>
     7c8:	6b 01       	movw	r12, r22
     7ca:	7c 01       	movw	r14, r24

    if (capacity_at_end < capacity_at_start) {
     7cc:	9b 01       	movw	r18, r22
     7ce:	ac 01       	movw	r20, r24
     7d0:	c5 01       	movw	r24, r10
     7d2:	b4 01       	movw	r22, r8
     7d4:	0e 94 83 0a 	call	0x1506	; 0x1506 <__gesf2>
     7d8:	18 16       	cp	r1, r24
     7da:	9c f0       	brlt	.+38     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
        return 0.0; // no refill detected
    }

    float refill_rate_per_second = (capacity_at_end - capacity_at_start) / 2.0;
     7dc:	a5 01       	movw	r20, r10
     7de:	94 01       	movw	r18, r8
     7e0:	c7 01       	movw	r24, r14
     7e2:	b6 01       	movw	r22, r12
     7e4:	0e 94 be 08 	call	0x117c	; 0x117c <__subsf3>
     7e8:	20 e0       	ldi	r18, 0x00	; 0
     7ea:	30 e0       	ldi	r19, 0x00	; 0
     7ec:	40 e0       	ldi	r20, 0x00	; 0
     7ee:	5f e3       	ldi	r21, 0x3F	; 63
     7f0:	0e 94 88 0a 	call	0x1510	; 0x1510 <__mulsf3>

    return refill_rate_per_second * 60.0; // convert to liters per minute
     7f4:	20 e0       	ldi	r18, 0x00	; 0
     7f6:	30 e0       	ldi	r19, 0x00	; 0
     7f8:	40 e7       	ldi	r20, 0x70	; 112
     7fa:	52 e4       	ldi	r21, 0x42	; 66
     7fc:	0e 94 88 0a 	call	0x1510	; 0x1510 <__mulsf3>
     800:	03 c0       	rjmp	.+6      	; 0x808 <__DATA_REGION_LENGTH__+0x8>
    float capacity_at_start = get_tank_capacity();
    _delay_ms(2000);
    float capacity_at_end = get_tank_capacity();

    if (capacity_at_end < capacity_at_start) {
        return 0.0; // no refill detected
     802:	60 e0       	ldi	r22, 0x00	; 0
     804:	70 e0       	ldi	r23, 0x00	; 0
     806:	cb 01       	movw	r24, r22
    }

    float refill_rate_per_second = (capacity_at_end - capacity_at_start) / 2.0;

    return refill_rate_per_second * 60.0; // convert to liters per minute
}
     808:	ff 90       	pop	r15
     80a:	ef 90       	pop	r14
     80c:	df 90       	pop	r13
     80e:	cf 90       	pop	r12
     810:	bf 90       	pop	r11
     812:	af 90       	pop	r10
     814:	9f 90       	pop	r9
     816:	8f 90       	pop	r8
     818:	08 95       	ret

0000081a <get_leak_rate>:
    get the leak rate based on tank capacity change over time
    params: void
    returns: float - the leak rate in liters per minute
*/
float get_leak_rate()
{
     81a:	8f 92       	push	r8
     81c:	9f 92       	push	r9
     81e:	af 92       	push	r10
     820:	bf 92       	push	r11
     822:	cf 92       	push	r12
     824:	df 92       	push	r13
     826:	ef 92       	push	r14
     828:	ff 92       	push	r15
    float capacity_at_start = get_tank_capacity();
     82a:	0e 94 b6 03 	call	0x76c	; 0x76c <get_tank_capacity>
     82e:	6b 01       	movw	r12, r22
     830:	7c 01       	movw	r14, r24
     832:	2f ef       	ldi	r18, 0xFF	; 255
     834:	87 ea       	ldi	r24, 0xA7	; 167
     836:	91 e6       	ldi	r25, 0x61	; 97
     838:	21 50       	subi	r18, 0x01	; 1
     83a:	80 40       	sbci	r24, 0x00	; 0
     83c:	90 40       	sbci	r25, 0x00	; 0
     83e:	e1 f7       	brne	.-8      	; 0x838 <get_leak_rate+0x1e>
     840:	00 c0       	rjmp	.+0      	; 0x842 <get_leak_rate+0x28>
     842:	00 00       	nop
    _delay_ms(2000);
    float capacity_at_end = get_tank_capacity();
     844:	0e 94 b6 03 	call	0x76c	; 0x76c <get_tank_capacity>
     848:	4b 01       	movw	r8, r22
     84a:	5c 01       	movw	r10, r24

    if (capacity_at_start < capacity_at_end) {
     84c:	9b 01       	movw	r18, r22
     84e:	ac 01       	movw	r20, r24
     850:	c7 01       	movw	r24, r14
     852:	b6 01       	movw	r22, r12
     854:	0e 94 2b 09 	call	0x1256	; 0x1256 <__cmpsf2>
     858:	88 23       	and	r24, r24
     85a:	9c f0       	brlt	.+38     	; 0x882 <get_leak_rate+0x68>
        return 0.0; // no leak detected
    }
    float leak_rate_per_second = (capacity_at_start - capacity_at_end) / 2.0;
     85c:	a5 01       	movw	r20, r10
     85e:	94 01       	movw	r18, r8
     860:	c7 01       	movw	r24, r14
     862:	b6 01       	movw	r22, r12
     864:	0e 94 be 08 	call	0x117c	; 0x117c <__subsf3>
     868:	20 e0       	ldi	r18, 0x00	; 0
     86a:	30 e0       	ldi	r19, 0x00	; 0
     86c:	40 e0       	ldi	r20, 0x00	; 0
     86e:	5f e3       	ldi	r21, 0x3F	; 63
     870:	0e 94 88 0a 	call	0x1510	; 0x1510 <__mulsf3>

    return leak_rate_per_second * 60.0; // convert to liters per minute
     874:	20 e0       	ldi	r18, 0x00	; 0
     876:	30 e0       	ldi	r19, 0x00	; 0
     878:	40 e7       	ldi	r20, 0x70	; 112
     87a:	52 e4       	ldi	r21, 0x42	; 66
     87c:	0e 94 88 0a 	call	0x1510	; 0x1510 <__mulsf3>
     880:	03 c0       	rjmp	.+6      	; 0x888 <get_leak_rate+0x6e>
    float capacity_at_start = get_tank_capacity();
    _delay_ms(2000);
    float capacity_at_end = get_tank_capacity();

    if (capacity_at_start < capacity_at_end) {
        return 0.0; // no leak detected
     882:	60 e0       	ldi	r22, 0x00	; 0
     884:	70 e0       	ldi	r23, 0x00	; 0
     886:	cb 01       	movw	r24, r22
    }
    float leak_rate_per_second = (capacity_at_start - capacity_at_end) / 2.0;

    return leak_rate_per_second * 60.0; // convert to liters per minute
}
     888:	ff 90       	pop	r15
     88a:	ef 90       	pop	r14
     88c:	df 90       	pop	r13
     88e:	cf 90       	pop	r12
     890:	bf 90       	pop	r11
     892:	af 90       	pop	r10
     894:	9f 90       	pop	r9
     896:	8f 90       	pop	r8
     898:	08 95       	ret

0000089a <get_soil_temperature>:

float get_soil_temperature()
{
    return DS18B20_read_temperature();
     89a:	0e 94 56 02 	call	0x4ac	; 0x4ac <DS18B20_read_temperature>
}
     89e:	08 95       	ret

000008a0 <ui_show_display>:
    update the display based on the current active menu and hover indices
    params: void
    returns: void
*/
void ui_show_display(void)
{
     8a0:	ef 92       	push	r14
     8a2:	ff 92       	push	r15
     8a4:	0f 93       	push	r16
    if (active_menu_index == -1)
     8a6:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <active_menu_index>
     8aa:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <active_menu_index+0x1>
     8ae:	ef 3f       	cpi	r30, 0xFF	; 255
     8b0:	2f ef       	ldi	r18, 0xFF	; 255
     8b2:	f2 07       	cpc	r31, r18
     8b4:	79 f4       	brne	.+30     	; 0x8d4 <ui_show_display+0x34>
    {
        display_set("MAIN MENU", MENU_BUFFER[menu_hover_index]);
     8b6:	e0 91 3a 03 	lds	r30, 0x033A	; 0x80033a <menu_hover_index>
     8ba:	f0 91 3b 03 	lds	r31, 0x033B	; 0x80033b <menu_hover_index+0x1>
     8be:	ee 0f       	add	r30, r30
     8c0:	ff 1f       	adc	r31, r31
     8c2:	ea 5c       	subi	r30, 0xCA	; 202
     8c4:	fe 4f       	sbci	r31, 0xFE	; 254
     8c6:	60 81       	ld	r22, Z
     8c8:	71 81       	ldd	r23, Z+1	; 0x01
     8ca:	8b e7       	ldi	r24, 0x7B	; 123
     8cc:	91 e0       	ldi	r25, 0x01	; 1
     8ce:	0e 94 e5 02 	call	0x5ca	; 0x5ca <display_set>
     8d2:	c2 c1       	rjmp	.+900    	; 0xc58 <__stack+0x359>
    }
    else
    {
        switch (active_menu_index)
     8d4:	e7 30       	cpi	r30, 0x07	; 7
     8d6:	f1 05       	cpc	r31, r1
     8d8:	08 f0       	brcs	.+2      	; 0x8dc <ui_show_display+0x3c>
     8da:	b8 c1       	rjmp	.+880    	; 0xc4c <__stack+0x34d>
     8dc:	ec 5c       	subi	r30, 0xCC	; 204
     8de:	ff 4f       	sbci	r31, 0xFF	; 255
     8e0:	0c 94 f5 0a 	jmp	0x15ea	; 0x15ea <__tablejump2__>
        {
        case 0:
            display_set("TANK CAPACITY", "Loading...");
     8e4:	65 e8       	ldi	r22, 0x85	; 133
     8e6:	71 e0       	ldi	r23, 0x01	; 1
     8e8:	80 e9       	ldi	r24, 0x90	; 144
     8ea:	91 e0       	ldi	r25, 0x01	; 1
     8ec:	0e 94 e5 02 	call	0x5ca	; 0x5ca <display_set>
            format_float(buffer, sizeof(buffer), get_tank_capacity(), 1, "Ltrs");
     8f0:	0e 94 b6 03 	call	0x76c	; 0x76c <get_tank_capacity>
     8f4:	9b 01       	movw	r18, r22
     8f6:	ac 01       	movw	r20, r24
     8f8:	0f 2e       	mov	r0, r31
     8fa:	fe e9       	ldi	r31, 0x9E	; 158
     8fc:	ef 2e       	mov	r14, r31
     8fe:	f1 e0       	ldi	r31, 0x01	; 1
     900:	ff 2e       	mov	r15, r31
     902:	f0 2d       	mov	r31, r0
     904:	01 e0       	ldi	r16, 0x01	; 1
     906:	60 e1       	ldi	r22, 0x10	; 16
     908:	70 e0       	ldi	r23, 0x00	; 0
     90a:	8c e3       	ldi	r24, 0x3C	; 60
     90c:	93 e0       	ldi	r25, 0x03	; 3
     90e:	0e 94 d7 00 	call	0x1ae	; 0x1ae <format_float>
            display_set("TANK CAPACITY", buffer);
     912:	6c e3       	ldi	r22, 0x3C	; 60
     914:	73 e0       	ldi	r23, 0x03	; 3
     916:	80 e9       	ldi	r24, 0x90	; 144
     918:	91 e0       	ldi	r25, 0x01	; 1
     91a:	0e 94 e5 02 	call	0x5ca	; 0x5ca <display_set>
            break;
     91e:	9c c1       	rjmp	.+824    	; 0xc58 <__stack+0x359>
        case 1:
            display_set("REFILL RATE", "Loading...");
     920:	65 e8       	ldi	r22, 0x85	; 133
     922:	71 e0       	ldi	r23, 0x01	; 1
     924:	83 ea       	ldi	r24, 0xA3	; 163
     926:	91 e0       	ldi	r25, 0x01	; 1
     928:	0e 94 e5 02 	call	0x5ca	; 0x5ca <display_set>
            format_float(buffer, sizeof(buffer), get_refill_rate(), 1, "Ltrs per min");
     92c:	0e 94 cd 03 	call	0x79a	; 0x79a <get_refill_rate>
     930:	9b 01       	movw	r18, r22
     932:	ac 01       	movw	r20, r24
     934:	0f 2e       	mov	r0, r31
     936:	ff ea       	ldi	r31, 0xAF	; 175
     938:	ef 2e       	mov	r14, r31
     93a:	f1 e0       	ldi	r31, 0x01	; 1
     93c:	ff 2e       	mov	r15, r31
     93e:	f0 2d       	mov	r31, r0
     940:	01 e0       	ldi	r16, 0x01	; 1
     942:	60 e1       	ldi	r22, 0x10	; 16
     944:	70 e0       	ldi	r23, 0x00	; 0
     946:	8c e3       	ldi	r24, 0x3C	; 60
     948:	93 e0       	ldi	r25, 0x03	; 3
     94a:	0e 94 d7 00 	call	0x1ae	; 0x1ae <format_float>
            display_set("REFILL RATE", buffer);
     94e:	6c e3       	ldi	r22, 0x3C	; 60
     950:	73 e0       	ldi	r23, 0x03	; 3
     952:	83 ea       	ldi	r24, 0xA3	; 163
     954:	91 e0       	ldi	r25, 0x01	; 1
     956:	0e 94 e5 02 	call	0x5ca	; 0x5ca <display_set>
            break;
     95a:	7e c1       	rjmp	.+764    	; 0xc58 <__stack+0x359>
        case 2:
            display_set("LEAKAGE RATE", "Loading...");
     95c:	65 e8       	ldi	r22, 0x85	; 133
     95e:	71 e0       	ldi	r23, 0x01	; 1
     960:	8c eb       	ldi	r24, 0xBC	; 188
     962:	91 e0       	ldi	r25, 0x01	; 1
     964:	0e 94 e5 02 	call	0x5ca	; 0x5ca <display_set>
            format_float(buffer, sizeof(buffer), get_leak_rate(), 1, "Ltrs per min");
     968:	0e 94 0d 04 	call	0x81a	; 0x81a <get_leak_rate>
     96c:	9b 01       	movw	r18, r22
     96e:	ac 01       	movw	r20, r24
     970:	0f 2e       	mov	r0, r31
     972:	ff ea       	ldi	r31, 0xAF	; 175
     974:	ef 2e       	mov	r14, r31
     976:	f1 e0       	ldi	r31, 0x01	; 1
     978:	ff 2e       	mov	r15, r31
     97a:	f0 2d       	mov	r31, r0
     97c:	01 e0       	ldi	r16, 0x01	; 1
     97e:	60 e1       	ldi	r22, 0x10	; 16
     980:	70 e0       	ldi	r23, 0x00	; 0
     982:	8c e3       	ldi	r24, 0x3C	; 60
     984:	93 e0       	ldi	r25, 0x03	; 3
     986:	0e 94 d7 00 	call	0x1ae	; 0x1ae <format_float>
            display_set("LEAKAGE RATE", buffer);
     98a:	6c e3       	ldi	r22, 0x3C	; 60
     98c:	73 e0       	ldi	r23, 0x03	; 3
     98e:	8c eb       	ldi	r24, 0xBC	; 188
     990:	91 e0       	ldi	r25, 0x01	; 1
     992:	0e 94 e5 02 	call	0x5ca	; 0x5ca <display_set>
            break;
     996:	60 c1       	rjmp	.+704    	; 0xc58 <__stack+0x359>
        case 3:
            display_set("SOIL TEMPERATURE", "Loading...");
     998:	65 e8       	ldi	r22, 0x85	; 133
     99a:	71 e0       	ldi	r23, 0x01	; 1
     99c:	89 ec       	ldi	r24, 0xC9	; 201
     99e:	91 e0       	ldi	r25, 0x01	; 1
     9a0:	0e 94 e5 02 	call	0x5ca	; 0x5ca <display_set>
            format_float(buffer, sizeof(buffer), get_soil_temperature(), 1, "degrees");
     9a4:	0e 94 4d 04 	call	0x89a	; 0x89a <get_soil_temperature>
     9a8:	9b 01       	movw	r18, r22
     9aa:	ac 01       	movw	r20, r24
     9ac:	0f 2e       	mov	r0, r31
     9ae:	fa ed       	ldi	r31, 0xDA	; 218
     9b0:	ef 2e       	mov	r14, r31
     9b2:	f1 e0       	ldi	r31, 0x01	; 1
     9b4:	ff 2e       	mov	r15, r31
     9b6:	f0 2d       	mov	r31, r0
     9b8:	01 e0       	ldi	r16, 0x01	; 1
     9ba:	60 e1       	ldi	r22, 0x10	; 16
     9bc:	70 e0       	ldi	r23, 0x00	; 0
     9be:	8c e3       	ldi	r24, 0x3C	; 60
     9c0:	93 e0       	ldi	r25, 0x03	; 3
     9c2:	0e 94 d7 00 	call	0x1ae	; 0x1ae <format_float>
            display_set("SOIL TEMPERATURE", buffer);
     9c6:	6c e3       	ldi	r22, 0x3C	; 60
     9c8:	73 e0       	ldi	r23, 0x03	; 3
     9ca:	89 ec       	ldi	r24, 0xC9	; 201
     9cc:	91 e0       	ldi	r25, 0x01	; 1
     9ce:	0e 94 e5 02 	call	0x5ca	; 0x5ca <display_set>
            break;
     9d2:	42 c1       	rjmp	.+644    	; 0xc58 <__stack+0x359>
        case 4:
            if (active_trigger_index == -1)
     9d4:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <active_trigger_index>
     9d8:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <active_trigger_index+0x1>
     9dc:	8f 3f       	cpi	r24, 0xFF	; 255
     9de:	2f ef       	ldi	r18, 0xFF	; 255
     9e0:	92 07       	cpc	r25, r18
     9e2:	79 f4       	brne	.+30     	; 0xa02 <__stack+0x103>
            {
                display_set("TRIGGERS", TRIGGERS_BUFFER[trigger_hover_index]);
     9e4:	e0 91 38 03 	lds	r30, 0x0338	; 0x800338 <trigger_hover_index>
     9e8:	f0 91 39 03 	lds	r31, 0x0339	; 0x800339 <trigger_hover_index+0x1>
     9ec:	ee 0f       	add	r30, r30
     9ee:	ff 1f       	adc	r31, r31
     9f0:	ee 5c       	subi	r30, 0xCE	; 206
     9f2:	fe 4f       	sbci	r31, 0xFE	; 254
     9f4:	60 81       	ld	r22, Z
     9f6:	71 81       	ldd	r23, Z+1	; 0x01
     9f8:	84 e5       	ldi	r24, 0x54	; 84
     9fa:	92 e0       	ldi	r25, 0x02	; 2
     9fc:	0e 94 e5 02 	call	0x5ca	; 0x5ca <display_set>
     a00:	2b c1       	rjmp	.+598    	; 0xc58 <__stack+0x359>
            }
            else
            {
                switch (active_trigger_index)
     a02:	00 97       	sbiw	r24, 0x00	; 0
     a04:	19 f0       	breq	.+6      	; 0xa0c <__stack+0x10d>
     a06:	01 97       	sbiw	r24, 0x01	; 1
     a08:	e9 f0       	breq	.+58     	; 0xa44 <__stack+0x145>
     a0a:	38 c0       	rjmp	.+112    	; 0xa7c <__stack+0x17d>
                {
                case 0:
                    format_float(buffer, sizeof(buffer), MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER, 1, "Ltrs");
     a0c:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER>
     a10:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x1>
     a14:	40 91 18 01 	lds	r20, 0x0118	; 0x800118 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x2>
     a18:	50 91 19 01 	lds	r21, 0x0119	; 0x800119 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x3>
     a1c:	0f 2e       	mov	r0, r31
     a1e:	fe e9       	ldi	r31, 0x9E	; 158
     a20:	ef 2e       	mov	r14, r31
     a22:	f1 e0       	ldi	r31, 0x01	; 1
     a24:	ff 2e       	mov	r15, r31
     a26:	f0 2d       	mov	r31, r0
     a28:	01 e0       	ldi	r16, 0x01	; 1
     a2a:	60 e1       	ldi	r22, 0x10	; 16
     a2c:	70 e0       	ldi	r23, 0x00	; 0
     a2e:	8c e3       	ldi	r24, 0x3C	; 60
     a30:	93 e0       	ldi	r25, 0x03	; 3
     a32:	0e 94 d7 00 	call	0x1ae	; 0x1ae <format_float>
                    display_set("MIN CAPACITY", buffer);
     a36:	6c e3       	ldi	r22, 0x3C	; 60
     a38:	73 e0       	ldi	r23, 0x03	; 3
     a3a:	82 ee       	ldi	r24, 0xE2	; 226
     a3c:	91 e0       	ldi	r25, 0x01	; 1
     a3e:	0e 94 e5 02 	call	0x5ca	; 0x5ca <display_set>
                    break;
     a42:	0a c1       	rjmp	.+532    	; 0xc58 <__stack+0x359>
                case 1:
                    format_float(buffer, sizeof(buffer), MAXIMUM_TEMPERATURE_BEFORE_PUMPING, 2, "degrees");
     a44:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING>
     a48:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x1>
     a4c:	40 91 14 01 	lds	r20, 0x0114	; 0x800114 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x2>
     a50:	50 91 15 01 	lds	r21, 0x0115	; 0x800115 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x3>
     a54:	0f 2e       	mov	r0, r31
     a56:	fa ed       	ldi	r31, 0xDA	; 218
     a58:	ef 2e       	mov	r14, r31
     a5a:	f1 e0       	ldi	r31, 0x01	; 1
     a5c:	ff 2e       	mov	r15, r31
     a5e:	f0 2d       	mov	r31, r0
     a60:	02 e0       	ldi	r16, 0x02	; 2
     a62:	60 e1       	ldi	r22, 0x10	; 16
     a64:	70 e0       	ldi	r23, 0x00	; 0
     a66:	8c e3       	ldi	r24, 0x3C	; 60
     a68:	93 e0       	ldi	r25, 0x03	; 3
     a6a:	0e 94 d7 00 	call	0x1ae	; 0x1ae <format_float>
                    display_set("MAX TEMP", buffer);
     a6e:	6c e3       	ldi	r22, 0x3C	; 60
     a70:	73 e0       	ldi	r23, 0x03	; 3
     a72:	8f ee       	ldi	r24, 0xEF	; 239
     a74:	91 e0       	ldi	r25, 0x01	; 1
     a76:	0e 94 e5 02 	call	0x5ca	; 0x5ca <display_set>
                    break;
     a7a:	ee c0       	rjmp	.+476    	; 0xc58 <__stack+0x359>
                default:
                    display_set("ERROR", "Invalid trigger");
     a7c:	68 ef       	ldi	r22, 0xF8	; 248
     a7e:	71 e0       	ldi	r23, 0x01	; 1
     a80:	88 e0       	ldi	r24, 0x08	; 8
     a82:	92 e0       	ldi	r25, 0x02	; 2
     a84:	0e 94 e5 02 	call	0x5ca	; 0x5ca <display_set>
                    break;
     a88:	e7 c0       	rjmp	.+462    	; 0xc58 <__stack+0x359>
                }
            }
            break;

        case 5:
            display_set("MESSAGES", MESSAGES_BUFFER[message_hover_index]);
     a8a:	e0 91 34 03 	lds	r30, 0x0334	; 0x800334 <__data_end>
     a8e:	f0 91 35 03 	lds	r31, 0x0335	; 0x800335 <__data_end+0x1>
     a92:	ee 0f       	add	r30, r30
     a94:	ff 1f       	adc	r31, r31
     a96:	e0 5e       	subi	r30, 0xE0	; 224
     a98:	fe 4f       	sbci	r31, 0xFE	; 254
     a9a:	60 81       	ld	r22, Z
     a9c:	71 81       	ldd	r23, Z+1	; 0x01
     a9e:	8e e0       	ldi	r24, 0x0E	; 14
     aa0:	92 e0       	ldi	r25, 0x02	; 2
     aa2:	0e 94 e5 02 	call	0x5ca	; 0x5ca <display_set>
            break;
     aa6:	d8 c0       	rjmp	.+432    	; 0xc58 <__stack+0x359>
        case 6:
            if (active_config_index == -1)
     aa8:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <active_config_index>
     aac:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <active_config_index+0x1>
     ab0:	8f 3f       	cpi	r24, 0xFF	; 255
     ab2:	2f ef       	ldi	r18, 0xFF	; 255
     ab4:	92 07       	cpc	r25, r18
     ab6:	79 f4       	brne	.+30     	; 0xad6 <__stack+0x1d7>
            {
                display_set("CONFIG", CONFIG_BUFFER[config_hover_index]);
     ab8:	e0 91 36 03 	lds	r30, 0x0336	; 0x800336 <config_hover_index>
     abc:	f0 91 37 03 	lds	r31, 0x0337	; 0x800337 <config_hover_index+0x1>
     ac0:	ee 0f       	add	r30, r30
     ac2:	ff 1f       	adc	r31, r31
     ac4:	e8 5d       	subi	r30, 0xD8	; 216
     ac6:	fe 4f       	sbci	r31, 0xFE	; 254
     ac8:	60 81       	ld	r22, Z
     aca:	71 81       	ldd	r23, Z+1	; 0x01
     acc:	87 e1       	ldi	r24, 0x17	; 23
     ace:	92 e0       	ldi	r25, 0x02	; 2
     ad0:	0e 94 e5 02 	call	0x5ca	; 0x5ca <display_set>
     ad4:	c1 c0       	rjmp	.+386    	; 0xc58 <__stack+0x359>
            }
            else
            {
                switch (active_config_index)
     ad6:	82 30       	cpi	r24, 0x02	; 2
     ad8:	91 05       	cpc	r25, r1
     ada:	09 f4       	brne	.+2      	; 0xade <__stack+0x1df>
     adc:	46 c0       	rjmp	.+140    	; 0xb6a <__stack+0x26b>
     ade:	2c f4       	brge	.+10     	; 0xaea <__stack+0x1eb>
     ae0:	00 97       	sbiw	r24, 0x00	; 0
     ae2:	59 f0       	breq	.+22     	; 0xafa <__stack+0x1fb>
     ae4:	01 97       	sbiw	r24, 0x01	; 1
     ae6:	29 f1       	breq	.+74     	; 0xb32 <__stack+0x233>
     ae8:	aa c0       	rjmp	.+340    	; 0xc3e <__stack+0x33f>
     aea:	83 30       	cpi	r24, 0x03	; 3
     aec:	91 05       	cpc	r25, r1
     aee:	09 f4       	brne	.+2      	; 0xaf2 <__stack+0x1f3>
     af0:	58 c0       	rjmp	.+176    	; 0xba2 <__stack+0x2a3>
     af2:	04 97       	sbiw	r24, 0x04	; 4
     af4:	09 f4       	brne	.+2      	; 0xaf8 <__stack+0x1f9>
     af6:	7c c0       	rjmp	.+248    	; 0xbf0 <__stack+0x2f1>
     af8:	a2 c0       	rjmp	.+324    	; 0xc3e <__stack+0x33f>
                {
                case 0:
                    format_float(buffer, sizeof(buffer), STEP_SIZE_FOR_INCREMENTS, 1, "Units");
     afa:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <STEP_SIZE_FOR_INCREMENTS>
     afe:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <STEP_SIZE_FOR_INCREMENTS+0x1>
     b02:	40 91 10 01 	lds	r20, 0x0110	; 0x800110 <STEP_SIZE_FOR_INCREMENTS+0x2>
     b06:	50 91 11 01 	lds	r21, 0x0111	; 0x800111 <STEP_SIZE_FOR_INCREMENTS+0x3>
     b0a:	0f 2e       	mov	r0, r31
     b0c:	fe e1       	ldi	r31, 0x1E	; 30
     b0e:	ef 2e       	mov	r14, r31
     b10:	f2 e0       	ldi	r31, 0x02	; 2
     b12:	ff 2e       	mov	r15, r31
     b14:	f0 2d       	mov	r31, r0
     b16:	01 e0       	ldi	r16, 0x01	; 1
     b18:	60 e1       	ldi	r22, 0x10	; 16
     b1a:	70 e0       	ldi	r23, 0x00	; 0
     b1c:	8c e3       	ldi	r24, 0x3C	; 60
     b1e:	93 e0       	ldi	r25, 0x03	; 3
     b20:	0e 94 d7 00 	call	0x1ae	; 0x1ae <format_float>
                    display_set("STEP SIZE", buffer);
     b24:	6c e3       	ldi	r22, 0x3C	; 60
     b26:	73 e0       	ldi	r23, 0x03	; 3
     b28:	84 e2       	ldi	r24, 0x24	; 36
     b2a:	92 e0       	ldi	r25, 0x02	; 2
     b2c:	0e 94 e5 02 	call	0x5ca	; 0x5ca <display_set>
                    break;
     b30:	93 c0       	rjmp	.+294    	; 0xc58 <__stack+0x359>
                case 1:
                    format_float(buffer, sizeof(buffer), PUMP_THRESHOLD, 1, "Ltrs");
     b32:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <PUMP_THRESHOLD>
     b36:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <PUMP_THRESHOLD+0x1>
     b3a:	40 91 08 01 	lds	r20, 0x0108	; 0x800108 <PUMP_THRESHOLD+0x2>
     b3e:	50 91 09 01 	lds	r21, 0x0109	; 0x800109 <PUMP_THRESHOLD+0x3>
     b42:	0f 2e       	mov	r0, r31
     b44:	fe e9       	ldi	r31, 0x9E	; 158
     b46:	ef 2e       	mov	r14, r31
     b48:	f1 e0       	ldi	r31, 0x01	; 1
     b4a:	ff 2e       	mov	r15, r31
     b4c:	f0 2d       	mov	r31, r0
     b4e:	01 e0       	ldi	r16, 0x01	; 1
     b50:	60 e1       	ldi	r22, 0x10	; 16
     b52:	70 e0       	ldi	r23, 0x00	; 0
     b54:	8c e3       	ldi	r24, 0x3C	; 60
     b56:	93 e0       	ldi	r25, 0x03	; 3
     b58:	0e 94 d7 00 	call	0x1ae	; 0x1ae <format_float>
                    display_set("PUMP THRESHOLD", buffer);
     b5c:	6c e3       	ldi	r22, 0x3C	; 60
     b5e:	73 e0       	ldi	r23, 0x03	; 3
     b60:	8e e2       	ldi	r24, 0x2E	; 46
     b62:	92 e0       	ldi	r25, 0x02	; 2
     b64:	0e 94 e5 02 	call	0x5ca	; 0x5ca <display_set>
                    break;
     b68:	77 c0       	rjmp	.+238    	; 0xc58 <__stack+0x359>
                case 2:
                    format_float(buffer, sizeof(buffer), SPRAY_THRESHOLD, 1, "degrees");
     b6a:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <SPRAY_THRESHOLD>
     b6e:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <SPRAY_THRESHOLD+0x1>
     b72:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <SPRAY_THRESHOLD+0x2>
     b76:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <SPRAY_THRESHOLD+0x3>
     b7a:	0f 2e       	mov	r0, r31
     b7c:	fa ed       	ldi	r31, 0xDA	; 218
     b7e:	ef 2e       	mov	r14, r31
     b80:	f1 e0       	ldi	r31, 0x01	; 1
     b82:	ff 2e       	mov	r15, r31
     b84:	f0 2d       	mov	r31, r0
     b86:	01 e0       	ldi	r16, 0x01	; 1
     b88:	60 e1       	ldi	r22, 0x10	; 16
     b8a:	70 e0       	ldi	r23, 0x00	; 0
     b8c:	8c e3       	ldi	r24, 0x3C	; 60
     b8e:	93 e0       	ldi	r25, 0x03	; 3
     b90:	0e 94 d7 00 	call	0x1ae	; 0x1ae <format_float>
                    display_set("SPRAY THRESHOLD", buffer);
     b94:	6c e3       	ldi	r22, 0x3C	; 60
     b96:	73 e0       	ldi	r23, 0x03	; 3
     b98:	8d e3       	ldi	r24, 0x3D	; 61
     b9a:	92 e0       	ldi	r25, 0x02	; 2
     b9c:	0e 94 e5 02 	call	0x5ca	; 0x5ca <display_set>
                    break;
     ba0:	5b c0       	rjmp	.+182    	; 0xc58 <__stack+0x359>
                case 3:
                    snprintf(buffer, sizeof(buffer), "%s", ENABLE_TRIGGER_VALUE ? "Enabled" : "Disabled");
     ba2:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <ENABLE_TRIGGER_VALUE>
     ba6:	88 23       	and	r24, r24
     ba8:	19 f0       	breq	.+6      	; 0xbb0 <__stack+0x2b1>
     baa:	8a e6       	ldi	r24, 0x6A	; 106
     bac:	91 e0       	ldi	r25, 0x01	; 1
     bae:	02 c0       	rjmp	.+4      	; 0xbb4 <__stack+0x2b5>
     bb0:	82 e7       	ldi	r24, 0x72	; 114
     bb2:	91 e0       	ldi	r25, 0x01	; 1
     bb4:	9f 93       	push	r25
     bb6:	8f 93       	push	r24
     bb8:	87 e6       	ldi	r24, 0x67	; 103
     bba:	91 e0       	ldi	r25, 0x01	; 1
     bbc:	9f 93       	push	r25
     bbe:	8f 93       	push	r24
     bc0:	1f 92       	push	r1
     bc2:	80 e1       	ldi	r24, 0x10	; 16
     bc4:	8f 93       	push	r24
     bc6:	8c e3       	ldi	r24, 0x3C	; 60
     bc8:	93 e0       	ldi	r25, 0x03	; 3
     bca:	9f 93       	push	r25
     bcc:	8f 93       	push	r24
     bce:	0e 94 1b 0b 	call	0x1636	; 0x1636 <snprintf>
                    display_set("ENABLE TRIGGERS", buffer);
     bd2:	6c e3       	ldi	r22, 0x3C	; 60
     bd4:	73 e0       	ldi	r23, 0x03	; 3
     bd6:	8d e4       	ldi	r24, 0x4D	; 77
     bd8:	92 e0       	ldi	r25, 0x02	; 2
     bda:	0e 94 e5 02 	call	0x5ca	; 0x5ca <display_set>
                    break;
     bde:	8d b7       	in	r24, 0x3d	; 61
     be0:	9e b7       	in	r25, 0x3e	; 62
     be2:	08 96       	adiw	r24, 0x08	; 8
     be4:	0f b6       	in	r0, 0x3f	; 63
     be6:	f8 94       	cli
     be8:	9e bf       	out	0x3e, r25	; 62
     bea:	0f be       	out	0x3f, r0	; 63
     bec:	8d bf       	out	0x3d, r24	; 61
     bee:	34 c0       	rjmp	.+104    	; 0xc58 <__stack+0x359>
                case 4:
                    snprintf(buffer, sizeof(buffer), "%s", ENABLE_ALERT_VALUE ? "Enabled" : "Disabled");
     bf0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     bf4:	88 23       	and	r24, r24
     bf6:	19 f0       	breq	.+6      	; 0xbfe <__stack+0x2ff>
     bf8:	8a e6       	ldi	r24, 0x6A	; 106
     bfa:	91 e0       	ldi	r25, 0x01	; 1
     bfc:	02 c0       	rjmp	.+4      	; 0xc02 <__stack+0x303>
     bfe:	82 e7       	ldi	r24, 0x72	; 114
     c00:	91 e0       	ldi	r25, 0x01	; 1
     c02:	9f 93       	push	r25
     c04:	8f 93       	push	r24
     c06:	87 e6       	ldi	r24, 0x67	; 103
     c08:	91 e0       	ldi	r25, 0x01	; 1
     c0a:	9f 93       	push	r25
     c0c:	8f 93       	push	r24
     c0e:	1f 92       	push	r1
     c10:	80 e1       	ldi	r24, 0x10	; 16
     c12:	8f 93       	push	r24
     c14:	8c e3       	ldi	r24, 0x3C	; 60
     c16:	93 e0       	ldi	r25, 0x03	; 3
     c18:	9f 93       	push	r25
     c1a:	8f 93       	push	r24
     c1c:	0e 94 1b 0b 	call	0x1636	; 0x1636 <snprintf>
                    display_set("ENABLE ALERTS", buffer);
     c20:	6c e3       	ldi	r22, 0x3C	; 60
     c22:	73 e0       	ldi	r23, 0x03	; 3
     c24:	8d e5       	ldi	r24, 0x5D	; 93
     c26:	92 e0       	ldi	r25, 0x02	; 2
     c28:	0e 94 e5 02 	call	0x5ca	; 0x5ca <display_set>
                    break;
     c2c:	8d b7       	in	r24, 0x3d	; 61
     c2e:	9e b7       	in	r25, 0x3e	; 62
     c30:	08 96       	adiw	r24, 0x08	; 8
     c32:	0f b6       	in	r0, 0x3f	; 63
     c34:	f8 94       	cli
     c36:	9e bf       	out	0x3e, r25	; 62
     c38:	0f be       	out	0x3f, r0	; 63
     c3a:	8d bf       	out	0x3d, r24	; 61
     c3c:	0d c0       	rjmp	.+26     	; 0xc58 <__stack+0x359>
                default:
                    display_set("ERROR", "Invalid config");
     c3e:	6b e6       	ldi	r22, 0x6B	; 107
     c40:	72 e0       	ldi	r23, 0x02	; 2
     c42:	88 e0       	ldi	r24, 0x08	; 8
     c44:	92 e0       	ldi	r25, 0x02	; 2
     c46:	0e 94 e5 02 	call	0x5ca	; 0x5ca <display_set>
                    break;
     c4a:	06 c0       	rjmp	.+12     	; 0xc58 <__stack+0x359>
                }
            }
            break;

        default:
            display_set("ERROR", "Invalid menu");
     c4c:	6a e7       	ldi	r22, 0x7A	; 122
     c4e:	72 e0       	ldi	r23, 0x02	; 2
     c50:	88 e0       	ldi	r24, 0x08	; 8
     c52:	92 e0       	ldi	r25, 0x02	; 2
     c54:	0e 94 e5 02 	call	0x5ca	; 0x5ca <display_set>
            break;
        }
    }
}
     c58:	0f 91       	pop	r16
     c5a:	ff 90       	pop	r15
     c5c:	ef 90       	pop	r14
     c5e:	08 95       	ret

00000c60 <ui_process_key_command>:
    process a key command from the keypad and update the UI state
    params: uint8_t key - the key number (1-4)
    returns: void
*/
void ui_process_key_command (uint8_t key) {
    if (key == 1)
     c60:	81 30       	cpi	r24, 0x01	; 1
     c62:	41 f5       	brne	.+80     	; 0xcb4 <ui_process_key_command+0x54>
    {
        if (active_menu_index == -1)
     c64:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <active_menu_index>
     c68:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <active_menu_index+0x1>
     c6c:	01 96       	adiw	r24, 0x01	; 1
     c6e:	09 f4       	brne	.+2      	; 0xc72 <ui_process_key_command+0x12>
     c70:	59 c2       	rjmp	.+1202   	; 0x1124 <ui_process_key_command+0x4c4>
        {
            return;
        }
        else
        {
            if (active_trigger_index != -1)
     c72:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <active_trigger_index>
     c76:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <active_trigger_index+0x1>
     c7a:	01 96       	adiw	r24, 0x01	; 1
     c7c:	39 f0       	breq	.+14     	; 0xc8c <ui_process_key_command+0x2c>
            {
                active_trigger_index = -1;
     c7e:	8f ef       	ldi	r24, 0xFF	; 255
     c80:	9f ef       	ldi	r25, 0xFF	; 255
     c82:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <active_trigger_index+0x1>
     c86:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <active_trigger_index>
     c8a:	08 95       	ret
            }
            else if (active_config_index != -1)
     c8c:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <active_config_index>
     c90:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <active_config_index+0x1>
     c94:	01 96       	adiw	r24, 0x01	; 1
     c96:	39 f0       	breq	.+14     	; 0xca6 <ui_process_key_command+0x46>
            {
                active_config_index = -1;
     c98:	8f ef       	ldi	r24, 0xFF	; 255
     c9a:	9f ef       	ldi	r25, 0xFF	; 255
     c9c:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <active_config_index+0x1>
     ca0:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <active_config_index>
     ca4:	08 95       	ret
            }
            else
            {
                active_menu_index = -1;
     ca6:	8f ef       	ldi	r24, 0xFF	; 255
     ca8:	9f ef       	ldi	r25, 0xFF	; 255
     caa:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <active_menu_index+0x1>
     cae:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <active_menu_index>
     cb2:	08 95       	ret
            }
        }
    }
    else if (key == 2)
     cb4:	82 30       	cpi	r24, 0x02	; 2
     cb6:	09 f0       	breq	.+2      	; 0xcba <ui_process_key_command+0x5a>
     cb8:	fd c0       	rjmp	.+506    	; 0xeb4 <ui_process_key_command+0x254>
    {
        if (active_menu_index == -1)
     cba:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <active_menu_index>
     cbe:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <active_menu_index+0x1>
     cc2:	8f 3f       	cpi	r24, 0xFF	; 255
     cc4:	2f ef       	ldi	r18, 0xFF	; 255
     cc6:	92 07       	cpc	r25, r18
     cc8:	71 f4       	brne	.+28     	; 0xce6 <ui_process_key_command+0x86>
        {
            if (menu_hover_index < 6)
     cca:	80 91 3a 03 	lds	r24, 0x033A	; 0x80033a <menu_hover_index>
     cce:	90 91 3b 03 	lds	r25, 0x033B	; 0x80033b <menu_hover_index+0x1>
     cd2:	86 30       	cpi	r24, 0x06	; 6
     cd4:	91 05       	cpc	r25, r1
     cd6:	0c f0       	brlt	.+2      	; 0xcda <ui_process_key_command+0x7a>
     cd8:	25 c2       	rjmp	.+1098   	; 0x1124 <ui_process_key_command+0x4c4>
                menu_hover_index++; // navigate downwards on the main menu
     cda:	01 96       	adiw	r24, 0x01	; 1
     cdc:	90 93 3b 03 	sts	0x033B, r25	; 0x80033b <menu_hover_index+0x1>
     ce0:	80 93 3a 03 	sts	0x033A, r24	; 0x80033a <menu_hover_index>
     ce4:	08 95       	ret
        }
        else if (active_menu_index == 4) 
     ce6:	84 30       	cpi	r24, 0x04	; 4
     ce8:	91 05       	cpc	r25, r1
     cea:	09 f0       	breq	.+2      	; 0xcee <ui_process_key_command+0x8e>
     cec:	50 c0       	rjmp	.+160    	; 0xd8e <ui_process_key_command+0x12e>
        {
            // user is in the triggers menu
            if (active_trigger_index == -1)
     cee:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <active_trigger_index>
     cf2:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <active_trigger_index+0x1>
     cf6:	8f 3f       	cpi	r24, 0xFF	; 255
     cf8:	2f ef       	ldi	r18, 0xFF	; 255
     cfa:	92 07       	cpc	r25, r18
     cfc:	69 f4       	brne	.+26     	; 0xd18 <ui_process_key_command+0xb8>
            {
                if (trigger_hover_index < (sizeof(TRIGGERS_BUFFER)/sizeof(TRIGGERS_BUFFER[0]) - 1))
     cfe:	80 91 38 03 	lds	r24, 0x0338	; 0x800338 <trigger_hover_index>
     d02:	90 91 39 03 	lds	r25, 0x0339	; 0x800339 <trigger_hover_index+0x1>
     d06:	00 97       	sbiw	r24, 0x00	; 0
     d08:	09 f0       	breq	.+2      	; 0xd0c <ui_process_key_command+0xac>
     d0a:	0c c2       	rjmp	.+1048   	; 0x1124 <ui_process_key_command+0x4c4>
                    trigger_hover_index++; // navigate downwards on the triggers menu
     d0c:	01 96       	adiw	r24, 0x01	; 1
     d0e:	90 93 39 03 	sts	0x0339, r25	; 0x800339 <trigger_hover_index+0x1>
     d12:	80 93 38 03 	sts	0x0338, r24	; 0x800338 <trigger_hover_index>
     d16:	08 95       	ret
            } else {
                switch (active_trigger_index) {
     d18:	00 97       	sbiw	r24, 0x00	; 0
     d1a:	19 f0       	breq	.+6      	; 0xd22 <ui_process_key_command+0xc2>
     d1c:	01 97       	sbiw	r24, 0x01	; 1
     d1e:	e1 f0       	breq	.+56     	; 0xd58 <ui_process_key_command+0xf8>
     d20:	08 95       	ret
                    case 0:
                        // adjust MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER - decrease
                        MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER -= STEP_SIZE_FOR_INCREMENTS;
     d22:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <STEP_SIZE_FOR_INCREMENTS>
     d26:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <STEP_SIZE_FOR_INCREMENTS+0x1>
     d2a:	40 91 10 01 	lds	r20, 0x0110	; 0x800110 <STEP_SIZE_FOR_INCREMENTS+0x2>
     d2e:	50 91 11 01 	lds	r21, 0x0111	; 0x800111 <STEP_SIZE_FOR_INCREMENTS+0x3>
     d32:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER>
     d36:	70 91 17 01 	lds	r23, 0x0117	; 0x800117 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x1>
     d3a:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x2>
     d3e:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x3>
     d42:	0e 94 be 08 	call	0x117c	; 0x117c <__subsf3>
     d46:	60 93 16 01 	sts	0x0116, r22	; 0x800116 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER>
     d4a:	70 93 17 01 	sts	0x0117, r23	; 0x800117 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x1>
     d4e:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x2>
     d52:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x3>
                        break;
     d56:	08 95       	ret
                    case 1:
                        // adjust MAXIMUM_TEMPERATURE_BEFORE_PUMPING - decrease
                        MAXIMUM_TEMPERATURE_BEFORE_PUMPING -= STEP_SIZE_FOR_INCREMENTS;
     d58:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <STEP_SIZE_FOR_INCREMENTS>
     d5c:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <STEP_SIZE_FOR_INCREMENTS+0x1>
     d60:	40 91 10 01 	lds	r20, 0x0110	; 0x800110 <STEP_SIZE_FOR_INCREMENTS+0x2>
     d64:	50 91 11 01 	lds	r21, 0x0111	; 0x800111 <STEP_SIZE_FOR_INCREMENTS+0x3>
     d68:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING>
     d6c:	70 91 13 01 	lds	r23, 0x0113	; 0x800113 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x1>
     d70:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x2>
     d74:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x3>
     d78:	0e 94 be 08 	call	0x117c	; 0x117c <__subsf3>
     d7c:	60 93 12 01 	sts	0x0112, r22	; 0x800112 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING>
     d80:	70 93 13 01 	sts	0x0113, r23	; 0x800113 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x1>
     d84:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x2>
     d88:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x3>
                        break;
     d8c:	08 95       	ret
                    default:
                        break;
                }
            }
        }
        else if (active_menu_index == 5) {
     d8e:	85 30       	cpi	r24, 0x05	; 5
     d90:	91 05       	cpc	r25, r1
     d92:	71 f4       	brne	.+28     	; 0xdb0 <ui_process_key_command+0x150>
            if (message_hover_index < MSG_BUFFER_SIZE - 1)
     d94:	80 91 34 03 	lds	r24, 0x0334	; 0x800334 <__data_end>
     d98:	90 91 35 03 	lds	r25, 0x0335	; 0x800335 <__data_end+0x1>
     d9c:	83 30       	cpi	r24, 0x03	; 3
     d9e:	91 05       	cpc	r25, r1
     da0:	0c f0       	brlt	.+2      	; 0xda4 <ui_process_key_command+0x144>
     da2:	c0 c1       	rjmp	.+896    	; 0x1124 <ui_process_key_command+0x4c4>
                message_hover_index++;
     da4:	01 96       	adiw	r24, 0x01	; 1
     da6:	90 93 35 03 	sts	0x0335, r25	; 0x800335 <__data_end+0x1>
     daa:	80 93 34 03 	sts	0x0334, r24	; 0x800334 <__data_end>
     dae:	08 95       	ret
        }
        else if (active_menu_index == 6)
     db0:	06 97       	sbiw	r24, 0x06	; 6
     db2:	09 f0       	breq	.+2      	; 0xdb6 <ui_process_key_command+0x156>
     db4:	b7 c1       	rjmp	.+878    	; 0x1124 <ui_process_key_command+0x4c4>
        {
            if (active_config_index == -1)
     db6:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <active_config_index>
     dba:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <active_config_index+0x1>
     dbe:	8f 3f       	cpi	r24, 0xFF	; 255
     dc0:	2f ef       	ldi	r18, 0xFF	; 255
     dc2:	92 07       	cpc	r25, r18
     dc4:	71 f4       	brne	.+28     	; 0xde2 <ui_process_key_command+0x182>
            {
                if (config_hover_index < (sizeof(CONFIG_BUFFER)/sizeof(CONFIG_BUFFER[0]) - 1))
     dc6:	80 91 36 03 	lds	r24, 0x0336	; 0x800336 <config_hover_index>
     dca:	90 91 37 03 	lds	r25, 0x0337	; 0x800337 <config_hover_index+0x1>
     dce:	84 30       	cpi	r24, 0x04	; 4
     dd0:	91 05       	cpc	r25, r1
     dd2:	08 f0       	brcs	.+2      	; 0xdd6 <ui_process_key_command+0x176>
     dd4:	a7 c1       	rjmp	.+846    	; 0x1124 <ui_process_key_command+0x4c4>
                    config_hover_index++; // navigate downwards on the config menu
     dd6:	01 96       	adiw	r24, 0x01	; 1
     dd8:	90 93 37 03 	sts	0x0337, r25	; 0x800337 <config_hover_index+0x1>
     ddc:	80 93 36 03 	sts	0x0336, r24	; 0x800336 <config_hover_index>
     de0:	08 95       	ret
            } else {
                switch (active_config_index)
     de2:	82 30       	cpi	r24, 0x02	; 2
     de4:	91 05       	cpc	r25, r1
     de6:	09 f4       	brne	.+2      	; 0xdea <ui_process_key_command+0x18a>
     de8:	44 c0       	rjmp	.+136    	; 0xe72 <ui_process_key_command+0x212>
     dea:	2c f4       	brge	.+10     	; 0xdf6 <ui_process_key_command+0x196>
     dec:	00 97       	sbiw	r24, 0x00	; 0
     dee:	59 f0       	breq	.+22     	; 0xe06 <ui_process_key_command+0x1a6>
     df0:	01 97       	sbiw	r24, 0x01	; 1
     df2:	21 f1       	breq	.+72     	; 0xe3c <ui_process_key_command+0x1dc>
     df4:	08 95       	ret
     df6:	83 30       	cpi	r24, 0x03	; 3
     df8:	91 05       	cpc	r25, r1
     dfa:	09 f4       	brne	.+2      	; 0xdfe <ui_process_key_command+0x19e>
     dfc:	55 c0       	rjmp	.+170    	; 0xea8 <ui_process_key_command+0x248>
     dfe:	04 97       	sbiw	r24, 0x04	; 4
     e00:	09 f4       	brne	.+2      	; 0xe04 <ui_process_key_command+0x1a4>
     e02:	55 c0       	rjmp	.+170    	; 0xeae <ui_process_key_command+0x24e>
     e04:	08 95       	ret
                {
                case 0:
                    // adjust STEP_SIZE_FOR_INCREMENTS - decrease
                    STEP_SIZE_FOR_INCREMENTS -= STEP_INCREMENT;
     e06:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <STEP_INCREMENT>
     e0a:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <STEP_INCREMENT+0x1>
     e0e:	40 91 0c 01 	lds	r20, 0x010C	; 0x80010c <STEP_INCREMENT+0x2>
     e12:	50 91 0d 01 	lds	r21, 0x010D	; 0x80010d <STEP_INCREMENT+0x3>
     e16:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <STEP_SIZE_FOR_INCREMENTS>
     e1a:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <STEP_SIZE_FOR_INCREMENTS+0x1>
     e1e:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <STEP_SIZE_FOR_INCREMENTS+0x2>
     e22:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <STEP_SIZE_FOR_INCREMENTS+0x3>
     e26:	0e 94 be 08 	call	0x117c	; 0x117c <__subsf3>
     e2a:	60 93 0e 01 	sts	0x010E, r22	; 0x80010e <STEP_SIZE_FOR_INCREMENTS>
     e2e:	70 93 0f 01 	sts	0x010F, r23	; 0x80010f <STEP_SIZE_FOR_INCREMENTS+0x1>
     e32:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <STEP_SIZE_FOR_INCREMENTS+0x2>
     e36:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <STEP_SIZE_FOR_INCREMENTS+0x3>
                    break;
     e3a:	08 95       	ret
                case 1:
                    // adjust PUMP_THRESHOLD - decrease
                    PUMP_THRESHOLD -= STEP_SIZE_FOR_INCREMENTS;
     e3c:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <STEP_SIZE_FOR_INCREMENTS>
     e40:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <STEP_SIZE_FOR_INCREMENTS+0x1>
     e44:	40 91 10 01 	lds	r20, 0x0110	; 0x800110 <STEP_SIZE_FOR_INCREMENTS+0x2>
     e48:	50 91 11 01 	lds	r21, 0x0111	; 0x800111 <STEP_SIZE_FOR_INCREMENTS+0x3>
     e4c:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <PUMP_THRESHOLD>
     e50:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <PUMP_THRESHOLD+0x1>
     e54:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <PUMP_THRESHOLD+0x2>
     e58:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <PUMP_THRESHOLD+0x3>
     e5c:	0e 94 be 08 	call	0x117c	; 0x117c <__subsf3>
     e60:	60 93 06 01 	sts	0x0106, r22	; 0x800106 <PUMP_THRESHOLD>
     e64:	70 93 07 01 	sts	0x0107, r23	; 0x800107 <PUMP_THRESHOLD+0x1>
     e68:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <PUMP_THRESHOLD+0x2>
     e6c:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <PUMP_THRESHOLD+0x3>
                    break;
     e70:	08 95       	ret
                case 2:
                    // adjust SPRAY_THRESHOLD - decrease
                    SPRAY_THRESHOLD -= STEP_SIZE_FOR_INCREMENTS;
     e72:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <STEP_SIZE_FOR_INCREMENTS>
     e76:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <STEP_SIZE_FOR_INCREMENTS+0x1>
     e7a:	40 91 10 01 	lds	r20, 0x0110	; 0x800110 <STEP_SIZE_FOR_INCREMENTS+0x2>
     e7e:	50 91 11 01 	lds	r21, 0x0111	; 0x800111 <STEP_SIZE_FOR_INCREMENTS+0x3>
     e82:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <SPRAY_THRESHOLD>
     e86:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <SPRAY_THRESHOLD+0x1>
     e8a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <SPRAY_THRESHOLD+0x2>
     e8e:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <SPRAY_THRESHOLD+0x3>
     e92:	0e 94 be 08 	call	0x117c	; 0x117c <__subsf3>
     e96:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <SPRAY_THRESHOLD>
     e9a:	70 93 03 01 	sts	0x0103, r23	; 0x800103 <SPRAY_THRESHOLD+0x1>
     e9e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <SPRAY_THRESHOLD+0x2>
     ea2:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <SPRAY_THRESHOLD+0x3>
                    break;
     ea6:	08 95       	ret
                case 3:
                    // adjust ENABLE_TRIGGER_VALUE - toggle
                    ENABLE_TRIGGER_VALUE = 0;
     ea8:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <ENABLE_TRIGGER_VALUE>
                    break;
     eac:	08 95       	ret
                case 4:
                    // adjust ENABLE_ALERT_VALUE - toggle
                    ENABLE_ALERT_VALUE = 0;
     eae:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
                    break;
     eb2:	08 95       	ret
                    break;
                }
            }
        }
    }
    else if (key == 3)
     eb4:	83 30       	cpi	r24, 0x03	; 3
     eb6:	09 f0       	breq	.+2      	; 0xeba <ui_process_key_command+0x25a>
     eb8:	00 c1       	rjmp	.+512    	; 0x10ba <ui_process_key_command+0x45a>
    {
        if (active_menu_index == -1)
     eba:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <active_menu_index>
     ebe:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <active_menu_index+0x1>
     ec2:	8f 3f       	cpi	r24, 0xFF	; 255
     ec4:	2f ef       	ldi	r18, 0xFF	; 255
     ec6:	92 07       	cpc	r25, r18
     ec8:	71 f4       	brne	.+28     	; 0xee6 <ui_process_key_command+0x286>
        {
            if (menu_hover_index > 0)
     eca:	80 91 3a 03 	lds	r24, 0x033A	; 0x80033a <menu_hover_index>
     ece:	90 91 3b 03 	lds	r25, 0x033B	; 0x80033b <menu_hover_index+0x1>
     ed2:	18 16       	cp	r1, r24
     ed4:	19 06       	cpc	r1, r25
     ed6:	0c f0       	brlt	.+2      	; 0xeda <ui_process_key_command+0x27a>
     ed8:	25 c1       	rjmp	.+586    	; 0x1124 <ui_process_key_command+0x4c4>
                menu_hover_index--;
     eda:	01 97       	sbiw	r24, 0x01	; 1
     edc:	90 93 3b 03 	sts	0x033B, r25	; 0x80033b <menu_hover_index+0x1>
     ee0:	80 93 3a 03 	sts	0x033A, r24	; 0x80033a <menu_hover_index>
     ee4:	08 95       	ret
        }
        else if (active_menu_index == 4)
     ee6:	84 30       	cpi	r24, 0x04	; 4
     ee8:	91 05       	cpc	r25, r1
     eea:	09 f0       	breq	.+2      	; 0xeee <ui_process_key_command+0x28e>
     eec:	51 c0       	rjmp	.+162    	; 0xf90 <ui_process_key_command+0x330>
        {
            if (active_trigger_index == -1)
     eee:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <active_trigger_index>
     ef2:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <active_trigger_index+0x1>
     ef6:	8f 3f       	cpi	r24, 0xFF	; 255
     ef8:	2f ef       	ldi	r18, 0xFF	; 255
     efa:	92 07       	cpc	r25, r18
     efc:	71 f4       	brne	.+28     	; 0xf1a <ui_process_key_command+0x2ba>
            {
                if (trigger_hover_index > 0)
     efe:	80 91 38 03 	lds	r24, 0x0338	; 0x800338 <trigger_hover_index>
     f02:	90 91 39 03 	lds	r25, 0x0339	; 0x800339 <trigger_hover_index+0x1>
     f06:	18 16       	cp	r1, r24
     f08:	19 06       	cpc	r1, r25
     f0a:	0c f0       	brlt	.+2      	; 0xf0e <ui_process_key_command+0x2ae>
     f0c:	0b c1       	rjmp	.+534    	; 0x1124 <ui_process_key_command+0x4c4>
                    trigger_hover_index--;
     f0e:	01 97       	sbiw	r24, 0x01	; 1
     f10:	90 93 39 03 	sts	0x0339, r25	; 0x800339 <trigger_hover_index+0x1>
     f14:	80 93 38 03 	sts	0x0338, r24	; 0x800338 <trigger_hover_index>
     f18:	08 95       	ret
            } else {
                switch (active_trigger_index) {
     f1a:	00 97       	sbiw	r24, 0x00	; 0
     f1c:	19 f0       	breq	.+6      	; 0xf24 <ui_process_key_command+0x2c4>
     f1e:	01 97       	sbiw	r24, 0x01	; 1
     f20:	e1 f0       	breq	.+56     	; 0xf5a <ui_process_key_command+0x2fa>
     f22:	08 95       	ret
                    case 0:
                        // adjust MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER - decrease
                        MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER += STEP_SIZE_FOR_INCREMENTS;
     f24:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <STEP_SIZE_FOR_INCREMENTS>
     f28:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <STEP_SIZE_FOR_INCREMENTS+0x1>
     f2c:	40 91 10 01 	lds	r20, 0x0110	; 0x800110 <STEP_SIZE_FOR_INCREMENTS+0x2>
     f30:	50 91 11 01 	lds	r21, 0x0111	; 0x800111 <STEP_SIZE_FOR_INCREMENTS+0x3>
     f34:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER>
     f38:	70 91 17 01 	lds	r23, 0x0117	; 0x800117 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x1>
     f3c:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x2>
     f40:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x3>
     f44:	0e 94 bf 08 	call	0x117e	; 0x117e <__addsf3>
     f48:	60 93 16 01 	sts	0x0116, r22	; 0x800116 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER>
     f4c:	70 93 17 01 	sts	0x0117, r23	; 0x800117 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x1>
     f50:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x2>
     f54:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x3>
                        break;
     f58:	08 95       	ret
                    case 1:
                        // adjust MAXIMUM_TEMPERATURE_BEFORE_PUMPING - decrease
                        MAXIMUM_TEMPERATURE_BEFORE_PUMPING += STEP_SIZE_FOR_INCREMENTS;
     f5a:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <STEP_SIZE_FOR_INCREMENTS>
     f5e:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <STEP_SIZE_FOR_INCREMENTS+0x1>
     f62:	40 91 10 01 	lds	r20, 0x0110	; 0x800110 <STEP_SIZE_FOR_INCREMENTS+0x2>
     f66:	50 91 11 01 	lds	r21, 0x0111	; 0x800111 <STEP_SIZE_FOR_INCREMENTS+0x3>
     f6a:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING>
     f6e:	70 91 13 01 	lds	r23, 0x0113	; 0x800113 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x1>
     f72:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x2>
     f76:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x3>
     f7a:	0e 94 bf 08 	call	0x117e	; 0x117e <__addsf3>
     f7e:	60 93 12 01 	sts	0x0112, r22	; 0x800112 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING>
     f82:	70 93 13 01 	sts	0x0113, r23	; 0x800113 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x1>
     f86:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x2>
     f8a:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x3>
                        break;
     f8e:	08 95       	ret
                    default:
                        break;
                }
            }
        } 
        else if (active_menu_index == 5) {
     f90:	85 30       	cpi	r24, 0x05	; 5
     f92:	91 05       	cpc	r25, r1
     f94:	71 f4       	brne	.+28     	; 0xfb2 <ui_process_key_command+0x352>
            if (message_hover_index > 0)
     f96:	80 91 34 03 	lds	r24, 0x0334	; 0x800334 <__data_end>
     f9a:	90 91 35 03 	lds	r25, 0x0335	; 0x800335 <__data_end+0x1>
     f9e:	18 16       	cp	r1, r24
     fa0:	19 06       	cpc	r1, r25
     fa2:	0c f0       	brlt	.+2      	; 0xfa6 <ui_process_key_command+0x346>
     fa4:	bf c0       	rjmp	.+382    	; 0x1124 <ui_process_key_command+0x4c4>
                message_hover_index--;
     fa6:	01 97       	sbiw	r24, 0x01	; 1
     fa8:	90 93 35 03 	sts	0x0335, r25	; 0x800335 <__data_end+0x1>
     fac:	80 93 34 03 	sts	0x0334, r24	; 0x800334 <__data_end>
     fb0:	08 95       	ret
        }
        else if (active_menu_index == 6)
     fb2:	06 97       	sbiw	r24, 0x06	; 6
     fb4:	09 f0       	breq	.+2      	; 0xfb8 <ui_process_key_command+0x358>
     fb6:	b6 c0       	rjmp	.+364    	; 0x1124 <ui_process_key_command+0x4c4>
        {
            if (active_config_index == -1)
     fb8:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <active_config_index>
     fbc:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <active_config_index+0x1>
     fc0:	8f 3f       	cpi	r24, 0xFF	; 255
     fc2:	2f ef       	ldi	r18, 0xFF	; 255
     fc4:	92 07       	cpc	r25, r18
     fc6:	71 f4       	brne	.+28     	; 0xfe4 <ui_process_key_command+0x384>
            {
                if (config_hover_index > 0)
     fc8:	80 91 36 03 	lds	r24, 0x0336	; 0x800336 <config_hover_index>
     fcc:	90 91 37 03 	lds	r25, 0x0337	; 0x800337 <config_hover_index+0x1>
     fd0:	18 16       	cp	r1, r24
     fd2:	19 06       	cpc	r1, r25
     fd4:	0c f0       	brlt	.+2      	; 0xfd8 <ui_process_key_command+0x378>
     fd6:	a6 c0       	rjmp	.+332    	; 0x1124 <ui_process_key_command+0x4c4>
                    config_hover_index--;
     fd8:	01 97       	sbiw	r24, 0x01	; 1
     fda:	90 93 37 03 	sts	0x0337, r25	; 0x800337 <config_hover_index+0x1>
     fde:	80 93 36 03 	sts	0x0336, r24	; 0x800336 <config_hover_index>
     fe2:	08 95       	ret
            } else {
            switch (active_config_index)
     fe4:	82 30       	cpi	r24, 0x02	; 2
     fe6:	91 05       	cpc	r25, r1
     fe8:	09 f4       	brne	.+2      	; 0xfec <ui_process_key_command+0x38c>
     fea:	44 c0       	rjmp	.+136    	; 0x1074 <ui_process_key_command+0x414>
     fec:	2c f4       	brge	.+10     	; 0xff8 <ui_process_key_command+0x398>
     fee:	00 97       	sbiw	r24, 0x00	; 0
     ff0:	59 f0       	breq	.+22     	; 0x1008 <ui_process_key_command+0x3a8>
     ff2:	01 97       	sbiw	r24, 0x01	; 1
     ff4:	21 f1       	breq	.+72     	; 0x103e <ui_process_key_command+0x3de>
     ff6:	08 95       	ret
     ff8:	83 30       	cpi	r24, 0x03	; 3
     ffa:	91 05       	cpc	r25, r1
     ffc:	09 f4       	brne	.+2      	; 0x1000 <ui_process_key_command+0x3a0>
     ffe:	55 c0       	rjmp	.+170    	; 0x10aa <ui_process_key_command+0x44a>
    1000:	04 97       	sbiw	r24, 0x04	; 4
    1002:	09 f4       	brne	.+2      	; 0x1006 <ui_process_key_command+0x3a6>
    1004:	56 c0       	rjmp	.+172    	; 0x10b2 <ui_process_key_command+0x452>
    1006:	08 95       	ret
                {
                case 0:
                    // adjust STEP_SIZE_FOR_INCREMENTS - decrease
                    STEP_SIZE_FOR_INCREMENTS += STEP_INCREMENT;
    1008:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <STEP_INCREMENT>
    100c:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <STEP_INCREMENT+0x1>
    1010:	40 91 0c 01 	lds	r20, 0x010C	; 0x80010c <STEP_INCREMENT+0x2>
    1014:	50 91 0d 01 	lds	r21, 0x010D	; 0x80010d <STEP_INCREMENT+0x3>
    1018:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <STEP_SIZE_FOR_INCREMENTS>
    101c:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <STEP_SIZE_FOR_INCREMENTS+0x1>
    1020:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <STEP_SIZE_FOR_INCREMENTS+0x2>
    1024:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <STEP_SIZE_FOR_INCREMENTS+0x3>
    1028:	0e 94 bf 08 	call	0x117e	; 0x117e <__addsf3>
    102c:	60 93 0e 01 	sts	0x010E, r22	; 0x80010e <STEP_SIZE_FOR_INCREMENTS>
    1030:	70 93 0f 01 	sts	0x010F, r23	; 0x80010f <STEP_SIZE_FOR_INCREMENTS+0x1>
    1034:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <STEP_SIZE_FOR_INCREMENTS+0x2>
    1038:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <STEP_SIZE_FOR_INCREMENTS+0x3>
                    break;
    103c:	08 95       	ret
                case 1:
                    // adjust PUMP_THRESHOLD - decrease
                    PUMP_THRESHOLD += STEP_SIZE_FOR_INCREMENTS;
    103e:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <STEP_SIZE_FOR_INCREMENTS>
    1042:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <STEP_SIZE_FOR_INCREMENTS+0x1>
    1046:	40 91 10 01 	lds	r20, 0x0110	; 0x800110 <STEP_SIZE_FOR_INCREMENTS+0x2>
    104a:	50 91 11 01 	lds	r21, 0x0111	; 0x800111 <STEP_SIZE_FOR_INCREMENTS+0x3>
    104e:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <PUMP_THRESHOLD>
    1052:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <PUMP_THRESHOLD+0x1>
    1056:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <PUMP_THRESHOLD+0x2>
    105a:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <PUMP_THRESHOLD+0x3>
    105e:	0e 94 bf 08 	call	0x117e	; 0x117e <__addsf3>
    1062:	60 93 06 01 	sts	0x0106, r22	; 0x800106 <PUMP_THRESHOLD>
    1066:	70 93 07 01 	sts	0x0107, r23	; 0x800107 <PUMP_THRESHOLD+0x1>
    106a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <PUMP_THRESHOLD+0x2>
    106e:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <PUMP_THRESHOLD+0x3>
                    break;
    1072:	08 95       	ret
                case 2:
                    // adjust SPRAY_THRESHOLD - decrease
                    SPRAY_THRESHOLD += STEP_SIZE_FOR_INCREMENTS;
    1074:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <STEP_SIZE_FOR_INCREMENTS>
    1078:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <STEP_SIZE_FOR_INCREMENTS+0x1>
    107c:	40 91 10 01 	lds	r20, 0x0110	; 0x800110 <STEP_SIZE_FOR_INCREMENTS+0x2>
    1080:	50 91 11 01 	lds	r21, 0x0111	; 0x800111 <STEP_SIZE_FOR_INCREMENTS+0x3>
    1084:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <SPRAY_THRESHOLD>
    1088:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <SPRAY_THRESHOLD+0x1>
    108c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <SPRAY_THRESHOLD+0x2>
    1090:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <SPRAY_THRESHOLD+0x3>
    1094:	0e 94 bf 08 	call	0x117e	; 0x117e <__addsf3>
    1098:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <SPRAY_THRESHOLD>
    109c:	70 93 03 01 	sts	0x0103, r23	; 0x800103 <SPRAY_THRESHOLD+0x1>
    10a0:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <SPRAY_THRESHOLD+0x2>
    10a4:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <SPRAY_THRESHOLD+0x3>
                    break;
    10a8:	08 95       	ret
                case 3:
                    // adjust ENABLE_TRIGGER_VALUE - toggle
                    ENABLE_TRIGGER_VALUE = 1;
    10aa:	81 e0       	ldi	r24, 0x01	; 1
    10ac:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <ENABLE_TRIGGER_VALUE>
                    break;
    10b0:	08 95       	ret
                case 4:
                    // adjust ENABLE_ALERT_VALUE - toggle
                    ENABLE_ALERT_VALUE = 1;
    10b2:	81 e0       	ldi	r24, 0x01	; 1
    10b4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
                    break;
    10b8:	08 95       	ret
                    break;
                }
            }
        }
    }
    else if (key == 4)
    10ba:	84 30       	cpi	r24, 0x04	; 4
    10bc:	99 f5       	brne	.+102    	; 0x1124 <ui_process_key_command+0x4c4>
    {
        if (active_menu_index == -1)
    10be:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <active_menu_index>
    10c2:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <active_menu_index+0x1>
    10c6:	8f 3f       	cpi	r24, 0xFF	; 255
    10c8:	2f ef       	ldi	r18, 0xFF	; 255
    10ca:	92 07       	cpc	r25, r18
    10cc:	49 f4       	brne	.+18     	; 0x10e0 <ui_process_key_command+0x480>
        {
            active_menu_index = menu_hover_index;
    10ce:	80 91 3a 03 	lds	r24, 0x033A	; 0x80033a <menu_hover_index>
    10d2:	90 91 3b 03 	lds	r25, 0x033B	; 0x80033b <menu_hover_index+0x1>
    10d6:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <active_menu_index+0x1>
    10da:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <active_menu_index>
    10de:	08 95       	ret
        }
        else if (active_menu_index == 4)
    10e0:	84 30       	cpi	r24, 0x04	; 4
    10e2:	91 05       	cpc	r25, r1
    10e4:	79 f4       	brne	.+30     	; 0x1104 <ui_process_key_command+0x4a4>
        {
            if (active_trigger_index == -1)
    10e6:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <active_trigger_index>
    10ea:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <active_trigger_index+0x1>
    10ee:	01 96       	adiw	r24, 0x01	; 1
    10f0:	c9 f4       	brne	.+50     	; 0x1124 <ui_process_key_command+0x4c4>
            {
                active_trigger_index = trigger_hover_index;
    10f2:	80 91 38 03 	lds	r24, 0x0338	; 0x800338 <trigger_hover_index>
    10f6:	90 91 39 03 	lds	r25, 0x0339	; 0x800339 <trigger_hover_index+0x1>
    10fa:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <active_trigger_index+0x1>
    10fe:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <active_trigger_index>
    1102:	08 95       	ret
            }
        }
        else if (active_menu_index == 6)
    1104:	06 97       	sbiw	r24, 0x06	; 6
    1106:	71 f4       	brne	.+28     	; 0x1124 <ui_process_key_command+0x4c4>
        {
            if (active_config_index == -1)
    1108:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <active_config_index>
    110c:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <active_config_index+0x1>
    1110:	01 96       	adiw	r24, 0x01	; 1
    1112:	41 f4       	brne	.+16     	; 0x1124 <ui_process_key_command+0x4c4>
            {
                active_config_index = config_hover_index;
    1114:	80 91 36 03 	lds	r24, 0x0336	; 0x800336 <config_hover_index>
    1118:	90 91 37 03 	lds	r25, 0x0337	; 0x800337 <config_hover_index+0x1>
    111c:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <active_config_index+0x1>
    1120:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <active_config_index>
    1124:	08 95       	ret

00001126 <main>:



int main(void)
{
    LCD_1602A_init();
    1126:	0e 94 a1 01 	call	0x342	; 0x342 <LCD_1602A_init>
    HCSR04_init();
    112a:	0e 94 88 02 	call	0x510	; 0x510 <HCSR04_init>
    KEYPAD_init();
    112e:	0e 94 cc 02 	call	0x598	; 0x598 <KEYPAD_init>

    uint8_t pressed_key;

    while (1)
    {
        ui_show_display();
    1132:	0e 94 50 04 	call	0x8a0	; 0x8a0 <ui_show_display>
    1136:	2f ef       	ldi	r18, 0xFF	; 255
    1138:	89 ef       	ldi	r24, 0xF9	; 249
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	21 50       	subi	r18, 0x01	; 1
    113e:	80 40       	sbci	r24, 0x00	; 0
    1140:	90 40       	sbci	r25, 0x00	; 0
    1142:	e1 f7       	brne	.-8      	; 0x113c <main+0x16>
    1144:	00 c0       	rjmp	.+0      	; 0x1146 <main+0x20>
    1146:	00 00       	nop
        _delay_ms(20);

        while ((pressed_key = KEYPAD_read()) == KEYPAD_NO_KEY);
    1148:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <KEYPAD_read>
    114c:	c8 2f       	mov	r28, r24
    114e:	85 30       	cpi	r24, 0x05	; 5
    1150:	d9 f3       	breq	.-10     	; 0x1148 <main+0x22>
    1152:	2f ef       	ldi	r18, 0xFF	; 255
    1154:	89 ef       	ldi	r24, 0xF9	; 249
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	21 50       	subi	r18, 0x01	; 1
    115a:	80 40       	sbci	r24, 0x00	; 0
    115c:	90 40       	sbci	r25, 0x00	; 0
    115e:	e1 f7       	brne	.-8      	; 0x1158 <main+0x32>
    1160:	00 c0       	rjmp	.+0      	; 0x1162 <main+0x3c>
    1162:	00 00       	nop
        _delay_ms(20);
        if (KEYPAD_read() == pressed_key)
    1164:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <KEYPAD_read>
    1168:	c8 13       	cpse	r28, r24
    116a:	e3 cf       	rjmp	.-58     	; 0x1132 <main+0xc>
        {
            ui_process_key_command(pressed_key);
    116c:	8c 2f       	mov	r24, r28
    116e:	0e 94 30 06 	call	0xc60	; 0xc60 <ui_process_key_command>
            while (KEYPAD_read() != KEYPAD_NO_KEY); // wait until the key is released
    1172:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <KEYPAD_read>
    1176:	85 30       	cpi	r24, 0x05	; 5
    1178:	e1 f7       	brne	.-8      	; 0x1172 <main+0x4c>
    117a:	db cf       	rjmp	.-74     	; 0x1132 <main+0xc>

0000117c <__subsf3>:
    117c:	50 58       	subi	r21, 0x80	; 128

0000117e <__addsf3>:
    117e:	bb 27       	eor	r27, r27
    1180:	aa 27       	eor	r26, r26
    1182:	0e 94 d6 08 	call	0x11ac	; 0x11ac <__addsf3x>
    1186:	0c 94 49 0a 	jmp	0x1492	; 0x1492 <__fp_round>
    118a:	0e 94 3b 0a 	call	0x1476	; 0x1476 <__fp_pscA>
    118e:	38 f0       	brcs	.+14     	; 0x119e <__addsf3+0x20>
    1190:	0e 94 42 0a 	call	0x1484	; 0x1484 <__fp_pscB>
    1194:	20 f0       	brcs	.+8      	; 0x119e <__addsf3+0x20>
    1196:	39 f4       	brne	.+14     	; 0x11a6 <__addsf3+0x28>
    1198:	9f 3f       	cpi	r25, 0xFF	; 255
    119a:	19 f4       	brne	.+6      	; 0x11a2 <__addsf3+0x24>
    119c:	26 f4       	brtc	.+8      	; 0x11a6 <__addsf3+0x28>
    119e:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__fp_nan>
    11a2:	0e f4       	brtc	.+2      	; 0x11a6 <__addsf3+0x28>
    11a4:	e0 95       	com	r30
    11a6:	e7 fb       	bst	r30, 7
    11a8:	0c 94 32 0a 	jmp	0x1464	; 0x1464 <__fp_inf>

000011ac <__addsf3x>:
    11ac:	e9 2f       	mov	r30, r25
    11ae:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <__fp_split3>
    11b2:	58 f3       	brcs	.-42     	; 0x118a <__addsf3+0xc>
    11b4:	ba 17       	cp	r27, r26
    11b6:	62 07       	cpc	r22, r18
    11b8:	73 07       	cpc	r23, r19
    11ba:	84 07       	cpc	r24, r20
    11bc:	95 07       	cpc	r25, r21
    11be:	20 f0       	brcs	.+8      	; 0x11c8 <__addsf3x+0x1c>
    11c0:	79 f4       	brne	.+30     	; 0x11e0 <__addsf3x+0x34>
    11c2:	a6 f5       	brtc	.+104    	; 0x122c <__addsf3x+0x80>
    11c4:	0c 94 7c 0a 	jmp	0x14f8	; 0x14f8 <__fp_zero>
    11c8:	0e f4       	brtc	.+2      	; 0x11cc <__addsf3x+0x20>
    11ca:	e0 95       	com	r30
    11cc:	0b 2e       	mov	r0, r27
    11ce:	ba 2f       	mov	r27, r26
    11d0:	a0 2d       	mov	r26, r0
    11d2:	0b 01       	movw	r0, r22
    11d4:	b9 01       	movw	r22, r18
    11d6:	90 01       	movw	r18, r0
    11d8:	0c 01       	movw	r0, r24
    11da:	ca 01       	movw	r24, r20
    11dc:	a0 01       	movw	r20, r0
    11de:	11 24       	eor	r1, r1
    11e0:	ff 27       	eor	r31, r31
    11e2:	59 1b       	sub	r21, r25
    11e4:	99 f0       	breq	.+38     	; 0x120c <__addsf3x+0x60>
    11e6:	59 3f       	cpi	r21, 0xF9	; 249
    11e8:	50 f4       	brcc	.+20     	; 0x11fe <__addsf3x+0x52>
    11ea:	50 3e       	cpi	r21, 0xE0	; 224
    11ec:	68 f1       	brcs	.+90     	; 0x1248 <__addsf3x+0x9c>
    11ee:	1a 16       	cp	r1, r26
    11f0:	f0 40       	sbci	r31, 0x00	; 0
    11f2:	a2 2f       	mov	r26, r18
    11f4:	23 2f       	mov	r18, r19
    11f6:	34 2f       	mov	r19, r20
    11f8:	44 27       	eor	r20, r20
    11fa:	58 5f       	subi	r21, 0xF8	; 248
    11fc:	f3 cf       	rjmp	.-26     	; 0x11e4 <__addsf3x+0x38>
    11fe:	46 95       	lsr	r20
    1200:	37 95       	ror	r19
    1202:	27 95       	ror	r18
    1204:	a7 95       	ror	r26
    1206:	f0 40       	sbci	r31, 0x00	; 0
    1208:	53 95       	inc	r21
    120a:	c9 f7       	brne	.-14     	; 0x11fe <__addsf3x+0x52>
    120c:	7e f4       	brtc	.+30     	; 0x122c <__addsf3x+0x80>
    120e:	1f 16       	cp	r1, r31
    1210:	ba 0b       	sbc	r27, r26
    1212:	62 0b       	sbc	r22, r18
    1214:	73 0b       	sbc	r23, r19
    1216:	84 0b       	sbc	r24, r20
    1218:	ba f0       	brmi	.+46     	; 0x1248 <__addsf3x+0x9c>
    121a:	91 50       	subi	r25, 0x01	; 1
    121c:	a1 f0       	breq	.+40     	; 0x1246 <__addsf3x+0x9a>
    121e:	ff 0f       	add	r31, r31
    1220:	bb 1f       	adc	r27, r27
    1222:	66 1f       	adc	r22, r22
    1224:	77 1f       	adc	r23, r23
    1226:	88 1f       	adc	r24, r24
    1228:	c2 f7       	brpl	.-16     	; 0x121a <__addsf3x+0x6e>
    122a:	0e c0       	rjmp	.+28     	; 0x1248 <__addsf3x+0x9c>
    122c:	ba 0f       	add	r27, r26
    122e:	62 1f       	adc	r22, r18
    1230:	73 1f       	adc	r23, r19
    1232:	84 1f       	adc	r24, r20
    1234:	48 f4       	brcc	.+18     	; 0x1248 <__addsf3x+0x9c>
    1236:	87 95       	ror	r24
    1238:	77 95       	ror	r23
    123a:	67 95       	ror	r22
    123c:	b7 95       	ror	r27
    123e:	f7 95       	ror	r31
    1240:	9e 3f       	cpi	r25, 0xFE	; 254
    1242:	08 f0       	brcs	.+2      	; 0x1246 <__addsf3x+0x9a>
    1244:	b0 cf       	rjmp	.-160    	; 0x11a6 <__addsf3+0x28>
    1246:	93 95       	inc	r25
    1248:	88 0f       	add	r24, r24
    124a:	08 f0       	brcs	.+2      	; 0x124e <__addsf3x+0xa2>
    124c:	99 27       	eor	r25, r25
    124e:	ee 0f       	add	r30, r30
    1250:	97 95       	ror	r25
    1252:	87 95       	ror	r24
    1254:	08 95       	ret

00001256 <__cmpsf2>:
    1256:	0e 94 0e 0a 	call	0x141c	; 0x141c <__fp_cmp>
    125a:	08 f4       	brcc	.+2      	; 0x125e <__cmpsf2+0x8>
    125c:	81 e0       	ldi	r24, 0x01	; 1
    125e:	08 95       	ret

00001260 <__divsf3>:
    1260:	0e 94 44 09 	call	0x1288	; 0x1288 <__divsf3x>
    1264:	0c 94 49 0a 	jmp	0x1492	; 0x1492 <__fp_round>
    1268:	0e 94 42 0a 	call	0x1484	; 0x1484 <__fp_pscB>
    126c:	58 f0       	brcs	.+22     	; 0x1284 <__divsf3+0x24>
    126e:	0e 94 3b 0a 	call	0x1476	; 0x1476 <__fp_pscA>
    1272:	40 f0       	brcs	.+16     	; 0x1284 <__divsf3+0x24>
    1274:	29 f4       	brne	.+10     	; 0x1280 <__divsf3+0x20>
    1276:	5f 3f       	cpi	r21, 0xFF	; 255
    1278:	29 f0       	breq	.+10     	; 0x1284 <__divsf3+0x24>
    127a:	0c 94 32 0a 	jmp	0x1464	; 0x1464 <__fp_inf>
    127e:	51 11       	cpse	r21, r1
    1280:	0c 94 7d 0a 	jmp	0x14fa	; 0x14fa <__fp_szero>
    1284:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__fp_nan>

00001288 <__divsf3x>:
    1288:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <__fp_split3>
    128c:	68 f3       	brcs	.-38     	; 0x1268 <__divsf3+0x8>

0000128e <__divsf3_pse>:
    128e:	99 23       	and	r25, r25
    1290:	b1 f3       	breq	.-20     	; 0x127e <__divsf3+0x1e>
    1292:	55 23       	and	r21, r21
    1294:	91 f3       	breq	.-28     	; 0x127a <__divsf3+0x1a>
    1296:	95 1b       	sub	r25, r21
    1298:	55 0b       	sbc	r21, r21
    129a:	bb 27       	eor	r27, r27
    129c:	aa 27       	eor	r26, r26
    129e:	62 17       	cp	r22, r18
    12a0:	73 07       	cpc	r23, r19
    12a2:	84 07       	cpc	r24, r20
    12a4:	38 f0       	brcs	.+14     	; 0x12b4 <__divsf3_pse+0x26>
    12a6:	9f 5f       	subi	r25, 0xFF	; 255
    12a8:	5f 4f       	sbci	r21, 0xFF	; 255
    12aa:	22 0f       	add	r18, r18
    12ac:	33 1f       	adc	r19, r19
    12ae:	44 1f       	adc	r20, r20
    12b0:	aa 1f       	adc	r26, r26
    12b2:	a9 f3       	breq	.-22     	; 0x129e <__divsf3_pse+0x10>
    12b4:	35 d0       	rcall	.+106    	; 0x1320 <__divsf3_pse+0x92>
    12b6:	0e 2e       	mov	r0, r30
    12b8:	3a f0       	brmi	.+14     	; 0x12c8 <__divsf3_pse+0x3a>
    12ba:	e0 e8       	ldi	r30, 0x80	; 128
    12bc:	32 d0       	rcall	.+100    	; 0x1322 <__divsf3_pse+0x94>
    12be:	91 50       	subi	r25, 0x01	; 1
    12c0:	50 40       	sbci	r21, 0x00	; 0
    12c2:	e6 95       	lsr	r30
    12c4:	00 1c       	adc	r0, r0
    12c6:	ca f7       	brpl	.-14     	; 0x12ba <__divsf3_pse+0x2c>
    12c8:	2b d0       	rcall	.+86     	; 0x1320 <__divsf3_pse+0x92>
    12ca:	fe 2f       	mov	r31, r30
    12cc:	29 d0       	rcall	.+82     	; 0x1320 <__divsf3_pse+0x92>
    12ce:	66 0f       	add	r22, r22
    12d0:	77 1f       	adc	r23, r23
    12d2:	88 1f       	adc	r24, r24
    12d4:	bb 1f       	adc	r27, r27
    12d6:	26 17       	cp	r18, r22
    12d8:	37 07       	cpc	r19, r23
    12da:	48 07       	cpc	r20, r24
    12dc:	ab 07       	cpc	r26, r27
    12de:	b0 e8       	ldi	r27, 0x80	; 128
    12e0:	09 f0       	breq	.+2      	; 0x12e4 <__divsf3_pse+0x56>
    12e2:	bb 0b       	sbc	r27, r27
    12e4:	80 2d       	mov	r24, r0
    12e6:	bf 01       	movw	r22, r30
    12e8:	ff 27       	eor	r31, r31
    12ea:	93 58       	subi	r25, 0x83	; 131
    12ec:	5f 4f       	sbci	r21, 0xFF	; 255
    12ee:	3a f0       	brmi	.+14     	; 0x12fe <__divsf3_pse+0x70>
    12f0:	9e 3f       	cpi	r25, 0xFE	; 254
    12f2:	51 05       	cpc	r21, r1
    12f4:	78 f0       	brcs	.+30     	; 0x1314 <__divsf3_pse+0x86>
    12f6:	0c 94 32 0a 	jmp	0x1464	; 0x1464 <__fp_inf>
    12fa:	0c 94 7d 0a 	jmp	0x14fa	; 0x14fa <__fp_szero>
    12fe:	5f 3f       	cpi	r21, 0xFF	; 255
    1300:	e4 f3       	brlt	.-8      	; 0x12fa <__divsf3_pse+0x6c>
    1302:	98 3e       	cpi	r25, 0xE8	; 232
    1304:	d4 f3       	brlt	.-12     	; 0x12fa <__divsf3_pse+0x6c>
    1306:	86 95       	lsr	r24
    1308:	77 95       	ror	r23
    130a:	67 95       	ror	r22
    130c:	b7 95       	ror	r27
    130e:	f7 95       	ror	r31
    1310:	9f 5f       	subi	r25, 0xFF	; 255
    1312:	c9 f7       	brne	.-14     	; 0x1306 <__divsf3_pse+0x78>
    1314:	88 0f       	add	r24, r24
    1316:	91 1d       	adc	r25, r1
    1318:	96 95       	lsr	r25
    131a:	87 95       	ror	r24
    131c:	97 f9       	bld	r25, 7
    131e:	08 95       	ret
    1320:	e1 e0       	ldi	r30, 0x01	; 1
    1322:	66 0f       	add	r22, r22
    1324:	77 1f       	adc	r23, r23
    1326:	88 1f       	adc	r24, r24
    1328:	bb 1f       	adc	r27, r27
    132a:	62 17       	cp	r22, r18
    132c:	73 07       	cpc	r23, r19
    132e:	84 07       	cpc	r24, r20
    1330:	ba 07       	cpc	r27, r26
    1332:	20 f0       	brcs	.+8      	; 0x133c <__divsf3_pse+0xae>
    1334:	62 1b       	sub	r22, r18
    1336:	73 0b       	sbc	r23, r19
    1338:	84 0b       	sbc	r24, r20
    133a:	ba 0b       	sbc	r27, r26
    133c:	ee 1f       	adc	r30, r30
    133e:	88 f7       	brcc	.-30     	; 0x1322 <__divsf3_pse+0x94>
    1340:	e0 95       	com	r30
    1342:	08 95       	ret

00001344 <__fixunssfsi>:
    1344:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <__fp_splitA>
    1348:	88 f0       	brcs	.+34     	; 0x136c <__fixunssfsi+0x28>
    134a:	9f 57       	subi	r25, 0x7F	; 127
    134c:	98 f0       	brcs	.+38     	; 0x1374 <__fixunssfsi+0x30>
    134e:	b9 2f       	mov	r27, r25
    1350:	99 27       	eor	r25, r25
    1352:	b7 51       	subi	r27, 0x17	; 23
    1354:	b0 f0       	brcs	.+44     	; 0x1382 <__fixunssfsi+0x3e>
    1356:	e1 f0       	breq	.+56     	; 0x1390 <__fixunssfsi+0x4c>
    1358:	66 0f       	add	r22, r22
    135a:	77 1f       	adc	r23, r23
    135c:	88 1f       	adc	r24, r24
    135e:	99 1f       	adc	r25, r25
    1360:	1a f0       	brmi	.+6      	; 0x1368 <__fixunssfsi+0x24>
    1362:	ba 95       	dec	r27
    1364:	c9 f7       	brne	.-14     	; 0x1358 <__fixunssfsi+0x14>
    1366:	14 c0       	rjmp	.+40     	; 0x1390 <__fixunssfsi+0x4c>
    1368:	b1 30       	cpi	r27, 0x01	; 1
    136a:	91 f0       	breq	.+36     	; 0x1390 <__fixunssfsi+0x4c>
    136c:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <__fp_zero>
    1370:	b1 e0       	ldi	r27, 0x01	; 1
    1372:	08 95       	ret
    1374:	0c 94 7c 0a 	jmp	0x14f8	; 0x14f8 <__fp_zero>
    1378:	67 2f       	mov	r22, r23
    137a:	78 2f       	mov	r23, r24
    137c:	88 27       	eor	r24, r24
    137e:	b8 5f       	subi	r27, 0xF8	; 248
    1380:	39 f0       	breq	.+14     	; 0x1390 <__fixunssfsi+0x4c>
    1382:	b9 3f       	cpi	r27, 0xF9	; 249
    1384:	cc f3       	brlt	.-14     	; 0x1378 <__fixunssfsi+0x34>
    1386:	86 95       	lsr	r24
    1388:	77 95       	ror	r23
    138a:	67 95       	ror	r22
    138c:	b3 95       	inc	r27
    138e:	d9 f7       	brne	.-10     	; 0x1386 <__fixunssfsi+0x42>
    1390:	3e f4       	brtc	.+14     	; 0x13a0 <__fixunssfsi+0x5c>
    1392:	90 95       	com	r25
    1394:	80 95       	com	r24
    1396:	70 95       	com	r23
    1398:	61 95       	neg	r22
    139a:	7f 4f       	sbci	r23, 0xFF	; 255
    139c:	8f 4f       	sbci	r24, 0xFF	; 255
    139e:	9f 4f       	sbci	r25, 0xFF	; 255
    13a0:	08 95       	ret

000013a2 <__floatunsisf>:
    13a2:	e8 94       	clt
    13a4:	09 c0       	rjmp	.+18     	; 0x13b8 <__floatsisf+0x12>

000013a6 <__floatsisf>:
    13a6:	97 fb       	bst	r25, 7
    13a8:	3e f4       	brtc	.+14     	; 0x13b8 <__floatsisf+0x12>
    13aa:	90 95       	com	r25
    13ac:	80 95       	com	r24
    13ae:	70 95       	com	r23
    13b0:	61 95       	neg	r22
    13b2:	7f 4f       	sbci	r23, 0xFF	; 255
    13b4:	8f 4f       	sbci	r24, 0xFF	; 255
    13b6:	9f 4f       	sbci	r25, 0xFF	; 255
    13b8:	99 23       	and	r25, r25
    13ba:	a9 f0       	breq	.+42     	; 0x13e6 <__floatsisf+0x40>
    13bc:	f9 2f       	mov	r31, r25
    13be:	96 e9       	ldi	r25, 0x96	; 150
    13c0:	bb 27       	eor	r27, r27
    13c2:	93 95       	inc	r25
    13c4:	f6 95       	lsr	r31
    13c6:	87 95       	ror	r24
    13c8:	77 95       	ror	r23
    13ca:	67 95       	ror	r22
    13cc:	b7 95       	ror	r27
    13ce:	f1 11       	cpse	r31, r1
    13d0:	f8 cf       	rjmp	.-16     	; 0x13c2 <__floatsisf+0x1c>
    13d2:	fa f4       	brpl	.+62     	; 0x1412 <__floatsisf+0x6c>
    13d4:	bb 0f       	add	r27, r27
    13d6:	11 f4       	brne	.+4      	; 0x13dc <__floatsisf+0x36>
    13d8:	60 ff       	sbrs	r22, 0
    13da:	1b c0       	rjmp	.+54     	; 0x1412 <__floatsisf+0x6c>
    13dc:	6f 5f       	subi	r22, 0xFF	; 255
    13de:	7f 4f       	sbci	r23, 0xFF	; 255
    13e0:	8f 4f       	sbci	r24, 0xFF	; 255
    13e2:	9f 4f       	sbci	r25, 0xFF	; 255
    13e4:	16 c0       	rjmp	.+44     	; 0x1412 <__floatsisf+0x6c>
    13e6:	88 23       	and	r24, r24
    13e8:	11 f0       	breq	.+4      	; 0x13ee <__floatsisf+0x48>
    13ea:	96 e9       	ldi	r25, 0x96	; 150
    13ec:	11 c0       	rjmp	.+34     	; 0x1410 <__floatsisf+0x6a>
    13ee:	77 23       	and	r23, r23
    13f0:	21 f0       	breq	.+8      	; 0x13fa <__floatsisf+0x54>
    13f2:	9e e8       	ldi	r25, 0x8E	; 142
    13f4:	87 2f       	mov	r24, r23
    13f6:	76 2f       	mov	r23, r22
    13f8:	05 c0       	rjmp	.+10     	; 0x1404 <__floatsisf+0x5e>
    13fa:	66 23       	and	r22, r22
    13fc:	71 f0       	breq	.+28     	; 0x141a <__floatsisf+0x74>
    13fe:	96 e8       	ldi	r25, 0x86	; 134
    1400:	86 2f       	mov	r24, r22
    1402:	70 e0       	ldi	r23, 0x00	; 0
    1404:	60 e0       	ldi	r22, 0x00	; 0
    1406:	2a f0       	brmi	.+10     	; 0x1412 <__floatsisf+0x6c>
    1408:	9a 95       	dec	r25
    140a:	66 0f       	add	r22, r22
    140c:	77 1f       	adc	r23, r23
    140e:	88 1f       	adc	r24, r24
    1410:	da f7       	brpl	.-10     	; 0x1408 <__floatsisf+0x62>
    1412:	88 0f       	add	r24, r24
    1414:	96 95       	lsr	r25
    1416:	87 95       	ror	r24
    1418:	97 f9       	bld	r25, 7
    141a:	08 95       	ret

0000141c <__fp_cmp>:
    141c:	99 0f       	add	r25, r25
    141e:	00 08       	sbc	r0, r0
    1420:	55 0f       	add	r21, r21
    1422:	aa 0b       	sbc	r26, r26
    1424:	e0 e8       	ldi	r30, 0x80	; 128
    1426:	fe ef       	ldi	r31, 0xFE	; 254
    1428:	16 16       	cp	r1, r22
    142a:	17 06       	cpc	r1, r23
    142c:	e8 07       	cpc	r30, r24
    142e:	f9 07       	cpc	r31, r25
    1430:	c0 f0       	brcs	.+48     	; 0x1462 <__fp_cmp+0x46>
    1432:	12 16       	cp	r1, r18
    1434:	13 06       	cpc	r1, r19
    1436:	e4 07       	cpc	r30, r20
    1438:	f5 07       	cpc	r31, r21
    143a:	98 f0       	brcs	.+38     	; 0x1462 <__fp_cmp+0x46>
    143c:	62 1b       	sub	r22, r18
    143e:	73 0b       	sbc	r23, r19
    1440:	84 0b       	sbc	r24, r20
    1442:	95 0b       	sbc	r25, r21
    1444:	39 f4       	brne	.+14     	; 0x1454 <__fp_cmp+0x38>
    1446:	0a 26       	eor	r0, r26
    1448:	61 f0       	breq	.+24     	; 0x1462 <__fp_cmp+0x46>
    144a:	23 2b       	or	r18, r19
    144c:	24 2b       	or	r18, r20
    144e:	25 2b       	or	r18, r21
    1450:	21 f4       	brne	.+8      	; 0x145a <__fp_cmp+0x3e>
    1452:	08 95       	ret
    1454:	0a 26       	eor	r0, r26
    1456:	09 f4       	brne	.+2      	; 0x145a <__fp_cmp+0x3e>
    1458:	a1 40       	sbci	r26, 0x01	; 1
    145a:	a6 95       	lsr	r26
    145c:	8f ef       	ldi	r24, 0xFF	; 255
    145e:	81 1d       	adc	r24, r1
    1460:	81 1d       	adc	r24, r1
    1462:	08 95       	ret

00001464 <__fp_inf>:
    1464:	97 f9       	bld	r25, 7
    1466:	9f 67       	ori	r25, 0x7F	; 127
    1468:	80 e8       	ldi	r24, 0x80	; 128
    146a:	70 e0       	ldi	r23, 0x00	; 0
    146c:	60 e0       	ldi	r22, 0x00	; 0
    146e:	08 95       	ret

00001470 <__fp_nan>:
    1470:	9f ef       	ldi	r25, 0xFF	; 255
    1472:	80 ec       	ldi	r24, 0xC0	; 192
    1474:	08 95       	ret

00001476 <__fp_pscA>:
    1476:	00 24       	eor	r0, r0
    1478:	0a 94       	dec	r0
    147a:	16 16       	cp	r1, r22
    147c:	17 06       	cpc	r1, r23
    147e:	18 06       	cpc	r1, r24
    1480:	09 06       	cpc	r0, r25
    1482:	08 95       	ret

00001484 <__fp_pscB>:
    1484:	00 24       	eor	r0, r0
    1486:	0a 94       	dec	r0
    1488:	12 16       	cp	r1, r18
    148a:	13 06       	cpc	r1, r19
    148c:	14 06       	cpc	r1, r20
    148e:	05 06       	cpc	r0, r21
    1490:	08 95       	ret

00001492 <__fp_round>:
    1492:	09 2e       	mov	r0, r25
    1494:	03 94       	inc	r0
    1496:	00 0c       	add	r0, r0
    1498:	11 f4       	brne	.+4      	; 0x149e <__fp_round+0xc>
    149a:	88 23       	and	r24, r24
    149c:	52 f0       	brmi	.+20     	; 0x14b2 <__fp_round+0x20>
    149e:	bb 0f       	add	r27, r27
    14a0:	40 f4       	brcc	.+16     	; 0x14b2 <__fp_round+0x20>
    14a2:	bf 2b       	or	r27, r31
    14a4:	11 f4       	brne	.+4      	; 0x14aa <__fp_round+0x18>
    14a6:	60 ff       	sbrs	r22, 0
    14a8:	04 c0       	rjmp	.+8      	; 0x14b2 <__fp_round+0x20>
    14aa:	6f 5f       	subi	r22, 0xFF	; 255
    14ac:	7f 4f       	sbci	r23, 0xFF	; 255
    14ae:	8f 4f       	sbci	r24, 0xFF	; 255
    14b0:	9f 4f       	sbci	r25, 0xFF	; 255
    14b2:	08 95       	ret

000014b4 <__fp_split3>:
    14b4:	57 fd       	sbrc	r21, 7
    14b6:	90 58       	subi	r25, 0x80	; 128
    14b8:	44 0f       	add	r20, r20
    14ba:	55 1f       	adc	r21, r21
    14bc:	59 f0       	breq	.+22     	; 0x14d4 <__fp_splitA+0x10>
    14be:	5f 3f       	cpi	r21, 0xFF	; 255
    14c0:	71 f0       	breq	.+28     	; 0x14de <__fp_splitA+0x1a>
    14c2:	47 95       	ror	r20

000014c4 <__fp_splitA>:
    14c4:	88 0f       	add	r24, r24
    14c6:	97 fb       	bst	r25, 7
    14c8:	99 1f       	adc	r25, r25
    14ca:	61 f0       	breq	.+24     	; 0x14e4 <__fp_splitA+0x20>
    14cc:	9f 3f       	cpi	r25, 0xFF	; 255
    14ce:	79 f0       	breq	.+30     	; 0x14ee <__fp_splitA+0x2a>
    14d0:	87 95       	ror	r24
    14d2:	08 95       	ret
    14d4:	12 16       	cp	r1, r18
    14d6:	13 06       	cpc	r1, r19
    14d8:	14 06       	cpc	r1, r20
    14da:	55 1f       	adc	r21, r21
    14dc:	f2 cf       	rjmp	.-28     	; 0x14c2 <__fp_split3+0xe>
    14de:	46 95       	lsr	r20
    14e0:	f1 df       	rcall	.-30     	; 0x14c4 <__fp_splitA>
    14e2:	08 c0       	rjmp	.+16     	; 0x14f4 <__fp_splitA+0x30>
    14e4:	16 16       	cp	r1, r22
    14e6:	17 06       	cpc	r1, r23
    14e8:	18 06       	cpc	r1, r24
    14ea:	99 1f       	adc	r25, r25
    14ec:	f1 cf       	rjmp	.-30     	; 0x14d0 <__fp_splitA+0xc>
    14ee:	86 95       	lsr	r24
    14f0:	71 05       	cpc	r23, r1
    14f2:	61 05       	cpc	r22, r1
    14f4:	08 94       	sec
    14f6:	08 95       	ret

000014f8 <__fp_zero>:
    14f8:	e8 94       	clt

000014fa <__fp_szero>:
    14fa:	bb 27       	eor	r27, r27
    14fc:	66 27       	eor	r22, r22
    14fe:	77 27       	eor	r23, r23
    1500:	cb 01       	movw	r24, r22
    1502:	97 f9       	bld	r25, 7
    1504:	08 95       	ret

00001506 <__gesf2>:
    1506:	0e 94 0e 0a 	call	0x141c	; 0x141c <__fp_cmp>
    150a:	08 f4       	brcc	.+2      	; 0x150e <__gesf2+0x8>
    150c:	8f ef       	ldi	r24, 0xFF	; 255
    150e:	08 95       	ret

00001510 <__mulsf3>:
    1510:	0e 94 9b 0a 	call	0x1536	; 0x1536 <__mulsf3x>
    1514:	0c 94 49 0a 	jmp	0x1492	; 0x1492 <__fp_round>
    1518:	0e 94 3b 0a 	call	0x1476	; 0x1476 <__fp_pscA>
    151c:	38 f0       	brcs	.+14     	; 0x152c <__mulsf3+0x1c>
    151e:	0e 94 42 0a 	call	0x1484	; 0x1484 <__fp_pscB>
    1522:	20 f0       	brcs	.+8      	; 0x152c <__mulsf3+0x1c>
    1524:	95 23       	and	r25, r21
    1526:	11 f0       	breq	.+4      	; 0x152c <__mulsf3+0x1c>
    1528:	0c 94 32 0a 	jmp	0x1464	; 0x1464 <__fp_inf>
    152c:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__fp_nan>
    1530:	11 24       	eor	r1, r1
    1532:	0c 94 7d 0a 	jmp	0x14fa	; 0x14fa <__fp_szero>

00001536 <__mulsf3x>:
    1536:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <__fp_split3>
    153a:	70 f3       	brcs	.-36     	; 0x1518 <__mulsf3+0x8>

0000153c <__mulsf3_pse>:
    153c:	95 9f       	mul	r25, r21
    153e:	c1 f3       	breq	.-16     	; 0x1530 <__mulsf3+0x20>
    1540:	95 0f       	add	r25, r21
    1542:	50 e0       	ldi	r21, 0x00	; 0
    1544:	55 1f       	adc	r21, r21
    1546:	62 9f       	mul	r22, r18
    1548:	f0 01       	movw	r30, r0
    154a:	72 9f       	mul	r23, r18
    154c:	bb 27       	eor	r27, r27
    154e:	f0 0d       	add	r31, r0
    1550:	b1 1d       	adc	r27, r1
    1552:	63 9f       	mul	r22, r19
    1554:	aa 27       	eor	r26, r26
    1556:	f0 0d       	add	r31, r0
    1558:	b1 1d       	adc	r27, r1
    155a:	aa 1f       	adc	r26, r26
    155c:	64 9f       	mul	r22, r20
    155e:	66 27       	eor	r22, r22
    1560:	b0 0d       	add	r27, r0
    1562:	a1 1d       	adc	r26, r1
    1564:	66 1f       	adc	r22, r22
    1566:	82 9f       	mul	r24, r18
    1568:	22 27       	eor	r18, r18
    156a:	b0 0d       	add	r27, r0
    156c:	a1 1d       	adc	r26, r1
    156e:	62 1f       	adc	r22, r18
    1570:	73 9f       	mul	r23, r19
    1572:	b0 0d       	add	r27, r0
    1574:	a1 1d       	adc	r26, r1
    1576:	62 1f       	adc	r22, r18
    1578:	83 9f       	mul	r24, r19
    157a:	a0 0d       	add	r26, r0
    157c:	61 1d       	adc	r22, r1
    157e:	22 1f       	adc	r18, r18
    1580:	74 9f       	mul	r23, r20
    1582:	33 27       	eor	r19, r19
    1584:	a0 0d       	add	r26, r0
    1586:	61 1d       	adc	r22, r1
    1588:	23 1f       	adc	r18, r19
    158a:	84 9f       	mul	r24, r20
    158c:	60 0d       	add	r22, r0
    158e:	21 1d       	adc	r18, r1
    1590:	82 2f       	mov	r24, r18
    1592:	76 2f       	mov	r23, r22
    1594:	6a 2f       	mov	r22, r26
    1596:	11 24       	eor	r1, r1
    1598:	9f 57       	subi	r25, 0x7F	; 127
    159a:	50 40       	sbci	r21, 0x00	; 0
    159c:	9a f0       	brmi	.+38     	; 0x15c4 <__mulsf3_pse+0x88>
    159e:	f1 f0       	breq	.+60     	; 0x15dc <__mulsf3_pse+0xa0>
    15a0:	88 23       	and	r24, r24
    15a2:	4a f0       	brmi	.+18     	; 0x15b6 <__mulsf3_pse+0x7a>
    15a4:	ee 0f       	add	r30, r30
    15a6:	ff 1f       	adc	r31, r31
    15a8:	bb 1f       	adc	r27, r27
    15aa:	66 1f       	adc	r22, r22
    15ac:	77 1f       	adc	r23, r23
    15ae:	88 1f       	adc	r24, r24
    15b0:	91 50       	subi	r25, 0x01	; 1
    15b2:	50 40       	sbci	r21, 0x00	; 0
    15b4:	a9 f7       	brne	.-22     	; 0x15a0 <__mulsf3_pse+0x64>
    15b6:	9e 3f       	cpi	r25, 0xFE	; 254
    15b8:	51 05       	cpc	r21, r1
    15ba:	80 f0       	brcs	.+32     	; 0x15dc <__mulsf3_pse+0xa0>
    15bc:	0c 94 32 0a 	jmp	0x1464	; 0x1464 <__fp_inf>
    15c0:	0c 94 7d 0a 	jmp	0x14fa	; 0x14fa <__fp_szero>
    15c4:	5f 3f       	cpi	r21, 0xFF	; 255
    15c6:	e4 f3       	brlt	.-8      	; 0x15c0 <__mulsf3_pse+0x84>
    15c8:	98 3e       	cpi	r25, 0xE8	; 232
    15ca:	d4 f3       	brlt	.-12     	; 0x15c0 <__mulsf3_pse+0x84>
    15cc:	86 95       	lsr	r24
    15ce:	77 95       	ror	r23
    15d0:	67 95       	ror	r22
    15d2:	b7 95       	ror	r27
    15d4:	f7 95       	ror	r31
    15d6:	e7 95       	ror	r30
    15d8:	9f 5f       	subi	r25, 0xFF	; 255
    15da:	c1 f7       	brne	.-16     	; 0x15cc <__mulsf3_pse+0x90>
    15dc:	fe 2b       	or	r31, r30
    15de:	88 0f       	add	r24, r24
    15e0:	91 1d       	adc	r25, r1
    15e2:	96 95       	lsr	r25
    15e4:	87 95       	ror	r24
    15e6:	97 f9       	bld	r25, 7
    15e8:	08 95       	ret

000015ea <__tablejump2__>:
    15ea:	ee 0f       	add	r30, r30
    15ec:	ff 1f       	adc	r31, r31
    15ee:	05 90       	lpm	r0, Z+
    15f0:	f4 91       	lpm	r31, Z
    15f2:	e0 2d       	mov	r30, r0
    15f4:	09 94       	ijmp

000015f6 <dtostrf>:
    15f6:	ef 92       	push	r14
    15f8:	0f 93       	push	r16
    15fa:	1f 93       	push	r17
    15fc:	cf 93       	push	r28
    15fe:	df 93       	push	r29
    1600:	e8 01       	movw	r28, r16
    1602:	47 fd       	sbrc	r20, 7
    1604:	02 c0       	rjmp	.+4      	; 0x160a <dtostrf+0x14>
    1606:	34 e0       	ldi	r19, 0x04	; 4
    1608:	01 c0       	rjmp	.+2      	; 0x160c <dtostrf+0x16>
    160a:	34 e1       	ldi	r19, 0x14	; 20
    160c:	04 2e       	mov	r0, r20
    160e:	00 0c       	add	r0, r0
    1610:	55 0b       	sbc	r21, r21
    1612:	57 ff       	sbrs	r21, 7
    1614:	03 c0       	rjmp	.+6      	; 0x161c <dtostrf+0x26>
    1616:	51 95       	neg	r21
    1618:	41 95       	neg	r20
    161a:	51 09       	sbc	r21, r1
    161c:	e3 2e       	mov	r14, r19
    161e:	02 2f       	mov	r16, r18
    1620:	24 2f       	mov	r18, r20
    1622:	ae 01       	movw	r20, r28
    1624:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <dtoa_prf>
    1628:	ce 01       	movw	r24, r28
    162a:	df 91       	pop	r29
    162c:	cf 91       	pop	r28
    162e:	1f 91       	pop	r17
    1630:	0f 91       	pop	r16
    1632:	ef 90       	pop	r14
    1634:	08 95       	ret

00001636 <snprintf>:
    1636:	ae e0       	ldi	r26, 0x0E	; 14
    1638:	b0 e0       	ldi	r27, 0x00	; 0
    163a:	e1 e2       	ldi	r30, 0x21	; 33
    163c:	fb e0       	ldi	r31, 0x0B	; 11
    163e:	0c 94 1c 10 	jmp	0x2038	; 0x2038 <__prologue_saves__+0x1c>
    1642:	0d 89       	ldd	r16, Y+21	; 0x15
    1644:	1e 89       	ldd	r17, Y+22	; 0x16
    1646:	8f 89       	ldd	r24, Y+23	; 0x17
    1648:	98 8d       	ldd	r25, Y+24	; 0x18
    164a:	26 e0       	ldi	r18, 0x06	; 6
    164c:	2c 83       	std	Y+4, r18	; 0x04
    164e:	1a 83       	std	Y+2, r17	; 0x02
    1650:	09 83       	std	Y+1, r16	; 0x01
    1652:	97 ff       	sbrs	r25, 7
    1654:	02 c0       	rjmp	.+4      	; 0x165a <snprintf+0x24>
    1656:	80 e0       	ldi	r24, 0x00	; 0
    1658:	90 e8       	ldi	r25, 0x80	; 128
    165a:	01 97       	sbiw	r24, 0x01	; 1
    165c:	9e 83       	std	Y+6, r25	; 0x06
    165e:	8d 83       	std	Y+5, r24	; 0x05
    1660:	ae 01       	movw	r20, r28
    1662:	45 5e       	subi	r20, 0xE5	; 229
    1664:	5f 4f       	sbci	r21, 0xFF	; 255
    1666:	69 8d       	ldd	r22, Y+25	; 0x19
    1668:	7a 8d       	ldd	r23, Y+26	; 0x1a
    166a:	ce 01       	movw	r24, r28
    166c:	01 96       	adiw	r24, 0x01	; 1
    166e:	0e 94 4b 0b 	call	0x1696	; 0x1696 <vfprintf>
    1672:	4d 81       	ldd	r20, Y+5	; 0x05
    1674:	5e 81       	ldd	r21, Y+6	; 0x06
    1676:	57 fd       	sbrc	r21, 7
    1678:	0a c0       	rjmp	.+20     	; 0x168e <snprintf+0x58>
    167a:	2f 81       	ldd	r18, Y+7	; 0x07
    167c:	38 85       	ldd	r19, Y+8	; 0x08
    167e:	42 17       	cp	r20, r18
    1680:	53 07       	cpc	r21, r19
    1682:	0c f4       	brge	.+2      	; 0x1686 <snprintf+0x50>
    1684:	9a 01       	movw	r18, r20
    1686:	f8 01       	movw	r30, r16
    1688:	e2 0f       	add	r30, r18
    168a:	f3 1f       	adc	r31, r19
    168c:	10 82       	st	Z, r1
    168e:	2e 96       	adiw	r28, 0x0e	; 14
    1690:	e4 e0       	ldi	r30, 0x04	; 4
    1692:	0c 94 38 10 	jmp	0x2070	; 0x2070 <__epilogue_restores__+0x1c>

00001696 <vfprintf>:
    1696:	ab e0       	ldi	r26, 0x0B	; 11
    1698:	b0 e0       	ldi	r27, 0x00	; 0
    169a:	e1 e5       	ldi	r30, 0x51	; 81
    169c:	fb e0       	ldi	r31, 0x0B	; 11
    169e:	0c 94 0e 10 	jmp	0x201c	; 0x201c <__prologue_saves__>
    16a2:	6c 01       	movw	r12, r24
    16a4:	7b 01       	movw	r14, r22
    16a6:	8a 01       	movw	r16, r20
    16a8:	fc 01       	movw	r30, r24
    16aa:	17 82       	std	Z+7, r1	; 0x07
    16ac:	16 82       	std	Z+6, r1	; 0x06
    16ae:	83 81       	ldd	r24, Z+3	; 0x03
    16b0:	81 ff       	sbrs	r24, 1
    16b2:	cc c1       	rjmp	.+920    	; 0x1a4c <vfprintf+0x3b6>
    16b4:	ce 01       	movw	r24, r28
    16b6:	01 96       	adiw	r24, 0x01	; 1
    16b8:	3c 01       	movw	r6, r24
    16ba:	f6 01       	movw	r30, r12
    16bc:	93 81       	ldd	r25, Z+3	; 0x03
    16be:	f7 01       	movw	r30, r14
    16c0:	93 fd       	sbrc	r25, 3
    16c2:	85 91       	lpm	r24, Z+
    16c4:	93 ff       	sbrs	r25, 3
    16c6:	81 91       	ld	r24, Z+
    16c8:	7f 01       	movw	r14, r30
    16ca:	88 23       	and	r24, r24
    16cc:	09 f4       	brne	.+2      	; 0x16d0 <vfprintf+0x3a>
    16ce:	ba c1       	rjmp	.+884    	; 0x1a44 <vfprintf+0x3ae>
    16d0:	85 32       	cpi	r24, 0x25	; 37
    16d2:	39 f4       	brne	.+14     	; 0x16e2 <vfprintf+0x4c>
    16d4:	93 fd       	sbrc	r25, 3
    16d6:	85 91       	lpm	r24, Z+
    16d8:	93 ff       	sbrs	r25, 3
    16da:	81 91       	ld	r24, Z+
    16dc:	7f 01       	movw	r14, r30
    16de:	85 32       	cpi	r24, 0x25	; 37
    16e0:	29 f4       	brne	.+10     	; 0x16ec <vfprintf+0x56>
    16e2:	b6 01       	movw	r22, r12
    16e4:	90 e0       	ldi	r25, 0x00	; 0
    16e6:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <fputc>
    16ea:	e7 cf       	rjmp	.-50     	; 0x16ba <vfprintf+0x24>
    16ec:	91 2c       	mov	r9, r1
    16ee:	21 2c       	mov	r2, r1
    16f0:	31 2c       	mov	r3, r1
    16f2:	ff e1       	ldi	r31, 0x1F	; 31
    16f4:	f3 15       	cp	r31, r3
    16f6:	d8 f0       	brcs	.+54     	; 0x172e <vfprintf+0x98>
    16f8:	8b 32       	cpi	r24, 0x2B	; 43
    16fa:	79 f0       	breq	.+30     	; 0x171a <vfprintf+0x84>
    16fc:	38 f4       	brcc	.+14     	; 0x170c <vfprintf+0x76>
    16fe:	80 32       	cpi	r24, 0x20	; 32
    1700:	79 f0       	breq	.+30     	; 0x1720 <vfprintf+0x8a>
    1702:	83 32       	cpi	r24, 0x23	; 35
    1704:	a1 f4       	brne	.+40     	; 0x172e <vfprintf+0x98>
    1706:	23 2d       	mov	r18, r3
    1708:	20 61       	ori	r18, 0x10	; 16
    170a:	1d c0       	rjmp	.+58     	; 0x1746 <vfprintf+0xb0>
    170c:	8d 32       	cpi	r24, 0x2D	; 45
    170e:	61 f0       	breq	.+24     	; 0x1728 <vfprintf+0x92>
    1710:	80 33       	cpi	r24, 0x30	; 48
    1712:	69 f4       	brne	.+26     	; 0x172e <vfprintf+0x98>
    1714:	23 2d       	mov	r18, r3
    1716:	21 60       	ori	r18, 0x01	; 1
    1718:	16 c0       	rjmp	.+44     	; 0x1746 <vfprintf+0xb0>
    171a:	83 2d       	mov	r24, r3
    171c:	82 60       	ori	r24, 0x02	; 2
    171e:	38 2e       	mov	r3, r24
    1720:	e3 2d       	mov	r30, r3
    1722:	e4 60       	ori	r30, 0x04	; 4
    1724:	3e 2e       	mov	r3, r30
    1726:	2a c0       	rjmp	.+84     	; 0x177c <vfprintf+0xe6>
    1728:	f3 2d       	mov	r31, r3
    172a:	f8 60       	ori	r31, 0x08	; 8
    172c:	1d c0       	rjmp	.+58     	; 0x1768 <vfprintf+0xd2>
    172e:	37 fc       	sbrc	r3, 7
    1730:	2d c0       	rjmp	.+90     	; 0x178c <vfprintf+0xf6>
    1732:	20 ed       	ldi	r18, 0xD0	; 208
    1734:	28 0f       	add	r18, r24
    1736:	2a 30       	cpi	r18, 0x0A	; 10
    1738:	40 f0       	brcs	.+16     	; 0x174a <vfprintf+0xb4>
    173a:	8e 32       	cpi	r24, 0x2E	; 46
    173c:	b9 f4       	brne	.+46     	; 0x176c <vfprintf+0xd6>
    173e:	36 fc       	sbrc	r3, 6
    1740:	81 c1       	rjmp	.+770    	; 0x1a44 <vfprintf+0x3ae>
    1742:	23 2d       	mov	r18, r3
    1744:	20 64       	ori	r18, 0x40	; 64
    1746:	32 2e       	mov	r3, r18
    1748:	19 c0       	rjmp	.+50     	; 0x177c <vfprintf+0xe6>
    174a:	36 fe       	sbrs	r3, 6
    174c:	06 c0       	rjmp	.+12     	; 0x175a <vfprintf+0xc4>
    174e:	8a e0       	ldi	r24, 0x0A	; 10
    1750:	98 9e       	mul	r9, r24
    1752:	20 0d       	add	r18, r0
    1754:	11 24       	eor	r1, r1
    1756:	92 2e       	mov	r9, r18
    1758:	11 c0       	rjmp	.+34     	; 0x177c <vfprintf+0xe6>
    175a:	ea e0       	ldi	r30, 0x0A	; 10
    175c:	2e 9e       	mul	r2, r30
    175e:	20 0d       	add	r18, r0
    1760:	11 24       	eor	r1, r1
    1762:	22 2e       	mov	r2, r18
    1764:	f3 2d       	mov	r31, r3
    1766:	f0 62       	ori	r31, 0x20	; 32
    1768:	3f 2e       	mov	r3, r31
    176a:	08 c0       	rjmp	.+16     	; 0x177c <vfprintf+0xe6>
    176c:	8c 36       	cpi	r24, 0x6C	; 108
    176e:	21 f4       	brne	.+8      	; 0x1778 <vfprintf+0xe2>
    1770:	83 2d       	mov	r24, r3
    1772:	80 68       	ori	r24, 0x80	; 128
    1774:	38 2e       	mov	r3, r24
    1776:	02 c0       	rjmp	.+4      	; 0x177c <vfprintf+0xe6>
    1778:	88 36       	cpi	r24, 0x68	; 104
    177a:	41 f4       	brne	.+16     	; 0x178c <vfprintf+0xf6>
    177c:	f7 01       	movw	r30, r14
    177e:	93 fd       	sbrc	r25, 3
    1780:	85 91       	lpm	r24, Z+
    1782:	93 ff       	sbrs	r25, 3
    1784:	81 91       	ld	r24, Z+
    1786:	7f 01       	movw	r14, r30
    1788:	81 11       	cpse	r24, r1
    178a:	b3 cf       	rjmp	.-154    	; 0x16f2 <vfprintf+0x5c>
    178c:	98 2f       	mov	r25, r24
    178e:	9f 7d       	andi	r25, 0xDF	; 223
    1790:	95 54       	subi	r25, 0x45	; 69
    1792:	93 30       	cpi	r25, 0x03	; 3
    1794:	28 f4       	brcc	.+10     	; 0x17a0 <vfprintf+0x10a>
    1796:	0c 5f       	subi	r16, 0xFC	; 252
    1798:	1f 4f       	sbci	r17, 0xFF	; 255
    179a:	9f e3       	ldi	r25, 0x3F	; 63
    179c:	99 83       	std	Y+1, r25	; 0x01
    179e:	0d c0       	rjmp	.+26     	; 0x17ba <vfprintf+0x124>
    17a0:	83 36       	cpi	r24, 0x63	; 99
    17a2:	31 f0       	breq	.+12     	; 0x17b0 <vfprintf+0x11a>
    17a4:	83 37       	cpi	r24, 0x73	; 115
    17a6:	71 f0       	breq	.+28     	; 0x17c4 <vfprintf+0x12e>
    17a8:	83 35       	cpi	r24, 0x53	; 83
    17aa:	09 f0       	breq	.+2      	; 0x17ae <vfprintf+0x118>
    17ac:	59 c0       	rjmp	.+178    	; 0x1860 <vfprintf+0x1ca>
    17ae:	21 c0       	rjmp	.+66     	; 0x17f2 <vfprintf+0x15c>
    17b0:	f8 01       	movw	r30, r16
    17b2:	80 81       	ld	r24, Z
    17b4:	89 83       	std	Y+1, r24	; 0x01
    17b6:	0e 5f       	subi	r16, 0xFE	; 254
    17b8:	1f 4f       	sbci	r17, 0xFF	; 255
    17ba:	88 24       	eor	r8, r8
    17bc:	83 94       	inc	r8
    17be:	91 2c       	mov	r9, r1
    17c0:	53 01       	movw	r10, r6
    17c2:	13 c0       	rjmp	.+38     	; 0x17ea <vfprintf+0x154>
    17c4:	28 01       	movw	r4, r16
    17c6:	f2 e0       	ldi	r31, 0x02	; 2
    17c8:	4f 0e       	add	r4, r31
    17ca:	51 1c       	adc	r5, r1
    17cc:	f8 01       	movw	r30, r16
    17ce:	a0 80       	ld	r10, Z
    17d0:	b1 80       	ldd	r11, Z+1	; 0x01
    17d2:	36 fe       	sbrs	r3, 6
    17d4:	03 c0       	rjmp	.+6      	; 0x17dc <vfprintf+0x146>
    17d6:	69 2d       	mov	r22, r9
    17d8:	70 e0       	ldi	r23, 0x00	; 0
    17da:	02 c0       	rjmp	.+4      	; 0x17e0 <vfprintf+0x14a>
    17dc:	6f ef       	ldi	r22, 0xFF	; 255
    17de:	7f ef       	ldi	r23, 0xFF	; 255
    17e0:	c5 01       	movw	r24, r10
    17e2:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <strnlen>
    17e6:	4c 01       	movw	r8, r24
    17e8:	82 01       	movw	r16, r4
    17ea:	f3 2d       	mov	r31, r3
    17ec:	ff 77       	andi	r31, 0x7F	; 127
    17ee:	3f 2e       	mov	r3, r31
    17f0:	16 c0       	rjmp	.+44     	; 0x181e <vfprintf+0x188>
    17f2:	28 01       	movw	r4, r16
    17f4:	22 e0       	ldi	r18, 0x02	; 2
    17f6:	42 0e       	add	r4, r18
    17f8:	51 1c       	adc	r5, r1
    17fa:	f8 01       	movw	r30, r16
    17fc:	a0 80       	ld	r10, Z
    17fe:	b1 80       	ldd	r11, Z+1	; 0x01
    1800:	36 fe       	sbrs	r3, 6
    1802:	03 c0       	rjmp	.+6      	; 0x180a <vfprintf+0x174>
    1804:	69 2d       	mov	r22, r9
    1806:	70 e0       	ldi	r23, 0x00	; 0
    1808:	02 c0       	rjmp	.+4      	; 0x180e <vfprintf+0x178>
    180a:	6f ef       	ldi	r22, 0xFF	; 255
    180c:	7f ef       	ldi	r23, 0xFF	; 255
    180e:	c5 01       	movw	r24, r10
    1810:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <strnlen_P>
    1814:	4c 01       	movw	r8, r24
    1816:	f3 2d       	mov	r31, r3
    1818:	f0 68       	ori	r31, 0x80	; 128
    181a:	3f 2e       	mov	r3, r31
    181c:	82 01       	movw	r16, r4
    181e:	33 fc       	sbrc	r3, 3
    1820:	1b c0       	rjmp	.+54     	; 0x1858 <vfprintf+0x1c2>
    1822:	82 2d       	mov	r24, r2
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	88 16       	cp	r8, r24
    1828:	99 06       	cpc	r9, r25
    182a:	b0 f4       	brcc	.+44     	; 0x1858 <vfprintf+0x1c2>
    182c:	b6 01       	movw	r22, r12
    182e:	80 e2       	ldi	r24, 0x20	; 32
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <fputc>
    1836:	2a 94       	dec	r2
    1838:	f4 cf       	rjmp	.-24     	; 0x1822 <vfprintf+0x18c>
    183a:	f5 01       	movw	r30, r10
    183c:	37 fc       	sbrc	r3, 7
    183e:	85 91       	lpm	r24, Z+
    1840:	37 fe       	sbrs	r3, 7
    1842:	81 91       	ld	r24, Z+
    1844:	5f 01       	movw	r10, r30
    1846:	b6 01       	movw	r22, r12
    1848:	90 e0       	ldi	r25, 0x00	; 0
    184a:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <fputc>
    184e:	21 10       	cpse	r2, r1
    1850:	2a 94       	dec	r2
    1852:	21 e0       	ldi	r18, 0x01	; 1
    1854:	82 1a       	sub	r8, r18
    1856:	91 08       	sbc	r9, r1
    1858:	81 14       	cp	r8, r1
    185a:	91 04       	cpc	r9, r1
    185c:	71 f7       	brne	.-36     	; 0x183a <vfprintf+0x1a4>
    185e:	e8 c0       	rjmp	.+464    	; 0x1a30 <vfprintf+0x39a>
    1860:	84 36       	cpi	r24, 0x64	; 100
    1862:	11 f0       	breq	.+4      	; 0x1868 <vfprintf+0x1d2>
    1864:	89 36       	cpi	r24, 0x69	; 105
    1866:	41 f5       	brne	.+80     	; 0x18b8 <vfprintf+0x222>
    1868:	f8 01       	movw	r30, r16
    186a:	37 fe       	sbrs	r3, 7
    186c:	07 c0       	rjmp	.+14     	; 0x187c <vfprintf+0x1e6>
    186e:	60 81       	ld	r22, Z
    1870:	71 81       	ldd	r23, Z+1	; 0x01
    1872:	82 81       	ldd	r24, Z+2	; 0x02
    1874:	93 81       	ldd	r25, Z+3	; 0x03
    1876:	0c 5f       	subi	r16, 0xFC	; 252
    1878:	1f 4f       	sbci	r17, 0xFF	; 255
    187a:	08 c0       	rjmp	.+16     	; 0x188c <vfprintf+0x1f6>
    187c:	60 81       	ld	r22, Z
    187e:	71 81       	ldd	r23, Z+1	; 0x01
    1880:	07 2e       	mov	r0, r23
    1882:	00 0c       	add	r0, r0
    1884:	88 0b       	sbc	r24, r24
    1886:	99 0b       	sbc	r25, r25
    1888:	0e 5f       	subi	r16, 0xFE	; 254
    188a:	1f 4f       	sbci	r17, 0xFF	; 255
    188c:	f3 2d       	mov	r31, r3
    188e:	ff 76       	andi	r31, 0x6F	; 111
    1890:	3f 2e       	mov	r3, r31
    1892:	97 ff       	sbrs	r25, 7
    1894:	09 c0       	rjmp	.+18     	; 0x18a8 <vfprintf+0x212>
    1896:	90 95       	com	r25
    1898:	80 95       	com	r24
    189a:	70 95       	com	r23
    189c:	61 95       	neg	r22
    189e:	7f 4f       	sbci	r23, 0xFF	; 255
    18a0:	8f 4f       	sbci	r24, 0xFF	; 255
    18a2:	9f 4f       	sbci	r25, 0xFF	; 255
    18a4:	f0 68       	ori	r31, 0x80	; 128
    18a6:	3f 2e       	mov	r3, r31
    18a8:	2a e0       	ldi	r18, 0x0A	; 10
    18aa:	30 e0       	ldi	r19, 0x00	; 0
    18ac:	a3 01       	movw	r20, r6
    18ae:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <__ultoa_invert>
    18b2:	88 2e       	mov	r8, r24
    18b4:	86 18       	sub	r8, r6
    18b6:	45 c0       	rjmp	.+138    	; 0x1942 <vfprintf+0x2ac>
    18b8:	85 37       	cpi	r24, 0x75	; 117
    18ba:	31 f4       	brne	.+12     	; 0x18c8 <vfprintf+0x232>
    18bc:	23 2d       	mov	r18, r3
    18be:	2f 7e       	andi	r18, 0xEF	; 239
    18c0:	b2 2e       	mov	r11, r18
    18c2:	2a e0       	ldi	r18, 0x0A	; 10
    18c4:	30 e0       	ldi	r19, 0x00	; 0
    18c6:	25 c0       	rjmp	.+74     	; 0x1912 <vfprintf+0x27c>
    18c8:	93 2d       	mov	r25, r3
    18ca:	99 7f       	andi	r25, 0xF9	; 249
    18cc:	b9 2e       	mov	r11, r25
    18ce:	8f 36       	cpi	r24, 0x6F	; 111
    18d0:	c1 f0       	breq	.+48     	; 0x1902 <vfprintf+0x26c>
    18d2:	18 f4       	brcc	.+6      	; 0x18da <vfprintf+0x244>
    18d4:	88 35       	cpi	r24, 0x58	; 88
    18d6:	79 f0       	breq	.+30     	; 0x18f6 <vfprintf+0x260>
    18d8:	b5 c0       	rjmp	.+362    	; 0x1a44 <vfprintf+0x3ae>
    18da:	80 37       	cpi	r24, 0x70	; 112
    18dc:	19 f0       	breq	.+6      	; 0x18e4 <vfprintf+0x24e>
    18de:	88 37       	cpi	r24, 0x78	; 120
    18e0:	21 f0       	breq	.+8      	; 0x18ea <vfprintf+0x254>
    18e2:	b0 c0       	rjmp	.+352    	; 0x1a44 <vfprintf+0x3ae>
    18e4:	e9 2f       	mov	r30, r25
    18e6:	e0 61       	ori	r30, 0x10	; 16
    18e8:	be 2e       	mov	r11, r30
    18ea:	b4 fe       	sbrs	r11, 4
    18ec:	0d c0       	rjmp	.+26     	; 0x1908 <vfprintf+0x272>
    18ee:	fb 2d       	mov	r31, r11
    18f0:	f4 60       	ori	r31, 0x04	; 4
    18f2:	bf 2e       	mov	r11, r31
    18f4:	09 c0       	rjmp	.+18     	; 0x1908 <vfprintf+0x272>
    18f6:	34 fe       	sbrs	r3, 4
    18f8:	0a c0       	rjmp	.+20     	; 0x190e <vfprintf+0x278>
    18fa:	29 2f       	mov	r18, r25
    18fc:	26 60       	ori	r18, 0x06	; 6
    18fe:	b2 2e       	mov	r11, r18
    1900:	06 c0       	rjmp	.+12     	; 0x190e <vfprintf+0x278>
    1902:	28 e0       	ldi	r18, 0x08	; 8
    1904:	30 e0       	ldi	r19, 0x00	; 0
    1906:	05 c0       	rjmp	.+10     	; 0x1912 <vfprintf+0x27c>
    1908:	20 e1       	ldi	r18, 0x10	; 16
    190a:	30 e0       	ldi	r19, 0x00	; 0
    190c:	02 c0       	rjmp	.+4      	; 0x1912 <vfprintf+0x27c>
    190e:	20 e1       	ldi	r18, 0x10	; 16
    1910:	32 e0       	ldi	r19, 0x02	; 2
    1912:	f8 01       	movw	r30, r16
    1914:	b7 fe       	sbrs	r11, 7
    1916:	07 c0       	rjmp	.+14     	; 0x1926 <vfprintf+0x290>
    1918:	60 81       	ld	r22, Z
    191a:	71 81       	ldd	r23, Z+1	; 0x01
    191c:	82 81       	ldd	r24, Z+2	; 0x02
    191e:	93 81       	ldd	r25, Z+3	; 0x03
    1920:	0c 5f       	subi	r16, 0xFC	; 252
    1922:	1f 4f       	sbci	r17, 0xFF	; 255
    1924:	06 c0       	rjmp	.+12     	; 0x1932 <vfprintf+0x29c>
    1926:	60 81       	ld	r22, Z
    1928:	71 81       	ldd	r23, Z+1	; 0x01
    192a:	80 e0       	ldi	r24, 0x00	; 0
    192c:	90 e0       	ldi	r25, 0x00	; 0
    192e:	0e 5f       	subi	r16, 0xFE	; 254
    1930:	1f 4f       	sbci	r17, 0xFF	; 255
    1932:	a3 01       	movw	r20, r6
    1934:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <__ultoa_invert>
    1938:	88 2e       	mov	r8, r24
    193a:	86 18       	sub	r8, r6
    193c:	fb 2d       	mov	r31, r11
    193e:	ff 77       	andi	r31, 0x7F	; 127
    1940:	3f 2e       	mov	r3, r31
    1942:	36 fe       	sbrs	r3, 6
    1944:	0d c0       	rjmp	.+26     	; 0x1960 <vfprintf+0x2ca>
    1946:	23 2d       	mov	r18, r3
    1948:	2e 7f       	andi	r18, 0xFE	; 254
    194a:	a2 2e       	mov	r10, r18
    194c:	89 14       	cp	r8, r9
    194e:	58 f4       	brcc	.+22     	; 0x1966 <vfprintf+0x2d0>
    1950:	34 fe       	sbrs	r3, 4
    1952:	0b c0       	rjmp	.+22     	; 0x196a <vfprintf+0x2d4>
    1954:	32 fc       	sbrc	r3, 2
    1956:	09 c0       	rjmp	.+18     	; 0x196a <vfprintf+0x2d4>
    1958:	83 2d       	mov	r24, r3
    195a:	8e 7e       	andi	r24, 0xEE	; 238
    195c:	a8 2e       	mov	r10, r24
    195e:	05 c0       	rjmp	.+10     	; 0x196a <vfprintf+0x2d4>
    1960:	b8 2c       	mov	r11, r8
    1962:	a3 2c       	mov	r10, r3
    1964:	03 c0       	rjmp	.+6      	; 0x196c <vfprintf+0x2d6>
    1966:	b8 2c       	mov	r11, r8
    1968:	01 c0       	rjmp	.+2      	; 0x196c <vfprintf+0x2d6>
    196a:	b9 2c       	mov	r11, r9
    196c:	a4 fe       	sbrs	r10, 4
    196e:	0f c0       	rjmp	.+30     	; 0x198e <vfprintf+0x2f8>
    1970:	fe 01       	movw	r30, r28
    1972:	e8 0d       	add	r30, r8
    1974:	f1 1d       	adc	r31, r1
    1976:	80 81       	ld	r24, Z
    1978:	80 33       	cpi	r24, 0x30	; 48
    197a:	21 f4       	brne	.+8      	; 0x1984 <vfprintf+0x2ee>
    197c:	9a 2d       	mov	r25, r10
    197e:	99 7e       	andi	r25, 0xE9	; 233
    1980:	a9 2e       	mov	r10, r25
    1982:	09 c0       	rjmp	.+18     	; 0x1996 <vfprintf+0x300>
    1984:	a2 fe       	sbrs	r10, 2
    1986:	06 c0       	rjmp	.+12     	; 0x1994 <vfprintf+0x2fe>
    1988:	b3 94       	inc	r11
    198a:	b3 94       	inc	r11
    198c:	04 c0       	rjmp	.+8      	; 0x1996 <vfprintf+0x300>
    198e:	8a 2d       	mov	r24, r10
    1990:	86 78       	andi	r24, 0x86	; 134
    1992:	09 f0       	breq	.+2      	; 0x1996 <vfprintf+0x300>
    1994:	b3 94       	inc	r11
    1996:	a3 fc       	sbrc	r10, 3
    1998:	11 c0       	rjmp	.+34     	; 0x19bc <vfprintf+0x326>
    199a:	a0 fe       	sbrs	r10, 0
    199c:	06 c0       	rjmp	.+12     	; 0x19aa <vfprintf+0x314>
    199e:	b2 14       	cp	r11, r2
    19a0:	88 f4       	brcc	.+34     	; 0x19c4 <vfprintf+0x32e>
    19a2:	28 0c       	add	r2, r8
    19a4:	92 2c       	mov	r9, r2
    19a6:	9b 18       	sub	r9, r11
    19a8:	0e c0       	rjmp	.+28     	; 0x19c6 <vfprintf+0x330>
    19aa:	b2 14       	cp	r11, r2
    19ac:	60 f4       	brcc	.+24     	; 0x19c6 <vfprintf+0x330>
    19ae:	b6 01       	movw	r22, r12
    19b0:	80 e2       	ldi	r24, 0x20	; 32
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <fputc>
    19b8:	b3 94       	inc	r11
    19ba:	f7 cf       	rjmp	.-18     	; 0x19aa <vfprintf+0x314>
    19bc:	b2 14       	cp	r11, r2
    19be:	18 f4       	brcc	.+6      	; 0x19c6 <vfprintf+0x330>
    19c0:	2b 18       	sub	r2, r11
    19c2:	02 c0       	rjmp	.+4      	; 0x19c8 <vfprintf+0x332>
    19c4:	98 2c       	mov	r9, r8
    19c6:	21 2c       	mov	r2, r1
    19c8:	a4 fe       	sbrs	r10, 4
    19ca:	10 c0       	rjmp	.+32     	; 0x19ec <vfprintf+0x356>
    19cc:	b6 01       	movw	r22, r12
    19ce:	80 e3       	ldi	r24, 0x30	; 48
    19d0:	90 e0       	ldi	r25, 0x00	; 0
    19d2:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <fputc>
    19d6:	a2 fe       	sbrs	r10, 2
    19d8:	17 c0       	rjmp	.+46     	; 0x1a08 <vfprintf+0x372>
    19da:	a1 fc       	sbrc	r10, 1
    19dc:	03 c0       	rjmp	.+6      	; 0x19e4 <vfprintf+0x34e>
    19de:	88 e7       	ldi	r24, 0x78	; 120
    19e0:	90 e0       	ldi	r25, 0x00	; 0
    19e2:	02 c0       	rjmp	.+4      	; 0x19e8 <vfprintf+0x352>
    19e4:	88 e5       	ldi	r24, 0x58	; 88
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	b6 01       	movw	r22, r12
    19ea:	0c c0       	rjmp	.+24     	; 0x1a04 <vfprintf+0x36e>
    19ec:	8a 2d       	mov	r24, r10
    19ee:	86 78       	andi	r24, 0x86	; 134
    19f0:	59 f0       	breq	.+22     	; 0x1a08 <vfprintf+0x372>
    19f2:	a1 fe       	sbrs	r10, 1
    19f4:	02 c0       	rjmp	.+4      	; 0x19fa <vfprintf+0x364>
    19f6:	8b e2       	ldi	r24, 0x2B	; 43
    19f8:	01 c0       	rjmp	.+2      	; 0x19fc <vfprintf+0x366>
    19fa:	80 e2       	ldi	r24, 0x20	; 32
    19fc:	a7 fc       	sbrc	r10, 7
    19fe:	8d e2       	ldi	r24, 0x2D	; 45
    1a00:	b6 01       	movw	r22, r12
    1a02:	90 e0       	ldi	r25, 0x00	; 0
    1a04:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <fputc>
    1a08:	89 14       	cp	r8, r9
    1a0a:	38 f4       	brcc	.+14     	; 0x1a1a <vfprintf+0x384>
    1a0c:	b6 01       	movw	r22, r12
    1a0e:	80 e3       	ldi	r24, 0x30	; 48
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <fputc>
    1a16:	9a 94       	dec	r9
    1a18:	f7 cf       	rjmp	.-18     	; 0x1a08 <vfprintf+0x372>
    1a1a:	8a 94       	dec	r8
    1a1c:	f3 01       	movw	r30, r6
    1a1e:	e8 0d       	add	r30, r8
    1a20:	f1 1d       	adc	r31, r1
    1a22:	80 81       	ld	r24, Z
    1a24:	b6 01       	movw	r22, r12
    1a26:	90 e0       	ldi	r25, 0x00	; 0
    1a28:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <fputc>
    1a2c:	81 10       	cpse	r8, r1
    1a2e:	f5 cf       	rjmp	.-22     	; 0x1a1a <vfprintf+0x384>
    1a30:	22 20       	and	r2, r2
    1a32:	09 f4       	brne	.+2      	; 0x1a36 <vfprintf+0x3a0>
    1a34:	42 ce       	rjmp	.-892    	; 0x16ba <vfprintf+0x24>
    1a36:	b6 01       	movw	r22, r12
    1a38:	80 e2       	ldi	r24, 0x20	; 32
    1a3a:	90 e0       	ldi	r25, 0x00	; 0
    1a3c:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <fputc>
    1a40:	2a 94       	dec	r2
    1a42:	f6 cf       	rjmp	.-20     	; 0x1a30 <vfprintf+0x39a>
    1a44:	f6 01       	movw	r30, r12
    1a46:	86 81       	ldd	r24, Z+6	; 0x06
    1a48:	97 81       	ldd	r25, Z+7	; 0x07
    1a4a:	02 c0       	rjmp	.+4      	; 0x1a50 <vfprintf+0x3ba>
    1a4c:	8f ef       	ldi	r24, 0xFF	; 255
    1a4e:	9f ef       	ldi	r25, 0xFF	; 255
    1a50:	2b 96       	adiw	r28, 0x0b	; 11
    1a52:	e2 e1       	ldi	r30, 0x12	; 18
    1a54:	0c 94 2a 10 	jmp	0x2054	; 0x2054 <__epilogue_restores__>

00001a58 <dtoa_prf>:
    1a58:	a9 e0       	ldi	r26, 0x09	; 9
    1a5a:	b0 e0       	ldi	r27, 0x00	; 0
    1a5c:	e2 e3       	ldi	r30, 0x32	; 50
    1a5e:	fd e0       	ldi	r31, 0x0D	; 13
    1a60:	0c 94 14 10 	jmp	0x2028	; 0x2028 <__prologue_saves__+0xc>
    1a64:	6a 01       	movw	r12, r20
    1a66:	12 2f       	mov	r17, r18
    1a68:	b0 2e       	mov	r11, r16
    1a6a:	2b e3       	ldi	r18, 0x3B	; 59
    1a6c:	20 17       	cp	r18, r16
    1a6e:	20 f0       	brcs	.+8      	; 0x1a78 <dtoa_prf+0x20>
    1a70:	ff 24       	eor	r15, r15
    1a72:	f3 94       	inc	r15
    1a74:	f0 0e       	add	r15, r16
    1a76:	02 c0       	rjmp	.+4      	; 0x1a7c <dtoa_prf+0x24>
    1a78:	2c e3       	ldi	r18, 0x3C	; 60
    1a7a:	f2 2e       	mov	r15, r18
    1a7c:	0f 2d       	mov	r16, r15
    1a7e:	27 e0       	ldi	r18, 0x07	; 7
    1a80:	ae 01       	movw	r20, r28
    1a82:	4f 5f       	subi	r20, 0xFF	; 255
    1a84:	5f 4f       	sbci	r21, 0xFF	; 255
    1a86:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <__ftoa_engine>
    1a8a:	bc 01       	movw	r22, r24
    1a8c:	49 81       	ldd	r20, Y+1	; 0x01
    1a8e:	84 2f       	mov	r24, r20
    1a90:	89 70       	andi	r24, 0x09	; 9
    1a92:	81 30       	cpi	r24, 0x01	; 1
    1a94:	31 f0       	breq	.+12     	; 0x1aa2 <dtoa_prf+0x4a>
    1a96:	e1 fc       	sbrc	r14, 1
    1a98:	06 c0       	rjmp	.+12     	; 0x1aa6 <dtoa_prf+0x4e>
    1a9a:	e0 fe       	sbrs	r14, 0
    1a9c:	06 c0       	rjmp	.+12     	; 0x1aaa <dtoa_prf+0x52>
    1a9e:	90 e2       	ldi	r25, 0x20	; 32
    1aa0:	05 c0       	rjmp	.+10     	; 0x1aac <dtoa_prf+0x54>
    1aa2:	9d e2       	ldi	r25, 0x2D	; 45
    1aa4:	03 c0       	rjmp	.+6      	; 0x1aac <dtoa_prf+0x54>
    1aa6:	9b e2       	ldi	r25, 0x2B	; 43
    1aa8:	01 c0       	rjmp	.+2      	; 0x1aac <dtoa_prf+0x54>
    1aaa:	90 e0       	ldi	r25, 0x00	; 0
    1aac:	5e 2d       	mov	r21, r14
    1aae:	50 71       	andi	r21, 0x10	; 16
    1ab0:	43 ff       	sbrs	r20, 3
    1ab2:	3c c0       	rjmp	.+120    	; 0x1b2c <dtoa_prf+0xd4>
    1ab4:	91 11       	cpse	r25, r1
    1ab6:	02 c0       	rjmp	.+4      	; 0x1abc <dtoa_prf+0x64>
    1ab8:	83 e0       	ldi	r24, 0x03	; 3
    1aba:	01 c0       	rjmp	.+2      	; 0x1abe <dtoa_prf+0x66>
    1abc:	84 e0       	ldi	r24, 0x04	; 4
    1abe:	81 17       	cp	r24, r17
    1ac0:	18 f4       	brcc	.+6      	; 0x1ac8 <dtoa_prf+0x70>
    1ac2:	21 2f       	mov	r18, r17
    1ac4:	28 1b       	sub	r18, r24
    1ac6:	01 c0       	rjmp	.+2      	; 0x1aca <dtoa_prf+0x72>
    1ac8:	20 e0       	ldi	r18, 0x00	; 0
    1aca:	51 11       	cpse	r21, r1
    1acc:	0b c0       	rjmp	.+22     	; 0x1ae4 <dtoa_prf+0x8c>
    1ace:	f6 01       	movw	r30, r12
    1ad0:	82 2f       	mov	r24, r18
    1ad2:	30 e2       	ldi	r19, 0x20	; 32
    1ad4:	88 23       	and	r24, r24
    1ad6:	19 f0       	breq	.+6      	; 0x1ade <dtoa_prf+0x86>
    1ad8:	31 93       	st	Z+, r19
    1ada:	81 50       	subi	r24, 0x01	; 1
    1adc:	fb cf       	rjmp	.-10     	; 0x1ad4 <dtoa_prf+0x7c>
    1ade:	c2 0e       	add	r12, r18
    1ae0:	d1 1c       	adc	r13, r1
    1ae2:	20 e0       	ldi	r18, 0x00	; 0
    1ae4:	99 23       	and	r25, r25
    1ae6:	29 f0       	breq	.+10     	; 0x1af2 <dtoa_prf+0x9a>
    1ae8:	d6 01       	movw	r26, r12
    1aea:	9c 93       	st	X, r25
    1aec:	f6 01       	movw	r30, r12
    1aee:	31 96       	adiw	r30, 0x01	; 1
    1af0:	6f 01       	movw	r12, r30
    1af2:	c6 01       	movw	r24, r12
    1af4:	03 96       	adiw	r24, 0x03	; 3
    1af6:	e2 fe       	sbrs	r14, 2
    1af8:	0a c0       	rjmp	.+20     	; 0x1b0e <dtoa_prf+0xb6>
    1afa:	3e e4       	ldi	r19, 0x4E	; 78
    1afc:	d6 01       	movw	r26, r12
    1afe:	3c 93       	st	X, r19
    1b00:	41 e4       	ldi	r20, 0x41	; 65
    1b02:	11 96       	adiw	r26, 0x01	; 1
    1b04:	4c 93       	st	X, r20
    1b06:	11 97       	sbiw	r26, 0x01	; 1
    1b08:	12 96       	adiw	r26, 0x02	; 2
    1b0a:	3c 93       	st	X, r19
    1b0c:	06 c0       	rjmp	.+12     	; 0x1b1a <dtoa_prf+0xc2>
    1b0e:	3e e6       	ldi	r19, 0x6E	; 110
    1b10:	f6 01       	movw	r30, r12
    1b12:	30 83       	st	Z, r19
    1b14:	41 e6       	ldi	r20, 0x61	; 97
    1b16:	41 83       	std	Z+1, r20	; 0x01
    1b18:	32 83       	std	Z+2, r19	; 0x02
    1b1a:	fc 01       	movw	r30, r24
    1b1c:	32 2f       	mov	r19, r18
    1b1e:	40 e2       	ldi	r20, 0x20	; 32
    1b20:	33 23       	and	r19, r19
    1b22:	09 f4       	brne	.+2      	; 0x1b26 <dtoa_prf+0xce>
    1b24:	42 c0       	rjmp	.+132    	; 0x1baa <dtoa_prf+0x152>
    1b26:	41 93       	st	Z+, r20
    1b28:	31 50       	subi	r19, 0x01	; 1
    1b2a:	fa cf       	rjmp	.-12     	; 0x1b20 <dtoa_prf+0xc8>
    1b2c:	42 ff       	sbrs	r20, 2
    1b2e:	44 c0       	rjmp	.+136    	; 0x1bb8 <dtoa_prf+0x160>
    1b30:	91 11       	cpse	r25, r1
    1b32:	02 c0       	rjmp	.+4      	; 0x1b38 <dtoa_prf+0xe0>
    1b34:	83 e0       	ldi	r24, 0x03	; 3
    1b36:	01 c0       	rjmp	.+2      	; 0x1b3a <dtoa_prf+0xe2>
    1b38:	84 e0       	ldi	r24, 0x04	; 4
    1b3a:	81 17       	cp	r24, r17
    1b3c:	18 f4       	brcc	.+6      	; 0x1b44 <dtoa_prf+0xec>
    1b3e:	21 2f       	mov	r18, r17
    1b40:	28 1b       	sub	r18, r24
    1b42:	01 c0       	rjmp	.+2      	; 0x1b46 <dtoa_prf+0xee>
    1b44:	20 e0       	ldi	r18, 0x00	; 0
    1b46:	51 11       	cpse	r21, r1
    1b48:	0b c0       	rjmp	.+22     	; 0x1b60 <dtoa_prf+0x108>
    1b4a:	f6 01       	movw	r30, r12
    1b4c:	82 2f       	mov	r24, r18
    1b4e:	30 e2       	ldi	r19, 0x20	; 32
    1b50:	88 23       	and	r24, r24
    1b52:	19 f0       	breq	.+6      	; 0x1b5a <dtoa_prf+0x102>
    1b54:	31 93       	st	Z+, r19
    1b56:	81 50       	subi	r24, 0x01	; 1
    1b58:	fb cf       	rjmp	.-10     	; 0x1b50 <dtoa_prf+0xf8>
    1b5a:	c2 0e       	add	r12, r18
    1b5c:	d1 1c       	adc	r13, r1
    1b5e:	20 e0       	ldi	r18, 0x00	; 0
    1b60:	99 23       	and	r25, r25
    1b62:	29 f0       	breq	.+10     	; 0x1b6e <dtoa_prf+0x116>
    1b64:	d6 01       	movw	r26, r12
    1b66:	9c 93       	st	X, r25
    1b68:	f6 01       	movw	r30, r12
    1b6a:	31 96       	adiw	r30, 0x01	; 1
    1b6c:	6f 01       	movw	r12, r30
    1b6e:	c6 01       	movw	r24, r12
    1b70:	03 96       	adiw	r24, 0x03	; 3
    1b72:	e2 fe       	sbrs	r14, 2
    1b74:	0b c0       	rjmp	.+22     	; 0x1b8c <dtoa_prf+0x134>
    1b76:	39 e4       	ldi	r19, 0x49	; 73
    1b78:	d6 01       	movw	r26, r12
    1b7a:	3c 93       	st	X, r19
    1b7c:	3e e4       	ldi	r19, 0x4E	; 78
    1b7e:	11 96       	adiw	r26, 0x01	; 1
    1b80:	3c 93       	st	X, r19
    1b82:	11 97       	sbiw	r26, 0x01	; 1
    1b84:	36 e4       	ldi	r19, 0x46	; 70
    1b86:	12 96       	adiw	r26, 0x02	; 2
    1b88:	3c 93       	st	X, r19
    1b8a:	07 c0       	rjmp	.+14     	; 0x1b9a <dtoa_prf+0x142>
    1b8c:	39 e6       	ldi	r19, 0x69	; 105
    1b8e:	f6 01       	movw	r30, r12
    1b90:	30 83       	st	Z, r19
    1b92:	3e e6       	ldi	r19, 0x6E	; 110
    1b94:	31 83       	std	Z+1, r19	; 0x01
    1b96:	36 e6       	ldi	r19, 0x66	; 102
    1b98:	32 83       	std	Z+2, r19	; 0x02
    1b9a:	fc 01       	movw	r30, r24
    1b9c:	32 2f       	mov	r19, r18
    1b9e:	40 e2       	ldi	r20, 0x20	; 32
    1ba0:	33 23       	and	r19, r19
    1ba2:	19 f0       	breq	.+6      	; 0x1baa <dtoa_prf+0x152>
    1ba4:	41 93       	st	Z+, r20
    1ba6:	31 50       	subi	r19, 0x01	; 1
    1ba8:	fb cf       	rjmp	.-10     	; 0x1ba0 <dtoa_prf+0x148>
    1baa:	fc 01       	movw	r30, r24
    1bac:	e2 0f       	add	r30, r18
    1bae:	f1 1d       	adc	r31, r1
    1bb0:	10 82       	st	Z, r1
    1bb2:	8e ef       	ldi	r24, 0xFE	; 254
    1bb4:	9f ef       	ldi	r25, 0xFF	; 255
    1bb6:	a6 c0       	rjmp	.+332    	; 0x1d04 <dtoa_prf+0x2ac>
    1bb8:	21 e0       	ldi	r18, 0x01	; 1
    1bba:	30 e0       	ldi	r19, 0x00	; 0
    1bbc:	91 11       	cpse	r25, r1
    1bbe:	02 c0       	rjmp	.+4      	; 0x1bc4 <dtoa_prf+0x16c>
    1bc0:	20 e0       	ldi	r18, 0x00	; 0
    1bc2:	30 e0       	ldi	r19, 0x00	; 0
    1bc4:	16 16       	cp	r1, r22
    1bc6:	17 06       	cpc	r1, r23
    1bc8:	1c f4       	brge	.+6      	; 0x1bd0 <dtoa_prf+0x178>
    1bca:	fb 01       	movw	r30, r22
    1bcc:	31 96       	adiw	r30, 0x01	; 1
    1bce:	02 c0       	rjmp	.+4      	; 0x1bd4 <dtoa_prf+0x17c>
    1bd0:	e1 e0       	ldi	r30, 0x01	; 1
    1bd2:	f0 e0       	ldi	r31, 0x00	; 0
    1bd4:	2e 0f       	add	r18, r30
    1bd6:	3f 1f       	adc	r19, r31
    1bd8:	bb 20       	and	r11, r11
    1bda:	21 f0       	breq	.+8      	; 0x1be4 <dtoa_prf+0x18c>
    1bdc:	eb 2d       	mov	r30, r11
    1bde:	f0 e0       	ldi	r31, 0x00	; 0
    1be0:	31 96       	adiw	r30, 0x01	; 1
    1be2:	02 c0       	rjmp	.+4      	; 0x1be8 <dtoa_prf+0x190>
    1be4:	e0 e0       	ldi	r30, 0x00	; 0
    1be6:	f0 e0       	ldi	r31, 0x00	; 0
    1be8:	2e 0f       	add	r18, r30
    1bea:	3f 1f       	adc	r19, r31
    1bec:	e1 2f       	mov	r30, r17
    1bee:	f0 e0       	ldi	r31, 0x00	; 0
    1bf0:	2e 17       	cp	r18, r30
    1bf2:	3f 07       	cpc	r19, r31
    1bf4:	1c f4       	brge	.+6      	; 0x1bfc <dtoa_prf+0x1a4>
    1bf6:	12 1b       	sub	r17, r18
    1bf8:	21 2f       	mov	r18, r17
    1bfa:	01 c0       	rjmp	.+2      	; 0x1bfe <dtoa_prf+0x1a6>
    1bfc:	20 e0       	ldi	r18, 0x00	; 0
    1bfe:	8e 2d       	mov	r24, r14
    1c00:	88 71       	andi	r24, 0x18	; 24
    1c02:	59 f4       	brne	.+22     	; 0x1c1a <dtoa_prf+0x1c2>
    1c04:	f6 01       	movw	r30, r12
    1c06:	82 2f       	mov	r24, r18
    1c08:	30 e2       	ldi	r19, 0x20	; 32
    1c0a:	88 23       	and	r24, r24
    1c0c:	19 f0       	breq	.+6      	; 0x1c14 <dtoa_prf+0x1bc>
    1c0e:	31 93       	st	Z+, r19
    1c10:	81 50       	subi	r24, 0x01	; 1
    1c12:	fb cf       	rjmp	.-10     	; 0x1c0a <dtoa_prf+0x1b2>
    1c14:	c2 0e       	add	r12, r18
    1c16:	d1 1c       	adc	r13, r1
    1c18:	20 e0       	ldi	r18, 0x00	; 0
    1c1a:	99 23       	and	r25, r25
    1c1c:	29 f0       	breq	.+10     	; 0x1c28 <dtoa_prf+0x1d0>
    1c1e:	d6 01       	movw	r26, r12
    1c20:	9c 93       	st	X, r25
    1c22:	f6 01       	movw	r30, r12
    1c24:	31 96       	adiw	r30, 0x01	; 1
    1c26:	6f 01       	movw	r12, r30
    1c28:	51 11       	cpse	r21, r1
    1c2a:	0b c0       	rjmp	.+22     	; 0x1c42 <dtoa_prf+0x1ea>
    1c2c:	f6 01       	movw	r30, r12
    1c2e:	82 2f       	mov	r24, r18
    1c30:	90 e3       	ldi	r25, 0x30	; 48
    1c32:	88 23       	and	r24, r24
    1c34:	19 f0       	breq	.+6      	; 0x1c3c <dtoa_prf+0x1e4>
    1c36:	91 93       	st	Z+, r25
    1c38:	81 50       	subi	r24, 0x01	; 1
    1c3a:	fb cf       	rjmp	.-10     	; 0x1c32 <dtoa_prf+0x1da>
    1c3c:	c2 0e       	add	r12, r18
    1c3e:	d1 1c       	adc	r13, r1
    1c40:	20 e0       	ldi	r18, 0x00	; 0
    1c42:	0f 2d       	mov	r16, r15
    1c44:	06 0f       	add	r16, r22
    1c46:	9a 81       	ldd	r25, Y+2	; 0x02
    1c48:	34 2f       	mov	r19, r20
    1c4a:	30 71       	andi	r19, 0x10	; 16
    1c4c:	44 ff       	sbrs	r20, 4
    1c4e:	03 c0       	rjmp	.+6      	; 0x1c56 <dtoa_prf+0x1fe>
    1c50:	91 33       	cpi	r25, 0x31	; 49
    1c52:	09 f4       	brne	.+2      	; 0x1c56 <dtoa_prf+0x1fe>
    1c54:	01 50       	subi	r16, 0x01	; 1
    1c56:	10 16       	cp	r1, r16
    1c58:	24 f4       	brge	.+8      	; 0x1c62 <dtoa_prf+0x20a>
    1c5a:	09 30       	cpi	r16, 0x09	; 9
    1c5c:	18 f0       	brcs	.+6      	; 0x1c64 <dtoa_prf+0x20c>
    1c5e:	08 e0       	ldi	r16, 0x08	; 8
    1c60:	01 c0       	rjmp	.+2      	; 0x1c64 <dtoa_prf+0x20c>
    1c62:	01 e0       	ldi	r16, 0x01	; 1
    1c64:	ab 01       	movw	r20, r22
    1c66:	77 ff       	sbrs	r23, 7
    1c68:	02 c0       	rjmp	.+4      	; 0x1c6e <dtoa_prf+0x216>
    1c6a:	40 e0       	ldi	r20, 0x00	; 0
    1c6c:	50 e0       	ldi	r21, 0x00	; 0
    1c6e:	fb 01       	movw	r30, r22
    1c70:	e4 1b       	sub	r30, r20
    1c72:	f5 0b       	sbc	r31, r21
    1c74:	a1 e0       	ldi	r26, 0x01	; 1
    1c76:	b0 e0       	ldi	r27, 0x00	; 0
    1c78:	ac 0f       	add	r26, r28
    1c7a:	bd 1f       	adc	r27, r29
    1c7c:	ea 0f       	add	r30, r26
    1c7e:	fb 1f       	adc	r31, r27
    1c80:	8e e2       	ldi	r24, 0x2E	; 46
    1c82:	a8 2e       	mov	r10, r24
    1c84:	4b 01       	movw	r8, r22
    1c86:	80 1a       	sub	r8, r16
    1c88:	91 08       	sbc	r9, r1
    1c8a:	0b 2d       	mov	r16, r11
    1c8c:	10 e0       	ldi	r17, 0x00	; 0
    1c8e:	11 95       	neg	r17
    1c90:	01 95       	neg	r16
    1c92:	11 09       	sbc	r17, r1
    1c94:	4f 3f       	cpi	r20, 0xFF	; 255
    1c96:	bf ef       	ldi	r27, 0xFF	; 255
    1c98:	5b 07       	cpc	r21, r27
    1c9a:	21 f4       	brne	.+8      	; 0x1ca4 <dtoa_prf+0x24c>
    1c9c:	d6 01       	movw	r26, r12
    1c9e:	ac 92       	st	X, r10
    1ca0:	11 96       	adiw	r26, 0x01	; 1
    1ca2:	6d 01       	movw	r12, r26
    1ca4:	64 17       	cp	r22, r20
    1ca6:	75 07       	cpc	r23, r21
    1ca8:	2c f0       	brlt	.+10     	; 0x1cb4 <dtoa_prf+0x25c>
    1caa:	84 16       	cp	r8, r20
    1cac:	95 06       	cpc	r9, r21
    1cae:	14 f4       	brge	.+4      	; 0x1cb4 <dtoa_prf+0x25c>
    1cb0:	81 81       	ldd	r24, Z+1	; 0x01
    1cb2:	01 c0       	rjmp	.+2      	; 0x1cb6 <dtoa_prf+0x25e>
    1cb4:	80 e3       	ldi	r24, 0x30	; 48
    1cb6:	41 50       	subi	r20, 0x01	; 1
    1cb8:	51 09       	sbc	r21, r1
    1cba:	31 96       	adiw	r30, 0x01	; 1
    1cbc:	d6 01       	movw	r26, r12
    1cbe:	11 96       	adiw	r26, 0x01	; 1
    1cc0:	7d 01       	movw	r14, r26
    1cc2:	40 17       	cp	r20, r16
    1cc4:	51 07       	cpc	r21, r17
    1cc6:	24 f0       	brlt	.+8      	; 0x1cd0 <dtoa_prf+0x278>
    1cc8:	d6 01       	movw	r26, r12
    1cca:	8c 93       	st	X, r24
    1ccc:	67 01       	movw	r12, r14
    1cce:	e2 cf       	rjmp	.-60     	; 0x1c94 <dtoa_prf+0x23c>
    1cd0:	64 17       	cp	r22, r20
    1cd2:	75 07       	cpc	r23, r21
    1cd4:	39 f4       	brne	.+14     	; 0x1ce4 <dtoa_prf+0x28c>
    1cd6:	96 33       	cpi	r25, 0x36	; 54
    1cd8:	20 f4       	brcc	.+8      	; 0x1ce2 <dtoa_prf+0x28a>
    1cda:	95 33       	cpi	r25, 0x35	; 53
    1cdc:	19 f4       	brne	.+6      	; 0x1ce4 <dtoa_prf+0x28c>
    1cde:	31 11       	cpse	r19, r1
    1ce0:	01 c0       	rjmp	.+2      	; 0x1ce4 <dtoa_prf+0x28c>
    1ce2:	81 e3       	ldi	r24, 0x31	; 49
    1ce4:	f6 01       	movw	r30, r12
    1ce6:	80 83       	st	Z, r24
    1ce8:	f7 01       	movw	r30, r14
    1cea:	82 2f       	mov	r24, r18
    1cec:	90 e2       	ldi	r25, 0x20	; 32
    1cee:	88 23       	and	r24, r24
    1cf0:	19 f0       	breq	.+6      	; 0x1cf8 <dtoa_prf+0x2a0>
    1cf2:	91 93       	st	Z+, r25
    1cf4:	81 50       	subi	r24, 0x01	; 1
    1cf6:	fb cf       	rjmp	.-10     	; 0x1cee <dtoa_prf+0x296>
    1cf8:	f7 01       	movw	r30, r14
    1cfa:	e2 0f       	add	r30, r18
    1cfc:	f1 1d       	adc	r31, r1
    1cfe:	10 82       	st	Z, r1
    1d00:	80 e0       	ldi	r24, 0x00	; 0
    1d02:	90 e0       	ldi	r25, 0x00	; 0
    1d04:	29 96       	adiw	r28, 0x09	; 9
    1d06:	ec e0       	ldi	r30, 0x0C	; 12
    1d08:	0c 94 30 10 	jmp	0x2060	; 0x2060 <__epilogue_restores__+0xc>

00001d0c <__ftoa_engine>:
    1d0c:	28 30       	cpi	r18, 0x08	; 8
    1d0e:	08 f0       	brcs	.+2      	; 0x1d12 <__ftoa_engine+0x6>
    1d10:	27 e0       	ldi	r18, 0x07	; 7
    1d12:	33 27       	eor	r19, r19
    1d14:	da 01       	movw	r26, r20
    1d16:	99 0f       	add	r25, r25
    1d18:	31 1d       	adc	r19, r1
    1d1a:	87 fd       	sbrc	r24, 7
    1d1c:	91 60       	ori	r25, 0x01	; 1
    1d1e:	00 96       	adiw	r24, 0x00	; 0
    1d20:	61 05       	cpc	r22, r1
    1d22:	71 05       	cpc	r23, r1
    1d24:	39 f4       	brne	.+14     	; 0x1d34 <__ftoa_engine+0x28>
    1d26:	32 60       	ori	r19, 0x02	; 2
    1d28:	2e 5f       	subi	r18, 0xFE	; 254
    1d2a:	3d 93       	st	X+, r19
    1d2c:	30 e3       	ldi	r19, 0x30	; 48
    1d2e:	2a 95       	dec	r18
    1d30:	e1 f7       	brne	.-8      	; 0x1d2a <__ftoa_engine+0x1e>
    1d32:	08 95       	ret
    1d34:	9f 3f       	cpi	r25, 0xFF	; 255
    1d36:	30 f0       	brcs	.+12     	; 0x1d44 <__ftoa_engine+0x38>
    1d38:	80 38       	cpi	r24, 0x80	; 128
    1d3a:	71 05       	cpc	r23, r1
    1d3c:	61 05       	cpc	r22, r1
    1d3e:	09 f0       	breq	.+2      	; 0x1d42 <__ftoa_engine+0x36>
    1d40:	3c 5f       	subi	r19, 0xFC	; 252
    1d42:	3c 5f       	subi	r19, 0xFC	; 252
    1d44:	3d 93       	st	X+, r19
    1d46:	91 30       	cpi	r25, 0x01	; 1
    1d48:	08 f0       	brcs	.+2      	; 0x1d4c <__ftoa_engine+0x40>
    1d4a:	80 68       	ori	r24, 0x80	; 128
    1d4c:	91 1d       	adc	r25, r1
    1d4e:	df 93       	push	r29
    1d50:	cf 93       	push	r28
    1d52:	1f 93       	push	r17
    1d54:	0f 93       	push	r16
    1d56:	ff 92       	push	r15
    1d58:	ef 92       	push	r14
    1d5a:	19 2f       	mov	r17, r25
    1d5c:	98 7f       	andi	r25, 0xF8	; 248
    1d5e:	96 95       	lsr	r25
    1d60:	e9 2f       	mov	r30, r25
    1d62:	96 95       	lsr	r25
    1d64:	96 95       	lsr	r25
    1d66:	e9 0f       	add	r30, r25
    1d68:	ff 27       	eor	r31, r31
    1d6a:	e0 53       	subi	r30, 0x30	; 48
    1d6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d6e:	99 27       	eor	r25, r25
    1d70:	33 27       	eor	r19, r19
    1d72:	ee 24       	eor	r14, r14
    1d74:	ff 24       	eor	r15, r15
    1d76:	a7 01       	movw	r20, r14
    1d78:	e7 01       	movw	r28, r14
    1d7a:	05 90       	lpm	r0, Z+
    1d7c:	08 94       	sec
    1d7e:	07 94       	ror	r0
    1d80:	28 f4       	brcc	.+10     	; 0x1d8c <__ftoa_engine+0x80>
    1d82:	36 0f       	add	r19, r22
    1d84:	e7 1e       	adc	r14, r23
    1d86:	f8 1e       	adc	r15, r24
    1d88:	49 1f       	adc	r20, r25
    1d8a:	51 1d       	adc	r21, r1
    1d8c:	66 0f       	add	r22, r22
    1d8e:	77 1f       	adc	r23, r23
    1d90:	88 1f       	adc	r24, r24
    1d92:	99 1f       	adc	r25, r25
    1d94:	06 94       	lsr	r0
    1d96:	a1 f7       	brne	.-24     	; 0x1d80 <__ftoa_engine+0x74>
    1d98:	05 90       	lpm	r0, Z+
    1d9a:	07 94       	ror	r0
    1d9c:	28 f4       	brcc	.+10     	; 0x1da8 <__ftoa_engine+0x9c>
    1d9e:	e7 0e       	add	r14, r23
    1da0:	f8 1e       	adc	r15, r24
    1da2:	49 1f       	adc	r20, r25
    1da4:	56 1f       	adc	r21, r22
    1da6:	c1 1d       	adc	r28, r1
    1da8:	77 0f       	add	r23, r23
    1daa:	88 1f       	adc	r24, r24
    1dac:	99 1f       	adc	r25, r25
    1dae:	66 1f       	adc	r22, r22
    1db0:	06 94       	lsr	r0
    1db2:	a1 f7       	brne	.-24     	; 0x1d9c <__ftoa_engine+0x90>
    1db4:	05 90       	lpm	r0, Z+
    1db6:	07 94       	ror	r0
    1db8:	28 f4       	brcc	.+10     	; 0x1dc4 <__ftoa_engine+0xb8>
    1dba:	f8 0e       	add	r15, r24
    1dbc:	49 1f       	adc	r20, r25
    1dbe:	56 1f       	adc	r21, r22
    1dc0:	c7 1f       	adc	r28, r23
    1dc2:	d1 1d       	adc	r29, r1
    1dc4:	88 0f       	add	r24, r24
    1dc6:	99 1f       	adc	r25, r25
    1dc8:	66 1f       	adc	r22, r22
    1dca:	77 1f       	adc	r23, r23
    1dcc:	06 94       	lsr	r0
    1dce:	a1 f7       	brne	.-24     	; 0x1db8 <__ftoa_engine+0xac>
    1dd0:	05 90       	lpm	r0, Z+
    1dd2:	07 94       	ror	r0
    1dd4:	20 f4       	brcc	.+8      	; 0x1dde <__ftoa_engine+0xd2>
    1dd6:	49 0f       	add	r20, r25
    1dd8:	56 1f       	adc	r21, r22
    1dda:	c7 1f       	adc	r28, r23
    1ddc:	d8 1f       	adc	r29, r24
    1dde:	99 0f       	add	r25, r25
    1de0:	66 1f       	adc	r22, r22
    1de2:	77 1f       	adc	r23, r23
    1de4:	88 1f       	adc	r24, r24
    1de6:	06 94       	lsr	r0
    1de8:	a9 f7       	brne	.-22     	; 0x1dd4 <__ftoa_engine+0xc8>
    1dea:	84 91       	lpm	r24, Z
    1dec:	10 95       	com	r17
    1dee:	17 70       	andi	r17, 0x07	; 7
    1df0:	41 f0       	breq	.+16     	; 0x1e02 <__ftoa_engine+0xf6>
    1df2:	d6 95       	lsr	r29
    1df4:	c7 95       	ror	r28
    1df6:	57 95       	ror	r21
    1df8:	47 95       	ror	r20
    1dfa:	f7 94       	ror	r15
    1dfc:	e7 94       	ror	r14
    1dfe:	1a 95       	dec	r17
    1e00:	c1 f7       	brne	.-16     	; 0x1df2 <__ftoa_engine+0xe6>
    1e02:	e6 e7       	ldi	r30, 0x76	; 118
    1e04:	f0 e0       	ldi	r31, 0x00	; 0
    1e06:	68 94       	set
    1e08:	15 90       	lpm	r1, Z+
    1e0a:	15 91       	lpm	r17, Z+
    1e0c:	35 91       	lpm	r19, Z+
    1e0e:	65 91       	lpm	r22, Z+
    1e10:	95 91       	lpm	r25, Z+
    1e12:	05 90       	lpm	r0, Z+
    1e14:	7f e2       	ldi	r23, 0x2F	; 47
    1e16:	73 95       	inc	r23
    1e18:	e1 18       	sub	r14, r1
    1e1a:	f1 0a       	sbc	r15, r17
    1e1c:	43 0b       	sbc	r20, r19
    1e1e:	56 0b       	sbc	r21, r22
    1e20:	c9 0b       	sbc	r28, r25
    1e22:	d0 09       	sbc	r29, r0
    1e24:	c0 f7       	brcc	.-16     	; 0x1e16 <__ftoa_engine+0x10a>
    1e26:	e1 0c       	add	r14, r1
    1e28:	f1 1e       	adc	r15, r17
    1e2a:	43 1f       	adc	r20, r19
    1e2c:	56 1f       	adc	r21, r22
    1e2e:	c9 1f       	adc	r28, r25
    1e30:	d0 1d       	adc	r29, r0
    1e32:	7e f4       	brtc	.+30     	; 0x1e52 <__ftoa_engine+0x146>
    1e34:	70 33       	cpi	r23, 0x30	; 48
    1e36:	11 f4       	brne	.+4      	; 0x1e3c <__ftoa_engine+0x130>
    1e38:	8a 95       	dec	r24
    1e3a:	e6 cf       	rjmp	.-52     	; 0x1e08 <__ftoa_engine+0xfc>
    1e3c:	e8 94       	clt
    1e3e:	01 50       	subi	r16, 0x01	; 1
    1e40:	30 f0       	brcs	.+12     	; 0x1e4e <__ftoa_engine+0x142>
    1e42:	08 0f       	add	r16, r24
    1e44:	0a f4       	brpl	.+2      	; 0x1e48 <__ftoa_engine+0x13c>
    1e46:	00 27       	eor	r16, r16
    1e48:	02 17       	cp	r16, r18
    1e4a:	08 f4       	brcc	.+2      	; 0x1e4e <__ftoa_engine+0x142>
    1e4c:	20 2f       	mov	r18, r16
    1e4e:	23 95       	inc	r18
    1e50:	02 2f       	mov	r16, r18
    1e52:	7a 33       	cpi	r23, 0x3A	; 58
    1e54:	28 f0       	brcs	.+10     	; 0x1e60 <__ftoa_engine+0x154>
    1e56:	79 e3       	ldi	r23, 0x39	; 57
    1e58:	7d 93       	st	X+, r23
    1e5a:	2a 95       	dec	r18
    1e5c:	e9 f7       	brne	.-6      	; 0x1e58 <__ftoa_engine+0x14c>
    1e5e:	10 c0       	rjmp	.+32     	; 0x1e80 <__ftoa_engine+0x174>
    1e60:	7d 93       	st	X+, r23
    1e62:	2a 95       	dec	r18
    1e64:	89 f6       	brne	.-94     	; 0x1e08 <__ftoa_engine+0xfc>
    1e66:	06 94       	lsr	r0
    1e68:	97 95       	ror	r25
    1e6a:	67 95       	ror	r22
    1e6c:	37 95       	ror	r19
    1e6e:	17 95       	ror	r17
    1e70:	17 94       	ror	r1
    1e72:	e1 18       	sub	r14, r1
    1e74:	f1 0a       	sbc	r15, r17
    1e76:	43 0b       	sbc	r20, r19
    1e78:	56 0b       	sbc	r21, r22
    1e7a:	c9 0b       	sbc	r28, r25
    1e7c:	d0 09       	sbc	r29, r0
    1e7e:	98 f0       	brcs	.+38     	; 0x1ea6 <__ftoa_engine+0x19a>
    1e80:	23 95       	inc	r18
    1e82:	7e 91       	ld	r23, -X
    1e84:	73 95       	inc	r23
    1e86:	7a 33       	cpi	r23, 0x3A	; 58
    1e88:	08 f0       	brcs	.+2      	; 0x1e8c <__ftoa_engine+0x180>
    1e8a:	70 e3       	ldi	r23, 0x30	; 48
    1e8c:	7c 93       	st	X, r23
    1e8e:	20 13       	cpse	r18, r16
    1e90:	b8 f7       	brcc	.-18     	; 0x1e80 <__ftoa_engine+0x174>
    1e92:	7e 91       	ld	r23, -X
    1e94:	70 61       	ori	r23, 0x10	; 16
    1e96:	7d 93       	st	X+, r23
    1e98:	30 f0       	brcs	.+12     	; 0x1ea6 <__ftoa_engine+0x19a>
    1e9a:	83 95       	inc	r24
    1e9c:	71 e3       	ldi	r23, 0x31	; 49
    1e9e:	7d 93       	st	X+, r23
    1ea0:	70 e3       	ldi	r23, 0x30	; 48
    1ea2:	2a 95       	dec	r18
    1ea4:	e1 f7       	brne	.-8      	; 0x1e9e <__ftoa_engine+0x192>
    1ea6:	11 24       	eor	r1, r1
    1ea8:	ef 90       	pop	r14
    1eaa:	ff 90       	pop	r15
    1eac:	0f 91       	pop	r16
    1eae:	1f 91       	pop	r17
    1eb0:	cf 91       	pop	r28
    1eb2:	df 91       	pop	r29
    1eb4:	99 27       	eor	r25, r25
    1eb6:	87 fd       	sbrc	r24, 7
    1eb8:	90 95       	com	r25
    1eba:	08 95       	ret

00001ebc <strnlen_P>:
    1ebc:	fc 01       	movw	r30, r24
    1ebe:	05 90       	lpm	r0, Z+
    1ec0:	61 50       	subi	r22, 0x01	; 1
    1ec2:	70 40       	sbci	r23, 0x00	; 0
    1ec4:	01 10       	cpse	r0, r1
    1ec6:	d8 f7       	brcc	.-10     	; 0x1ebe <strnlen_P+0x2>
    1ec8:	80 95       	com	r24
    1eca:	90 95       	com	r25
    1ecc:	8e 0f       	add	r24, r30
    1ece:	9f 1f       	adc	r25, r31
    1ed0:	08 95       	ret

00001ed2 <strnlen>:
    1ed2:	fc 01       	movw	r30, r24
    1ed4:	61 50       	subi	r22, 0x01	; 1
    1ed6:	70 40       	sbci	r23, 0x00	; 0
    1ed8:	01 90       	ld	r0, Z+
    1eda:	01 10       	cpse	r0, r1
    1edc:	d8 f7       	brcc	.-10     	; 0x1ed4 <strnlen+0x2>
    1ede:	80 95       	com	r24
    1ee0:	90 95       	com	r25
    1ee2:	8e 0f       	add	r24, r30
    1ee4:	9f 1f       	adc	r25, r31
    1ee6:	08 95       	ret

00001ee8 <fputc>:
    1ee8:	0f 93       	push	r16
    1eea:	1f 93       	push	r17
    1eec:	cf 93       	push	r28
    1eee:	df 93       	push	r29
    1ef0:	fb 01       	movw	r30, r22
    1ef2:	23 81       	ldd	r18, Z+3	; 0x03
    1ef4:	21 fd       	sbrc	r18, 1
    1ef6:	03 c0       	rjmp	.+6      	; 0x1efe <fputc+0x16>
    1ef8:	8f ef       	ldi	r24, 0xFF	; 255
    1efa:	9f ef       	ldi	r25, 0xFF	; 255
    1efc:	2c c0       	rjmp	.+88     	; 0x1f56 <fputc+0x6e>
    1efe:	22 ff       	sbrs	r18, 2
    1f00:	16 c0       	rjmp	.+44     	; 0x1f2e <fputc+0x46>
    1f02:	46 81       	ldd	r20, Z+6	; 0x06
    1f04:	57 81       	ldd	r21, Z+7	; 0x07
    1f06:	24 81       	ldd	r18, Z+4	; 0x04
    1f08:	35 81       	ldd	r19, Z+5	; 0x05
    1f0a:	42 17       	cp	r20, r18
    1f0c:	53 07       	cpc	r21, r19
    1f0e:	44 f4       	brge	.+16     	; 0x1f20 <fputc+0x38>
    1f10:	a0 81       	ld	r26, Z
    1f12:	b1 81       	ldd	r27, Z+1	; 0x01
    1f14:	9d 01       	movw	r18, r26
    1f16:	2f 5f       	subi	r18, 0xFF	; 255
    1f18:	3f 4f       	sbci	r19, 0xFF	; 255
    1f1a:	31 83       	std	Z+1, r19	; 0x01
    1f1c:	20 83       	st	Z, r18
    1f1e:	8c 93       	st	X, r24
    1f20:	26 81       	ldd	r18, Z+6	; 0x06
    1f22:	37 81       	ldd	r19, Z+7	; 0x07
    1f24:	2f 5f       	subi	r18, 0xFF	; 255
    1f26:	3f 4f       	sbci	r19, 0xFF	; 255
    1f28:	37 83       	std	Z+7, r19	; 0x07
    1f2a:	26 83       	std	Z+6, r18	; 0x06
    1f2c:	14 c0       	rjmp	.+40     	; 0x1f56 <fputc+0x6e>
    1f2e:	8b 01       	movw	r16, r22
    1f30:	ec 01       	movw	r28, r24
    1f32:	fb 01       	movw	r30, r22
    1f34:	00 84       	ldd	r0, Z+8	; 0x08
    1f36:	f1 85       	ldd	r31, Z+9	; 0x09
    1f38:	e0 2d       	mov	r30, r0
    1f3a:	09 95       	icall
    1f3c:	89 2b       	or	r24, r25
    1f3e:	e1 f6       	brne	.-72     	; 0x1ef8 <fputc+0x10>
    1f40:	d8 01       	movw	r26, r16
    1f42:	16 96       	adiw	r26, 0x06	; 6
    1f44:	8d 91       	ld	r24, X+
    1f46:	9c 91       	ld	r25, X
    1f48:	17 97       	sbiw	r26, 0x07	; 7
    1f4a:	01 96       	adiw	r24, 0x01	; 1
    1f4c:	17 96       	adiw	r26, 0x07	; 7
    1f4e:	9c 93       	st	X, r25
    1f50:	8e 93       	st	-X, r24
    1f52:	16 97       	sbiw	r26, 0x06	; 6
    1f54:	ce 01       	movw	r24, r28
    1f56:	df 91       	pop	r29
    1f58:	cf 91       	pop	r28
    1f5a:	1f 91       	pop	r17
    1f5c:	0f 91       	pop	r16
    1f5e:	08 95       	ret

00001f60 <__ultoa_invert>:
    1f60:	fa 01       	movw	r30, r20
    1f62:	aa 27       	eor	r26, r26
    1f64:	28 30       	cpi	r18, 0x08	; 8
    1f66:	51 f1       	breq	.+84     	; 0x1fbc <__ultoa_invert+0x5c>
    1f68:	20 31       	cpi	r18, 0x10	; 16
    1f6a:	81 f1       	breq	.+96     	; 0x1fcc <__ultoa_invert+0x6c>
    1f6c:	e8 94       	clt
    1f6e:	6f 93       	push	r22
    1f70:	6e 7f       	andi	r22, 0xFE	; 254
    1f72:	6e 5f       	subi	r22, 0xFE	; 254
    1f74:	7f 4f       	sbci	r23, 0xFF	; 255
    1f76:	8f 4f       	sbci	r24, 0xFF	; 255
    1f78:	9f 4f       	sbci	r25, 0xFF	; 255
    1f7a:	af 4f       	sbci	r26, 0xFF	; 255
    1f7c:	b1 e0       	ldi	r27, 0x01	; 1
    1f7e:	3e d0       	rcall	.+124    	; 0x1ffc <__ultoa_invert+0x9c>
    1f80:	b4 e0       	ldi	r27, 0x04	; 4
    1f82:	3c d0       	rcall	.+120    	; 0x1ffc <__ultoa_invert+0x9c>
    1f84:	67 0f       	add	r22, r23
    1f86:	78 1f       	adc	r23, r24
    1f88:	89 1f       	adc	r24, r25
    1f8a:	9a 1f       	adc	r25, r26
    1f8c:	a1 1d       	adc	r26, r1
    1f8e:	68 0f       	add	r22, r24
    1f90:	79 1f       	adc	r23, r25
    1f92:	8a 1f       	adc	r24, r26
    1f94:	91 1d       	adc	r25, r1
    1f96:	a1 1d       	adc	r26, r1
    1f98:	6a 0f       	add	r22, r26
    1f9a:	71 1d       	adc	r23, r1
    1f9c:	81 1d       	adc	r24, r1
    1f9e:	91 1d       	adc	r25, r1
    1fa0:	a1 1d       	adc	r26, r1
    1fa2:	20 d0       	rcall	.+64     	; 0x1fe4 <__ultoa_invert+0x84>
    1fa4:	09 f4       	brne	.+2      	; 0x1fa8 <__ultoa_invert+0x48>
    1fa6:	68 94       	set
    1fa8:	3f 91       	pop	r19
    1faa:	2a e0       	ldi	r18, 0x0A	; 10
    1fac:	26 9f       	mul	r18, r22
    1fae:	11 24       	eor	r1, r1
    1fb0:	30 19       	sub	r19, r0
    1fb2:	30 5d       	subi	r19, 0xD0	; 208
    1fb4:	31 93       	st	Z+, r19
    1fb6:	de f6       	brtc	.-74     	; 0x1f6e <__ultoa_invert+0xe>
    1fb8:	cf 01       	movw	r24, r30
    1fba:	08 95       	ret
    1fbc:	46 2f       	mov	r20, r22
    1fbe:	47 70       	andi	r20, 0x07	; 7
    1fc0:	40 5d       	subi	r20, 0xD0	; 208
    1fc2:	41 93       	st	Z+, r20
    1fc4:	b3 e0       	ldi	r27, 0x03	; 3
    1fc6:	0f d0       	rcall	.+30     	; 0x1fe6 <__ultoa_invert+0x86>
    1fc8:	c9 f7       	brne	.-14     	; 0x1fbc <__ultoa_invert+0x5c>
    1fca:	f6 cf       	rjmp	.-20     	; 0x1fb8 <__ultoa_invert+0x58>
    1fcc:	46 2f       	mov	r20, r22
    1fce:	4f 70       	andi	r20, 0x0F	; 15
    1fd0:	40 5d       	subi	r20, 0xD0	; 208
    1fd2:	4a 33       	cpi	r20, 0x3A	; 58
    1fd4:	18 f0       	brcs	.+6      	; 0x1fdc <__ultoa_invert+0x7c>
    1fd6:	49 5d       	subi	r20, 0xD9	; 217
    1fd8:	31 fd       	sbrc	r19, 1
    1fda:	40 52       	subi	r20, 0x20	; 32
    1fdc:	41 93       	st	Z+, r20
    1fde:	02 d0       	rcall	.+4      	; 0x1fe4 <__ultoa_invert+0x84>
    1fe0:	a9 f7       	brne	.-22     	; 0x1fcc <__ultoa_invert+0x6c>
    1fe2:	ea cf       	rjmp	.-44     	; 0x1fb8 <__ultoa_invert+0x58>
    1fe4:	b4 e0       	ldi	r27, 0x04	; 4
    1fe6:	a6 95       	lsr	r26
    1fe8:	97 95       	ror	r25
    1fea:	87 95       	ror	r24
    1fec:	77 95       	ror	r23
    1fee:	67 95       	ror	r22
    1ff0:	ba 95       	dec	r27
    1ff2:	c9 f7       	brne	.-14     	; 0x1fe6 <__ultoa_invert+0x86>
    1ff4:	00 97       	sbiw	r24, 0x00	; 0
    1ff6:	61 05       	cpc	r22, r1
    1ff8:	71 05       	cpc	r23, r1
    1ffa:	08 95       	ret
    1ffc:	9b 01       	movw	r18, r22
    1ffe:	ac 01       	movw	r20, r24
    2000:	0a 2e       	mov	r0, r26
    2002:	06 94       	lsr	r0
    2004:	57 95       	ror	r21
    2006:	47 95       	ror	r20
    2008:	37 95       	ror	r19
    200a:	27 95       	ror	r18
    200c:	ba 95       	dec	r27
    200e:	c9 f7       	brne	.-14     	; 0x2002 <__ultoa_invert+0xa2>
    2010:	62 0f       	add	r22, r18
    2012:	73 1f       	adc	r23, r19
    2014:	84 1f       	adc	r24, r20
    2016:	95 1f       	adc	r25, r21
    2018:	a0 1d       	adc	r26, r0
    201a:	08 95       	ret

0000201c <__prologue_saves__>:
    201c:	2f 92       	push	r2
    201e:	3f 92       	push	r3
    2020:	4f 92       	push	r4
    2022:	5f 92       	push	r5
    2024:	6f 92       	push	r6
    2026:	7f 92       	push	r7
    2028:	8f 92       	push	r8
    202a:	9f 92       	push	r9
    202c:	af 92       	push	r10
    202e:	bf 92       	push	r11
    2030:	cf 92       	push	r12
    2032:	df 92       	push	r13
    2034:	ef 92       	push	r14
    2036:	ff 92       	push	r15
    2038:	0f 93       	push	r16
    203a:	1f 93       	push	r17
    203c:	cf 93       	push	r28
    203e:	df 93       	push	r29
    2040:	cd b7       	in	r28, 0x3d	; 61
    2042:	de b7       	in	r29, 0x3e	; 62
    2044:	ca 1b       	sub	r28, r26
    2046:	db 0b       	sbc	r29, r27
    2048:	0f b6       	in	r0, 0x3f	; 63
    204a:	f8 94       	cli
    204c:	de bf       	out	0x3e, r29	; 62
    204e:	0f be       	out	0x3f, r0	; 63
    2050:	cd bf       	out	0x3d, r28	; 61
    2052:	09 94       	ijmp

00002054 <__epilogue_restores__>:
    2054:	2a 88       	ldd	r2, Y+18	; 0x12
    2056:	39 88       	ldd	r3, Y+17	; 0x11
    2058:	48 88       	ldd	r4, Y+16	; 0x10
    205a:	5f 84       	ldd	r5, Y+15	; 0x0f
    205c:	6e 84       	ldd	r6, Y+14	; 0x0e
    205e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2060:	8c 84       	ldd	r8, Y+12	; 0x0c
    2062:	9b 84       	ldd	r9, Y+11	; 0x0b
    2064:	aa 84       	ldd	r10, Y+10	; 0x0a
    2066:	b9 84       	ldd	r11, Y+9	; 0x09
    2068:	c8 84       	ldd	r12, Y+8	; 0x08
    206a:	df 80       	ldd	r13, Y+7	; 0x07
    206c:	ee 80       	ldd	r14, Y+6	; 0x06
    206e:	fd 80       	ldd	r15, Y+5	; 0x05
    2070:	0c 81       	ldd	r16, Y+4	; 0x04
    2072:	1b 81       	ldd	r17, Y+3	; 0x03
    2074:	aa 81       	ldd	r26, Y+2	; 0x02
    2076:	b9 81       	ldd	r27, Y+1	; 0x01
    2078:	ce 0f       	add	r28, r30
    207a:	d1 1d       	adc	r29, r1
    207c:	0f b6       	in	r0, 0x3f	; 63
    207e:	f8 94       	cli
    2080:	de bf       	out	0x3e, r29	; 62
    2082:	0f be       	out	0x3f, r0	; 63
    2084:	cd bf       	out	0x3d, r28	; 61
    2086:	ed 01       	movw	r28, r26
    2088:	08 95       	ret

0000208a <_exit>:
    208a:	f8 94       	cli

0000208c <__stop_program>:
    208c:	ff cf       	rjmp	.-2      	; 0x208c <__stop_program>
