
workable.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000003a8  00800100  00002f2a  00002fbe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002f2a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000068  008004a8  008004a8  00003366  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003366  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000033c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a8  00000000  00000000  00003404  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002d85  00000000  00000000  000035ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009e6  00000000  00000000  00006331  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001513  00000000  00000000  00006d17  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000580  00000000  00000000  0000822c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a6e  00000000  00000000  000087ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000198a  00000000  00000000  0000921a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c8  00000000  00000000  0000aba4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b9 00 	jmp	0x172	; 0x172 <__ctors_end>
       4:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
       8:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
       c:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
      10:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
      14:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
      18:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
      1c:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
      20:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
      24:	0c 94 f6 0b 	jmp	0x17ec	; 0x17ec <__vector_9>
      28:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
      2c:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
      30:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
      34:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
      38:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
      3c:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
      40:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
      44:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
      48:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
      4c:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
      50:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
      54:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
      58:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
      5c:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
      60:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
      64:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
      68:	e2 06       	cpc	r14, r18
      6a:	00 07       	cpc	r16, r16
      6c:	1e 07       	cpc	r17, r30
      6e:	3c 07       	cpc	r19, r28
      70:	5a 07       	cpc	r21, r26
      72:	f8 07       	cpc	r31, r24
      74:	53 08       	sbc	r5, r3
      76:	77 08       	sbc	r7, r7

00000078 <__trampolines_end>:
      78:	00 40       	sbci	r16, 0x00	; 0
      7a:	7a 10       	cpse	r7, r10
      7c:	f3 5a       	subi	r31, 0xA3	; 163
      7e:	00 a0       	ldd	r0, Z+32	; 0x20
      80:	72 4e       	sbci	r23, 0xE2	; 226
      82:	18 09       	sbc	r17, r8
      84:	00 10       	cpse	r0, r0
      86:	a5 d4       	rcall	.+2378   	; 0x9d2 <display_set+0x3a>
      88:	e8 00       	.word	0x00e8	; ????
      8a:	00 e8       	ldi	r16, 0x80	; 128
      8c:	76 48       	sbci	r23, 0x86	; 134
      8e:	17 00       	.word	0x0017	; ????
      90:	00 e4       	ldi	r16, 0x40	; 64
      92:	0b 54       	subi	r16, 0x4B	; 75
      94:	02 00       	.word	0x0002	; ????
      96:	00 ca       	rjmp	.-3072   	; 0xfffff498 <__eeprom_end+0xff7ef498>
      98:	9a 3b       	cpi	r25, 0xBA	; 186
      9a:	00 00       	nop
      9c:	00 e1       	ldi	r16, 0x10	; 16
      9e:	f5 05       	cpc	r31, r5
      a0:	00 00       	nop
      a2:	80 96       	adiw	r24, 0x20	; 32
      a4:	98 00       	.word	0x0098	; ????
      a6:	00 00       	nop
      a8:	40 42       	sbci	r20, 0x20	; 32
      aa:	0f 00       	.word	0x000f	; ????
      ac:	00 00       	nop
      ae:	a0 86       	std	Z+8, r10	; 0x08
      b0:	01 00       	.word	0x0001	; ????
      b2:	00 00       	nop
      b4:	10 27       	eor	r17, r16
      b6:	00 00       	nop
      b8:	00 00       	nop
      ba:	e8 03       	fmulsu	r22, r16
      bc:	00 00       	nop
      be:	00 00       	nop
      c0:	64 00       	.word	0x0064	; ????
      c2:	00 00       	nop
      c4:	00 00       	nop
      c6:	0a 00       	.word	0x000a	; ????
      c8:	00 00       	nop
      ca:	00 00       	nop
      cc:	01 00       	.word	0x0001	; ????
      ce:	00 00       	nop
      d0:	00 00       	nop
      d2:	2c 76       	andi	r18, 0x6C	; 108
      d4:	d8 88       	ldd	r13, Y+16	; 0x10
      d6:	dc 67       	ori	r29, 0x7C	; 124
      d8:	4f 08       	sbc	r4, r15
      da:	23 df       	rcall	.-442    	; 0xffffff22 <__eeprom_end+0xff7eff22>
      dc:	c1 df       	rcall	.-126    	; 0x60 <__SREG__+0x21>
      de:	ae 59       	subi	r26, 0x9E	; 158
      e0:	e1 b1       	in	r30, 0x01	; 1
      e2:	b7 96       	adiw	r30, 0x27	; 39
      e4:	e5 e3       	ldi	r30, 0x35	; 53
      e6:	e4 53       	subi	r30, 0x34	; 52
      e8:	c6 3a       	cpi	r28, 0xA6	; 166
      ea:	e6 51       	subi	r30, 0x16	; 22
      ec:	99 76       	andi	r25, 0x69	; 105
      ee:	96 e8       	ldi	r25, 0x86	; 134
      f0:	e6 c2       	rjmp	.+1484   	; 0x6be <LCD_1602A_init+0x36>
      f2:	84 26       	eor	r8, r20
      f4:	eb 89       	ldd	r30, Y+19	; 0x13
      f6:	8c 9b       	sbis	0x11, 4	; 17
      f8:	62 ed       	ldi	r22, 0xD2	; 210
      fa:	40 7c       	andi	r20, 0xC0	; 192
      fc:	6f fc       	.word	0xfc6f	; ????
      fe:	ef bc       	out	0x2f, r14	; 47
     100:	9c 9f       	mul	r25, r28
     102:	40 f2       	brcs	.-112    	; 0x94 <__trampolines_end+0x1c>
     104:	ba a5       	ldd	r27, Y+42	; 0x2a
     106:	6f a5       	ldd	r22, Y+47	; 0x2f
     108:	f4 90       	lpm	r15, Z
     10a:	05 5a       	subi	r16, 0xA5	; 165
     10c:	2a f7       	brpl	.-54     	; 0xd8 <__trampolines_end+0x60>
     10e:	5c 93       	st	X, r21
     110:	6b 6c       	ori	r22, 0xCB	; 203
     112:	f9 67       	ori	r31, 0x79	; 121
     114:	6d c1       	rjmp	.+730    	; 0x3f0 <queueSize+0x28>
     116:	1b fc       	.word	0xfc1b	; ????
     118:	e0 e4       	ldi	r30, 0x40	; 64
     11a:	0d 47       	sbci	r16, 0x7D	; 125
     11c:	fe f5       	brtc	.+126    	; 0x19c <.do_clear_bss_loop>
     11e:	20 e6       	ldi	r18, 0x60	; 96
     120:	b5 00       	.word	0x00b5	; ????
     122:	d0 ed       	ldi	r29, 0xD0	; 208
     124:	90 2e       	mov	r9, r16
     126:	03 00       	.word	0x0003	; ????
     128:	94 35       	cpi	r25, 0x54	; 84
     12a:	77 05       	cpc	r23, r7
     12c:	00 80       	ld	r0, Z
     12e:	84 1e       	adc	r8, r20
     130:	08 00       	.word	0x0008	; ????
     132:	00 20       	and	r0, r0
     134:	4e 0a       	sbc	r4, r30
     136:	00 00       	nop
     138:	00 c8       	rjmp	.-4096   	; 0xfffff13a <__eeprom_end+0xff7ef13a>
     13a:	0c 33       	cpi	r16, 0x3C	; 60
     13c:	33 33       	cpi	r19, 0x33	; 51
     13e:	33 0f       	add	r19, r19
     140:	98 6e       	ori	r25, 0xE8	; 232
     142:	12 83       	std	Z+2, r17	; 0x02
     144:	11 41       	sbci	r17, 0x11	; 17
     146:	ef 8d       	ldd	r30, Y+31	; 0x1f
     148:	21 14       	cp	r2, r1
     14a:	89 3b       	cpi	r24, 0xB9	; 185
     14c:	e6 55       	subi	r30, 0x56	; 86
     14e:	16 cf       	rjmp	.-468    	; 0xffffff7c <__eeprom_end+0xff7eff7c>
     150:	fe e6       	ldi	r31, 0x6E	; 110
     152:	db 18       	sub	r13, r11
     154:	d1 84       	ldd	r13, Z+9	; 0x09
     156:	4b 38       	cpi	r20, 0x8B	; 139
     158:	1b f7       	brvc	.-58     	; 0x120 <__trampolines_end+0xa8>
     15a:	7c 1d       	adc	r23, r12
     15c:	90 1d       	adc	r25, r0
     15e:	a4 bb       	out	0x14, r26	; 20
     160:	e4 24       	eor	r14, r4
     162:	20 32       	cpi	r18, 0x20	; 32
     164:	84 72       	andi	r24, 0x24	; 36
     166:	5e 22       	and	r5, r30
     168:	81 00       	.word	0x0081	; ????
     16a:	c9 f1       	breq	.+114    	; 0x1de <format_float+0x2e>
     16c:	24 ec       	ldi	r18, 0xC4	; 196
     16e:	a1 e5       	ldi	r26, 0x51	; 81
     170:	3d 27       	eor	r19, r29

00000172 <__ctors_end>:
     172:	11 24       	eor	r1, r1
     174:	1f be       	out	0x3f, r1	; 63
     176:	cf ef       	ldi	r28, 0xFF	; 255
     178:	d8 e0       	ldi	r29, 0x08	; 8
     17a:	de bf       	out	0x3e, r29	; 62
     17c:	cd bf       	out	0x3d, r28	; 61

0000017e <__do_copy_data>:
     17e:	14 e0       	ldi	r17, 0x04	; 4
     180:	a0 e0       	ldi	r26, 0x00	; 0
     182:	b1 e0       	ldi	r27, 0x01	; 1
     184:	ea e2       	ldi	r30, 0x2A	; 42
     186:	ff e2       	ldi	r31, 0x2F	; 47
     188:	02 c0       	rjmp	.+4      	; 0x18e <__do_copy_data+0x10>
     18a:	05 90       	lpm	r0, Z+
     18c:	0d 92       	st	X+, r0
     18e:	a8 3a       	cpi	r26, 0xA8	; 168
     190:	b1 07       	cpc	r27, r17
     192:	d9 f7       	brne	.-10     	; 0x18a <__do_copy_data+0xc>

00000194 <__do_clear_bss>:
     194:	25 e0       	ldi	r18, 0x05	; 5
     196:	a8 ea       	ldi	r26, 0xA8	; 168
     198:	b4 e0       	ldi	r27, 0x04	; 4
     19a:	01 c0       	rjmp	.+2      	; 0x19e <.do_clear_bss_start>

0000019c <.do_clear_bss_loop>:
     19c:	1d 92       	st	X+, r1

0000019e <.do_clear_bss_start>:
     19e:	a0 31       	cpi	r26, 0x10	; 16
     1a0:	b2 07       	cpc	r27, r18
     1a2:	e1 f7       	brne	.-8      	; 0x19c <.do_clear_bss_loop>
     1a4:	0e 94 10 0c 	call	0x1820	; 0x1820 <main>
     1a8:	0c 94 93 17 	jmp	0x2f26	; 0x2f26 <_exit>

000001ac <__bad_interrupt>:
     1ac:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001b0 <format_float>:
{
    while (*str)
    {
        LCD_1602A_load_data(*str++);
    }
}
     1b0:	af 92       	push	r10
     1b2:	bf 92       	push	r11
     1b4:	cf 92       	push	r12
     1b6:	df 92       	push	r13
     1b8:	ef 92       	push	r14
     1ba:	ff 92       	push	r15
     1bc:	0f 93       	push	r16
     1be:	1f 93       	push	r17
     1c0:	cf 93       	push	r28
     1c2:	df 93       	push	r29
     1c4:	cd b7       	in	r28, 0x3d	; 61
     1c6:	de b7       	in	r29, 0x3e	; 62
     1c8:	68 97       	sbiw	r28, 0x18	; 24
     1ca:	0f b6       	in	r0, 0x3f	; 63
     1cc:	f8 94       	cli
     1ce:	de bf       	out	0x3e, r29	; 62
     1d0:	0f be       	out	0x3f, r0	; 63
     1d2:	cd bf       	out	0x3d, r28	; 61
     1d4:	d8 2e       	mov	r13, r24
     1d6:	c9 2e       	mov	r12, r25
     1d8:	b6 2e       	mov	r11, r22
     1da:	a7 2e       	mov	r10, r23
     1dc:	ca 01       	movw	r24, r20
     1de:	b9 01       	movw	r22, r18
     1e0:	20 2f       	mov	r18, r16
     1e2:	8e 01       	movw	r16, r28
     1e4:	0f 5f       	subi	r16, 0xFF	; 255
     1e6:	1f 4f       	sbci	r17, 0xFF	; 255
     1e8:	40 e0       	ldi	r20, 0x00	; 0
     1ea:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <dtostrf>
     1ee:	e1 14       	cp	r14, r1
     1f0:	f1 04       	cpc	r15, r1
     1f2:	c1 f0       	breq	.+48     	; 0x224 <format_float+0x74>
     1f4:	f7 01       	movw	r30, r14
     1f6:	80 81       	ld	r24, Z
     1f8:	88 23       	and	r24, r24
     1fa:	a1 f0       	breq	.+40     	; 0x224 <format_float+0x74>
     1fc:	ff 92       	push	r15
     1fe:	ef 92       	push	r14
     200:	1f 93       	push	r17
     202:	0f 93       	push	r16
     204:	8e e6       	ldi	r24, 0x6E	; 110
     206:	91 e0       	ldi	r25, 0x01	; 1
     208:	9f 93       	push	r25
     20a:	8f 93       	push	r24
     20c:	af 92       	push	r10
     20e:	bf 92       	push	r11
     210:	cf 92       	push	r12
     212:	df 92       	push	r13
     214:	0e 94 69 12 	call	0x24d2	; 0x24d2 <snprintf>
     218:	0f b6       	in	r0, 0x3f	; 63
     21a:	f8 94       	cli
     21c:	de bf       	out	0x3e, r29	; 62
     21e:	0f be       	out	0x3f, r0	; 63
     220:	cd bf       	out	0x3d, r28	; 61
     222:	13 c0       	rjmp	.+38     	; 0x24a <format_float+0x9a>
     224:	ce 01       	movw	r24, r28
     226:	01 96       	adiw	r24, 0x01	; 1
     228:	9f 93       	push	r25
     22a:	8f 93       	push	r24
     22c:	81 e7       	ldi	r24, 0x71	; 113
     22e:	91 e0       	ldi	r25, 0x01	; 1
     230:	9f 93       	push	r25
     232:	8f 93       	push	r24
     234:	af 92       	push	r10
     236:	bf 92       	push	r11
     238:	cf 92       	push	r12
     23a:	df 92       	push	r13
     23c:	0e 94 69 12 	call	0x24d2	; 0x24d2 <snprintf>
     240:	0f b6       	in	r0, 0x3f	; 63
     242:	f8 94       	cli
     244:	de bf       	out	0x3e, r29	; 62
     246:	0f be       	out	0x3f, r0	; 63
     248:	cd bf       	out	0x3d, r28	; 61
     24a:	68 96       	adiw	r28, 0x18	; 24
     24c:	0f b6       	in	r0, 0x3f	; 63
     24e:	f8 94       	cli
     250:	de bf       	out	0x3e, r29	; 62
     252:	0f be       	out	0x3f, r0	; 63
     254:	cd bf       	out	0x3d, r28	; 61
     256:	df 91       	pop	r29
     258:	cf 91       	pop	r28
     25a:	1f 91       	pop	r17
     25c:	0f 91       	pop	r16
     25e:	ff 90       	pop	r15
     260:	ef 90       	pop	r14
     262:	df 90       	pop	r13
     264:	cf 90       	pop	r12
     266:	bf 90       	pop	r11
     268:	af 90       	pop	r10
     26a:	08 95       	ret

0000026c <initQueue>:
     26c:	2f ef       	ldi	r18, 0xFF	; 255
     26e:	3f ef       	ldi	r19, 0xFF	; 255
     270:	fc 01       	movw	r30, r24
     272:	35 8b       	std	Z+21, r19	; 0x15
     274:	24 8b       	std	Z+20, r18	; 0x14
     276:	37 8b       	std	Z+23, r19	; 0x17
     278:	26 8b       	std	Z+22, r18	; 0x16
     27a:	08 95       	ret

0000027c <isEmpty>:
     27c:	fc 01       	movw	r30, r24
     27e:	24 89       	ldd	r18, Z+20	; 0x14
     280:	35 89       	ldd	r19, Z+21	; 0x15
     282:	81 e0       	ldi	r24, 0x01	; 1
     284:	2f 3f       	cpi	r18, 0xFF	; 255
     286:	3f 4f       	sbci	r19, 0xFF	; 255
     288:	09 f0       	breq	.+2      	; 0x28c <isEmpty+0x10>
     28a:	80 e0       	ldi	r24, 0x00	; 0
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	08 95       	ret

00000290 <isFull>:
     290:	fc 01       	movw	r30, r24
     292:	86 89       	ldd	r24, Z+22	; 0x16
     294:	97 89       	ldd	r25, Z+23	; 0x17
     296:	01 96       	adiw	r24, 0x01	; 1
     298:	6a e0       	ldi	r22, 0x0A	; 10
     29a:	70 e0       	ldi	r23, 0x00	; 0
     29c:	0e 94 a4 10 	call	0x2148	; 0x2148 <__divmodhi4>
     2a0:	ac 01       	movw	r20, r24
     2a2:	24 89       	ldd	r18, Z+20	; 0x14
     2a4:	35 89       	ldd	r19, Z+21	; 0x15
     2a6:	81 e0       	ldi	r24, 0x01	; 1
     2a8:	42 17       	cp	r20, r18
     2aa:	53 07       	cpc	r21, r19
     2ac:	09 f0       	breq	.+2      	; 0x2b0 <isFull+0x20>
     2ae:	80 e0       	ldi	r24, 0x00	; 0
     2b0:	90 e0       	ldi	r25, 0x00	; 0
     2b2:	08 95       	ret

000002b4 <enqueue>:
     2b4:	0f 93       	push	r16
     2b6:	1f 93       	push	r17
     2b8:	cf 93       	push	r28
     2ba:	df 93       	push	r29
     2bc:	ec 01       	movw	r28, r24
     2be:	06 2f       	mov	r16, r22
     2c0:	17 2f       	mov	r17, r23
     2c2:	0e 94 48 01 	call	0x290	; 0x290 <isFull>
     2c6:	89 2b       	or	r24, r25
     2c8:	29 f1       	breq	.+74     	; 0x314 <enqueue+0x60>
     2ca:	8c 89       	ldd	r24, Y+20	; 0x14
     2cc:	9d 89       	ldd	r25, Y+21	; 0x15
     2ce:	01 96       	adiw	r24, 0x01	; 1
     2d0:	2a e0       	ldi	r18, 0x0A	; 10
     2d2:	30 e0       	ldi	r19, 0x00	; 0
     2d4:	b9 01       	movw	r22, r18
     2d6:	0e 94 a4 10 	call	0x2148	; 0x2148 <__divmodhi4>
     2da:	9d 8b       	std	Y+21, r25	; 0x15
     2dc:	8c 8b       	std	Y+20, r24	; 0x14
     2de:	8e 89       	ldd	r24, Y+22	; 0x16
     2e0:	9f 89       	ldd	r25, Y+23	; 0x17
     2e2:	01 96       	adiw	r24, 0x01	; 1
     2e4:	b9 01       	movw	r22, r18
     2e6:	0e 94 a4 10 	call	0x2148	; 0x2148 <__divmodhi4>
     2ea:	9f 8b       	std	Y+23, r25	; 0x17
     2ec:	8e 8b       	std	Y+22, r24	; 0x16
     2ee:	88 0f       	add	r24, r24
     2f0:	99 1f       	adc	r25, r25
     2f2:	c8 0f       	add	r28, r24
     2f4:	d9 1f       	adc	r29, r25
     2f6:	08 83       	st	Y, r16
     2f8:	19 83       	std	Y+1, r17	; 0x01
     2fa:	1f 93       	push	r17
     2fc:	0f 93       	push	r16
     2fe:	84 e8       	ldi	r24, 0x84	; 132
     300:	91 e0       	ldi	r25, 0x01	; 1
     302:	9f 93       	push	r25
     304:	8f 93       	push	r24
     306:	0e 94 23 12 	call	0x2446	; 0x2446 <printf>
     30a:	0f 90       	pop	r0
     30c:	0f 90       	pop	r0
     30e:	0f 90       	pop	r0
     310:	0f 90       	pop	r0
     312:	1b c0       	rjmp	.+54     	; 0x34a <enqueue+0x96>
     314:	ce 01       	movw	r24, r28
     316:	0e 94 3e 01 	call	0x27c	; 0x27c <isEmpty>
     31a:	89 2b       	or	r24, r25
     31c:	39 f0       	breq	.+14     	; 0x32c <enqueue+0x78>
     31e:	1d 8a       	std	Y+21, r1	; 0x15
     320:	1c 8a       	std	Y+20, r1	; 0x14
     322:	1f 8a       	std	Y+23, r1	; 0x17
     324:	1e 8a       	std	Y+22, r1	; 0x16
     326:	08 83       	st	Y, r16
     328:	19 83       	std	Y+1, r17	; 0x01
     32a:	0f c0       	rjmp	.+30     	; 0x34a <enqueue+0x96>
     32c:	8e 89       	ldd	r24, Y+22	; 0x16
     32e:	9f 89       	ldd	r25, Y+23	; 0x17
     330:	01 96       	adiw	r24, 0x01	; 1
     332:	6a e0       	ldi	r22, 0x0A	; 10
     334:	70 e0       	ldi	r23, 0x00	; 0
     336:	0e 94 a4 10 	call	0x2148	; 0x2148 <__divmodhi4>
     33a:	9f 8b       	std	Y+23, r25	; 0x17
     33c:	8e 8b       	std	Y+22, r24	; 0x16
     33e:	88 0f       	add	r24, r24
     340:	99 1f       	adc	r25, r25
     342:	c8 0f       	add	r28, r24
     344:	d9 1f       	adc	r29, r25
     346:	08 83       	st	Y, r16
     348:	19 83       	std	Y+1, r17	; 0x01
     34a:	df 91       	pop	r29
     34c:	cf 91       	pop	r28
     34e:	1f 91       	pop	r17
     350:	0f 91       	pop	r16
     352:	08 95       	ret

00000354 <peekFront>:
     354:	0f 93       	push	r16
     356:	1f 93       	push	r17
     358:	cf 93       	push	r28
     35a:	df 93       	push	r29
     35c:	ec 01       	movw	r28, r24
     35e:	8b 01       	movw	r16, r22
     360:	0e 94 3e 01 	call	0x27c	; 0x27c <isEmpty>
     364:	00 97       	sbiw	r24, 0x00	; 0
     366:	61 f4       	brne	.+24     	; 0x380 <peekFront+0x2c>
     368:	ec 89       	ldd	r30, Y+20	; 0x14
     36a:	fd 89       	ldd	r31, Y+21	; 0x15
     36c:	ee 0f       	add	r30, r30
     36e:	ff 1f       	adc	r31, r31
     370:	ec 0f       	add	r30, r28
     372:	fd 1f       	adc	r31, r29
     374:	20 81       	ld	r18, Z
     376:	31 81       	ldd	r19, Z+1	; 0x01
     378:	f8 01       	movw	r30, r16
     37a:	31 83       	std	Z+1, r19	; 0x01
     37c:	20 83       	st	Z, r18
     37e:	02 c0       	rjmp	.+4      	; 0x384 <peekFront+0x30>
     380:	8f ef       	ldi	r24, 0xFF	; 255
     382:	9f ef       	ldi	r25, 0xFF	; 255
     384:	df 91       	pop	r29
     386:	cf 91       	pop	r28
     388:	1f 91       	pop	r17
     38a:	0f 91       	pop	r16
     38c:	08 95       	ret

0000038e <peekRear>:
     38e:	0f 93       	push	r16
     390:	1f 93       	push	r17
     392:	cf 93       	push	r28
     394:	df 93       	push	r29
     396:	ec 01       	movw	r28, r24
     398:	8b 01       	movw	r16, r22
     39a:	0e 94 3e 01 	call	0x27c	; 0x27c <isEmpty>
     39e:	00 97       	sbiw	r24, 0x00	; 0
     3a0:	61 f4       	brne	.+24     	; 0x3ba <peekRear+0x2c>
     3a2:	ee 89       	ldd	r30, Y+22	; 0x16
     3a4:	ff 89       	ldd	r31, Y+23	; 0x17
     3a6:	ee 0f       	add	r30, r30
     3a8:	ff 1f       	adc	r31, r31
     3aa:	ec 0f       	add	r30, r28
     3ac:	fd 1f       	adc	r31, r29
     3ae:	20 81       	ld	r18, Z
     3b0:	31 81       	ldd	r19, Z+1	; 0x01
     3b2:	f8 01       	movw	r30, r16
     3b4:	31 83       	std	Z+1, r19	; 0x01
     3b6:	20 83       	st	Z, r18
     3b8:	02 c0       	rjmp	.+4      	; 0x3be <peekRear+0x30>
     3ba:	8f ef       	ldi	r24, 0xFF	; 255
     3bc:	9f ef       	ldi	r25, 0xFF	; 255
     3be:	df 91       	pop	r29
     3c0:	cf 91       	pop	r28
     3c2:	1f 91       	pop	r17
     3c4:	0f 91       	pop	r16
     3c6:	08 95       	ret

000003c8 <queueSize>:
     3c8:	cf 93       	push	r28
     3ca:	df 93       	push	r29
     3cc:	ec 01       	movw	r28, r24
     3ce:	0e 94 3e 01 	call	0x27c	; 0x27c <isEmpty>
     3d2:	89 2b       	or	r24, r25
     3d4:	99 f4       	brne	.+38     	; 0x3fc <queueSize+0x34>
     3d6:	8e 89       	ldd	r24, Y+22	; 0x16
     3d8:	9f 89       	ldd	r25, Y+23	; 0x17
     3da:	4c 89       	ldd	r20, Y+20	; 0x14
     3dc:	5d 89       	ldd	r21, Y+21	; 0x15
     3de:	84 17       	cp	r24, r20
     3e0:	95 07       	cpc	r25, r21
     3e2:	24 f0       	brlt	.+8      	; 0x3ec <queueSize+0x24>
     3e4:	84 1b       	sub	r24, r20
     3e6:	95 0b       	sbc	r25, r21
     3e8:	01 96       	adiw	r24, 0x01	; 1
     3ea:	0a c0       	rjmp	.+20     	; 0x400 <__EEPROM_REGION_LENGTH__>
     3ec:	2a e0       	ldi	r18, 0x0A	; 10
     3ee:	30 e0       	ldi	r19, 0x00	; 0
     3f0:	24 1b       	sub	r18, r20
     3f2:	35 0b       	sbc	r19, r21
     3f4:	82 0f       	add	r24, r18
     3f6:	93 1f       	adc	r25, r19
     3f8:	01 96       	adiw	r24, 0x01	; 1
     3fa:	02 c0       	rjmp	.+4      	; 0x400 <__EEPROM_REGION_LENGTH__>
     3fc:	80 e0       	ldi	r24, 0x00	; 0
     3fe:	90 e0       	ldi	r25, 0x00	; 0
     400:	df 91       	pop	r29
     402:	cf 91       	pop	r28
     404:	08 95       	ret

00000406 <initStrQueue>:
     406:	2f ef       	ldi	r18, 0xFF	; 255
     408:	3f ef       	ldi	r19, 0xFF	; 255
     40a:	fc 01       	movw	r30, r24
     40c:	35 8b       	std	Z+21, r19	; 0x15
     40e:	24 8b       	std	Z+20, r18	; 0x14
     410:	37 8b       	std	Z+23, r19	; 0x17
     412:	26 8b       	std	Z+22, r18	; 0x16
     414:	20 e0       	ldi	r18, 0x00	; 0
     416:	30 e0       	ldi	r19, 0x00	; 0
     418:	09 c0       	rjmp	.+18     	; 0x42c <initStrQueue+0x26>
     41a:	f9 01       	movw	r30, r18
     41c:	ee 0f       	add	r30, r30
     41e:	ff 1f       	adc	r31, r31
     420:	e8 0f       	add	r30, r24
     422:	f9 1f       	adc	r31, r25
     424:	11 82       	std	Z+1, r1	; 0x01
     426:	10 82       	st	Z, r1
     428:	2f 5f       	subi	r18, 0xFF	; 255
     42a:	3f 4f       	sbci	r19, 0xFF	; 255
     42c:	2a 30       	cpi	r18, 0x0A	; 10
     42e:	31 05       	cpc	r19, r1
     430:	a4 f3       	brlt	.-24     	; 0x41a <initStrQueue+0x14>
     432:	08 95       	ret

00000434 <isStrQueueEmpty>:
     434:	fc 01       	movw	r30, r24
     436:	24 89       	ldd	r18, Z+20	; 0x14
     438:	35 89       	ldd	r19, Z+21	; 0x15
     43a:	81 e0       	ldi	r24, 0x01	; 1
     43c:	2f 3f       	cpi	r18, 0xFF	; 255
     43e:	3f 4f       	sbci	r19, 0xFF	; 255
     440:	09 f0       	breq	.+2      	; 0x444 <isStrQueueEmpty+0x10>
     442:	80 e0       	ldi	r24, 0x00	; 0
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	08 95       	ret

00000448 <isStrQueueFull>:
     448:	fc 01       	movw	r30, r24
     44a:	86 89       	ldd	r24, Z+22	; 0x16
     44c:	97 89       	ldd	r25, Z+23	; 0x17
     44e:	01 96       	adiw	r24, 0x01	; 1
     450:	6a e0       	ldi	r22, 0x0A	; 10
     452:	70 e0       	ldi	r23, 0x00	; 0
     454:	0e 94 a4 10 	call	0x2148	; 0x2148 <__divmodhi4>
     458:	ac 01       	movw	r20, r24
     45a:	24 89       	ldd	r18, Z+20	; 0x14
     45c:	35 89       	ldd	r19, Z+21	; 0x15
     45e:	81 e0       	ldi	r24, 0x01	; 1
     460:	42 17       	cp	r20, r18
     462:	53 07       	cpc	r21, r19
     464:	09 f0       	breq	.+2      	; 0x468 <isStrQueueFull+0x20>
     466:	80 e0       	ldi	r24, 0x00	; 0
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	08 95       	ret

0000046c <enqueueStr>:
     46c:	ef 92       	push	r14
     46e:	ff 92       	push	r15
     470:	0f 93       	push	r16
     472:	1f 93       	push	r17
     474:	cf 93       	push	r28
     476:	df 93       	push	r29
     478:	61 15       	cp	r22, r1
     47a:	71 05       	cpc	r23, r1
     47c:	09 f4       	brne	.+2      	; 0x480 <enqueueStr+0x14>
     47e:	5b c0       	rjmp	.+182    	; 0x536 <enqueueStr+0xca>
     480:	8b 01       	movw	r16, r22
     482:	ec 01       	movw	r28, r24
     484:	fb 01       	movw	r30, r22
     486:	01 90       	ld	r0, Z+
     488:	00 20       	and	r0, r0
     48a:	e9 f7       	brne	.-6      	; 0x486 <enqueueStr+0x1a>
     48c:	31 97       	sbiw	r30, 0x01	; 1
     48e:	cf 01       	movw	r24, r30
     490:	86 1b       	sub	r24, r22
     492:	97 0b       	sbc	r25, r23
     494:	01 96       	adiw	r24, 0x01	; 1
     496:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <malloc>
     49a:	7c 01       	movw	r14, r24
     49c:	00 97       	sbiw	r24, 0x00	; 0
     49e:	29 f4       	brne	.+10     	; 0x4aa <enqueueStr+0x3e>
     4a0:	82 ec       	ldi	r24, 0xC2	; 194
     4a2:	91 e0       	ldi	r25, 0x01	; 1
     4a4:	0e 94 39 12 	call	0x2472	; 0x2472 <puts>
     4a8:	46 c0       	rjmp	.+140    	; 0x536 <enqueueStr+0xca>
     4aa:	b8 01       	movw	r22, r16
     4ac:	0e 94 1c 12 	call	0x2438	; 0x2438 <strcpy>
     4b0:	ce 01       	movw	r24, r28
     4b2:	0e 94 24 02 	call	0x448	; 0x448 <isStrQueueFull>
     4b6:	89 2b       	or	r24, r25
     4b8:	19 f1       	breq	.+70     	; 0x500 <enqueueStr+0x94>
     4ba:	ec 89       	ldd	r30, Y+20	; 0x14
     4bc:	fd 89       	ldd	r31, Y+21	; 0x15
     4be:	ee 0f       	add	r30, r30
     4c0:	ff 1f       	adc	r31, r31
     4c2:	ec 0f       	add	r30, r28
     4c4:	fd 1f       	adc	r31, r29
     4c6:	80 81       	ld	r24, Z
     4c8:	91 81       	ldd	r25, Z+1	; 0x01
     4ca:	0e 94 8a 11 	call	0x2314	; 0x2314 <free>
     4ce:	8c 89       	ldd	r24, Y+20	; 0x14
     4d0:	9d 89       	ldd	r25, Y+21	; 0x15
     4d2:	01 96       	adiw	r24, 0x01	; 1
     4d4:	2a e0       	ldi	r18, 0x0A	; 10
     4d6:	30 e0       	ldi	r19, 0x00	; 0
     4d8:	b9 01       	movw	r22, r18
     4da:	0e 94 a4 10 	call	0x2148	; 0x2148 <__divmodhi4>
     4de:	9d 8b       	std	Y+21, r25	; 0x15
     4e0:	8c 8b       	std	Y+20, r24	; 0x14
     4e2:	8e 89       	ldd	r24, Y+22	; 0x16
     4e4:	9f 89       	ldd	r25, Y+23	; 0x17
     4e6:	01 96       	adiw	r24, 0x01	; 1
     4e8:	b9 01       	movw	r22, r18
     4ea:	0e 94 a4 10 	call	0x2148	; 0x2148 <__divmodhi4>
     4ee:	9f 8b       	std	Y+23, r25	; 0x17
     4f0:	8e 8b       	std	Y+22, r24	; 0x16
     4f2:	88 0f       	add	r24, r24
     4f4:	99 1f       	adc	r25, r25
     4f6:	c8 0f       	add	r28, r24
     4f8:	d9 1f       	adc	r29, r25
     4fa:	f9 82       	std	Y+1, r15	; 0x01
     4fc:	e8 82       	st	Y, r14
     4fe:	1b c0       	rjmp	.+54     	; 0x536 <enqueueStr+0xca>
     500:	ce 01       	movw	r24, r28
     502:	0e 94 1a 02 	call	0x434	; 0x434 <isStrQueueEmpty>
     506:	89 2b       	or	r24, r25
     508:	39 f0       	breq	.+14     	; 0x518 <enqueueStr+0xac>
     50a:	1d 8a       	std	Y+21, r1	; 0x15
     50c:	1c 8a       	std	Y+20, r1	; 0x14
     50e:	1f 8a       	std	Y+23, r1	; 0x17
     510:	1e 8a       	std	Y+22, r1	; 0x16
     512:	f9 82       	std	Y+1, r15	; 0x01
     514:	e8 82       	st	Y, r14
     516:	0f c0       	rjmp	.+30     	; 0x536 <enqueueStr+0xca>
     518:	8e 89       	ldd	r24, Y+22	; 0x16
     51a:	9f 89       	ldd	r25, Y+23	; 0x17
     51c:	01 96       	adiw	r24, 0x01	; 1
     51e:	6a e0       	ldi	r22, 0x0A	; 10
     520:	70 e0       	ldi	r23, 0x00	; 0
     522:	0e 94 a4 10 	call	0x2148	; 0x2148 <__divmodhi4>
     526:	9f 8b       	std	Y+23, r25	; 0x17
     528:	8e 8b       	std	Y+22, r24	; 0x16
     52a:	88 0f       	add	r24, r24
     52c:	99 1f       	adc	r25, r25
     52e:	c8 0f       	add	r28, r24
     530:	d9 1f       	adc	r29, r25
     532:	f9 82       	std	Y+1, r15	; 0x01
     534:	e8 82       	st	Y, r14
     536:	df 91       	pop	r29
     538:	cf 91       	pop	r28
     53a:	1f 91       	pop	r17
     53c:	0f 91       	pop	r16
     53e:	ff 90       	pop	r15
     540:	ef 90       	pop	r14
     542:	08 95       	ret

00000544 <peekFrontStr>:
     544:	0f 93       	push	r16
     546:	1f 93       	push	r17
     548:	cf 93       	push	r28
     54a:	df 93       	push	r29
     54c:	ec 01       	movw	r28, r24
     54e:	8b 01       	movw	r16, r22
     550:	0e 94 1a 02 	call	0x434	; 0x434 <isStrQueueEmpty>
     554:	00 97       	sbiw	r24, 0x00	; 0
     556:	61 f4       	brne	.+24     	; 0x570 <peekFrontStr+0x2c>
     558:	ec 89       	ldd	r30, Y+20	; 0x14
     55a:	fd 89       	ldd	r31, Y+21	; 0x15
     55c:	ee 0f       	add	r30, r30
     55e:	ff 1f       	adc	r31, r31
     560:	ec 0f       	add	r30, r28
     562:	fd 1f       	adc	r31, r29
     564:	20 81       	ld	r18, Z
     566:	31 81       	ldd	r19, Z+1	; 0x01
     568:	f8 01       	movw	r30, r16
     56a:	31 83       	std	Z+1, r19	; 0x01
     56c:	20 83       	st	Z, r18
     56e:	02 c0       	rjmp	.+4      	; 0x574 <peekFrontStr+0x30>
     570:	8f ef       	ldi	r24, 0xFF	; 255
     572:	9f ef       	ldi	r25, 0xFF	; 255
     574:	df 91       	pop	r29
     576:	cf 91       	pop	r28
     578:	1f 91       	pop	r17
     57a:	0f 91       	pop	r16
     57c:	08 95       	ret

0000057e <TIMER2_INIT>:
     57e:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     582:	87 e0       	ldi	r24, 0x07	; 7
     584:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
     588:	81 e0       	ldi	r24, 0x01	; 1
     58a:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
     58e:	78 94       	sei
     590:	08 95       	ret

00000592 <LED_SYSTEM_ACTIVE_INIT>:
     592:	87 b1       	in	r24, 0x07	; 7
     594:	82 60       	ori	r24, 0x02	; 2
     596:	87 b9       	out	0x07, r24	; 7
     598:	88 b1       	in	r24, 0x08	; 8
     59a:	8d 7f       	andi	r24, 0xFD	; 253
     59c:	88 b9       	out	0x08, r24	; 8
     59e:	08 95       	ret

000005a0 <LED_system_active_off>:
     5a0:	88 b1       	in	r24, 0x08	; 8
     5a2:	8d 7f       	andi	r24, 0xFD	; 253
     5a4:	88 b9       	out	0x08, r24	; 8
     5a6:	08 95       	ret

000005a8 <LED_system_active_on>:
     5a8:	88 b1       	in	r24, 0x08	; 8
     5aa:	82 60       	ori	r24, 0x02	; 2
     5ac:	88 b9       	out	0x08, r24	; 8
     5ae:	08 95       	ret

000005b0 <LCD_1602A_latch>:
     5b0:	85 b1       	in	r24, 0x05	; 5
     5b2:	82 60       	ori	r24, 0x02	; 2
     5b4:	85 b9       	out	0x05, r24	; 5
     5b6:	85 e0       	ldi	r24, 0x05	; 5
     5b8:	8a 95       	dec	r24
     5ba:	f1 f7       	brne	.-4      	; 0x5b8 <LCD_1602A_latch+0x8>
     5bc:	00 00       	nop
     5be:	85 b1       	in	r24, 0x05	; 5
     5c0:	8d 7f       	andi	r24, 0xFD	; 253
     5c2:	85 b9       	out	0x05, r24	; 5
     5c4:	8f e8       	ldi	r24, 0x8F	; 143
     5c6:	91 e0       	ldi	r25, 0x01	; 1
     5c8:	01 97       	sbiw	r24, 0x01	; 1
     5ca:	f1 f7       	brne	.-4      	; 0x5c8 <LCD_1602A_latch+0x18>
     5cc:	00 c0       	rjmp	.+0      	; 0x5ce <LCD_1602A_latch+0x1e>
     5ce:	00 00       	nop
     5d0:	08 95       	ret

000005d2 <LCD_1602A_send_nibble>:
     5d2:	9b b1       	in	r25, 0x0b	; 11
     5d4:	9f 70       	andi	r25, 0x0F	; 15
     5d6:	9b b9       	out	0x0b, r25	; 11
     5d8:	80 ff       	sbrs	r24, 0
     5da:	03 c0       	rjmp	.+6      	; 0x5e2 <LCD_1602A_send_nibble+0x10>
     5dc:	9b b1       	in	r25, 0x0b	; 11
     5de:	90 61       	ori	r25, 0x10	; 16
     5e0:	9b b9       	out	0x0b, r25	; 11
     5e2:	81 ff       	sbrs	r24, 1
     5e4:	03 c0       	rjmp	.+6      	; 0x5ec <LCD_1602A_send_nibble+0x1a>
     5e6:	9b b1       	in	r25, 0x0b	; 11
     5e8:	90 62       	ori	r25, 0x20	; 32
     5ea:	9b b9       	out	0x0b, r25	; 11
     5ec:	82 ff       	sbrs	r24, 2
     5ee:	03 c0       	rjmp	.+6      	; 0x5f6 <LCD_1602A_send_nibble+0x24>
     5f0:	9b b1       	in	r25, 0x0b	; 11
     5f2:	90 64       	ori	r25, 0x40	; 64
     5f4:	9b b9       	out	0x0b, r25	; 11
     5f6:	83 ff       	sbrs	r24, 3
     5f8:	03 c0       	rjmp	.+6      	; 0x600 <LCD_1602A_send_nibble+0x2e>
     5fa:	8b b1       	in	r24, 0x0b	; 11
     5fc:	80 68       	ori	r24, 0x80	; 128
     5fe:	8b b9       	out	0x0b, r24	; 11
     600:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <LCD_1602A_latch>
     604:	08 95       	ret

00000606 <LCD_1602A_load_command>:
     606:	cf 93       	push	r28
     608:	c8 2f       	mov	r28, r24
     60a:	85 b1       	in	r24, 0x05	; 5
     60c:	8e 7f       	andi	r24, 0xFE	; 254
     60e:	85 b9       	out	0x05, r24	; 5
     610:	8c 2f       	mov	r24, r28
     612:	82 95       	swap	r24
     614:	8f 70       	andi	r24, 0x0F	; 15
     616:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <LCD_1602A_send_nibble>
     61a:	8c 2f       	mov	r24, r28
     61c:	8f 70       	andi	r24, 0x0F	; 15
     61e:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <LCD_1602A_send_nibble>
     622:	cf 91       	pop	r28
     624:	08 95       	ret

00000626 <LCD_1602A_load_data>:
     626:	cf 93       	push	r28
     628:	c8 2f       	mov	r28, r24
     62a:	85 b1       	in	r24, 0x05	; 5
     62c:	81 60       	ori	r24, 0x01	; 1
     62e:	85 b9       	out	0x05, r24	; 5
     630:	8c 2f       	mov	r24, r28
     632:	82 95       	swap	r24
     634:	8f 70       	andi	r24, 0x0F	; 15
     636:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <LCD_1602A_send_nibble>
     63a:	8c 2f       	mov	r24, r28
     63c:	8f 70       	andi	r24, 0x0F	; 15
     63e:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <LCD_1602A_send_nibble>
     642:	cf 91       	pop	r28
     644:	08 95       	ret

00000646 <LCD_1602A_create_char>:

void LCD_1602A_create_char(uint8_t location, uint8_t charmap[])
{
     646:	0f 93       	push	r16
     648:	1f 93       	push	r17
     64a:	cf 93       	push	r28
     64c:	8b 01       	movw	r16, r22
    location &= 0x07;                               // only 0–7 valid
     64e:	87 70       	andi	r24, 0x07	; 7
    LCD_1602A_load_command(0x40 | (location << 3)); // Set CGRAM address
     650:	90 e0       	ldi	r25, 0x00	; 0
     652:	88 0f       	add	r24, r24
     654:	99 1f       	adc	r25, r25
     656:	88 0f       	add	r24, r24
     658:	99 1f       	adc	r25, r25
     65a:	88 0f       	add	r24, r24
     65c:	99 1f       	adc	r25, r25
     65e:	80 64       	ori	r24, 0x40	; 64
     660:	0e 94 03 03 	call	0x606	; 0x606 <LCD_1602A_load_command>

    for (uint8_t i = 0; i < 8; i++)
     664:	c0 e0       	ldi	r28, 0x00	; 0
     666:	07 c0       	rjmp	.+14     	; 0x676 <LCD_1602A_create_char+0x30>
    {
        LCD_1602A_load_data(charmap[i]); // write pixel pattern
     668:	f8 01       	movw	r30, r16
     66a:	ec 0f       	add	r30, r28
     66c:	f1 1d       	adc	r31, r1
     66e:	80 81       	ld	r24, Z
     670:	0e 94 13 03 	call	0x626	; 0x626 <LCD_1602A_load_data>
void LCD_1602A_create_char(uint8_t location, uint8_t charmap[])
{
    location &= 0x07;                               // only 0–7 valid
    LCD_1602A_load_command(0x40 | (location << 3)); // Set CGRAM address

    for (uint8_t i = 0; i < 8; i++)
     674:	cf 5f       	subi	r28, 0xFF	; 255
     676:	c8 30       	cpi	r28, 0x08	; 8
     678:	b8 f3       	brcs	.-18     	; 0x668 <LCD_1602A_create_char+0x22>
    {
        LCD_1602A_load_data(charmap[i]); // write pixel pattern
    }

    // Return to DDRAM (display memory)
    LCD_1602A_load_command(0x80);
     67a:	80 e8       	ldi	r24, 0x80	; 128
     67c:	0e 94 03 03 	call	0x606	; 0x606 <LCD_1602A_load_command>
}
     680:	cf 91       	pop	r28
     682:	1f 91       	pop	r17
     684:	0f 91       	pop	r16
     686:	08 95       	ret

00000688 <LCD_1602A_init>:
    initialize the lcd in 4-bit mode
    params: void
    returns: void
*/
void LCD_1602A_init(void)
{
     688:	cf 93       	push	r28
     68a:	df 93       	push	r29
     68c:	cd b7       	in	r28, 0x3d	; 61
     68e:	de b7       	in	r29, 0x3e	; 62
     690:	a0 97       	sbiw	r28, 0x20	; 32
     692:	0f b6       	in	r0, 0x3f	; 63
     694:	f8 94       	cli
     696:	de bf       	out	0x3e, r29	; 62
     698:	0f be       	out	0x3f, r0	; 63
     69a:	cd bf       	out	0x3d, r28	; 61
    LCD_1602A_CTRL_DDR |= (1 << LCD_1602A_RS) | (1 << LCD_1602A_EN);
     69c:	84 b1       	in	r24, 0x04	; 4
     69e:	83 60       	ori	r24, 0x03	; 3
     6a0:	84 b9       	out	0x04, r24	; 4
    LCD_1602A_DATA_DDR |= (1 << LCD_1602A_D4) | (1 << LCD_1602A_D5) | (1 << LCD_1602A_D6) | (1 << LCD_1602A_D7);
     6a2:	8a b1       	in	r24, 0x0a	; 10
     6a4:	80 6f       	ori	r24, 0xF0	; 240
     6a6:	8a b9       	out	0x0a, r24	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6a8:	2f ef       	ldi	r18, 0xFF	; 255
     6aa:	89 ef       	ldi	r24, 0xF9	; 249
     6ac:	90 e0       	ldi	r25, 0x00	; 0
     6ae:	21 50       	subi	r18, 0x01	; 1
     6b0:	80 40       	sbci	r24, 0x00	; 0
     6b2:	90 40       	sbci	r25, 0x00	; 0
     6b4:	e1 f7       	brne	.-8      	; 0x6ae <LCD_1602A_init+0x26>
     6b6:	00 c0       	rjmp	.+0      	; 0x6b8 <LCD_1602A_init+0x30>
     6b8:	00 00       	nop

    _delay_ms(20); // Wait for LCD power up
    LCD_1602A_send_nibble(DISPLAY_WAIT_POWER_UP);
     6ba:	83 e0       	ldi	r24, 0x03	; 3
     6bc:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <LCD_1602A_send_nibble>
     6c0:	8f e1       	ldi	r24, 0x1F	; 31
     6c2:	9e e4       	ldi	r25, 0x4E	; 78
     6c4:	01 97       	sbiw	r24, 0x01	; 1
     6c6:	f1 f7       	brne	.-4      	; 0x6c4 <LCD_1602A_init+0x3c>
     6c8:	00 c0       	rjmp	.+0      	; 0x6ca <LCD_1602A_init+0x42>
     6ca:	00 00       	nop
    _delay_ms(5);
    LCD_1602A_send_nibble(DISPLAY_WAIT_POWER_UP);
     6cc:	83 e0       	ldi	r24, 0x03	; 3
     6ce:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <LCD_1602A_send_nibble>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6d2:	87 e5       	ldi	r24, 0x57	; 87
     6d4:	92 e0       	ldi	r25, 0x02	; 2
     6d6:	01 97       	sbiw	r24, 0x01	; 1
     6d8:	f1 f7       	brne	.-4      	; 0x6d6 <LCD_1602A_init+0x4e>
     6da:	00 c0       	rjmp	.+0      	; 0x6dc <LCD_1602A_init+0x54>
     6dc:	00 00       	nop
    _delay_us(150);
    LCD_1602A_send_nibble(DISPLAY_WAIT_POWER_UP);
     6de:	83 e0       	ldi	r24, 0x03	; 3
     6e0:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <LCD_1602A_send_nibble>

    LCD_1602A_send_nibble(DISPLAY_4_BIT_MODE); // Switch to 4-bit mode
     6e4:	82 e0       	ldi	r24, 0x02	; 2
     6e6:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <LCD_1602A_send_nibble>

    LCD_1602A_load_command(DISPLAY_FUNCTION_SET_4BIT_2LINE);
     6ea:	88 e2       	ldi	r24, 0x28	; 40
     6ec:	0e 94 03 03 	call	0x606	; 0x606 <LCD_1602A_load_command>
    LCD_1602A_load_command(DISPLAY_DISPLAY_ON_CURSOR_OFF);
     6f0:	8c e0       	ldi	r24, 0x0C	; 12
     6f2:	0e 94 03 03 	call	0x606	; 0x606 <LCD_1602A_load_command>
    LCD_1602A_load_command(DISPLAY_ENTRY_MODE_SET);
     6f6:	86 e0       	ldi	r24, 0x06	; 6
     6f8:	0e 94 03 03 	call	0x606	; 0x606 <LCD_1602A_load_command>
    LCD_1602A_load_command(DISPLAY_CLEAR_SCREEN);
     6fc:	81 e0       	ldi	r24, 0x01	; 1
     6fe:	0e 94 03 03 	call	0x606	; 0x606 <LCD_1602A_load_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     702:	8f e3       	ldi	r24, 0x3F	; 63
     704:	9f e1       	ldi	r25, 0x1F	; 31
     706:	01 97       	sbiw	r24, 0x01	; 1
     708:	f1 f7       	brne	.-4      	; 0x706 <LCD_1602A_init+0x7e>
     70a:	00 c0       	rjmp	.+0      	; 0x70c <LCD_1602A_init+0x84>
     70c:	00 00       	nop
    _delay_ms(2);

    /* create arrow glyphs once during init (used by display_set)
       location 0..3 reserved for arrows */
    uint8_t arrow_down[8] = {
     70e:	88 e0       	ldi	r24, 0x08	; 8
     710:	ee e4       	ldi	r30, 0x4E	; 78
     712:	f1 e0       	ldi	r31, 0x01	; 1
     714:	de 01       	movw	r26, r28
     716:	11 96       	adiw	r26, 0x01	; 1
     718:	01 90       	ld	r0, Z+
     71a:	0d 92       	st	X+, r0
     71c:	8a 95       	dec	r24
     71e:	e1 f7       	brne	.-8      	; 0x718 <LCD_1602A_init+0x90>
        0x0E,
        0x04,
        0x00
    };

    uint8_t arrow_up[8] = {
     720:	88 e0       	ldi	r24, 0x08	; 8
     722:	e6 e5       	ldi	r30, 0x56	; 86
     724:	f1 e0       	ldi	r31, 0x01	; 1
     726:	de 01       	movw	r26, r28
     728:	19 96       	adiw	r26, 0x09	; 9
     72a:	01 90       	ld	r0, Z+
     72c:	0d 92       	st	X+, r0
     72e:	8a 95       	dec	r24
     730:	e1 f7       	brne	.-8      	; 0x72a <LCD_1602A_init+0xa2>
        0x04,
        0x04,
        0x00
    };

    uint8_t arrow_right[8] = {
     732:	88 e0       	ldi	r24, 0x08	; 8
     734:	ee e5       	ldi	r30, 0x5E	; 94
     736:	f1 e0       	ldi	r31, 0x01	; 1
     738:	de 01       	movw	r26, r28
     73a:	51 96       	adiw	r26, 0x11	; 17
     73c:	01 90       	ld	r0, Z+
     73e:	0d 92       	st	X+, r0
     740:	8a 95       	dec	r24
     742:	e1 f7       	brne	.-8      	; 0x73c <LCD_1602A_init+0xb4>
        0x04,
        0x00,
        0x00
    };

    uint8_t arrow_left[8] = {
     744:	88 e0       	ldi	r24, 0x08	; 8
     746:	e6 e6       	ldi	r30, 0x66	; 102
     748:	f1 e0       	ldi	r31, 0x01	; 1
     74a:	de 01       	movw	r26, r28
     74c:	59 96       	adiw	r26, 0x19	; 25
     74e:	01 90       	ld	r0, Z+
     750:	0d 92       	st	X+, r0
     752:	8a 95       	dec	r24
     754:	e1 f7       	brne	.-8      	; 0x74e <LCD_1602A_init+0xc6>
        0x04,
        0x00,
        0x00
    };

    LCD_1602A_create_char(0, arrow_down); // store at location 0
     756:	be 01       	movw	r22, r28
     758:	6f 5f       	subi	r22, 0xFF	; 255
     75a:	7f 4f       	sbci	r23, 0xFF	; 255
     75c:	80 e0       	ldi	r24, 0x00	; 0
     75e:	0e 94 23 03 	call	0x646	; 0x646 <LCD_1602A_create_char>
    LCD_1602A_create_char(1, arrow_up);   // store at location 1
     762:	be 01       	movw	r22, r28
     764:	67 5f       	subi	r22, 0xF7	; 247
     766:	7f 4f       	sbci	r23, 0xFF	; 255
     768:	81 e0       	ldi	r24, 0x01	; 1
     76a:	0e 94 23 03 	call	0x646	; 0x646 <LCD_1602A_create_char>
    LCD_1602A_create_char(2, arrow_left);   // store at location 2
     76e:	be 01       	movw	r22, r28
     770:	67 5e       	subi	r22, 0xE7	; 231
     772:	7f 4f       	sbci	r23, 0xFF	; 255
     774:	82 e0       	ldi	r24, 0x02	; 2
     776:	0e 94 23 03 	call	0x646	; 0x646 <LCD_1602A_create_char>
    LCD_1602A_create_char(3, arrow_right);   // store at location 3
     77a:	be 01       	movw	r22, r28
     77c:	6f 5e       	subi	r22, 0xEF	; 239
     77e:	7f 4f       	sbci	r23, 0xFF	; 255
     780:	83 e0       	ldi	r24, 0x03	; 3
     782:	0e 94 23 03 	call	0x646	; 0x646 <LCD_1602A_create_char>
}
     786:	a0 96       	adiw	r28, 0x20	; 32
     788:	0f b6       	in	r0, 0x3f	; 63
     78a:	f8 94       	cli
     78c:	de bf       	out	0x3e, r29	; 62
     78e:	0f be       	out	0x3f, r0	; 63
     790:	cd bf       	out	0x3d, r28	; 61
     792:	df 91       	pop	r29
     794:	cf 91       	pop	r28
     796:	08 95       	ret

00000798 <DS18B20_reset>:
    params: void
    returns: uint8_t - 1 if presence pulse detected, 0 otherwise
*/
uint8_t DS18B20_reset(void)
{
    DS18B20_OUTPUT();
     798:	87 b1       	in	r24, 0x07	; 7
     79a:	81 60       	ori	r24, 0x01	; 1
     79c:	87 b9       	out	0x07, r24	; 7
    DS18B20_LOW();
     79e:	88 b1       	in	r24, 0x08	; 8
     7a0:	8e 7f       	andi	r24, 0xFE	; 254
     7a2:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7a4:	8f e7       	ldi	r24, 0x7F	; 127
     7a6:	97 e0       	ldi	r25, 0x07	; 7
     7a8:	01 97       	sbiw	r24, 0x01	; 1
     7aa:	f1 f7       	brne	.-4      	; 0x7a8 <DS18B20_reset+0x10>
     7ac:	00 c0       	rjmp	.+0      	; 0x7ae <DS18B20_reset+0x16>
     7ae:	00 00       	nop
    _delay_us(480);
    DS18B20_INPUT();
     7b0:	87 b1       	in	r24, 0x07	; 7
     7b2:	8e 7f       	andi	r24, 0xFE	; 254
     7b4:	87 b9       	out	0x07, r24	; 7
     7b6:	ef ee       	ldi	r30, 0xEF	; 239
     7b8:	f0 e0       	ldi	r31, 0x00	; 0
     7ba:	31 97       	sbiw	r30, 0x01	; 1
     7bc:	f1 f7       	brne	.-4      	; 0x7ba <DS18B20_reset+0x22>
     7be:	00 c0       	rjmp	.+0      	; 0x7c0 <DS18B20_reset+0x28>
     7c0:	00 00       	nop
    _delay_us(60);

    uint8_t presence = !(DS18B20_PIN & (1 << DS18B20_DQ));
     7c2:	96 b1       	in	r25, 0x06	; 6
     7c4:	81 e0       	ldi	r24, 0x01	; 1
     7c6:	89 27       	eor	r24, r25
     7c8:	81 70       	andi	r24, 0x01	; 1
     7ca:	ef e8       	ldi	r30, 0x8F	; 143
     7cc:	f6 e0       	ldi	r31, 0x06	; 6
     7ce:	31 97       	sbiw	r30, 0x01	; 1
     7d0:	f1 f7       	brne	.-4      	; 0x7ce <DS18B20_reset+0x36>
     7d2:	00 c0       	rjmp	.+0      	; 0x7d4 <DS18B20_reset+0x3c>
     7d4:	00 00       	nop
    _delay_us(420);
    return presence;
}
     7d6:	08 95       	ret

000007d8 <DS18B20_write_bit>:
    params: uint8_t bit - the bit to write (0 or 1)
    returns: void
*/
void DS18B20_write_bit(uint8_t bit)
{
    DS18B20_OUTPUT();
     7d8:	97 b1       	in	r25, 0x07	; 7
     7da:	91 60       	ori	r25, 0x01	; 1
     7dc:	97 b9       	out	0x07, r25	; 7
    DS18B20_LOW();
     7de:	98 b1       	in	r25, 0x08	; 8
     7e0:	9e 7f       	andi	r25, 0xFE	; 254
     7e2:	98 b9       	out	0x08, r25	; 8
    if (bit)
     7e4:	88 23       	and	r24, r24
     7e6:	71 f0       	breq	.+28     	; 0x804 <__DATA_REGION_LENGTH__+0x4>
     7e8:	85 e0       	ldi	r24, 0x05	; 5
     7ea:	8a 95       	dec	r24
     7ec:	f1 f7       	brne	.-4      	; 0x7ea <DS18B20_write_bit+0x12>
     7ee:	00 00       	nop
    {
        _delay_us(1);
        DS18B20_INPUT();
     7f0:	87 b1       	in	r24, 0x07	; 7
     7f2:	8e 7f       	andi	r24, 0xFE	; 254
     7f4:	87 b9       	out	0x07, r24	; 7
     7f6:	8f ee       	ldi	r24, 0xEF	; 239
     7f8:	90 e0       	ldi	r25, 0x00	; 0
     7fa:	01 97       	sbiw	r24, 0x01	; 1
     7fc:	f1 f7       	brne	.-4      	; 0x7fa <DS18B20_write_bit+0x22>
     7fe:	00 c0       	rjmp	.+0      	; 0x800 <__DATA_REGION_LENGTH__>
     800:	00 00       	nop
     802:	08 95       	ret
     804:	8f ee       	ldi	r24, 0xEF	; 239
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	01 97       	sbiw	r24, 0x01	; 1
     80a:	f1 f7       	brne	.-4      	; 0x808 <__DATA_REGION_LENGTH__+0x8>
     80c:	00 c0       	rjmp	.+0      	; 0x80e <__DATA_REGION_LENGTH__+0xe>
     80e:	00 00       	nop
        _delay_us(60);
    }
    else
    {
        _delay_us(60);
        DS18B20_INPUT();
     810:	87 b1       	in	r24, 0x07	; 7
     812:	8e 7f       	andi	r24, 0xFE	; 254
     814:	87 b9       	out	0x07, r24	; 7
     816:	08 95       	ret

00000818 <DS18B20_write_byte>:
    write a byte to the DS18B20 sensor
    params: uint8_t data - the byte to write
    returns: void
*/
void DS18B20_write_byte(uint8_t data)
{
     818:	cf 93       	push	r28
     81a:	df 93       	push	r29
     81c:	d8 2f       	mov	r29, r24
    for (uint8_t i = 0; i < 8; i++)
     81e:	c0 e0       	ldi	r28, 0x00	; 0
     820:	06 c0       	rjmp	.+12     	; 0x82e <DS18B20_write_byte+0x16>
    {
        DS18B20_write_bit(data & 0x01);
     822:	8d 2f       	mov	r24, r29
     824:	81 70       	andi	r24, 0x01	; 1
     826:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <DS18B20_write_bit>
        data >>= 1;
     82a:	d6 95       	lsr	r29
    params: uint8_t data - the byte to write
    returns: void
*/
void DS18B20_write_byte(uint8_t data)
{
    for (uint8_t i = 0; i < 8; i++)
     82c:	cf 5f       	subi	r28, 0xFF	; 255
     82e:	c8 30       	cpi	r28, 0x08	; 8
     830:	c0 f3       	brcs	.-16     	; 0x822 <DS18B20_write_byte+0xa>
    {
        DS18B20_write_bit(data & 0x01);
        data >>= 1;
    }
}
     832:	df 91       	pop	r29
     834:	cf 91       	pop	r28
     836:	08 95       	ret

00000838 <DS18B20_read_bit>:
    returns: uint8_t - the bit read (0 or 1)
*/
uint8_t DS18B20_read_bit(void)
{
    uint8_t bit;
    DS18B20_OUTPUT();
     838:	87 b1       	in	r24, 0x07	; 7
     83a:	81 60       	ori	r24, 0x01	; 1
     83c:	87 b9       	out	0x07, r24	; 7
    DS18B20_LOW();
     83e:	88 b1       	in	r24, 0x08	; 8
     840:	8e 7f       	andi	r24, 0xFE	; 254
     842:	88 b9       	out	0x08, r24	; 8
     844:	8a e0       	ldi	r24, 0x0A	; 10
     846:	8a 95       	dec	r24
     848:	f1 f7       	brne	.-4      	; 0x846 <DS18B20_read_bit+0xe>
     84a:	00 c0       	rjmp	.+0      	; 0x84c <DS18B20_read_bit+0x14>
    _delay_us(2);
    DS18B20_INPUT();
     84c:	87 b1       	in	r24, 0x07	; 7
     84e:	8e 7f       	andi	r24, 0xFE	; 254
     850:	87 b9       	out	0x07, r24	; 7
     852:	e5 e3       	ldi	r30, 0x35	; 53
     854:	ea 95       	dec	r30
     856:	f1 f7       	brne	.-4      	; 0x854 <DS18B20_read_bit+0x1c>
     858:	00 00       	nop
    _delay_us(10);
    bit = (DS18B20_PIN & (1 << DS18B20_DQ)) ? 1 : 0;
     85a:	86 b1       	in	r24, 0x06	; 6
     85c:	81 70       	andi	r24, 0x01	; 1
     85e:	e7 ec       	ldi	r30, 0xC7	; 199
     860:	f0 e0       	ldi	r31, 0x00	; 0
     862:	31 97       	sbiw	r30, 0x01	; 1
     864:	f1 f7       	brne	.-4      	; 0x862 <DS18B20_read_bit+0x2a>
     866:	00 c0       	rjmp	.+0      	; 0x868 <DS18B20_read_bit+0x30>
     868:	00 00       	nop
    _delay_us(50);
    return bit;
}
     86a:	08 95       	ret

0000086c <DS18B20_read_byte>:
    read a byte from the DS18B20 sensor
    params: void
    returns: uint8_t - the byte read
*/
uint8_t DS18B20_read_byte(void)
{
     86c:	cf 93       	push	r28
     86e:	df 93       	push	r29
    uint8_t data = 0;
    for (uint8_t i = 0; i < 8; i++)
     870:	c0 e0       	ldi	r28, 0x00	; 0
    params: void
    returns: uint8_t - the byte read
*/
uint8_t DS18B20_read_byte(void)
{
    uint8_t data = 0;
     872:	d0 e0       	ldi	r29, 0x00	; 0
    for (uint8_t i = 0; i < 8; i++)
     874:	06 c0       	rjmp	.+12     	; 0x882 <DS18B20_read_byte+0x16>
    {
        data >>= 1;
     876:	d6 95       	lsr	r29
        if (DS18B20_read_bit())
     878:	0e 94 1c 04 	call	0x838	; 0x838 <DS18B20_read_bit>
     87c:	81 11       	cpse	r24, r1
            data |= 0x80;
     87e:	d0 68       	ori	r29, 0x80	; 128
    returns: uint8_t - the byte read
*/
uint8_t DS18B20_read_byte(void)
{
    uint8_t data = 0;
    for (uint8_t i = 0; i < 8; i++)
     880:	cf 5f       	subi	r28, 0xFF	; 255
     882:	c8 30       	cpi	r28, 0x08	; 8
     884:	c0 f3       	brcs	.-16     	; 0x876 <DS18B20_read_byte+0xa>
        data >>= 1;
        if (DS18B20_read_bit())
            data |= 0x80;
    }
    return data;
}
     886:	8d 2f       	mov	r24, r29
     888:	df 91       	pop	r29
     88a:	cf 91       	pop	r28
     88c:	08 95       	ret

0000088e <DS18B20_read_temperature>:
    read temperature from the DS18B20 sensor
    params: void
    returns: float - the temperature in degrees Celsius
*/
float DS18B20_read_temperature(void)
{
     88e:	cf 93       	push	r28
    uint8_t temp_l, temp_h;
    int16_t temp;

    DS18B20_reset();
     890:	0e 94 cc 03 	call	0x798	; 0x798 <DS18B20_reset>
    DS18B20_write_byte(0xCC);
     894:	8c ec       	ldi	r24, 0xCC	; 204
     896:	0e 94 0c 04 	call	0x818	; 0x818 <DS18B20_write_byte>
    DS18B20_write_byte(0x44);
     89a:	84 e4       	ldi	r24, 0x44	; 68
     89c:	0e 94 0c 04 	call	0x818	; 0x818 <DS18B20_write_byte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8a0:	2f ef       	ldi	r18, 0xFF	; 255
     8a2:	8e e9       	ldi	r24, 0x9E	; 158
     8a4:	94 e2       	ldi	r25, 0x24	; 36
     8a6:	21 50       	subi	r18, 0x01	; 1
     8a8:	80 40       	sbci	r24, 0x00	; 0
     8aa:	90 40       	sbci	r25, 0x00	; 0
     8ac:	e1 f7       	brne	.-8      	; 0x8a6 <DS18B20_read_temperature+0x18>
     8ae:	00 c0       	rjmp	.+0      	; 0x8b0 <DS18B20_read_temperature+0x22>
     8b0:	00 00       	nop
    _delay_ms(750);

    DS18B20_reset();
     8b2:	0e 94 cc 03 	call	0x798	; 0x798 <DS18B20_reset>
    DS18B20_write_byte(0xCC);
     8b6:	8c ec       	ldi	r24, 0xCC	; 204
     8b8:	0e 94 0c 04 	call	0x818	; 0x818 <DS18B20_write_byte>
    DS18B20_write_byte(0xBE);
     8bc:	8e eb       	ldi	r24, 0xBE	; 190
     8be:	0e 94 0c 04 	call	0x818	; 0x818 <DS18B20_write_byte>

    temp_l = DS18B20_read_byte();
     8c2:	0e 94 36 04 	call	0x86c	; 0x86c <DS18B20_read_byte>
     8c6:	c8 2f       	mov	r28, r24
    temp_h = DS18B20_read_byte();
     8c8:	0e 94 36 04 	call	0x86c	; 0x86c <DS18B20_read_byte>

    temp = (temp_h << 8) | temp_l;
     8cc:	68 2f       	mov	r22, r24
     8ce:	70 e0       	ldi	r23, 0x00	; 0
     8d0:	76 2f       	mov	r23, r22
     8d2:	66 27       	eor	r22, r22
     8d4:	6c 2b       	or	r22, r28

    return (float)temp / 16.0;
     8d6:	07 2e       	mov	r0, r23
     8d8:	00 0c       	add	r0, r0
     8da:	88 0b       	sbc	r24, r24
     8dc:	99 0b       	sbc	r25, r25
     8de:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <__floatsisf>
     8e2:	20 e0       	ldi	r18, 0x00	; 0
     8e4:	30 e0       	ldi	r19, 0x00	; 0
     8e6:	40 e8       	ldi	r20, 0x80	; 128
     8e8:	5d e3       	ldi	r21, 0x3D	; 61
     8ea:	0e 94 37 10 	call	0x206e	; 0x206e <__mulsf3>
}
     8ee:	cf 91       	pop	r28
     8f0:	08 95       	ret

000008f2 <HCSR04_init>:
    params: void
    returns: void
*/
void HCSR04_init(void)
{
    HCSR04_TRIG_DDR |= (1 << HCSR04_TRIG_PIN);
     8f2:	8a b1       	in	r24, 0x0a	; 10
     8f4:	84 60       	ori	r24, 0x04	; 4
     8f6:	8a b9       	out	0x0a, r24	; 10
    HCSR04_ECHO_DDR &= ~(1 << HCSR04_ECHO_PIN);
     8f8:	8a b1       	in	r24, 0x0a	; 10
     8fa:	87 7f       	andi	r24, 0xF7	; 247
     8fc:	8a b9       	out	0x0a, r24	; 10
     8fe:	08 95       	ret

00000900 <HCSR04_trigger>:
    returns: void
*/
void HCSR04_trigger(void)
{
    /* Proper trigger: low for a short time, then high for 10us pulse */
    HCSR04_TRIG_PORT &= ~(1 << HCSR04_TRIG_PIN);
     900:	8b b1       	in	r24, 0x0b	; 11
     902:	8b 7f       	andi	r24, 0xFB	; 251
     904:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     906:	8a e0       	ldi	r24, 0x0A	; 10
     908:	8a 95       	dec	r24
     90a:	f1 f7       	brne	.-4      	; 0x908 <HCSR04_trigger+0x8>
     90c:	00 c0       	rjmp	.+0      	; 0x90e <HCSR04_trigger+0xe>
    _delay_us(2);
    HCSR04_TRIG_PORT |= (1 << HCSR04_TRIG_PIN);
     90e:	8b b1       	in	r24, 0x0b	; 11
     910:	84 60       	ori	r24, 0x04	; 4
     912:	8b b9       	out	0x0b, r24	; 11
     914:	85 e3       	ldi	r24, 0x35	; 53
     916:	8a 95       	dec	r24
     918:	f1 f7       	brne	.-4      	; 0x916 <HCSR04_trigger+0x16>
     91a:	00 00       	nop
    _delay_us(10);
    HCSR04_TRIG_PORT &= ~(1 << HCSR04_TRIG_PIN);
     91c:	8b b1       	in	r24, 0x0b	; 11
     91e:	8b 7f       	andi	r24, 0xFB	; 251
     920:	8b b9       	out	0x0b, r24	; 11
     922:	08 95       	ret

00000924 <HCSR04_read>:
*/
uint16_t HCSR04_read(void)
{
    uint32_t count = 0;

    while (!(HCSR04_ECHO_DEF_PIN & (1 << HCSR04_ECHO_PIN)));
     924:	4b 9b       	sbis	0x09, 3	; 9
     926:	fe cf       	rjmp	.-4      	; 0x924 <HCSR04_read>
     928:	60 e0       	ldi	r22, 0x00	; 0
     92a:	70 e0       	ldi	r23, 0x00	; 0
     92c:	cb 01       	movw	r24, r22
     92e:	08 c0       	rjmp	.+16     	; 0x940 <HCSR04_read+0x1c>
     930:	25 e0       	ldi	r18, 0x05	; 5
     932:	2a 95       	dec	r18
     934:	f1 f7       	brne	.-4      	; 0x932 <HCSR04_read+0xe>
     936:	00 00       	nop

    while (HCSR04_ECHO_DEF_PIN & (1 << HCSR04_ECHO_PIN))
    {
        _delay_us(1);
        count++;
     938:	6f 5f       	subi	r22, 0xFF	; 255
     93a:	7f 4f       	sbci	r23, 0xFF	; 255
     93c:	8f 4f       	sbci	r24, 0xFF	; 255
     93e:	9f 4f       	sbci	r25, 0xFF	; 255
{
    uint32_t count = 0;

    while (!(HCSR04_ECHO_DEF_PIN & (1 << HCSR04_ECHO_PIN)));

    while (HCSR04_ECHO_DEF_PIN & (1 << HCSR04_ECHO_PIN))
     940:	4b 99       	sbic	0x09, 3	; 9
     942:	f6 cf       	rjmp	.-20     	; 0x930 <HCSR04_read+0xc>
    {
        _delay_us(1);
        count++;
    }

    return (uint16_t)(count / 58.0);
     944:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <__floatunsisf>
     948:	20 e0       	ldi	r18, 0x00	; 0
     94a:	30 e0       	ldi	r19, 0x00	; 0
     94c:	48 e6       	ldi	r20, 0x68	; 104
     94e:	52 e4       	ldi	r21, 0x42	; 66
     950:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <__divsf3>
     954:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <__fixunssfsi>
}
     958:	cb 01       	movw	r24, r22
     95a:	08 95       	ret

0000095c <HCSR04_get_distance>:
    params: void
    returns: uint16_t - the distance in centimeters
*/
uint16_t HCSR04_get_distance(void)
{
    HCSR04_trigger();
     95c:	0e 94 80 04 	call	0x900	; 0x900 <HCSR04_trigger>
    return HCSR04_read();
     960:	0e 94 92 04 	call	0x924	; 0x924 <HCSR04_read>
}
     964:	08 95       	ret

00000966 <KEYPAD_init>:
    params: void
    returns: void
*/
void KEYPAD_init(void)
{
    KEYPAD_DDR &= ~((1 << KEYPAD_KEY_1) | (1 << KEYPAD_KEY_2) | (1 << KEYPAD_KEY_3) | (1 << KEYPAD_KEY_4));
     966:	84 b1       	in	r24, 0x04	; 4
     968:	83 7c       	andi	r24, 0xC3	; 195
     96a:	84 b9       	out	0x04, r24	; 4
    KEYPAD_PORT |= (1 << KEYPAD_KEY_1) | (1 << KEYPAD_KEY_2) | (1 << KEYPAD_KEY_3) | (1 << KEYPAD_KEY_4);
     96c:	85 b1       	in	r24, 0x05	; 5
     96e:	8c 63       	ori	r24, 0x3C	; 60
     970:	85 b9       	out	0x05, r24	; 5
     972:	08 95       	ret

00000974 <KEYPAD_read>:
    params: void
    returns: uint8_t - the key number (1-4) or KEYPAD_NO_KEY if no key is pressed
*/
uint8_t KEYPAD_read(void)
{
    if (!(KEYPAD_PIN & (1 << KEYPAD_KEY_1))) return 1;
     974:	1a 9b       	sbis	0x03, 2	; 3
     976:	08 c0       	rjmp	.+16     	; 0x988 <KEYPAD_read+0x14>
    if (!(KEYPAD_PIN & (1 << KEYPAD_KEY_2))) return 2;
     978:	1b 9b       	sbis	0x03, 3	; 3
     97a:	08 c0       	rjmp	.+16     	; 0x98c <KEYPAD_read+0x18>
    if (!(KEYPAD_PIN & (1 << KEYPAD_KEY_3))) return 3;
     97c:	1c 9b       	sbis	0x03, 4	; 3
     97e:	08 c0       	rjmp	.+16     	; 0x990 <KEYPAD_read+0x1c>
    if (!(KEYPAD_PIN & (1 << KEYPAD_KEY_4))) return 4;
     980:	1d 99       	sbic	0x03, 5	; 3
     982:	08 c0       	rjmp	.+16     	; 0x994 <KEYPAD_read+0x20>
     984:	84 e0       	ldi	r24, 0x04	; 4
     986:	08 95       	ret
    params: void
    returns: uint8_t - the key number (1-4) or KEYPAD_NO_KEY if no key is pressed
*/
uint8_t KEYPAD_read(void)
{
    if (!(KEYPAD_PIN & (1 << KEYPAD_KEY_1))) return 1;
     988:	81 e0       	ldi	r24, 0x01	; 1
     98a:	08 95       	ret
    if (!(KEYPAD_PIN & (1 << KEYPAD_KEY_2))) return 2;
     98c:	82 e0       	ldi	r24, 0x02	; 2
     98e:	08 95       	ret
    if (!(KEYPAD_PIN & (1 << KEYPAD_KEY_3))) return 3;
     990:	83 e0       	ldi	r24, 0x03	; 3
     992:	08 95       	ret
    if (!(KEYPAD_PIN & (1 << KEYPAD_KEY_4))) return 4;
    return KEYPAD_NO_KEY;
     994:	85 e0       	ldi	r24, 0x05	; 5
}
     996:	08 95       	ret

00000998 <display_set>:
    params: const unsigned char* title - title string (max 12 chars)
            const unsigned char* data - data string (max 16 chars)
    returns: void
*/
void display_set(const unsigned char *title, const unsigned char *data)
{
     998:	cf 92       	push	r12
     99a:	df 92       	push	r13
     99c:	ef 92       	push	r14
     99e:	ff 92       	push	r15
     9a0:	0f 93       	push	r16
     9a2:	1f 93       	push	r17
     9a4:	cf 93       	push	r28
     9a6:	df 93       	push	r29
     9a8:	cd b7       	in	r28, 0x3d	; 61
     9aa:	de b7       	in	r29, 0x3e	; 62
     9ac:	6c 97       	sbiw	r28, 0x1c	; 28
     9ae:	0f b6       	in	r0, 0x3f	; 63
     9b0:	f8 94       	cli
     9b2:	de bf       	out	0x3e, r29	; 62
     9b4:	0f be       	out	0x3f, r0	; 63
     9b6:	cd bf       	out	0x3d, r28	; 61
     9b8:	c8 2e       	mov	r12, r24
     9ba:	d9 2e       	mov	r13, r25
     9bc:	db 01       	movw	r26, r22
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9be:	8f e3       	ldi	r24, 0x3F	; 63
     9c0:	9f e1       	ldi	r25, 0x1F	; 31
     9c2:	01 97       	sbiw	r24, 0x01	; 1
     9c4:	f1 f7       	brne	.-4      	; 0x9c2 <display_set+0x2a>
     9c6:	00 c0       	rjmp	.+0      	; 0x9c8 <display_set+0x30>
     9c8:	00 00       	nop
    unsigned char line1[12];
    unsigned char line2[16];

    // prepare line1: copy up to 12 chars from title, pad with spaces
    int i = 0;
    for (; i < 12 && *title; ++i)
     9ca:	ec 2c       	mov	r14, r12
     9cc:	fd 2c       	mov	r15, r13

    unsigned char line1[12];
    unsigned char line2[16];

    // prepare line1: copy up to 12 chars from title, pad with spaces
    int i = 0;
     9ce:	80 e0       	ldi	r24, 0x00	; 0
     9d0:	90 e0       	ldi	r25, 0x00	; 0
    for (; i < 12 && *title; ++i)
     9d2:	0b c0       	rjmp	.+22     	; 0x9ea <display_set+0x52>
        line1[i] = *title++;
     9d4:	ef ef       	ldi	r30, 0xFF	; 255
     9d6:	ee 1a       	sub	r14, r30
     9d8:	fe 0a       	sbc	r15, r30
     9da:	e1 e0       	ldi	r30, 0x01	; 1
     9dc:	f0 e0       	ldi	r31, 0x00	; 0
     9de:	ec 0f       	add	r30, r28
     9e0:	fd 1f       	adc	r31, r29
     9e2:	e8 0f       	add	r30, r24
     9e4:	f9 1f       	adc	r31, r25
     9e6:	20 83       	st	Z, r18
    unsigned char line1[12];
    unsigned char line2[16];

    // prepare line1: copy up to 12 chars from title, pad with spaces
    int i = 0;
    for (; i < 12 && *title; ++i)
     9e8:	01 96       	adiw	r24, 0x01	; 1
     9ea:	8c 30       	cpi	r24, 0x0C	; 12
     9ec:	91 05       	cpc	r25, r1
     9ee:	74 f4       	brge	.+28     	; 0xa0c <display_set+0x74>
     9f0:	f7 01       	movw	r30, r14
     9f2:	20 81       	ld	r18, Z
     9f4:	21 11       	cpse	r18, r1
     9f6:	ee cf       	rjmp	.-36     	; 0x9d4 <display_set+0x3c>
     9f8:	09 c0       	rjmp	.+18     	; 0xa0c <display_set+0x74>
        line1[i] = *title++;

    for (; i < 12; ++i)
        line1[i] = ' ';
     9fa:	e1 e0       	ldi	r30, 0x01	; 1
     9fc:	f0 e0       	ldi	r31, 0x00	; 0
     9fe:	ec 0f       	add	r30, r28
     a00:	fd 1f       	adc	r31, r29
     a02:	e8 0f       	add	r30, r24
     a04:	f9 1f       	adc	r31, r25
     a06:	20 e2       	ldi	r18, 0x20	; 32
     a08:	20 83       	st	Z, r18
    // prepare line1: copy up to 12 chars from title, pad with spaces
    int i = 0;
    for (; i < 12 && *title; ++i)
        line1[i] = *title++;

    for (; i < 12; ++i)
     a0a:	01 96       	adiw	r24, 0x01	; 1
     a0c:	8c 30       	cpi	r24, 0x0C	; 12
     a0e:	91 05       	cpc	r25, r1
     a10:	a4 f3       	brlt	.-24     	; 0x9fa <display_set+0x62>
     a12:	80 e0       	ldi	r24, 0x00	; 0
     a14:	90 e0       	ldi	r25, 0x00	; 0
     a16:	09 c0       	rjmp	.+18     	; 0xa2a <display_set+0x92>
    /* custom characters created at init; just write the codes */

    // prepare line2: copy up to 16 chars from data, pad with spaces
    i = 0;
    for (; i < 16 && *data; ++i)
        line2[i] = *data++;
     a18:	11 96       	adiw	r26, 0x01	; 1
     a1a:	ed e0       	ldi	r30, 0x0D	; 13
     a1c:	f0 e0       	ldi	r31, 0x00	; 0
     a1e:	ec 0f       	add	r30, r28
     a20:	fd 1f       	adc	r31, r29
     a22:	e8 0f       	add	r30, r24
     a24:	f9 1f       	adc	r31, r25
     a26:	20 83       	st	Z, r18

    /* custom characters created at init; just write the codes */

    // prepare line2: copy up to 16 chars from data, pad with spaces
    i = 0;
    for (; i < 16 && *data; ++i)
     a28:	01 96       	adiw	r24, 0x01	; 1
     a2a:	80 31       	cpi	r24, 0x10	; 16
     a2c:	91 05       	cpc	r25, r1
     a2e:	6c f4       	brge	.+26     	; 0xa4a <display_set+0xb2>
     a30:	2c 91       	ld	r18, X
     a32:	21 11       	cpse	r18, r1
     a34:	f1 cf       	rjmp	.-30     	; 0xa18 <display_set+0x80>
     a36:	09 c0       	rjmp	.+18     	; 0xa4a <display_set+0xb2>
        line2[i] = *data++;

    // LCD_1602A_load_data(0);

    for (; i < 16; ++i)
        line2[i] = ' ';
     a38:	ed e0       	ldi	r30, 0x0D	; 13
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	ec 0f       	add	r30, r28
     a3e:	fd 1f       	adc	r31, r29
     a40:	e8 0f       	add	r30, r24
     a42:	f9 1f       	adc	r31, r25
     a44:	20 e2       	ldi	r18, 0x20	; 32
     a46:	20 83       	st	Z, r18
    for (; i < 16 && *data; ++i)
        line2[i] = *data++;

    // LCD_1602A_load_data(0);

    for (; i < 16; ++i)
     a48:	01 96       	adiw	r24, 0x01	; 1
     a4a:	80 31       	cpi	r24, 0x10	; 16
     a4c:	91 05       	cpc	r25, r1
     a4e:	a4 f3       	brlt	.-24     	; 0xa38 <display_set+0xa0>
        line2[i] = ' ';

    // reset cursor to first line and write 12 chars
    LCD_1602A_load_command(DISPLAY_SET_CURSOR_LINE_1);
     a50:	80 e8       	ldi	r24, 0x80	; 128
     a52:	0e 94 03 03 	call	0x606	; 0x606 <LCD_1602A_load_command>
    for (i = 0; i < 12; ++i)
     a56:	00 e0       	ldi	r16, 0x00	; 0
     a58:	10 e0       	ldi	r17, 0x00	; 0
     a5a:	0b c0       	rjmp	.+22     	; 0xa72 <display_set+0xda>
    {
        LCD_1602A_load_data(line1[i]);
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	ec 0f       	add	r30, r28
     a62:	fd 1f       	adc	r31, r29
     a64:	e0 0f       	add	r30, r16
     a66:	f1 1f       	adc	r31, r17
     a68:	80 81       	ld	r24, Z
     a6a:	0e 94 13 03 	call	0x626	; 0x626 <LCD_1602A_load_data>
    for (; i < 16; ++i)
        line2[i] = ' ';

    // reset cursor to first line and write 12 chars
    LCD_1602A_load_command(DISPLAY_SET_CURSOR_LINE_1);
    for (i = 0; i < 12; ++i)
     a6e:	0f 5f       	subi	r16, 0xFF	; 255
     a70:	1f 4f       	sbci	r17, 0xFF	; 255
     a72:	0c 30       	cpi	r16, 0x0C	; 12
     a74:	11 05       	cpc	r17, r1
     a76:	94 f3       	brlt	.-28     	; 0xa5c <display_set+0xc4>
    {
        LCD_1602A_load_data(line1[i]);
    }

    if (title != NULL && strcmp((const char *)original_title, "ALERT") == 0) {
     a78:	ef 28       	or	r14, r15
     a7a:	a9 f0       	breq	.+42     	; 0xaa6 <display_set+0x10e>
     a7c:	6c ed       	ldi	r22, 0xDC	; 220
     a7e:	71 e0       	ldi	r23, 0x01	; 1
     a80:	8c 2d       	mov	r24, r12
     a82:	9d 2d       	mov	r25, r13
     a84:	0e 94 13 12 	call	0x2426	; 0x2426 <strcmp>
     a88:	89 2b       	or	r24, r25
     a8a:	39 f0       	breq	.+14     	; 0xa9a <display_set+0x102>
     a8c:	0c c0       	rjmp	.+24     	; 0xaa6 <display_set+0x10e>
        for (i = 12; i < 16; ++i)
        LCD_1602A_load_data(' ');
     a8e:	80 e2       	ldi	r24, 0x20	; 32
     a90:	0e 94 13 03 	call	0x626	; 0x626 <LCD_1602A_load_data>
    {
        LCD_1602A_load_data(line1[i]);
    }

    if (title != NULL && strcmp((const char *)original_title, "ALERT") == 0) {
        for (i = 12; i < 16; ++i)
     a94:	0f 5f       	subi	r16, 0xFF	; 255
     a96:	1f 4f       	sbci	r17, 0xFF	; 255
     a98:	02 c0       	rjmp	.+4      	; 0xa9e <display_set+0x106>
     a9a:	0c e0       	ldi	r16, 0x0C	; 12
     a9c:	10 e0       	ldi	r17, 0x00	; 0
     a9e:	00 31       	cpi	r16, 0x10	; 16
     aa0:	11 05       	cpc	r17, r1
     aa2:	ac f3       	brlt	.-22     	; 0xa8e <display_set+0xf6>
     aa4:	0c c0       	rjmp	.+24     	; 0xabe <display_set+0x126>
        LCD_1602A_load_data(' ');

    }
    else {
        LCD_1602A_load_data(2);
     aa6:	82 e0       	ldi	r24, 0x02	; 2
     aa8:	0e 94 13 03 	call	0x626	; 0x626 <LCD_1602A_load_data>
        LCD_1602A_load_data(0);
     aac:	80 e0       	ldi	r24, 0x00	; 0
     aae:	0e 94 13 03 	call	0x626	; 0x626 <LCD_1602A_load_data>
        LCD_1602A_load_data(1);
     ab2:	81 e0       	ldi	r24, 0x01	; 1
     ab4:	0e 94 13 03 	call	0x626	; 0x626 <LCD_1602A_load_data>
        LCD_1602A_load_data(3);
     ab8:	83 e0       	ldi	r24, 0x03	; 3
     aba:	0e 94 13 03 	call	0x626	; 0x626 <LCD_1602A_load_data>
    }

    // reset cursor to second line and write 16 chars
    LCD_1602A_load_command(DISPLAY_SET_CURSOR_LINE_2);
     abe:	80 ec       	ldi	r24, 0xC0	; 192
     ac0:	0e 94 03 03 	call	0x606	; 0x606 <LCD_1602A_load_command>
    for (i = 0; i < 16; ++i)
     ac4:	00 e0       	ldi	r16, 0x00	; 0
     ac6:	10 e0       	ldi	r17, 0x00	; 0
     ac8:	0b c0       	rjmp	.+22     	; 0xae0 <display_set+0x148>
    {
        LCD_1602A_load_data(line2[i]);
     aca:	ed e0       	ldi	r30, 0x0D	; 13
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	ec 0f       	add	r30, r28
     ad0:	fd 1f       	adc	r31, r29
     ad2:	e0 0f       	add	r30, r16
     ad4:	f1 1f       	adc	r31, r17
     ad6:	80 81       	ld	r24, Z
     ad8:	0e 94 13 03 	call	0x626	; 0x626 <LCD_1602A_load_data>
        LCD_1602A_load_data(3);
    }

    // reset cursor to second line and write 16 chars
    LCD_1602A_load_command(DISPLAY_SET_CURSOR_LINE_2);
    for (i = 0; i < 16; ++i)
     adc:	0f 5f       	subi	r16, 0xFF	; 255
     ade:	1f 4f       	sbci	r17, 0xFF	; 255
     ae0:	00 31       	cpi	r16, 0x10	; 16
     ae2:	11 05       	cpc	r17, r1
     ae4:	94 f3       	brlt	.-28     	; 0xaca <display_set+0x132>
    {
        LCD_1602A_load_data(line2[i]);
    }
}
     ae6:	6c 96       	adiw	r28, 0x1c	; 28
     ae8:	0f b6       	in	r0, 0x3f	; 63
     aea:	f8 94       	cli
     aec:	de bf       	out	0x3e, r29	; 62
     aee:	0f be       	out	0x3f, r0	; 63
     af0:	cd bf       	out	0x3d, r28	; 61
     af2:	df 91       	pop	r29
     af4:	cf 91       	pop	r28
     af6:	1f 91       	pop	r17
     af8:	0f 91       	pop	r16
     afa:	ff 90       	pop	r15
     afc:	ef 90       	pop	r14
     afe:	df 90       	pop	r13
     b00:	cf 90       	pop	r12
     b02:	08 95       	ret

00000b04 <get_tank_capacity_at_height>:


float get_tank_capacity_at_height(int water_depth)
{
     b04:	cf 92       	push	r12
     b06:	df 92       	push	r13
     b08:	ef 92       	push	r14
     b0a:	ff 92       	push	r15
    float water_height = (float)TANK_HEIGHT_IN_CM - (float)water_depth;
     b0c:	bc 01       	movw	r22, r24
     b0e:	99 0f       	add	r25, r25
     b10:	88 0b       	sbc	r24, r24
     b12:	99 0b       	sbc	r25, r25
     b14:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <__floatsisf>
     b18:	9b 01       	movw	r18, r22
     b1a:	ac 01       	movw	r20, r24
     b1c:	6a e9       	ldi	r22, 0x9A	; 154
     b1e:	79 e9       	ldi	r23, 0x99	; 153
     b20:	89 e7       	ldi	r24, 0x79	; 121
     b22:	91 e4       	ldi	r25, 0x41	; 65
     b24:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <__subsf3>

    // // The following formula assumes the tank is a perfect cylinder: V = π * r^2 * h
    float volume = (PI * ((float)TANK_RADIUS_IN_CM * (float)TANK_RADIUS_IN_CM) * water_height) / 1000.0; // convert cm^3 to liters
     b28:	20 ed       	ldi	r18, 0xD0	; 208
     b2a:	3f e0       	ldi	r19, 0x0F	; 15
     b2c:	49 e4       	ldi	r20, 0x49	; 73
     b2e:	53 e4       	ldi	r21, 0x43	; 67
     b30:	0e 94 37 10 	call	0x206e	; 0x206e <__mulsf3>
     b34:	20 e0       	ldi	r18, 0x00	; 0
     b36:	30 e0       	ldi	r19, 0x00	; 0
     b38:	4a e7       	ldi	r20, 0x7A	; 122
     b3a:	54 e4       	ldi	r21, 0x44	; 68
     b3c:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <__divsf3>
     b40:	6b 01       	movw	r12, r22
     b42:	7c 01       	movw	r14, r24

    if (volume < 0.0)
     b44:	20 e0       	ldi	r18, 0x00	; 0
     b46:	30 e0       	ldi	r19, 0x00	; 0
     b48:	a9 01       	movw	r20, r18
     b4a:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <__cmpsf2>
     b4e:	88 23       	and	r24, r24
     b50:	1c f4       	brge	.+6      	; 0xb58 <get_tank_capacity_at_height+0x54>
    {
        volume = 0.0;
     b52:	c1 2c       	mov	r12, r1
     b54:	d1 2c       	mov	r13, r1
     b56:	76 01       	movw	r14, r12
    }

    return volume;
}
     b58:	c7 01       	movw	r24, r14
     b5a:	b6 01       	movw	r22, r12
     b5c:	ff 90       	pop	r15
     b5e:	ef 90       	pop	r14
     b60:	df 90       	pop	r13
     b62:	cf 90       	pop	r12
     b64:	08 95       	ret

00000b66 <get_tank_capacity>:
    returns: float - the tank capacity in liters
*/
float get_tank_capacity()
{

    uint16_t water_depth = HCSR04_get_distance();
     b66:	0e 94 ae 04 	call	0x95c	; 0x95c <HCSR04_get_distance>
    water_depth *= 1.5; // convert to float
     b6a:	bc 01       	movw	r22, r24
     b6c:	80 e0       	ldi	r24, 0x00	; 0
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <__floatunsisf>
     b74:	20 e0       	ldi	r18, 0x00	; 0
     b76:	30 e0       	ldi	r19, 0x00	; 0
     b78:	40 ec       	ldi	r20, 0xC0	; 192
     b7a:	5f e3       	ldi	r21, 0x3F	; 63
     b7c:	0e 94 37 10 	call	0x206e	; 0x206e <__mulsf3>
     b80:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <__fixunssfsi>

    return get_tank_capacity_at_height(water_depth);
     b84:	cb 01       	movw	r24, r22
     b86:	0e 94 82 05 	call	0xb04	; 0xb04 <get_tank_capacity_at_height>
}
     b8a:	08 95       	ret

00000b8c <get_refill_rate>:
    get the refill rate based on tank capacity change over time
    params: void
    returns: float - the refill rate in liters per minute
*/
float get_refill_rate()
{
     b8c:	8f 92       	push	r8
     b8e:	9f 92       	push	r9
     b90:	af 92       	push	r10
     b92:	bf 92       	push	r11
     b94:	cf 92       	push	r12
     b96:	df 92       	push	r13
     b98:	ef 92       	push	r14
     b9a:	ff 92       	push	r15
     b9c:	cf 93       	push	r28
     b9e:	df 93       	push	r29
     ba0:	00 d0       	rcall	.+0      	; 0xba2 <get_refill_rate+0x16>
     ba2:	00 d0       	rcall	.+0      	; 0xba4 <get_refill_rate+0x18>
     ba4:	cd b7       	in	r28, 0x3d	; 61
     ba6:	de b7       	in	r29, 0x3e	; 62
    int height_1;
    peekRear(&height_per_second, &height_1);
     ba8:	be 01       	movw	r22, r28
     baa:	6f 5f       	subi	r22, 0xFF	; 255
     bac:	7f 4f       	sbci	r23, 0xFF	; 255
     bae:	86 ed       	ldi	r24, 0xD6	; 214
     bb0:	94 e0       	ldi	r25, 0x04	; 4
     bb2:	0e 94 c7 01 	call	0x38e	; 0x38e <peekRear>

    int height_2;
    peekFront(&height_per_second, &height_2);
     bb6:	be 01       	movw	r22, r28
     bb8:	6d 5f       	subi	r22, 0xFD	; 253
     bba:	7f 4f       	sbci	r23, 0xFF	; 255
     bbc:	86 ed       	ldi	r24, 0xD6	; 214
     bbe:	94 e0       	ldi	r25, 0x04	; 4
     bc0:	0e 94 aa 01 	call	0x354	; 0x354 <peekFront>

    float capacity_at_1 = get_tank_capacity_at_height(height_1 * 1.5);
     bc4:	69 81       	ldd	r22, Y+1	; 0x01
     bc6:	7a 81       	ldd	r23, Y+2	; 0x02
     bc8:	07 2e       	mov	r0, r23
     bca:	00 0c       	add	r0, r0
     bcc:	88 0b       	sbc	r24, r24
     bce:	99 0b       	sbc	r25, r25
     bd0:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <__floatsisf>
     bd4:	20 e0       	ldi	r18, 0x00	; 0
     bd6:	30 e0       	ldi	r19, 0x00	; 0
     bd8:	40 ec       	ldi	r20, 0xC0	; 192
     bda:	5f e3       	ldi	r21, 0x3F	; 63
     bdc:	0e 94 37 10 	call	0x206e	; 0x206e <__mulsf3>
     be0:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <__fixsfsi>
     be4:	cb 01       	movw	r24, r22
     be6:	0e 94 82 05 	call	0xb04	; 0xb04 <get_tank_capacity_at_height>
     bea:	4b 01       	movw	r8, r22
     bec:	5c 01       	movw	r10, r24
    float capacity_at_2 = get_tank_capacity_at_height(height_2 * 1.5);
     bee:	6b 81       	ldd	r22, Y+3	; 0x03
     bf0:	7c 81       	ldd	r23, Y+4	; 0x04
     bf2:	07 2e       	mov	r0, r23
     bf4:	00 0c       	add	r0, r0
     bf6:	88 0b       	sbc	r24, r24
     bf8:	99 0b       	sbc	r25, r25
     bfa:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <__floatsisf>
     bfe:	20 e0       	ldi	r18, 0x00	; 0
     c00:	30 e0       	ldi	r19, 0x00	; 0
     c02:	40 ec       	ldi	r20, 0xC0	; 192
     c04:	5f e3       	ldi	r21, 0x3F	; 63
     c06:	0e 94 37 10 	call	0x206e	; 0x206e <__mulsf3>
     c0a:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <__fixsfsi>
     c0e:	cb 01       	movw	r24, r22
     c10:	0e 94 82 05 	call	0xb04	; 0xb04 <get_tank_capacity_at_height>
     c14:	6b 01       	movw	r12, r22
     c16:	7c 01       	movw	r14, r24

    if (capacity_at_1 > capacity_at_2)
     c18:	9b 01       	movw	r18, r22
     c1a:	ac 01       	movw	r20, r24
     c1c:	c5 01       	movw	r24, r10
     c1e:	b4 01       	movw	r22, r8
     c20:	0e 94 32 10 	call	0x2064	; 0x2064 <__gesf2>
     c24:	18 16       	cp	r1, r24
     c26:	9c f0       	brlt	.+38     	; 0xc4e <get_refill_rate+0xc2>
    {
        return 0.0; // no leak detected
    }

    float leak_rate_per_second = (capacity_at_2 - capacity_at_1) / 2.0;
     c28:	a5 01       	movw	r20, r10
     c2a:	94 01       	movw	r18, r8
     c2c:	c7 01       	movw	r24, r14
     c2e:	b6 01       	movw	r22, r12
     c30:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <__subsf3>
     c34:	20 e0       	ldi	r18, 0x00	; 0
     c36:	30 e0       	ldi	r19, 0x00	; 0
     c38:	40 e0       	ldi	r20, 0x00	; 0
     c3a:	5f e3       	ldi	r21, 0x3F	; 63
     c3c:	0e 94 37 10 	call	0x206e	; 0x206e <__mulsf3>

    return leak_rate_per_second * 60.0; // convert to liters per minute
     c40:	20 e0       	ldi	r18, 0x00	; 0
     c42:	30 e0       	ldi	r19, 0x00	; 0
     c44:	40 e7       	ldi	r20, 0x70	; 112
     c46:	52 e4       	ldi	r21, 0x42	; 66
     c48:	0e 94 37 10 	call	0x206e	; 0x206e <__mulsf3>
     c4c:	03 c0       	rjmp	.+6      	; 0xc54 <get_refill_rate+0xc8>
    float capacity_at_1 = get_tank_capacity_at_height(height_1 * 1.5);
    float capacity_at_2 = get_tank_capacity_at_height(height_2 * 1.5);

    if (capacity_at_1 > capacity_at_2)
    {
        return 0.0; // no leak detected
     c4e:	60 e0       	ldi	r22, 0x00	; 0
     c50:	70 e0       	ldi	r23, 0x00	; 0
     c52:	cb 01       	movw	r24, r22
    }

    float leak_rate_per_second = (capacity_at_2 - capacity_at_1) / 2.0;

    return leak_rate_per_second * 60.0; // convert to liters per minute
}
     c54:	0f 90       	pop	r0
     c56:	0f 90       	pop	r0
     c58:	0f 90       	pop	r0
     c5a:	0f 90       	pop	r0
     c5c:	df 91       	pop	r29
     c5e:	cf 91       	pop	r28
     c60:	ff 90       	pop	r15
     c62:	ef 90       	pop	r14
     c64:	df 90       	pop	r13
     c66:	cf 90       	pop	r12
     c68:	bf 90       	pop	r11
     c6a:	af 90       	pop	r10
     c6c:	9f 90       	pop	r9
     c6e:	8f 90       	pop	r8
     c70:	08 95       	ret

00000c72 <get_leak_rate>:
    get the leak rate based on tank capacity change over time
    params: void
    returns: float - the leak rate in liters per minute
*/
float get_leak_rate()
{
     c72:	8f 92       	push	r8
     c74:	9f 92       	push	r9
     c76:	af 92       	push	r10
     c78:	bf 92       	push	r11
     c7a:	cf 92       	push	r12
     c7c:	df 92       	push	r13
     c7e:	ef 92       	push	r14
     c80:	ff 92       	push	r15
     c82:	cf 93       	push	r28
     c84:	df 93       	push	r29
     c86:	00 d0       	rcall	.+0      	; 0xc88 <get_leak_rate+0x16>
     c88:	00 d0       	rcall	.+0      	; 0xc8a <get_leak_rate+0x18>
     c8a:	cd b7       	in	r28, 0x3d	; 61
     c8c:	de b7       	in	r29, 0x3e	; 62
    int height_1;
    peekRear(&height_per_second, &height_1);
     c8e:	be 01       	movw	r22, r28
     c90:	6f 5f       	subi	r22, 0xFF	; 255
     c92:	7f 4f       	sbci	r23, 0xFF	; 255
     c94:	86 ed       	ldi	r24, 0xD6	; 214
     c96:	94 e0       	ldi	r25, 0x04	; 4
     c98:	0e 94 c7 01 	call	0x38e	; 0x38e <peekRear>

    int height_2;
    peekFront(&height_per_second, &height_2);
     c9c:	be 01       	movw	r22, r28
     c9e:	6d 5f       	subi	r22, 0xFD	; 253
     ca0:	7f 4f       	sbci	r23, 0xFF	; 255
     ca2:	86 ed       	ldi	r24, 0xD6	; 214
     ca4:	94 e0       	ldi	r25, 0x04	; 4
     ca6:	0e 94 aa 01 	call	0x354	; 0x354 <peekFront>

    float capacity_at_1 = get_tank_capacity_at_height(height_1 * 1.5);
     caa:	69 81       	ldd	r22, Y+1	; 0x01
     cac:	7a 81       	ldd	r23, Y+2	; 0x02
     cae:	07 2e       	mov	r0, r23
     cb0:	00 0c       	add	r0, r0
     cb2:	88 0b       	sbc	r24, r24
     cb4:	99 0b       	sbc	r25, r25
     cb6:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <__floatsisf>
     cba:	20 e0       	ldi	r18, 0x00	; 0
     cbc:	30 e0       	ldi	r19, 0x00	; 0
     cbe:	40 ec       	ldi	r20, 0xC0	; 192
     cc0:	5f e3       	ldi	r21, 0x3F	; 63
     cc2:	0e 94 37 10 	call	0x206e	; 0x206e <__mulsf3>
     cc6:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <__fixsfsi>
     cca:	cb 01       	movw	r24, r22
     ccc:	0e 94 82 05 	call	0xb04	; 0xb04 <get_tank_capacity_at_height>
     cd0:	6b 01       	movw	r12, r22
     cd2:	7c 01       	movw	r14, r24
    float capacity_at_2 = get_tank_capacity_at_height(height_2 * 1.5);
     cd4:	6b 81       	ldd	r22, Y+3	; 0x03
     cd6:	7c 81       	ldd	r23, Y+4	; 0x04
     cd8:	07 2e       	mov	r0, r23
     cda:	00 0c       	add	r0, r0
     cdc:	88 0b       	sbc	r24, r24
     cde:	99 0b       	sbc	r25, r25
     ce0:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <__floatsisf>
     ce4:	20 e0       	ldi	r18, 0x00	; 0
     ce6:	30 e0       	ldi	r19, 0x00	; 0
     ce8:	40 ec       	ldi	r20, 0xC0	; 192
     cea:	5f e3       	ldi	r21, 0x3F	; 63
     cec:	0e 94 37 10 	call	0x206e	; 0x206e <__mulsf3>
     cf0:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <__fixsfsi>
     cf4:	cb 01       	movw	r24, r22
     cf6:	0e 94 82 05 	call	0xb04	; 0xb04 <get_tank_capacity_at_height>
     cfa:	4b 01       	movw	r8, r22
     cfc:	5c 01       	movw	r10, r24

    if (capacity_at_1 < capacity_at_2) {
     cfe:	9b 01       	movw	r18, r22
     d00:	ac 01       	movw	r20, r24
     d02:	c7 01       	movw	r24, r14
     d04:	b6 01       	movw	r22, r12
     d06:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <__cmpsf2>
     d0a:	88 23       	and	r24, r24
     d0c:	fc f0       	brlt	.+62     	; 0xd4c <get_leak_rate+0xda>
        return 0.0; // no leak detected
    }
    float leak_rate_per_second = (capacity_at_1 - capacity_at_2) / queueSize(&height_per_second);
     d0e:	a5 01       	movw	r20, r10
     d10:	94 01       	movw	r18, r8
     d12:	c7 01       	movw	r24, r14
     d14:	b6 01       	movw	r22, r12
     d16:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <__subsf3>
     d1a:	6b 01       	movw	r12, r22
     d1c:	7c 01       	movw	r14, r24
     d1e:	86 ed       	ldi	r24, 0xD6	; 214
     d20:	94 e0       	ldi	r25, 0x04	; 4
     d22:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <queueSize>
     d26:	bc 01       	movw	r22, r24
     d28:	99 0f       	add	r25, r25
     d2a:	88 0b       	sbc	r24, r24
     d2c:	99 0b       	sbc	r25, r25
     d2e:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <__floatsisf>
     d32:	9b 01       	movw	r18, r22
     d34:	ac 01       	movw	r20, r24
     d36:	c7 01       	movw	r24, r14
     d38:	b6 01       	movw	r22, r12
     d3a:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <__divsf3>

    return leak_rate_per_second * 60.0; // convert to liters per minute
     d3e:	20 e0       	ldi	r18, 0x00	; 0
     d40:	30 e0       	ldi	r19, 0x00	; 0
     d42:	40 e7       	ldi	r20, 0x70	; 112
     d44:	52 e4       	ldi	r21, 0x42	; 66
     d46:	0e 94 37 10 	call	0x206e	; 0x206e <__mulsf3>
     d4a:	03 c0       	rjmp	.+6      	; 0xd52 <get_leak_rate+0xe0>

    float capacity_at_1 = get_tank_capacity_at_height(height_1 * 1.5);
    float capacity_at_2 = get_tank_capacity_at_height(height_2 * 1.5);

    if (capacity_at_1 < capacity_at_2) {
        return 0.0; // no leak detected
     d4c:	60 e0       	ldi	r22, 0x00	; 0
     d4e:	70 e0       	ldi	r23, 0x00	; 0
     d50:	cb 01       	movw	r24, r22
    }
    float leak_rate_per_second = (capacity_at_1 - capacity_at_2) / queueSize(&height_per_second);

    return leak_rate_per_second * 60.0; // convert to liters per minute
}
     d52:	0f 90       	pop	r0
     d54:	0f 90       	pop	r0
     d56:	0f 90       	pop	r0
     d58:	0f 90       	pop	r0
     d5a:	df 91       	pop	r29
     d5c:	cf 91       	pop	r28
     d5e:	ff 90       	pop	r15
     d60:	ef 90       	pop	r14
     d62:	df 90       	pop	r13
     d64:	cf 90       	pop	r12
     d66:	bf 90       	pop	r11
     d68:	af 90       	pop	r10
     d6a:	9f 90       	pop	r9
     d6c:	8f 90       	pop	r8
     d6e:	08 95       	ret

00000d70 <get_soil_temperature>:

float get_soil_temperature()
{
    return DS18B20_read_temperature();
     d70:	0e 94 47 04 	call	0x88e	; 0x88e <DS18B20_read_temperature>
}
     d74:	08 95       	ret

00000d76 <ui_show_display>:
    update the display based on the current active menu and hover indices
    params: void
    returns: void
*/
void ui_show_display(void)
{
     d76:	ef 92       	push	r14
     d78:	ff 92       	push	r15
     d7a:	0f 93       	push	r16
     d7c:	cf 93       	push	r28
     d7e:	df 93       	push	r29
     d80:	00 d0       	rcall	.+0      	; 0xd82 <ui_show_display+0xc>
     d82:	cd b7       	in	r28, 0x3d	; 61
     d84:	de b7       	in	r29, 0x3e	; 62
    if (active_menu_index == -1)
     d86:	e0 91 26 01 	lds	r30, 0x0126	; 0x800126 <active_menu_index>
     d8a:	f0 91 27 01 	lds	r31, 0x0127	; 0x800127 <active_menu_index+0x1>
     d8e:	ef 3f       	cpi	r30, 0xFF	; 255
     d90:	2f ef       	ldi	r18, 0xFF	; 255
     d92:	f2 07       	cpc	r31, r18
     d94:	79 f4       	brne	.+30     	; 0xdb4 <ui_show_display+0x3e>
    {
        display_set("MAIN MENU", MENU_BUFFER[menu_hover_index]);
     d96:	e0 91 c2 04 	lds	r30, 0x04C2	; 0x8004c2 <menu_hover_index>
     d9a:	f0 91 c3 04 	lds	r31, 0x04C3	; 0x8004c3 <menu_hover_index+0x1>
     d9e:	ee 0f       	add	r30, r30
     da0:	ff 1f       	adc	r31, r31
     da2:	e2 5c       	subi	r30, 0xC2	; 194
     da4:	fe 4f       	sbci	r31, 0xFE	; 254
     da6:	60 81       	ld	r22, Z
     da8:	71 81       	ldd	r23, Z+1	; 0x01
     daa:	83 ef       	ldi	r24, 0xF3	; 243
     dac:	91 e0       	ldi	r25, 0x01	; 1
     dae:	0e 94 cc 04 	call	0x998	; 0x998 <display_set>
     db2:	6f c2       	rjmp	.+1246   	; 0x1292 <ui_show_display+0x51c>
    }
    else
    {
        switch (active_menu_index)
     db4:	e8 30       	cpi	r30, 0x08	; 8
     db6:	f1 05       	cpc	r31, r1
     db8:	08 f0       	brcs	.+2      	; 0xdbc <ui_show_display+0x46>
     dba:	65 c2       	rjmp	.+1226   	; 0x1286 <ui_show_display+0x510>
     dbc:	ec 5c       	subi	r30, 0xCC	; 204
     dbe:	ff 4f       	sbci	r31, 0xFF	; 255
     dc0:	0c 94 b8 10 	jmp	0x2170	; 0x2170 <__tablejump2__>
        {
        case 0:
            display_set("TANK CAPACITY", "Loading...");
     dc4:	6d ef       	ldi	r22, 0xFD	; 253
     dc6:	71 e0       	ldi	r23, 0x01	; 1
     dc8:	88 e0       	ldi	r24, 0x08	; 8
     dca:	92 e0       	ldi	r25, 0x02	; 2
     dcc:	0e 94 cc 04 	call	0x998	; 0x998 <display_set>
            format_float(buffer, sizeof(buffer), get_tank_capacity(), 1, "Ltrs");
     dd0:	0e 94 b3 05 	call	0xb66	; 0xb66 <get_tank_capacity>
     dd4:	9b 01       	movw	r18, r22
     dd6:	ac 01       	movw	r20, r24
     dd8:	0f 2e       	mov	r0, r31
     dda:	f1 ea       	ldi	r31, 0xA1	; 161
     ddc:	ef 2e       	mov	r14, r31
     dde:	f3 e0       	ldi	r31, 0x03	; 3
     de0:	ff 2e       	mov	r15, r31
     de2:	f0 2d       	mov	r31, r0
     de4:	01 e0       	ldi	r16, 0x01	; 1
     de6:	60 e1       	ldi	r22, 0x10	; 16
     de8:	70 e0       	ldi	r23, 0x00	; 0
     dea:	86 ec       	ldi	r24, 0xC6	; 198
     dec:	94 e0       	ldi	r25, 0x04	; 4
     dee:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <format_float>
            display_set("TANK CAPACITY", buffer);
     df2:	66 ec       	ldi	r22, 0xC6	; 198
     df4:	74 e0       	ldi	r23, 0x04	; 4
     df6:	88 e0       	ldi	r24, 0x08	; 8
     df8:	92 e0       	ldi	r25, 0x02	; 2
     dfa:	0e 94 cc 04 	call	0x998	; 0x998 <display_set>
            break;
     dfe:	49 c2       	rjmp	.+1170   	; 0x1292 <ui_show_display+0x51c>
        case 1:
            display_set("REFILL RATE", "Loading...");
     e00:	6d ef       	ldi	r22, 0xFD	; 253
     e02:	71 e0       	ldi	r23, 0x01	; 1
     e04:	86 e1       	ldi	r24, 0x16	; 22
     e06:	92 e0       	ldi	r25, 0x02	; 2
     e08:	0e 94 cc 04 	call	0x998	; 0x998 <display_set>
            format_float(buffer, sizeof(buffer), get_refill_rate(), 1, "Ltrs per hour");
     e0c:	0e 94 c6 05 	call	0xb8c	; 0xb8c <get_refill_rate>
     e10:	9b 01       	movw	r18, r22
     e12:	ac 01       	movw	r20, r24
     e14:	0f 2e       	mov	r0, r31
     e16:	f2 e2       	ldi	r31, 0x22	; 34
     e18:	ef 2e       	mov	r14, r31
     e1a:	f2 e0       	ldi	r31, 0x02	; 2
     e1c:	ff 2e       	mov	r15, r31
     e1e:	f0 2d       	mov	r31, r0
     e20:	01 e0       	ldi	r16, 0x01	; 1
     e22:	60 e1       	ldi	r22, 0x10	; 16
     e24:	70 e0       	ldi	r23, 0x00	; 0
     e26:	86 ec       	ldi	r24, 0xC6	; 198
     e28:	94 e0       	ldi	r25, 0x04	; 4
     e2a:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <format_float>
            display_set("REFILL RATE", buffer);
     e2e:	66 ec       	ldi	r22, 0xC6	; 198
     e30:	74 e0       	ldi	r23, 0x04	; 4
     e32:	86 e1       	ldi	r24, 0x16	; 22
     e34:	92 e0       	ldi	r25, 0x02	; 2
     e36:	0e 94 cc 04 	call	0x998	; 0x998 <display_set>
            break;
     e3a:	2b c2       	rjmp	.+1110   	; 0x1292 <ui_show_display+0x51c>
        case 2:
            display_set("LEAKAGE RATE", "Loading...");
     e3c:	6d ef       	ldi	r22, 0xFD	; 253
     e3e:	71 e0       	ldi	r23, 0x01	; 1
     e40:	80 e3       	ldi	r24, 0x30	; 48
     e42:	92 e0       	ldi	r25, 0x02	; 2
     e44:	0e 94 cc 04 	call	0x998	; 0x998 <display_set>
            format_float(buffer, sizeof(buffer), get_leak_rate(), 1, "Ltrs per min");
     e48:	0e 94 39 06 	call	0xc72	; 0xc72 <get_leak_rate>
     e4c:	9b 01       	movw	r18, r22
     e4e:	ac 01       	movw	r20, r24
     e50:	0f 2e       	mov	r0, r31
     e52:	fd e3       	ldi	r31, 0x3D	; 61
     e54:	ef 2e       	mov	r14, r31
     e56:	f2 e0       	ldi	r31, 0x02	; 2
     e58:	ff 2e       	mov	r15, r31
     e5a:	f0 2d       	mov	r31, r0
     e5c:	01 e0       	ldi	r16, 0x01	; 1
     e5e:	60 e1       	ldi	r22, 0x10	; 16
     e60:	70 e0       	ldi	r23, 0x00	; 0
     e62:	86 ec       	ldi	r24, 0xC6	; 198
     e64:	94 e0       	ldi	r25, 0x04	; 4
     e66:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <format_float>
            display_set("LEAKAGE RATE", buffer);
     e6a:	66 ec       	ldi	r22, 0xC6	; 198
     e6c:	74 e0       	ldi	r23, 0x04	; 4
     e6e:	80 e3       	ldi	r24, 0x30	; 48
     e70:	92 e0       	ldi	r25, 0x02	; 2
     e72:	0e 94 cc 04 	call	0x998	; 0x998 <display_set>
            break;
     e76:	0d c2       	rjmp	.+1050   	; 0x1292 <ui_show_display+0x51c>
        case 3:
            display_set("SOIL TEMPERATURE", "Loading...");
     e78:	6d ef       	ldi	r22, 0xFD	; 253
     e7a:	71 e0       	ldi	r23, 0x01	; 1
     e7c:	8a e4       	ldi	r24, 0x4A	; 74
     e7e:	92 e0       	ldi	r25, 0x02	; 2
     e80:	0e 94 cc 04 	call	0x998	; 0x998 <display_set>
            format_float(buffer, sizeof(buffer), get_soil_temperature(), 1, "degrees");
     e84:	0e 94 b8 06 	call	0xd70	; 0xd70 <get_soil_temperature>
     e88:	9b 01       	movw	r18, r22
     e8a:	ac 01       	movw	r20, r24
     e8c:	0f 2e       	mov	r0, r31
     e8e:	ff eb       	ldi	r31, 0xBF	; 191
     e90:	ef 2e       	mov	r14, r31
     e92:	f3 e0       	ldi	r31, 0x03	; 3
     e94:	ff 2e       	mov	r15, r31
     e96:	f0 2d       	mov	r31, r0
     e98:	01 e0       	ldi	r16, 0x01	; 1
     e9a:	60 e1       	ldi	r22, 0x10	; 16
     e9c:	70 e0       	ldi	r23, 0x00	; 0
     e9e:	86 ec       	ldi	r24, 0xC6	; 198
     ea0:	94 e0       	ldi	r25, 0x04	; 4
     ea2:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <format_float>
            display_set("SOIL TEMPERATURE", buffer);
     ea6:	66 ec       	ldi	r22, 0xC6	; 198
     ea8:	74 e0       	ldi	r23, 0x04	; 4
     eaa:	8a e4       	ldi	r24, 0x4A	; 74
     eac:	92 e0       	ldi	r25, 0x02	; 2
     eae:	0e 94 cc 04 	call	0x998	; 0x998 <display_set>
            break;
     eb2:	ef c1       	rjmp	.+990    	; 0x1292 <ui_show_display+0x51c>
        case 4:
            if (active_live_view_index == -1)
     eb4:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <active_live_view_index>
     eb8:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <active_live_view_index+0x1>
     ebc:	01 96       	adiw	r24, 0x01	; 1
     ebe:	79 f4       	brne	.+30     	; 0xede <ui_show_display+0x168>
            {
                display_set("LIVE VIEW", LIVE_VIEW_BUFFER[live_view_hover_index]);
     ec0:	e0 91 ba 04 	lds	r30, 0x04BA	; 0x8004ba <live_view_hover_index>
     ec4:	f0 91 bb 04 	lds	r31, 0x04BB	; 0x8004bb <live_view_hover_index+0x1>
     ec8:	ee 0f       	add	r30, r30
     eca:	ff 1f       	adc	r31, r31
     ecc:	ea 5c       	subi	r30, 0xCA	; 202
     ece:	fe 4f       	sbci	r31, 0xFE	; 254
     ed0:	60 81       	ld	r22, Z
     ed2:	71 81       	ldd	r23, Z+1	; 0x01
     ed4:	8b e5       	ldi	r24, 0x5B	; 91
     ed6:	92 e0       	ldi	r25, 0x02	; 2
     ed8:	0e 94 cc 04 	call	0x998	; 0x998 <display_set>
     edc:	da c1       	rjmp	.+948    	; 0x1292 <ui_show_display+0x51c>
            }
            else
            {
                switch (live_view_hover_index)
     ede:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <live_view_hover_index>
     ee2:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <live_view_hover_index+0x1>
     ee6:	81 30       	cpi	r24, 0x01	; 1
     ee8:	91 05       	cpc	r25, r1
     eea:	39 f1       	breq	.+78     	; 0xf3a <ui_show_display+0x1c4>
     eec:	1c f4       	brge	.+6      	; 0xef4 <ui_show_display+0x17e>
     eee:	89 2b       	or	r24, r25
     ef0:	41 f0       	breq	.+16     	; 0xf02 <ui_show_display+0x18c>
     ef2:	77 c0       	rjmp	.+238    	; 0xfe2 <ui_show_display+0x26c>
     ef4:	82 30       	cpi	r24, 0x02	; 2
     ef6:	91 05       	cpc	r25, r1
     ef8:	e1 f1       	breq	.+120    	; 0xf72 <ui_show_display+0x1fc>
     efa:	03 97       	sbiw	r24, 0x03	; 3
     efc:	09 f4       	brne	.+2      	; 0xf00 <ui_show_display+0x18a>
     efe:	55 c0       	rjmp	.+170    	; 0xfaa <ui_show_display+0x234>
     f00:	70 c0       	rjmp	.+224    	; 0xfe2 <ui_show_display+0x26c>
                {
                case 0:
                    format_float(buffer, sizeof(buffer), current_tank_capacity, 1, "Ltrs");
     f02:	20 91 b6 04 	lds	r18, 0x04B6	; 0x8004b6 <current_tank_capacity>
     f06:	30 91 b7 04 	lds	r19, 0x04B7	; 0x8004b7 <current_tank_capacity+0x1>
     f0a:	40 91 b8 04 	lds	r20, 0x04B8	; 0x8004b8 <current_tank_capacity+0x2>
     f0e:	50 91 b9 04 	lds	r21, 0x04B9	; 0x8004b9 <current_tank_capacity+0x3>
     f12:	0f 2e       	mov	r0, r31
     f14:	f1 ea       	ldi	r31, 0xA1	; 161
     f16:	ef 2e       	mov	r14, r31
     f18:	f3 e0       	ldi	r31, 0x03	; 3
     f1a:	ff 2e       	mov	r15, r31
     f1c:	f0 2d       	mov	r31, r0
     f1e:	01 e0       	ldi	r16, 0x01	; 1
     f20:	60 e1       	ldi	r22, 0x10	; 16
     f22:	70 e0       	ldi	r23, 0x00	; 0
     f24:	86 ec       	ldi	r24, 0xC6	; 198
     f26:	94 e0       	ldi	r25, 0x04	; 4
     f28:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <format_float>
                    display_set("CAPACITY", buffer);
     f2c:	66 ec       	ldi	r22, 0xC6	; 198
     f2e:	74 e0       	ldi	r23, 0x04	; 4
     f30:	8d e0       	ldi	r24, 0x0D	; 13
     f32:	92 e0       	ldi	r25, 0x02	; 2
     f34:	0e 94 cc 04 	call	0x998	; 0x998 <display_set>
                    break;
     f38:	ac c1       	rjmp	.+856    	; 0x1292 <ui_show_display+0x51c>
                case 1:
                    format_float(buffer, sizeof(buffer), current_refill_rate, 1, "Ltrs per min");
     f3a:	20 91 b2 04 	lds	r18, 0x04B2	; 0x8004b2 <current_refill_rate>
     f3e:	30 91 b3 04 	lds	r19, 0x04B3	; 0x8004b3 <current_refill_rate+0x1>
     f42:	40 91 b4 04 	lds	r20, 0x04B4	; 0x8004b4 <current_refill_rate+0x2>
     f46:	50 91 b5 04 	lds	r21, 0x04B5	; 0x8004b5 <current_refill_rate+0x3>
     f4a:	0f 2e       	mov	r0, r31
     f4c:	fd e3       	ldi	r31, 0x3D	; 61
     f4e:	ef 2e       	mov	r14, r31
     f50:	f2 e0       	ldi	r31, 0x02	; 2
     f52:	ff 2e       	mov	r15, r31
     f54:	f0 2d       	mov	r31, r0
     f56:	01 e0       	ldi	r16, 0x01	; 1
     f58:	60 e1       	ldi	r22, 0x10	; 16
     f5a:	70 e0       	ldi	r23, 0x00	; 0
     f5c:	86 ec       	ldi	r24, 0xC6	; 198
     f5e:	94 e0       	ldi	r25, 0x04	; 4
     f60:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <format_float>
                    display_set("REFILL RATE", buffer);
     f64:	66 ec       	ldi	r22, 0xC6	; 198
     f66:	74 e0       	ldi	r23, 0x04	; 4
     f68:	86 e1       	ldi	r24, 0x16	; 22
     f6a:	92 e0       	ldi	r25, 0x02	; 2
     f6c:	0e 94 cc 04 	call	0x998	; 0x998 <display_set>
                    break;
     f70:	90 c1       	rjmp	.+800    	; 0x1292 <ui_show_display+0x51c>
                case 2:
                    format_float(buffer, sizeof(buffer), current_leak_rate, 1, "Ltrs per min");
     f72:	20 91 ae 04 	lds	r18, 0x04AE	; 0x8004ae <current_leak_rate>
     f76:	30 91 af 04 	lds	r19, 0x04AF	; 0x8004af <current_leak_rate+0x1>
     f7a:	40 91 b0 04 	lds	r20, 0x04B0	; 0x8004b0 <current_leak_rate+0x2>
     f7e:	50 91 b1 04 	lds	r21, 0x04B1	; 0x8004b1 <current_leak_rate+0x3>
     f82:	0f 2e       	mov	r0, r31
     f84:	fd e3       	ldi	r31, 0x3D	; 61
     f86:	ef 2e       	mov	r14, r31
     f88:	f2 e0       	ldi	r31, 0x02	; 2
     f8a:	ff 2e       	mov	r15, r31
     f8c:	f0 2d       	mov	r31, r0
     f8e:	01 e0       	ldi	r16, 0x01	; 1
     f90:	60 e1       	ldi	r22, 0x10	; 16
     f92:	70 e0       	ldi	r23, 0x00	; 0
     f94:	86 ec       	ldi	r24, 0xC6	; 198
     f96:	94 e0       	ldi	r25, 0x04	; 4
     f98:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <format_float>
                    display_set("LEAK RATE", buffer);
     f9c:	66 ec       	ldi	r22, 0xC6	; 198
     f9e:	74 e0       	ldi	r23, 0x04	; 4
     fa0:	85 e6       	ldi	r24, 0x65	; 101
     fa2:	92 e0       	ldi	r25, 0x02	; 2
     fa4:	0e 94 cc 04 	call	0x998	; 0x998 <display_set>
                    break;
     fa8:	74 c1       	rjmp	.+744    	; 0x1292 <ui_show_display+0x51c>
                case 3:
                    format_float(buffer, sizeof(buffer), current_soil_temperature, 1, "degrees");
     faa:	20 91 aa 04 	lds	r18, 0x04AA	; 0x8004aa <current_soil_temperature>
     fae:	30 91 ab 04 	lds	r19, 0x04AB	; 0x8004ab <current_soil_temperature+0x1>
     fb2:	40 91 ac 04 	lds	r20, 0x04AC	; 0x8004ac <current_soil_temperature+0x2>
     fb6:	50 91 ad 04 	lds	r21, 0x04AD	; 0x8004ad <current_soil_temperature+0x3>
     fba:	0f 2e       	mov	r0, r31
     fbc:	ff eb       	ldi	r31, 0xBF	; 191
     fbe:	ef 2e       	mov	r14, r31
     fc0:	f3 e0       	ldi	r31, 0x03	; 3
     fc2:	ff 2e       	mov	r15, r31
     fc4:	f0 2d       	mov	r31, r0
     fc6:	01 e0       	ldi	r16, 0x01	; 1
     fc8:	60 e1       	ldi	r22, 0x10	; 16
     fca:	70 e0       	ldi	r23, 0x00	; 0
     fcc:	86 ec       	ldi	r24, 0xC6	; 198
     fce:	94 e0       	ldi	r25, 0x04	; 4
     fd0:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <format_float>
                    display_set("SOIL TEMP", buffer);
     fd4:	66 ec       	ldi	r22, 0xC6	; 198
     fd6:	74 e0       	ldi	r23, 0x04	; 4
     fd8:	8f e6       	ldi	r24, 0x6F	; 111
     fda:	92 e0       	ldi	r25, 0x02	; 2
     fdc:	0e 94 cc 04 	call	0x998	; 0x998 <display_set>
                    break;
     fe0:	58 c1       	rjmp	.+688    	; 0x1292 <ui_show_display+0x51c>
                default:
                    display_set("ERROR", "Invalid live view");
     fe2:	69 e7       	ldi	r22, 0x79	; 121
     fe4:	72 e0       	ldi	r23, 0x02	; 2
     fe6:	8b e8       	ldi	r24, 0x8B	; 139
     fe8:	92 e0       	ldi	r25, 0x02	; 2
     fea:	0e 94 cc 04 	call	0x998	; 0x998 <display_set>
                    break;
     fee:	51 c1       	rjmp	.+674    	; 0x1292 <ui_show_display+0x51c>
                }
            }
            break;
        case 5:
            if (active_trigger_index == -1)
     ff0:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <active_trigger_index>
     ff4:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <active_trigger_index+0x1>
     ff8:	8f 3f       	cpi	r24, 0xFF	; 255
     ffa:	2f ef       	ldi	r18, 0xFF	; 255
     ffc:	92 07       	cpc	r25, r18
     ffe:	79 f4       	brne	.+30     	; 0x101e <ui_show_display+0x2a8>
            {
                display_set("TRIGGERS", TRIGGERS_BUFFER[trigger_hover_index]);
    1000:	e0 91 c0 04 	lds	r30, 0x04C0	; 0x8004c0 <trigger_hover_index>
    1004:	f0 91 c1 04 	lds	r31, 0x04C1	; 0x8004c1 <trigger_hover_index+0x1>
    1008:	ee 0f       	add	r30, r30
    100a:	ff 1f       	adc	r31, r31
    100c:	ee 5c       	subi	r30, 0xCE	; 206
    100e:	fe 4f       	sbci	r31, 0xFE	; 254
    1010:	60 81       	ld	r22, Z
    1012:	71 81       	ldd	r23, Z+1	; 0x01
    1014:	89 e0       	ldi	r24, 0x09	; 9
    1016:	93 e0       	ldi	r25, 0x03	; 3
    1018:	0e 94 cc 04 	call	0x998	; 0x998 <display_set>
    101c:	3a c1       	rjmp	.+628    	; 0x1292 <ui_show_display+0x51c>
            }
            else
            {
                switch (active_trigger_index)
    101e:	00 97       	sbiw	r24, 0x00	; 0
    1020:	19 f0       	breq	.+6      	; 0x1028 <ui_show_display+0x2b2>
    1022:	01 97       	sbiw	r24, 0x01	; 1
    1024:	e9 f0       	breq	.+58     	; 0x1060 <ui_show_display+0x2ea>
    1026:	38 c0       	rjmp	.+112    	; 0x1098 <ui_show_display+0x322>
                {
                case 0:
                    format_float(buffer, sizeof(buffer), MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER, 1, "Ltrs");
    1028:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER>
    102c:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x1>
    1030:	40 91 1e 01 	lds	r20, 0x011E	; 0x80011e <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x2>
    1034:	50 91 1f 01 	lds	r21, 0x011F	; 0x80011f <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x3>
    1038:	0f 2e       	mov	r0, r31
    103a:	f1 ea       	ldi	r31, 0xA1	; 161
    103c:	ef 2e       	mov	r14, r31
    103e:	f3 e0       	ldi	r31, 0x03	; 3
    1040:	ff 2e       	mov	r15, r31
    1042:	f0 2d       	mov	r31, r0
    1044:	01 e0       	ldi	r16, 0x01	; 1
    1046:	60 e1       	ldi	r22, 0x10	; 16
    1048:	70 e0       	ldi	r23, 0x00	; 0
    104a:	86 ec       	ldi	r24, 0xC6	; 198
    104c:	94 e0       	ldi	r25, 0x04	; 4
    104e:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <format_float>
                    display_set("MIN CAPACITY", buffer);
    1052:	66 ec       	ldi	r22, 0xC6	; 198
    1054:	74 e0       	ldi	r23, 0x04	; 4
    1056:	81 e9       	ldi	r24, 0x91	; 145
    1058:	92 e0       	ldi	r25, 0x02	; 2
    105a:	0e 94 cc 04 	call	0x998	; 0x998 <display_set>
                    break;
    105e:	19 c1       	rjmp	.+562    	; 0x1292 <ui_show_display+0x51c>
                case 1:
                    format_float(buffer, sizeof(buffer), MAXIMUM_TEMPERATURE_BEFORE_PUMPING, 2, "degrees");
    1060:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING>
    1064:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x1>
    1068:	40 91 1a 01 	lds	r20, 0x011A	; 0x80011a <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x2>
    106c:	50 91 1b 01 	lds	r21, 0x011B	; 0x80011b <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x3>
    1070:	0f 2e       	mov	r0, r31
    1072:	ff eb       	ldi	r31, 0xBF	; 191
    1074:	ef 2e       	mov	r14, r31
    1076:	f3 e0       	ldi	r31, 0x03	; 3
    1078:	ff 2e       	mov	r15, r31
    107a:	f0 2d       	mov	r31, r0
    107c:	02 e0       	ldi	r16, 0x02	; 2
    107e:	60 e1       	ldi	r22, 0x10	; 16
    1080:	70 e0       	ldi	r23, 0x00	; 0
    1082:	86 ec       	ldi	r24, 0xC6	; 198
    1084:	94 e0       	ldi	r25, 0x04	; 4
    1086:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <format_float>
                    display_set("MAX TEMP", buffer);
    108a:	66 ec       	ldi	r22, 0xC6	; 198
    108c:	74 e0       	ldi	r23, 0x04	; 4
    108e:	8e e9       	ldi	r24, 0x9E	; 158
    1090:	92 e0       	ldi	r25, 0x02	; 2
    1092:	0e 94 cc 04 	call	0x998	; 0x998 <display_set>
                    break;
    1096:	fd c0       	rjmp	.+506    	; 0x1292 <ui_show_display+0x51c>
                default:
                    display_set("ERROR", "Invalid trigger");
    1098:	67 ea       	ldi	r22, 0xA7	; 167
    109a:	72 e0       	ldi	r23, 0x02	; 2
    109c:	8b e8       	ldi	r24, 0x8B	; 139
    109e:	92 e0       	ldi	r25, 0x02	; 2
    10a0:	0e 94 cc 04 	call	0x998	; 0x998 <display_set>
                    break;
    10a4:	f6 c0       	rjmp	.+492    	; 0x1292 <ui_show_display+0x51c>
            break;

        case 6:
            // if the messages queue is not empty, show the first (oldest) message
			{
                char *msgptr = NULL;
    10a6:	1a 82       	std	Y+2, r1	; 0x02
    10a8:	19 82       	std	Y+1, r1	; 0x01
                if (!isStrQueueEmpty(&MESSAGES_Q))
    10aa:	8e ee       	ldi	r24, 0xEE	; 238
    10ac:	94 e0       	ldi	r25, 0x04	; 4
    10ae:	0e 94 1a 02 	call	0x434	; 0x434 <isStrQueueEmpty>
    10b2:	89 2b       	or	r24, r25
    10b4:	a9 f4       	brne	.+42     	; 0x10e0 <ui_show_display+0x36a>
                {
                    if (peekFrontStr(&MESSAGES_Q, &msgptr) == 0 && msgptr)
    10b6:	be 01       	movw	r22, r28
    10b8:	6f 5f       	subi	r22, 0xFF	; 255
    10ba:	7f 4f       	sbci	r23, 0xFF	; 255
    10bc:	8e ee       	ldi	r24, 0xEE	; 238
    10be:	94 e0       	ldi	r25, 0x04	; 4
    10c0:	0e 94 a2 02 	call	0x544	; 0x544 <peekFrontStr>
    10c4:	89 2b       	or	r24, r25
    10c6:	09 f0       	breq	.+2      	; 0x10ca <ui_show_display+0x354>
    10c8:	e4 c0       	rjmp	.+456    	; 0x1292 <ui_show_display+0x51c>
    10ca:	69 81       	ldd	r22, Y+1	; 0x01
    10cc:	7a 81       	ldd	r23, Y+2	; 0x02
    10ce:	61 15       	cp	r22, r1
    10d0:	71 05       	cpc	r23, r1
    10d2:	09 f4       	brne	.+2      	; 0x10d6 <ui_show_display+0x360>
    10d4:	de c0       	rjmp	.+444    	; 0x1292 <ui_show_display+0x51c>
                    {
                        display_set("MESSAGES", msgptr);
    10d6:	87 eb       	ldi	r24, 0xB7	; 183
    10d8:	92 e0       	ldi	r25, 0x02	; 2
    10da:	0e 94 cc 04 	call	0x998	; 0x998 <display_set>
    10de:	d9 c0       	rjmp	.+434    	; 0x1292 <ui_show_display+0x51c>
                    }
                } else 
                {
                    display_set("MESSAGES", "No messages");
    10e0:	60 ec       	ldi	r22, 0xC0	; 192
    10e2:	72 e0       	ldi	r23, 0x02	; 2
    10e4:	87 eb       	ldi	r24, 0xB7	; 183
    10e6:	92 e0       	ldi	r25, 0x02	; 2
    10e8:	0e 94 cc 04 	call	0x998	; 0x998 <display_set>
				}
            }
            break;
    10ec:	d2 c0       	rjmp	.+420    	; 0x1292 <ui_show_display+0x51c>
        case 7:
            if (active_config_index == -1)
    10ee:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <active_config_index>
    10f2:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <active_config_index+0x1>
    10f6:	8f 3f       	cpi	r24, 0xFF	; 255
    10f8:	2f ef       	ldi	r18, 0xFF	; 255
    10fa:	92 07       	cpc	r25, r18
    10fc:	79 f4       	brne	.+30     	; 0x111c <ui_show_display+0x3a6>
            {
                display_set("CONFIG", CONFIG_BUFFER[config_hover_index]);
    10fe:	e0 91 be 04 	lds	r30, 0x04BE	; 0x8004be <config_hover_index>
    1102:	f0 91 bf 04 	lds	r31, 0x04BF	; 0x8004bf <config_hover_index+0x1>
    1106:	ee 0f       	add	r30, r30
    1108:	ff 1f       	adc	r31, r31
    110a:	e8 5d       	subi	r30, 0xD8	; 216
    110c:	fe 4f       	sbci	r31, 0xFE	; 254
    110e:	60 81       	ld	r22, Z
    1110:	71 81       	ldd	r23, Z+1	; 0x01
    1112:	8c ec       	ldi	r24, 0xCC	; 204
    1114:	92 e0       	ldi	r25, 0x02	; 2
    1116:	0e 94 cc 04 	call	0x998	; 0x998 <display_set>
    111a:	bb c0       	rjmp	.+374    	; 0x1292 <ui_show_display+0x51c>
            }
            else
            {
                switch (active_config_index)
    111c:	82 30       	cpi	r24, 0x02	; 2
    111e:	91 05       	cpc	r25, r1
    1120:	09 f4       	brne	.+2      	; 0x1124 <ui_show_display+0x3ae>
    1122:	46 c0       	rjmp	.+140    	; 0x11b0 <ui_show_display+0x43a>
    1124:	2c f4       	brge	.+10     	; 0x1130 <ui_show_display+0x3ba>
    1126:	00 97       	sbiw	r24, 0x00	; 0
    1128:	59 f0       	breq	.+22     	; 0x1140 <ui_show_display+0x3ca>
    112a:	01 97       	sbiw	r24, 0x01	; 1
    112c:	29 f1       	breq	.+74     	; 0x1178 <ui_show_display+0x402>
    112e:	a4 c0       	rjmp	.+328    	; 0x1278 <ui_show_display+0x502>
    1130:	83 30       	cpi	r24, 0x03	; 3
    1132:	91 05       	cpc	r25, r1
    1134:	09 f4       	brne	.+2      	; 0x1138 <ui_show_display+0x3c2>
    1136:	58 c0       	rjmp	.+176    	; 0x11e8 <ui_show_display+0x472>
    1138:	04 97       	sbiw	r24, 0x04	; 4
    113a:	09 f4       	brne	.+2      	; 0x113e <ui_show_display+0x3c8>
    113c:	79 c0       	rjmp	.+242    	; 0x1230 <ui_show_display+0x4ba>
    113e:	9c c0       	rjmp	.+312    	; 0x1278 <ui_show_display+0x502>
                {
                case 0:
                    format_float(buffer, sizeof(buffer), STEP_SIZE_FOR_INCREMENTS, 1, "Units");
    1140:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <STEP_SIZE_FOR_INCREMENTS>
    1144:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <STEP_SIZE_FOR_INCREMENTS+0x1>
    1148:	40 91 16 01 	lds	r20, 0x0116	; 0x800116 <STEP_SIZE_FOR_INCREMENTS+0x2>
    114c:	50 91 17 01 	lds	r21, 0x0117	; 0x800117 <STEP_SIZE_FOR_INCREMENTS+0x3>
    1150:	0f 2e       	mov	r0, r31
    1152:	f3 ed       	ldi	r31, 0xD3	; 211
    1154:	ef 2e       	mov	r14, r31
    1156:	f2 e0       	ldi	r31, 0x02	; 2
    1158:	ff 2e       	mov	r15, r31
    115a:	f0 2d       	mov	r31, r0
    115c:	01 e0       	ldi	r16, 0x01	; 1
    115e:	60 e1       	ldi	r22, 0x10	; 16
    1160:	70 e0       	ldi	r23, 0x00	; 0
    1162:	86 ec       	ldi	r24, 0xC6	; 198
    1164:	94 e0       	ldi	r25, 0x04	; 4
    1166:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <format_float>
                    display_set("STEP SIZE", buffer);
    116a:	66 ec       	ldi	r22, 0xC6	; 198
    116c:	74 e0       	ldi	r23, 0x04	; 4
    116e:	89 ed       	ldi	r24, 0xD9	; 217
    1170:	92 e0       	ldi	r25, 0x02	; 2
    1172:	0e 94 cc 04 	call	0x998	; 0x998 <display_set>
                    break;
    1176:	8d c0       	rjmp	.+282    	; 0x1292 <ui_show_display+0x51c>
                case 1:
                    format_float(buffer, sizeof(buffer), PUMP_THRESHOLD, 1, "Ltrs");
    1178:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <PUMP_THRESHOLD>
    117c:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <PUMP_THRESHOLD+0x1>
    1180:	40 91 0e 01 	lds	r20, 0x010E	; 0x80010e <PUMP_THRESHOLD+0x2>
    1184:	50 91 0f 01 	lds	r21, 0x010F	; 0x80010f <PUMP_THRESHOLD+0x3>
    1188:	0f 2e       	mov	r0, r31
    118a:	f1 ea       	ldi	r31, 0xA1	; 161
    118c:	ef 2e       	mov	r14, r31
    118e:	f3 e0       	ldi	r31, 0x03	; 3
    1190:	ff 2e       	mov	r15, r31
    1192:	f0 2d       	mov	r31, r0
    1194:	01 e0       	ldi	r16, 0x01	; 1
    1196:	60 e1       	ldi	r22, 0x10	; 16
    1198:	70 e0       	ldi	r23, 0x00	; 0
    119a:	86 ec       	ldi	r24, 0xC6	; 198
    119c:	94 e0       	ldi	r25, 0x04	; 4
    119e:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <format_float>
                    display_set("PUMP THRESHOLD", buffer);
    11a2:	66 ec       	ldi	r22, 0xC6	; 198
    11a4:	74 e0       	ldi	r23, 0x04	; 4
    11a6:	83 ee       	ldi	r24, 0xE3	; 227
    11a8:	92 e0       	ldi	r25, 0x02	; 2
    11aa:	0e 94 cc 04 	call	0x998	; 0x998 <display_set>
                    break;
    11ae:	71 c0       	rjmp	.+226    	; 0x1292 <ui_show_display+0x51c>
                case 2:
                    format_float(buffer, sizeof(buffer), SPRAY_THRESHOLD, 1, "degrees");
    11b0:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <SPRAY_THRESHOLD>
    11b4:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <SPRAY_THRESHOLD+0x1>
    11b8:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <SPRAY_THRESHOLD+0x2>
    11bc:	50 91 0b 01 	lds	r21, 0x010B	; 0x80010b <SPRAY_THRESHOLD+0x3>
    11c0:	0f 2e       	mov	r0, r31
    11c2:	ff eb       	ldi	r31, 0xBF	; 191
    11c4:	ef 2e       	mov	r14, r31
    11c6:	f3 e0       	ldi	r31, 0x03	; 3
    11c8:	ff 2e       	mov	r15, r31
    11ca:	f0 2d       	mov	r31, r0
    11cc:	01 e0       	ldi	r16, 0x01	; 1
    11ce:	60 e1       	ldi	r22, 0x10	; 16
    11d0:	70 e0       	ldi	r23, 0x00	; 0
    11d2:	86 ec       	ldi	r24, 0xC6	; 198
    11d4:	94 e0       	ldi	r25, 0x04	; 4
    11d6:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <format_float>
                    display_set("SPRAY THRESHOLD", buffer);
    11da:	66 ec       	ldi	r22, 0xC6	; 198
    11dc:	74 e0       	ldi	r23, 0x04	; 4
    11de:	82 ef       	ldi	r24, 0xF2	; 242
    11e0:	92 e0       	ldi	r25, 0x02	; 2
    11e2:	0e 94 cc 04 	call	0x998	; 0x998 <display_set>
                    break;
    11e6:	55 c0       	rjmp	.+170    	; 0x1292 <ui_show_display+0x51c>
                case 3:
                    snprintf(buffer, sizeof(buffer), "%s", ENABLE_TRIGGER_VALUE ? "Enabled" : "Disabled");
    11e8:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <ENABLE_TRIGGER_VALUE>
    11ec:	88 23       	and	r24, r24
    11ee:	19 f0       	breq	.+6      	; 0x11f6 <ui_show_display+0x480>
    11f0:	82 ee       	ldi	r24, 0xE2	; 226
    11f2:	91 e0       	ldi	r25, 0x01	; 1
    11f4:	02 c0       	rjmp	.+4      	; 0x11fa <ui_show_display+0x484>
    11f6:	8a ee       	ldi	r24, 0xEA	; 234
    11f8:	91 e0       	ldi	r25, 0x01	; 1
    11fa:	9f 93       	push	r25
    11fc:	8f 93       	push	r24
    11fe:	81 e7       	ldi	r24, 0x71	; 113
    1200:	91 e0       	ldi	r25, 0x01	; 1
    1202:	9f 93       	push	r25
    1204:	8f 93       	push	r24
    1206:	1f 92       	push	r1
    1208:	80 e1       	ldi	r24, 0x10	; 16
    120a:	8f 93       	push	r24
    120c:	86 ec       	ldi	r24, 0xC6	; 198
    120e:	94 e0       	ldi	r25, 0x04	; 4
    1210:	9f 93       	push	r25
    1212:	8f 93       	push	r24
    1214:	0e 94 69 12 	call	0x24d2	; 0x24d2 <snprintf>
                    display_set("ENABLE TRIGGERS", buffer);
    1218:	66 ec       	ldi	r22, 0xC6	; 198
    121a:	74 e0       	ldi	r23, 0x04	; 4
    121c:	82 e0       	ldi	r24, 0x02	; 2
    121e:	93 e0       	ldi	r25, 0x03	; 3
    1220:	0e 94 cc 04 	call	0x998	; 0x998 <display_set>
                    break;
    1224:	0f b6       	in	r0, 0x3f	; 63
    1226:	f8 94       	cli
    1228:	de bf       	out	0x3e, r29	; 62
    122a:	0f be       	out	0x3f, r0	; 63
    122c:	cd bf       	out	0x3d, r28	; 61
    122e:	31 c0       	rjmp	.+98     	; 0x1292 <ui_show_display+0x51c>
                case 4:
                    snprintf(buffer, sizeof(buffer), "%s", ENABLE_ALERT_VALUE ? "Enabled" : "Disabled");
    1230:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <ENABLE_ALERT_VALUE>
    1234:	88 23       	and	r24, r24
    1236:	19 f0       	breq	.+6      	; 0x123e <ui_show_display+0x4c8>
    1238:	82 ee       	ldi	r24, 0xE2	; 226
    123a:	91 e0       	ldi	r25, 0x01	; 1
    123c:	02 c0       	rjmp	.+4      	; 0x1242 <ui_show_display+0x4cc>
    123e:	8a ee       	ldi	r24, 0xEA	; 234
    1240:	91 e0       	ldi	r25, 0x01	; 1
    1242:	9f 93       	push	r25
    1244:	8f 93       	push	r24
    1246:	81 e7       	ldi	r24, 0x71	; 113
    1248:	91 e0       	ldi	r25, 0x01	; 1
    124a:	9f 93       	push	r25
    124c:	8f 93       	push	r24
    124e:	1f 92       	push	r1
    1250:	80 e1       	ldi	r24, 0x10	; 16
    1252:	8f 93       	push	r24
    1254:	86 ec       	ldi	r24, 0xC6	; 198
    1256:	94 e0       	ldi	r25, 0x04	; 4
    1258:	9f 93       	push	r25
    125a:	8f 93       	push	r24
    125c:	0e 94 69 12 	call	0x24d2	; 0x24d2 <snprintf>
                    display_set("ENABLE ALERTS", buffer);
    1260:	66 ec       	ldi	r22, 0xC6	; 198
    1262:	74 e0       	ldi	r23, 0x04	; 4
    1264:	82 e1       	ldi	r24, 0x12	; 18
    1266:	93 e0       	ldi	r25, 0x03	; 3
    1268:	0e 94 cc 04 	call	0x998	; 0x998 <display_set>
                    break;
    126c:	0f b6       	in	r0, 0x3f	; 63
    126e:	f8 94       	cli
    1270:	de bf       	out	0x3e, r29	; 62
    1272:	0f be       	out	0x3f, r0	; 63
    1274:	cd bf       	out	0x3d, r28	; 61
    1276:	0d c0       	rjmp	.+26     	; 0x1292 <ui_show_display+0x51c>
                default:
                    display_set("ERROR", "Invalid config");
    1278:	60 e2       	ldi	r22, 0x20	; 32
    127a:	73 e0       	ldi	r23, 0x03	; 3
    127c:	8b e8       	ldi	r24, 0x8B	; 139
    127e:	92 e0       	ldi	r25, 0x02	; 2
    1280:	0e 94 cc 04 	call	0x998	; 0x998 <display_set>
                    break;
    1284:	06 c0       	rjmp	.+12     	; 0x1292 <ui_show_display+0x51c>
                }
            }
            break;

        default:
            display_set("ERROR", "Invalid menu");
    1286:	6f e2       	ldi	r22, 0x2F	; 47
    1288:	73 e0       	ldi	r23, 0x03	; 3
    128a:	8b e8       	ldi	r24, 0x8B	; 139
    128c:	92 e0       	ldi	r25, 0x02	; 2
    128e:	0e 94 cc 04 	call	0x998	; 0x998 <display_set>
            break;
        }
    }
}
    1292:	0f 90       	pop	r0
    1294:	0f 90       	pop	r0
    1296:	df 91       	pop	r29
    1298:	cf 91       	pop	r28
    129a:	0f 91       	pop	r16
    129c:	ff 90       	pop	r15
    129e:	ef 90       	pop	r14
    12a0:	08 95       	ret

000012a2 <ui_process_key_command>:
    process a key command from the keypad and update the UI state
    params: uint8_t key - the key number (1-4)
    returns: void
*/
void ui_process_key_command (uint8_t key) {
    if (key == 1)
    12a2:	81 30       	cpi	r24, 0x01	; 1
    12a4:	a9 f5       	brne	.+106    	; 0x1310 <ui_process_key_command+0x6e>
    {
        if (active_menu_index == -1)
    12a6:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <active_menu_index>
    12aa:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <active_menu_index+0x1>
    12ae:	01 96       	adiw	r24, 0x01	; 1
    12b0:	09 f4       	brne	.+2      	; 0x12b4 <ui_process_key_command+0x12>
    12b2:	9b c2       	rjmp	.+1334   	; 0x17ea <ui_process_key_command+0x548>
        {
            return;
        }
        else
        {
            if (active_trigger_index != -1)
    12b4:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <active_trigger_index>
    12b8:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <active_trigger_index+0x1>
    12bc:	01 96       	adiw	r24, 0x01	; 1
    12be:	39 f0       	breq	.+14     	; 0x12ce <ui_process_key_command+0x2c>
            {
                active_trigger_index = -1;
    12c0:	8f ef       	ldi	r24, 0xFF	; 255
    12c2:	9f ef       	ldi	r25, 0xFF	; 255
    12c4:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <active_trigger_index+0x1>
    12c8:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <active_trigger_index>
    12cc:	08 95       	ret
            }
            else if (active_config_index != -1)
    12ce:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <active_config_index>
    12d2:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <active_config_index+0x1>
    12d6:	01 96       	adiw	r24, 0x01	; 1
    12d8:	39 f0       	breq	.+14     	; 0x12e8 <ui_process_key_command+0x46>
            {
                active_config_index = -1;
    12da:	8f ef       	ldi	r24, 0xFF	; 255
    12dc:	9f ef       	ldi	r25, 0xFF	; 255
    12de:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <active_config_index+0x1>
    12e2:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <active_config_index>
    12e6:	08 95       	ret
            }
            else if (active_live_view_index != -1)
    12e8:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <active_live_view_index>
    12ec:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <active_live_view_index+0x1>
    12f0:	01 96       	adiw	r24, 0x01	; 1
    12f2:	39 f0       	breq	.+14     	; 0x1302 <ui_process_key_command+0x60>
            {
                active_live_view_index = -1;
    12f4:	8f ef       	ldi	r24, 0xFF	; 255
    12f6:	9f ef       	ldi	r25, 0xFF	; 255
    12f8:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <active_live_view_index+0x1>
    12fc:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <active_live_view_index>
    1300:	08 95       	ret
            }
            else
            {
                active_menu_index = -1;
    1302:	8f ef       	ldi	r24, 0xFF	; 255
    1304:	9f ef       	ldi	r25, 0xFF	; 255
    1306:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <active_menu_index+0x1>
    130a:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <active_menu_index>
    130e:	08 95       	ret
            }
        }
    }
    else if (key == 2)
    1310:	82 30       	cpi	r24, 0x02	; 2
    1312:	09 f0       	breq	.+2      	; 0x1316 <ui_process_key_command+0x74>
    1314:	0e c1       	rjmp	.+540    	; 0x1532 <ui_process_key_command+0x290>
    {
        if (active_menu_index == -1)
    1316:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <active_menu_index>
    131a:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <active_menu_index+0x1>
    131e:	8f 3f       	cpi	r24, 0xFF	; 255
    1320:	2f ef       	ldi	r18, 0xFF	; 255
    1322:	92 07       	cpc	r25, r18
    1324:	71 f4       	brne	.+28     	; 0x1342 <ui_process_key_command+0xa0>
        {
            if (menu_hover_index < (sizeof(MENU_BUFFER)/sizeof(MENU_BUFFER[0]) - 1))
    1326:	80 91 c2 04 	lds	r24, 0x04C2	; 0x8004c2 <menu_hover_index>
    132a:	90 91 c3 04 	lds	r25, 0x04C3	; 0x8004c3 <menu_hover_index+0x1>
    132e:	87 30       	cpi	r24, 0x07	; 7
    1330:	91 05       	cpc	r25, r1
    1332:	08 f0       	brcs	.+2      	; 0x1336 <ui_process_key_command+0x94>
    1334:	5a c2       	rjmp	.+1204   	; 0x17ea <ui_process_key_command+0x548>
                menu_hover_index++; // navigate downwards on the main menu
    1336:	01 96       	adiw	r24, 0x01	; 1
    1338:	90 93 c3 04 	sts	0x04C3, r25	; 0x8004c3 <menu_hover_index+0x1>
    133c:	80 93 c2 04 	sts	0x04C2, r24	; 0x8004c2 <menu_hover_index>
    1340:	08 95       	ret
        }
        else if (active_menu_index == 4)
    1342:	84 30       	cpi	r24, 0x04	; 4
    1344:	91 05       	cpc	r25, r1
    1346:	71 f4       	brne	.+28     	; 0x1364 <ui_process_key_command+0xc2>
        {
            // user is in the live view menu
            if (live_view_hover_index < (sizeof(LIVE_VIEW_BUFFER)/sizeof(LIVE_VIEW_BUFFER[0]) - 1))
    1348:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <live_view_hover_index>
    134c:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <live_view_hover_index+0x1>
    1350:	83 30       	cpi	r24, 0x03	; 3
    1352:	91 05       	cpc	r25, r1
    1354:	08 f0       	brcs	.+2      	; 0x1358 <ui_process_key_command+0xb6>
    1356:	49 c2       	rjmp	.+1170   	; 0x17ea <ui_process_key_command+0x548>
                live_view_hover_index++; // navigate downwards on the live view menu
    1358:	01 96       	adiw	r24, 0x01	; 1
    135a:	90 93 bb 04 	sts	0x04BB, r25	; 0x8004bb <live_view_hover_index+0x1>
    135e:	80 93 ba 04 	sts	0x04BA, r24	; 0x8004ba <live_view_hover_index>
    1362:	08 95       	ret
        }
        else if (active_menu_index == 5) 
    1364:	85 30       	cpi	r24, 0x05	; 5
    1366:	91 05       	cpc	r25, r1
    1368:	09 f0       	breq	.+2      	; 0x136c <ui_process_key_command+0xca>
    136a:	50 c0       	rjmp	.+160    	; 0x140c <ui_process_key_command+0x16a>
        {
            // user is in the triggers menu
            if (active_trigger_index == -1)
    136c:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <active_trigger_index>
    1370:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <active_trigger_index+0x1>
    1374:	8f 3f       	cpi	r24, 0xFF	; 255
    1376:	2f ef       	ldi	r18, 0xFF	; 255
    1378:	92 07       	cpc	r25, r18
    137a:	69 f4       	brne	.+26     	; 0x1396 <ui_process_key_command+0xf4>
            {
                if (trigger_hover_index < (sizeof(TRIGGERS_BUFFER)/sizeof(TRIGGERS_BUFFER[0]) - 1))
    137c:	80 91 c0 04 	lds	r24, 0x04C0	; 0x8004c0 <trigger_hover_index>
    1380:	90 91 c1 04 	lds	r25, 0x04C1	; 0x8004c1 <trigger_hover_index+0x1>
    1384:	00 97       	sbiw	r24, 0x00	; 0
    1386:	09 f0       	breq	.+2      	; 0x138a <ui_process_key_command+0xe8>
    1388:	30 c2       	rjmp	.+1120   	; 0x17ea <ui_process_key_command+0x548>
                    trigger_hover_index++; // navigate downwards on the triggers menu
    138a:	01 96       	adiw	r24, 0x01	; 1
    138c:	90 93 c1 04 	sts	0x04C1, r25	; 0x8004c1 <trigger_hover_index+0x1>
    1390:	80 93 c0 04 	sts	0x04C0, r24	; 0x8004c0 <trigger_hover_index>
    1394:	08 95       	ret
            } else {
                switch (active_trigger_index) {
    1396:	00 97       	sbiw	r24, 0x00	; 0
    1398:	19 f0       	breq	.+6      	; 0x13a0 <ui_process_key_command+0xfe>
    139a:	01 97       	sbiw	r24, 0x01	; 1
    139c:	e1 f0       	breq	.+56     	; 0x13d6 <ui_process_key_command+0x134>
    139e:	08 95       	ret
                    case 0:
                        // adjust MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER - decrease
                        MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER -= STEP_SIZE_FOR_INCREMENTS;
    13a0:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <STEP_SIZE_FOR_INCREMENTS>
    13a4:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <STEP_SIZE_FOR_INCREMENTS+0x1>
    13a8:	40 91 16 01 	lds	r20, 0x0116	; 0x800116 <STEP_SIZE_FOR_INCREMENTS+0x2>
    13ac:	50 91 17 01 	lds	r21, 0x0117	; 0x800117 <STEP_SIZE_FOR_INCREMENTS+0x3>
    13b0:	60 91 1c 01 	lds	r22, 0x011C	; 0x80011c <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER>
    13b4:	70 91 1d 01 	lds	r23, 0x011D	; 0x80011d <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x1>
    13b8:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x2>
    13bc:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x3>
    13c0:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <__subsf3>
    13c4:	60 93 1c 01 	sts	0x011C, r22	; 0x80011c <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER>
    13c8:	70 93 1d 01 	sts	0x011D, r23	; 0x80011d <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x1>
    13cc:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x2>
    13d0:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x3>
                        break;
    13d4:	08 95       	ret
                    case 1:
                        // adjust MAXIMUM_TEMPERATURE_BEFORE_PUMPING - decrease
                        MAXIMUM_TEMPERATURE_BEFORE_PUMPING -= STEP_SIZE_FOR_INCREMENTS;
    13d6:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <STEP_SIZE_FOR_INCREMENTS>
    13da:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <STEP_SIZE_FOR_INCREMENTS+0x1>
    13de:	40 91 16 01 	lds	r20, 0x0116	; 0x800116 <STEP_SIZE_FOR_INCREMENTS+0x2>
    13e2:	50 91 17 01 	lds	r21, 0x0117	; 0x800117 <STEP_SIZE_FOR_INCREMENTS+0x3>
    13e6:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING>
    13ea:	70 91 19 01 	lds	r23, 0x0119	; 0x800119 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x1>
    13ee:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x2>
    13f2:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x3>
    13f6:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <__subsf3>
    13fa:	60 93 18 01 	sts	0x0118, r22	; 0x800118 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING>
    13fe:	70 93 19 01 	sts	0x0119, r23	; 0x800119 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x1>
    1402:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x2>
    1406:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x3>
                        break;
    140a:	08 95       	ret
                    default:
                        break;
                }
            }
        }
        else if (active_menu_index == 6) {
    140c:	86 30       	cpi	r24, 0x06	; 6
    140e:	91 05       	cpc	r25, r1
    1410:	71 f4       	brne	.+28     	; 0x142e <ui_process_key_command+0x18c>
            if (message_hover_index < MSG_BUFFER_SIZE - 1)
    1412:	80 91 bc 04 	lds	r24, 0x04BC	; 0x8004bc <message_hover_index>
    1416:	90 91 bd 04 	lds	r25, 0x04BD	; 0x8004bd <message_hover_index+0x1>
    141a:	83 30       	cpi	r24, 0x03	; 3
    141c:	91 05       	cpc	r25, r1
    141e:	0c f0       	brlt	.+2      	; 0x1422 <ui_process_key_command+0x180>
    1420:	e4 c1       	rjmp	.+968    	; 0x17ea <ui_process_key_command+0x548>
                message_hover_index++;
    1422:	01 96       	adiw	r24, 0x01	; 1
    1424:	90 93 bd 04 	sts	0x04BD, r25	; 0x8004bd <message_hover_index+0x1>
    1428:	80 93 bc 04 	sts	0x04BC, r24	; 0x8004bc <message_hover_index>
    142c:	08 95       	ret
        }
        else if (active_menu_index == 7)
    142e:	07 97       	sbiw	r24, 0x07	; 7
    1430:	09 f0       	breq	.+2      	; 0x1434 <ui_process_key_command+0x192>
    1432:	db c1       	rjmp	.+950    	; 0x17ea <ui_process_key_command+0x548>
        {
            if (active_config_index == -1)
    1434:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <active_config_index>
    1438:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <active_config_index+0x1>
    143c:	8f 3f       	cpi	r24, 0xFF	; 255
    143e:	2f ef       	ldi	r18, 0xFF	; 255
    1440:	92 07       	cpc	r25, r18
    1442:	71 f4       	brne	.+28     	; 0x1460 <ui_process_key_command+0x1be>
            {
                if (config_hover_index < (sizeof(CONFIG_BUFFER)/sizeof(CONFIG_BUFFER[0]) - 1))
    1444:	80 91 be 04 	lds	r24, 0x04BE	; 0x8004be <config_hover_index>
    1448:	90 91 bf 04 	lds	r25, 0x04BF	; 0x8004bf <config_hover_index+0x1>
    144c:	84 30       	cpi	r24, 0x04	; 4
    144e:	91 05       	cpc	r25, r1
    1450:	08 f0       	brcs	.+2      	; 0x1454 <ui_process_key_command+0x1b2>
    1452:	cb c1       	rjmp	.+918    	; 0x17ea <ui_process_key_command+0x548>
                    config_hover_index++; // navigate downwards on the config menu
    1454:	01 96       	adiw	r24, 0x01	; 1
    1456:	90 93 bf 04 	sts	0x04BF, r25	; 0x8004bf <config_hover_index+0x1>
    145a:	80 93 be 04 	sts	0x04BE, r24	; 0x8004be <config_hover_index>
    145e:	08 95       	ret
            } else {
                switch (active_config_index)
    1460:	82 30       	cpi	r24, 0x02	; 2
    1462:	91 05       	cpc	r25, r1
    1464:	09 f4       	brne	.+2      	; 0x1468 <ui_process_key_command+0x1c6>
    1466:	44 c0       	rjmp	.+136    	; 0x14f0 <ui_process_key_command+0x24e>
    1468:	2c f4       	brge	.+10     	; 0x1474 <ui_process_key_command+0x1d2>
    146a:	00 97       	sbiw	r24, 0x00	; 0
    146c:	59 f0       	breq	.+22     	; 0x1484 <ui_process_key_command+0x1e2>
    146e:	01 97       	sbiw	r24, 0x01	; 1
    1470:	21 f1       	breq	.+72     	; 0x14ba <ui_process_key_command+0x218>
    1472:	08 95       	ret
    1474:	83 30       	cpi	r24, 0x03	; 3
    1476:	91 05       	cpc	r25, r1
    1478:	09 f4       	brne	.+2      	; 0x147c <ui_process_key_command+0x1da>
    147a:	55 c0       	rjmp	.+170    	; 0x1526 <ui_process_key_command+0x284>
    147c:	04 97       	sbiw	r24, 0x04	; 4
    147e:	09 f4       	brne	.+2      	; 0x1482 <ui_process_key_command+0x1e0>
    1480:	55 c0       	rjmp	.+170    	; 0x152c <ui_process_key_command+0x28a>
    1482:	08 95       	ret
                {
                case 0:
                    // adjust STEP_SIZE_FOR_INCREMENTS - decrease
                    STEP_SIZE_FOR_INCREMENTS -= STEP_INCREMENT;
    1484:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <STEP_INCREMENT>
    1488:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <STEP_INCREMENT+0x1>
    148c:	40 91 12 01 	lds	r20, 0x0112	; 0x800112 <STEP_INCREMENT+0x2>
    1490:	50 91 13 01 	lds	r21, 0x0113	; 0x800113 <STEP_INCREMENT+0x3>
    1494:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <STEP_SIZE_FOR_INCREMENTS>
    1498:	70 91 15 01 	lds	r23, 0x0115	; 0x800115 <STEP_SIZE_FOR_INCREMENTS+0x1>
    149c:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <STEP_SIZE_FOR_INCREMENTS+0x2>
    14a0:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <STEP_SIZE_FOR_INCREMENTS+0x3>
    14a4:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <__subsf3>
    14a8:	60 93 14 01 	sts	0x0114, r22	; 0x800114 <STEP_SIZE_FOR_INCREMENTS>
    14ac:	70 93 15 01 	sts	0x0115, r23	; 0x800115 <STEP_SIZE_FOR_INCREMENTS+0x1>
    14b0:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <STEP_SIZE_FOR_INCREMENTS+0x2>
    14b4:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <STEP_SIZE_FOR_INCREMENTS+0x3>
                    break;
    14b8:	08 95       	ret
                case 1:
                    // adjust PUMP_THRESHOLD - decrease
                    PUMP_THRESHOLD -= STEP_SIZE_FOR_INCREMENTS;
    14ba:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <STEP_SIZE_FOR_INCREMENTS>
    14be:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <STEP_SIZE_FOR_INCREMENTS+0x1>
    14c2:	40 91 16 01 	lds	r20, 0x0116	; 0x800116 <STEP_SIZE_FOR_INCREMENTS+0x2>
    14c6:	50 91 17 01 	lds	r21, 0x0117	; 0x800117 <STEP_SIZE_FOR_INCREMENTS+0x3>
    14ca:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <PUMP_THRESHOLD>
    14ce:	70 91 0d 01 	lds	r23, 0x010D	; 0x80010d <PUMP_THRESHOLD+0x1>
    14d2:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <PUMP_THRESHOLD+0x2>
    14d6:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <PUMP_THRESHOLD+0x3>
    14da:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <__subsf3>
    14de:	60 93 0c 01 	sts	0x010C, r22	; 0x80010c <PUMP_THRESHOLD>
    14e2:	70 93 0d 01 	sts	0x010D, r23	; 0x80010d <PUMP_THRESHOLD+0x1>
    14e6:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <PUMP_THRESHOLD+0x2>
    14ea:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <PUMP_THRESHOLD+0x3>
                    break;
    14ee:	08 95       	ret
                case 2:
                    // adjust SPRAY_THRESHOLD - decrease
                    SPRAY_THRESHOLD -= STEP_SIZE_FOR_INCREMENTS;
    14f0:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <STEP_SIZE_FOR_INCREMENTS>
    14f4:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <STEP_SIZE_FOR_INCREMENTS+0x1>
    14f8:	40 91 16 01 	lds	r20, 0x0116	; 0x800116 <STEP_SIZE_FOR_INCREMENTS+0x2>
    14fc:	50 91 17 01 	lds	r21, 0x0117	; 0x800117 <STEP_SIZE_FOR_INCREMENTS+0x3>
    1500:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <SPRAY_THRESHOLD>
    1504:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <SPRAY_THRESHOLD+0x1>
    1508:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <SPRAY_THRESHOLD+0x2>
    150c:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <SPRAY_THRESHOLD+0x3>
    1510:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <__subsf3>
    1514:	60 93 08 01 	sts	0x0108, r22	; 0x800108 <SPRAY_THRESHOLD>
    1518:	70 93 09 01 	sts	0x0109, r23	; 0x800109 <SPRAY_THRESHOLD+0x1>
    151c:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <SPRAY_THRESHOLD+0x2>
    1520:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <SPRAY_THRESHOLD+0x3>
                    break;
    1524:	08 95       	ret
                case 3:
                    // adjust ENABLE_TRIGGER_VALUE - toggle
                    ENABLE_TRIGGER_VALUE = 0;
    1526:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <ENABLE_TRIGGER_VALUE>
                    break;
    152a:	08 95       	ret
                case 4:
                    // adjust ENABLE_ALERT_VALUE - toggle
                    ENABLE_ALERT_VALUE = 0;
    152c:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <ENABLE_ALERT_VALUE>
                    break;
    1530:	08 95       	ret
                    break;
                }
            }
        }
    }
    else if (key == 3)
    1532:	83 30       	cpi	r24, 0x03	; 3
    1534:	09 f0       	breq	.+2      	; 0x1538 <ui_process_key_command+0x296>
    1536:	11 c1       	rjmp	.+546    	; 0x175a <ui_process_key_command+0x4b8>
    {
        if (active_menu_index == -1)
    1538:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <active_menu_index>
    153c:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <active_menu_index+0x1>
    1540:	8f 3f       	cpi	r24, 0xFF	; 255
    1542:	2f ef       	ldi	r18, 0xFF	; 255
    1544:	92 07       	cpc	r25, r18
    1546:	71 f4       	brne	.+28     	; 0x1564 <ui_process_key_command+0x2c2>
        {
            if (menu_hover_index > 0)
    1548:	80 91 c2 04 	lds	r24, 0x04C2	; 0x8004c2 <menu_hover_index>
    154c:	90 91 c3 04 	lds	r25, 0x04C3	; 0x8004c3 <menu_hover_index+0x1>
    1550:	18 16       	cp	r1, r24
    1552:	19 06       	cpc	r1, r25
    1554:	0c f0       	brlt	.+2      	; 0x1558 <ui_process_key_command+0x2b6>
    1556:	49 c1       	rjmp	.+658    	; 0x17ea <ui_process_key_command+0x548>
                menu_hover_index--;
    1558:	01 97       	sbiw	r24, 0x01	; 1
    155a:	90 93 c3 04 	sts	0x04C3, r25	; 0x8004c3 <menu_hover_index+0x1>
    155e:	80 93 c2 04 	sts	0x04C2, r24	; 0x8004c2 <menu_hover_index>
    1562:	08 95       	ret
        }
        else if (active_menu_index == 4)
    1564:	84 30       	cpi	r24, 0x04	; 4
    1566:	91 05       	cpc	r25, r1
    1568:	71 f4       	brne	.+28     	; 0x1586 <ui_process_key_command+0x2e4>
        {
            // user is in the live view menu
            if (live_view_hover_index > 0)
    156a:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <live_view_hover_index>
    156e:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <live_view_hover_index+0x1>
    1572:	18 16       	cp	r1, r24
    1574:	19 06       	cpc	r1, r25
    1576:	0c f0       	brlt	.+2      	; 0x157a <ui_process_key_command+0x2d8>
    1578:	38 c1       	rjmp	.+624    	; 0x17ea <ui_process_key_command+0x548>
                live_view_hover_index--;
    157a:	01 97       	sbiw	r24, 0x01	; 1
    157c:	90 93 bb 04 	sts	0x04BB, r25	; 0x8004bb <live_view_hover_index+0x1>
    1580:	80 93 ba 04 	sts	0x04BA, r24	; 0x8004ba <live_view_hover_index>
    1584:	08 95       	ret
        }
        else if (active_menu_index == 5)
    1586:	85 30       	cpi	r24, 0x05	; 5
    1588:	91 05       	cpc	r25, r1
    158a:	09 f0       	breq	.+2      	; 0x158e <ui_process_key_command+0x2ec>
    158c:	51 c0       	rjmp	.+162    	; 0x1630 <ui_process_key_command+0x38e>
        {
            if (active_trigger_index == -1)
    158e:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <active_trigger_index>
    1592:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <active_trigger_index+0x1>
    1596:	8f 3f       	cpi	r24, 0xFF	; 255
    1598:	2f ef       	ldi	r18, 0xFF	; 255
    159a:	92 07       	cpc	r25, r18
    159c:	71 f4       	brne	.+28     	; 0x15ba <ui_process_key_command+0x318>
            {
                if (trigger_hover_index > 0)
    159e:	80 91 c0 04 	lds	r24, 0x04C0	; 0x8004c0 <trigger_hover_index>
    15a2:	90 91 c1 04 	lds	r25, 0x04C1	; 0x8004c1 <trigger_hover_index+0x1>
    15a6:	18 16       	cp	r1, r24
    15a8:	19 06       	cpc	r1, r25
    15aa:	0c f0       	brlt	.+2      	; 0x15ae <ui_process_key_command+0x30c>
    15ac:	1e c1       	rjmp	.+572    	; 0x17ea <ui_process_key_command+0x548>
                    trigger_hover_index--;
    15ae:	01 97       	sbiw	r24, 0x01	; 1
    15b0:	90 93 c1 04 	sts	0x04C1, r25	; 0x8004c1 <trigger_hover_index+0x1>
    15b4:	80 93 c0 04 	sts	0x04C0, r24	; 0x8004c0 <trigger_hover_index>
    15b8:	08 95       	ret
            } else {
                switch (active_trigger_index) {
    15ba:	00 97       	sbiw	r24, 0x00	; 0
    15bc:	19 f0       	breq	.+6      	; 0x15c4 <ui_process_key_command+0x322>
    15be:	01 97       	sbiw	r24, 0x01	; 1
    15c0:	e1 f0       	breq	.+56     	; 0x15fa <ui_process_key_command+0x358>
    15c2:	08 95       	ret
                    case 0:
                        // adjust MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER - decrease
                        MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER += STEP_SIZE_FOR_INCREMENTS;
    15c4:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <STEP_SIZE_FOR_INCREMENTS>
    15c8:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <STEP_SIZE_FOR_INCREMENTS+0x1>
    15cc:	40 91 16 01 	lds	r20, 0x0116	; 0x800116 <STEP_SIZE_FOR_INCREMENTS+0x2>
    15d0:	50 91 17 01 	lds	r21, 0x0117	; 0x800117 <STEP_SIZE_FOR_INCREMENTS+0x3>
    15d4:	60 91 1c 01 	lds	r22, 0x011C	; 0x80011c <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER>
    15d8:	70 91 1d 01 	lds	r23, 0x011D	; 0x80011d <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x1>
    15dc:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x2>
    15e0:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x3>
    15e4:	0e 94 67 0e 	call	0x1cce	; 0x1cce <__addsf3>
    15e8:	60 93 1c 01 	sts	0x011C, r22	; 0x80011c <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER>
    15ec:	70 93 1d 01 	sts	0x011D, r23	; 0x80011d <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x1>
    15f0:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x2>
    15f4:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x3>
                        break;
    15f8:	08 95       	ret
                    case 1:
                        // adjust MAXIMUM_TEMPERATURE_BEFORE_PUMPING - decrease
                        MAXIMUM_TEMPERATURE_BEFORE_PUMPING += STEP_SIZE_FOR_INCREMENTS;
    15fa:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <STEP_SIZE_FOR_INCREMENTS>
    15fe:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <STEP_SIZE_FOR_INCREMENTS+0x1>
    1602:	40 91 16 01 	lds	r20, 0x0116	; 0x800116 <STEP_SIZE_FOR_INCREMENTS+0x2>
    1606:	50 91 17 01 	lds	r21, 0x0117	; 0x800117 <STEP_SIZE_FOR_INCREMENTS+0x3>
    160a:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING>
    160e:	70 91 19 01 	lds	r23, 0x0119	; 0x800119 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x1>
    1612:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x2>
    1616:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x3>
    161a:	0e 94 67 0e 	call	0x1cce	; 0x1cce <__addsf3>
    161e:	60 93 18 01 	sts	0x0118, r22	; 0x800118 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING>
    1622:	70 93 19 01 	sts	0x0119, r23	; 0x800119 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x1>
    1626:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x2>
    162a:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x3>
                        break;
    162e:	08 95       	ret
                    default:
                        break;
                }
            }
        } 
        else if (active_menu_index == 6) {
    1630:	86 30       	cpi	r24, 0x06	; 6
    1632:	91 05       	cpc	r25, r1
    1634:	71 f4       	brne	.+28     	; 0x1652 <ui_process_key_command+0x3b0>
            if (message_hover_index > 0)
    1636:	80 91 bc 04 	lds	r24, 0x04BC	; 0x8004bc <message_hover_index>
    163a:	90 91 bd 04 	lds	r25, 0x04BD	; 0x8004bd <message_hover_index+0x1>
    163e:	18 16       	cp	r1, r24
    1640:	19 06       	cpc	r1, r25
    1642:	0c f0       	brlt	.+2      	; 0x1646 <ui_process_key_command+0x3a4>
    1644:	d2 c0       	rjmp	.+420    	; 0x17ea <ui_process_key_command+0x548>
                message_hover_index--;
    1646:	01 97       	sbiw	r24, 0x01	; 1
    1648:	90 93 bd 04 	sts	0x04BD, r25	; 0x8004bd <message_hover_index+0x1>
    164c:	80 93 bc 04 	sts	0x04BC, r24	; 0x8004bc <message_hover_index>
    1650:	08 95       	ret
        }
        else if (active_menu_index == 7)
    1652:	07 97       	sbiw	r24, 0x07	; 7
    1654:	09 f0       	breq	.+2      	; 0x1658 <ui_process_key_command+0x3b6>
    1656:	c9 c0       	rjmp	.+402    	; 0x17ea <ui_process_key_command+0x548>
        {
            if (active_config_index == -1)
    1658:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <active_config_index>
    165c:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <active_config_index+0x1>
    1660:	8f 3f       	cpi	r24, 0xFF	; 255
    1662:	2f ef       	ldi	r18, 0xFF	; 255
    1664:	92 07       	cpc	r25, r18
    1666:	71 f4       	brne	.+28     	; 0x1684 <ui_process_key_command+0x3e2>
            {
                if (config_hover_index > 0)
    1668:	80 91 be 04 	lds	r24, 0x04BE	; 0x8004be <config_hover_index>
    166c:	90 91 bf 04 	lds	r25, 0x04BF	; 0x8004bf <config_hover_index+0x1>
    1670:	18 16       	cp	r1, r24
    1672:	19 06       	cpc	r1, r25
    1674:	0c f0       	brlt	.+2      	; 0x1678 <ui_process_key_command+0x3d6>
    1676:	b9 c0       	rjmp	.+370    	; 0x17ea <ui_process_key_command+0x548>
                    config_hover_index--;
    1678:	01 97       	sbiw	r24, 0x01	; 1
    167a:	90 93 bf 04 	sts	0x04BF, r25	; 0x8004bf <config_hover_index+0x1>
    167e:	80 93 be 04 	sts	0x04BE, r24	; 0x8004be <config_hover_index>
    1682:	08 95       	ret
            } else {
            switch (active_config_index)
    1684:	82 30       	cpi	r24, 0x02	; 2
    1686:	91 05       	cpc	r25, r1
    1688:	09 f4       	brne	.+2      	; 0x168c <ui_process_key_command+0x3ea>
    168a:	44 c0       	rjmp	.+136    	; 0x1714 <ui_process_key_command+0x472>
    168c:	2c f4       	brge	.+10     	; 0x1698 <ui_process_key_command+0x3f6>
    168e:	00 97       	sbiw	r24, 0x00	; 0
    1690:	59 f0       	breq	.+22     	; 0x16a8 <ui_process_key_command+0x406>
    1692:	01 97       	sbiw	r24, 0x01	; 1
    1694:	21 f1       	breq	.+72     	; 0x16de <ui_process_key_command+0x43c>
    1696:	08 95       	ret
    1698:	83 30       	cpi	r24, 0x03	; 3
    169a:	91 05       	cpc	r25, r1
    169c:	09 f4       	brne	.+2      	; 0x16a0 <ui_process_key_command+0x3fe>
    169e:	55 c0       	rjmp	.+170    	; 0x174a <ui_process_key_command+0x4a8>
    16a0:	04 97       	sbiw	r24, 0x04	; 4
    16a2:	09 f4       	brne	.+2      	; 0x16a6 <ui_process_key_command+0x404>
    16a4:	56 c0       	rjmp	.+172    	; 0x1752 <ui_process_key_command+0x4b0>
    16a6:	08 95       	ret
                {
                case 0:
                    // adjust STEP_SIZE_FOR_INCREMENTS - decrease
                    STEP_SIZE_FOR_INCREMENTS += STEP_INCREMENT;
    16a8:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <STEP_INCREMENT>
    16ac:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <STEP_INCREMENT+0x1>
    16b0:	40 91 12 01 	lds	r20, 0x0112	; 0x800112 <STEP_INCREMENT+0x2>
    16b4:	50 91 13 01 	lds	r21, 0x0113	; 0x800113 <STEP_INCREMENT+0x3>
    16b8:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <STEP_SIZE_FOR_INCREMENTS>
    16bc:	70 91 15 01 	lds	r23, 0x0115	; 0x800115 <STEP_SIZE_FOR_INCREMENTS+0x1>
    16c0:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <STEP_SIZE_FOR_INCREMENTS+0x2>
    16c4:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <STEP_SIZE_FOR_INCREMENTS+0x3>
    16c8:	0e 94 67 0e 	call	0x1cce	; 0x1cce <__addsf3>
    16cc:	60 93 14 01 	sts	0x0114, r22	; 0x800114 <STEP_SIZE_FOR_INCREMENTS>
    16d0:	70 93 15 01 	sts	0x0115, r23	; 0x800115 <STEP_SIZE_FOR_INCREMENTS+0x1>
    16d4:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <STEP_SIZE_FOR_INCREMENTS+0x2>
    16d8:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <STEP_SIZE_FOR_INCREMENTS+0x3>
                    break;
    16dc:	08 95       	ret
                case 1:
                    // adjust PUMP_THRESHOLD - decrease
                    PUMP_THRESHOLD += STEP_SIZE_FOR_INCREMENTS;
    16de:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <STEP_SIZE_FOR_INCREMENTS>
    16e2:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <STEP_SIZE_FOR_INCREMENTS+0x1>
    16e6:	40 91 16 01 	lds	r20, 0x0116	; 0x800116 <STEP_SIZE_FOR_INCREMENTS+0x2>
    16ea:	50 91 17 01 	lds	r21, 0x0117	; 0x800117 <STEP_SIZE_FOR_INCREMENTS+0x3>
    16ee:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <PUMP_THRESHOLD>
    16f2:	70 91 0d 01 	lds	r23, 0x010D	; 0x80010d <PUMP_THRESHOLD+0x1>
    16f6:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <PUMP_THRESHOLD+0x2>
    16fa:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <PUMP_THRESHOLD+0x3>
    16fe:	0e 94 67 0e 	call	0x1cce	; 0x1cce <__addsf3>
    1702:	60 93 0c 01 	sts	0x010C, r22	; 0x80010c <PUMP_THRESHOLD>
    1706:	70 93 0d 01 	sts	0x010D, r23	; 0x80010d <PUMP_THRESHOLD+0x1>
    170a:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <PUMP_THRESHOLD+0x2>
    170e:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <PUMP_THRESHOLD+0x3>
                    break;
    1712:	08 95       	ret
                case 2:
                    // adjust SPRAY_THRESHOLD - decrease
                    SPRAY_THRESHOLD += STEP_SIZE_FOR_INCREMENTS;
    1714:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <STEP_SIZE_FOR_INCREMENTS>
    1718:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <STEP_SIZE_FOR_INCREMENTS+0x1>
    171c:	40 91 16 01 	lds	r20, 0x0116	; 0x800116 <STEP_SIZE_FOR_INCREMENTS+0x2>
    1720:	50 91 17 01 	lds	r21, 0x0117	; 0x800117 <STEP_SIZE_FOR_INCREMENTS+0x3>
    1724:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <SPRAY_THRESHOLD>
    1728:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <SPRAY_THRESHOLD+0x1>
    172c:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <SPRAY_THRESHOLD+0x2>
    1730:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <SPRAY_THRESHOLD+0x3>
    1734:	0e 94 67 0e 	call	0x1cce	; 0x1cce <__addsf3>
    1738:	60 93 08 01 	sts	0x0108, r22	; 0x800108 <SPRAY_THRESHOLD>
    173c:	70 93 09 01 	sts	0x0109, r23	; 0x800109 <SPRAY_THRESHOLD+0x1>
    1740:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <SPRAY_THRESHOLD+0x2>
    1744:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <SPRAY_THRESHOLD+0x3>
                    break;
    1748:	08 95       	ret
                case 3:
                    // adjust ENABLE_TRIGGER_VALUE - toggle
                    ENABLE_TRIGGER_VALUE = 1;
    174a:	81 e0       	ldi	r24, 0x01	; 1
    174c:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <ENABLE_TRIGGER_VALUE>
                    break;
    1750:	08 95       	ret
                case 4:
                    // adjust ENABLE_ALERT_VALUE - toggle
                    ENABLE_ALERT_VALUE = 1;
    1752:	81 e0       	ldi	r24, 0x01	; 1
    1754:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <ENABLE_ALERT_VALUE>
                    break;
    1758:	08 95       	ret
                    break;
                }
            }
        }
    }
    else if (key == 4)
    175a:	84 30       	cpi	r24, 0x04	; 4
    175c:	09 f0       	breq	.+2      	; 0x1760 <ui_process_key_command+0x4be>
    175e:	45 c0       	rjmp	.+138    	; 0x17ea <ui_process_key_command+0x548>
    {
        if (active_menu_index == -1)
    1760:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <active_menu_index>
    1764:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <active_menu_index+0x1>
    1768:	8f 3f       	cpi	r24, 0xFF	; 255
    176a:	2f ef       	ldi	r18, 0xFF	; 255
    176c:	92 07       	cpc	r25, r18
    176e:	49 f4       	brne	.+18     	; 0x1782 <ui_process_key_command+0x4e0>
        {
            active_menu_index = menu_hover_index;
    1770:	80 91 c2 04 	lds	r24, 0x04C2	; 0x8004c2 <menu_hover_index>
    1774:	90 91 c3 04 	lds	r25, 0x04C3	; 0x8004c3 <menu_hover_index+0x1>
    1778:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <active_menu_index+0x1>
    177c:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <active_menu_index>
    1780:	08 95       	ret
        }
        else if (active_menu_index == 4)
    1782:	84 30       	cpi	r24, 0x04	; 4
    1784:	91 05       	cpc	r25, r1
    1786:	79 f4       	brne	.+30     	; 0x17a6 <ui_process_key_command+0x504>
        {
            if (active_live_view_index == -1)
    1788:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <active_live_view_index>
    178c:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <active_live_view_index+0x1>
    1790:	01 96       	adiw	r24, 0x01	; 1
    1792:	59 f5       	brne	.+86     	; 0x17ea <ui_process_key_command+0x548>
            {
                active_live_view_index = live_view_hover_index;
    1794:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <live_view_hover_index>
    1798:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <live_view_hover_index+0x1>
    179c:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <active_live_view_index+0x1>
    17a0:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <active_live_view_index>
    17a4:	08 95       	ret
            }
        }
        else if (active_menu_index == 5)
    17a6:	85 30       	cpi	r24, 0x05	; 5
    17a8:	91 05       	cpc	r25, r1
    17aa:	79 f4       	brne	.+30     	; 0x17ca <ui_process_key_command+0x528>
        {
            if (active_trigger_index == -1)
    17ac:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <active_trigger_index>
    17b0:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <active_trigger_index+0x1>
    17b4:	01 96       	adiw	r24, 0x01	; 1
    17b6:	c9 f4       	brne	.+50     	; 0x17ea <ui_process_key_command+0x548>
            {
                active_trigger_index = trigger_hover_index;
    17b8:	80 91 c0 04 	lds	r24, 0x04C0	; 0x8004c0 <trigger_hover_index>
    17bc:	90 91 c1 04 	lds	r25, 0x04C1	; 0x8004c1 <trigger_hover_index+0x1>
    17c0:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <active_trigger_index+0x1>
    17c4:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <active_trigger_index>
    17c8:	08 95       	ret
            }
        }
        else if (active_menu_index == 7)
    17ca:	07 97       	sbiw	r24, 0x07	; 7
    17cc:	71 f4       	brne	.+28     	; 0x17ea <ui_process_key_command+0x548>
        {
            if (active_config_index == -1)
    17ce:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <active_config_index>
    17d2:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <active_config_index+0x1>
    17d6:	01 96       	adiw	r24, 0x01	; 1
    17d8:	41 f4       	brne	.+16     	; 0x17ea <ui_process_key_command+0x548>
            {
                active_config_index = config_hover_index;
    17da:	80 91 be 04 	lds	r24, 0x04BE	; 0x8004be <config_hover_index>
    17de:	90 91 bf 04 	lds	r25, 0x04BF	; 0x8004bf <config_hover_index+0x1>
    17e2:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <active_config_index+0x1>
    17e6:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <active_config_index>
    17ea:	08 95       	ret

000017ec <__vector_9>:
        }
    }
}

ISR(TIMER2_OVF_vect)
{
    17ec:	1f 92       	push	r1
    17ee:	0f 92       	push	r0
    17f0:	0f b6       	in	r0, 0x3f	; 63
    17f2:	0f 92       	push	r0
    17f4:	11 24       	eor	r1, r1
    17f6:	8f 93       	push	r24
    /* Keep ISR short: only update tick and set a flag for main loop to do sensor work */
    tick++;
    17f8:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <tick>
    17fc:	8f 5f       	subi	r24, 0xFF	; 255
    17fe:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <tick>

    if (tick >= 248) {
    1802:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <tick>
    1806:	88 3f       	cpi	r24, 0xF8	; 248
    1808:	28 f0       	brcs	.+10     	; 0x1814 <__vector_9+0x28>
        tick = 0;
    180a:	10 92 c5 04 	sts	0x04C5, r1	; 0x8004c5 <tick>
        one_second_event = 1;
    180e:	81 e0       	ldi	r24, 0x01	; 1
    1810:	80 93 c4 04 	sts	0x04C4, r24	; 0x8004c4 <one_second_event>
    }
}
    1814:	8f 91       	pop	r24
    1816:	0f 90       	pop	r0
    1818:	0f be       	out	0x3f, r0	; 63
    181a:	0f 90       	pop	r0
    181c:	1f 90       	pop	r1
    181e:	18 95       	reti

00001820 <main>:

int main(void)
{
    1820:	cf 93       	push	r28
    1822:	df 93       	push	r29
    1824:	cd b7       	in	r28, 0x3d	; 61
    1826:	de b7       	in	r29, 0x3e	; 62
    1828:	c0 54       	subi	r28, 0x40	; 64
    182a:	d1 09       	sbc	r29, r1
    182c:	0f b6       	in	r0, 0x3f	; 63
    182e:	f8 94       	cli
    1830:	de bf       	out	0x3e, r29	; 62
    1832:	0f be       	out	0x3f, r0	; 63
    1834:	cd bf       	out	0x3d, r28	; 61
    initQueue(&height_per_second);
    1836:	86 ed       	ldi	r24, 0xD6	; 214
    1838:	94 e0       	ldi	r25, 0x04	; 4
    183a:	0e 94 36 01 	call	0x26c	; 0x26c <initQueue>
    initStrQueue(&MESSAGES_Q);
    183e:	8e ee       	ldi	r24, 0xEE	; 238
    1840:	94 e0       	ldi	r25, 0x04	; 4
    1842:	0e 94 03 02 	call	0x406	; 0x406 <initStrQueue>
    LCD_1602A_init();
    1846:	0e 94 44 03 	call	0x688	; 0x688 <LCD_1602A_init>
    HCSR04_init();
    184a:	0e 94 79 04 	call	0x8f2	; 0x8f2 <HCSR04_init>
    KEYPAD_init();
    184e:	0e 94 b3 04 	call	0x966	; 0x966 <KEYPAD_init>
    LED_SYSTEM_ACTIVE_INIT();
    1852:	0e 94 c9 02 	call	0x592	; 0x592 <LED_SYSTEM_ACTIVE_INIT>
    TIMER2_INIT();
    1856:	0e 94 bf 02 	call	0x57e	; 0x57e <TIMER2_INIT>

    uint8_t pressed_key = KEYPAD_NO_KEY;
	
	int tank_height = HCSR04_get_distance();
    185a:	0e 94 ae 04 	call	0x95c	; 0x95c <HCSR04_get_distance>
    enqueue(&height_per_second, tank_height);
    185e:	bc 01       	movw	r22, r24
    1860:	86 ed       	ldi	r24, 0xD6	; 214
    1862:	94 e0       	ldi	r25, 0x04	; 4
    1864:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <enqueue>

    while (1)
    {
        ui_show_display();
    1868:	0e 94 bb 06 	call	0xd76	; 0xd76 <ui_show_display>


        if (SYSTEM_SIGNAL) {
    186c:	80 91 a8 04 	lds	r24, 0x04A8	; 0x8004a8 <__data_end>
    1870:	88 23       	and	r24, r24
    1872:	f9 f0       	breq	.+62     	; 0x18b2 <main+0x92>
            char *msgptr = NULL;
    1874:	1a 82       	std	Y+2, r1	; 0x02
    1876:	19 82       	std	Y+1, r1	; 0x01
            SYSTEM_SIGNAL = 0;
    1878:	10 92 a8 04 	sts	0x04A8, r1	; 0x8004a8 <__data_end>
            peekFrontStr(&MESSAGES_Q, &msgptr);
    187c:	be 01       	movw	r22, r28
    187e:	6f 5f       	subi	r22, 0xFF	; 255
    1880:	7f 4f       	sbci	r23, 0xFF	; 255
    1882:	8e ee       	ldi	r24, 0xEE	; 238
    1884:	94 e0       	ldi	r25, 0x04	; 4
    1886:	0e 94 a2 02 	call	0x544	; 0x544 <peekFrontStr>
            display_set("ALERT", msgptr ? msgptr : "System alert");
    188a:	69 81       	ldd	r22, Y+1	; 0x01
    188c:	7a 81       	ldd	r23, Y+2	; 0x02
    188e:	61 15       	cp	r22, r1
    1890:	71 05       	cpc	r23, r1
    1892:	11 f4       	brne	.+4      	; 0x1898 <main+0x78>
    1894:	6c e3       	ldi	r22, 0x3C	; 60
    1896:	73 e0       	ldi	r23, 0x03	; 3
    1898:	8c ed       	ldi	r24, 0xDC	; 220
    189a:	91 e0       	ldi	r25, 0x01	; 1
    189c:	0e 94 cc 04 	call	0x998	; 0x998 <display_set>
    18a0:	2f ef       	ldi	r18, 0xFF	; 255
    18a2:	83 ed       	ldi	r24, 0xD3	; 211
    18a4:	90 e3       	ldi	r25, 0x30	; 48
    18a6:	21 50       	subi	r18, 0x01	; 1
    18a8:	80 40       	sbci	r24, 0x00	; 0
    18aa:	90 40       	sbci	r25, 0x00	; 0
    18ac:	e1 f7       	brne	.-8      	; 0x18a6 <main+0x86>
    18ae:	00 c0       	rjmp	.+0      	; 0x18b0 <main+0x90>
    18b0:	00 00       	nop
            _delay_ms(1000); // show alert briefly
        }

        if (one_second_event) {
    18b2:	80 91 c4 04 	lds	r24, 0x04C4	; 0x8004c4 <one_second_event>
    18b6:	88 23       	and	r24, r24
    18b8:	09 f4       	brne	.+2      	; 0x18bc <main+0x9c>
    18ba:	e4 c1       	rjmp	.+968    	; 0x1c84 <main+0x464>
            one_second_event = 0;
    18bc:	10 92 c4 04 	sts	0x04C4, r1	; 0x8004c4 <one_second_event>

            int tank_height = HCSR04_get_distance();
    18c0:	0e 94 ae 04 	call	0x95c	; 0x95c <HCSR04_get_distance>
    18c4:	8c 01       	movw	r16, r24
            enqueue(&height_per_second, tank_height);
    18c6:	bc 01       	movw	r22, r24
    18c8:	86 ed       	ldi	r24, 0xD6	; 214
    18ca:	94 e0       	ldi	r25, 0x04	; 4
    18cc:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <enqueue>

            float capacity = get_tank_capacity_at_height(tank_height * 1.5);
    18d0:	b8 01       	movw	r22, r16
    18d2:	11 0f       	add	r17, r17
    18d4:	88 0b       	sbc	r24, r24
    18d6:	99 0b       	sbc	r25, r25
    18d8:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <__floatsisf>
    18dc:	20 e0       	ldi	r18, 0x00	; 0
    18de:	30 e0       	ldi	r19, 0x00	; 0
    18e0:	40 ec       	ldi	r20, 0xC0	; 192
    18e2:	5f e3       	ldi	r21, 0x3F	; 63
    18e4:	0e 94 37 10 	call	0x206e	; 0x206e <__mulsf3>
    18e8:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <__fixsfsi>
    18ec:	cb 01       	movw	r24, r22
    18ee:	0e 94 82 05 	call	0xb04	; 0xb04 <get_tank_capacity_at_height>
    18f2:	16 2f       	mov	r17, r22
    18f4:	07 2f       	mov	r16, r23
    18f6:	f8 2e       	mov	r15, r24
    18f8:	e9 2e       	mov	r14, r25
            float soil_temp = get_soil_temperature();
    18fa:	0e 94 b8 06 	call	0xd70	; 0xd70 <get_soil_temperature>
    18fe:	86 2e       	mov	r8, r22
    1900:	97 2e       	mov	r9, r23
    1902:	c8 2e       	mov	r12, r24
    1904:	d9 2e       	mov	r13, r25

            if (ENABLE_TRIGGER_VALUE) {
    1906:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <ENABLE_TRIGGER_VALUE>
    190a:	88 23       	and	r24, r24
    190c:	09 f4       	brne	.+2      	; 0x1910 <main+0xf0>
    190e:	ba c1       	rjmp	.+884    	; 0x1c84 <main+0x464>
                if (capacity <= MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER) {
    1910:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER>
    1914:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x1>
    1918:	40 91 1e 01 	lds	r20, 0x011E	; 0x80011e <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x2>
    191c:	50 91 1f 01 	lds	r21, 0x011F	; 0x80011f <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x3>
    1920:	61 2f       	mov	r22, r17
    1922:	70 2f       	mov	r23, r16
    1924:	8f 2d       	mov	r24, r15
    1926:	9e 2d       	mov	r25, r14
    1928:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <__cmpsf2>
    192c:	18 16       	cp	r1, r24
    192e:	fc f0       	brlt	.+62     	; 0x196e <main+0x14e>
                    char msg[64];
                    snprintf(msg, sizeof(msg), "Refill triggered at %.1f Ltrs", capacity);
    1930:	ef 92       	push	r14
    1932:	ff 92       	push	r15
    1934:	0f 93       	push	r16
    1936:	1f 93       	push	r17
    1938:	89 e4       	ldi	r24, 0x49	; 73
    193a:	93 e0       	ldi	r25, 0x03	; 3
    193c:	9f 93       	push	r25
    193e:	8f 93       	push	r24
    1940:	1f 92       	push	r1
    1942:	80 e4       	ldi	r24, 0x40	; 64
    1944:	8f 93       	push	r24
    1946:	ce 01       	movw	r24, r28
    1948:	01 96       	adiw	r24, 0x01	; 1
    194a:	5c 01       	movw	r10, r24
    194c:	9f 93       	push	r25
    194e:	8f 93       	push	r24
    1950:	0e 94 69 12 	call	0x24d2	; 0x24d2 <snprintf>
                    enqueueStr(&MESSAGES_Q, msg);
    1954:	b5 01       	movw	r22, r10
    1956:	8e ee       	ldi	r24, 0xEE	; 238
    1958:	94 e0       	ldi	r25, 0x04	; 4
    195a:	0e 94 36 02 	call	0x46c	; 0x46c <enqueueStr>
                    SYSTEM_SIGNAL = 1;
    195e:	81 e0       	ldi	r24, 0x01	; 1
    1960:	80 93 a8 04 	sts	0x04A8, r24	; 0x8004a8 <__data_end>
    1964:	0f b6       	in	r0, 0x3f	; 63
    1966:	f8 94       	cli
    1968:	de bf       	out	0x3e, r29	; 62
    196a:	0f be       	out	0x3f, r0	; 63
    196c:	cd bf       	out	0x3d, r28	; 61
                }

                if (soil_temp >= MAXIMUM_TEMPERATURE_BEFORE_PUMPING) {
    196e:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING>
    1972:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x1>
    1976:	40 91 1a 01 	lds	r20, 0x011A	; 0x80011a <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x2>
    197a:	50 91 1b 01 	lds	r21, 0x011B	; 0x80011b <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x3>
    197e:	68 2d       	mov	r22, r8
    1980:	79 2d       	mov	r23, r9
    1982:	8c 2d       	mov	r24, r12
    1984:	9d 2d       	mov	r25, r13
    1986:	0e 94 32 10 	call	0x2064	; 0x2064 <__gesf2>
    198a:	88 23       	and	r24, r24
    198c:	fc f0       	brlt	.+62     	; 0x19cc <main+0x1ac>
                    char msg[64];
                    snprintf(msg, sizeof(msg), "Cooling triggered at %.2f degrees", soil_temp);
    198e:	df 92       	push	r13
    1990:	cf 92       	push	r12
    1992:	9f 92       	push	r9
    1994:	8f 92       	push	r8
    1996:	87 e6       	ldi	r24, 0x67	; 103
    1998:	93 e0       	ldi	r25, 0x03	; 3
    199a:	9f 93       	push	r25
    199c:	8f 93       	push	r24
    199e:	1f 92       	push	r1
    19a0:	80 e4       	ldi	r24, 0x40	; 64
    19a2:	8f 93       	push	r24
    19a4:	ce 01       	movw	r24, r28
    19a6:	01 96       	adiw	r24, 0x01	; 1
    19a8:	5c 01       	movw	r10, r24
    19aa:	9f 93       	push	r25
    19ac:	8f 93       	push	r24
    19ae:	0e 94 69 12 	call	0x24d2	; 0x24d2 <snprintf>
                    enqueueStr(&MESSAGES_Q, msg);
    19b2:	b5 01       	movw	r22, r10
    19b4:	8e ee       	ldi	r24, 0xEE	; 238
    19b6:	94 e0       	ldi	r25, 0x04	; 4
    19b8:	0e 94 36 02 	call	0x46c	; 0x46c <enqueueStr>
                    SYSTEM_SIGNAL = 1;
    19bc:	81 e0       	ldi	r24, 0x01	; 1
    19be:	80 93 a8 04 	sts	0x04A8, r24	; 0x8004a8 <__data_end>
    19c2:	0f b6       	in	r0, 0x3f	; 63
    19c4:	f8 94       	cli
    19c6:	de bf       	out	0x3e, r29	; 62
    19c8:	0f be       	out	0x3f, r0	; 63
    19ca:	cd bf       	out	0x3d, r28	; 61
                }

                if (capacity >= PUMP_THRESHOLD) {
    19cc:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <PUMP_THRESHOLD>
    19d0:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <PUMP_THRESHOLD+0x1>
    19d4:	40 91 0e 01 	lds	r20, 0x010E	; 0x80010e <PUMP_THRESHOLD+0x2>
    19d8:	50 91 0f 01 	lds	r21, 0x010F	; 0x80010f <PUMP_THRESHOLD+0x3>
    19dc:	61 2f       	mov	r22, r17
    19de:	70 2f       	mov	r23, r16
    19e0:	8f 2d       	mov	r24, r15
    19e2:	9e 2d       	mov	r25, r14
    19e4:	0e 94 32 10 	call	0x2064	; 0x2064 <__gesf2>
    19e8:	88 23       	and	r24, r24
    19ea:	fc f0       	brlt	.+62     	; 0x1a2a <main+0x20a>
                    char msg[64];
                    snprintf(msg, sizeof(msg), "Pumping stopped at %.1f Ltrs", capacity);
    19ec:	ef 92       	push	r14
    19ee:	ff 92       	push	r15
    19f0:	0f 93       	push	r16
    19f2:	1f 93       	push	r17
    19f4:	89 e8       	ldi	r24, 0x89	; 137
    19f6:	93 e0       	ldi	r25, 0x03	; 3
    19f8:	9f 93       	push	r25
    19fa:	8f 93       	push	r24
    19fc:	1f 92       	push	r1
    19fe:	80 e4       	ldi	r24, 0x40	; 64
    1a00:	8f 93       	push	r24
    1a02:	8e 01       	movw	r16, r28
    1a04:	0f 5f       	subi	r16, 0xFF	; 255
    1a06:	1f 4f       	sbci	r17, 0xFF	; 255
    1a08:	1f 93       	push	r17
    1a0a:	0f 93       	push	r16
    1a0c:	0e 94 69 12 	call	0x24d2	; 0x24d2 <snprintf>
                    enqueueStr(&MESSAGES_Q, msg);
    1a10:	b8 01       	movw	r22, r16
    1a12:	8e ee       	ldi	r24, 0xEE	; 238
    1a14:	94 e0       	ldi	r25, 0x04	; 4
    1a16:	0e 94 36 02 	call	0x46c	; 0x46c <enqueueStr>
                    SYSTEM_SIGNAL = 1;
    1a1a:	81 e0       	ldi	r24, 0x01	; 1
    1a1c:	80 93 a8 04 	sts	0x04A8, r24	; 0x8004a8 <__data_end>
    1a20:	0f b6       	in	r0, 0x3f	; 63
    1a22:	f8 94       	cli
    1a24:	de bf       	out	0x3e, r29	; 62
    1a26:	0f be       	out	0x3f, r0	; 63
    1a28:	cd bf       	out	0x3d, r28	; 61
                }

                if (soil_temp <= SPRAY_THRESHOLD) {
    1a2a:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <SPRAY_THRESHOLD>
    1a2e:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <SPRAY_THRESHOLD+0x1>
    1a32:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <SPRAY_THRESHOLD+0x2>
    1a36:	50 91 0b 01 	lds	r21, 0x010B	; 0x80010b <SPRAY_THRESHOLD+0x3>
    1a3a:	68 2d       	mov	r22, r8
    1a3c:	79 2d       	mov	r23, r9
    1a3e:	8c 2d       	mov	r24, r12
    1a40:	9d 2d       	mov	r25, r13
    1a42:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <__cmpsf2>
    1a46:	18 16       	cp	r1, r24
    1a48:	0c f4       	brge	.+2      	; 0x1a4c <main+0x22c>
    1a4a:	1c c1       	rjmp	.+568    	; 0x1c84 <main+0x464>
                    char msg[64];
                    snprintf(msg, sizeof(msg), "Spraying stopped at %.2f degrees", soil_temp);
    1a4c:	df 92       	push	r13
    1a4e:	cf 92       	push	r12
    1a50:	9f 92       	push	r9
    1a52:	8f 92       	push	r8
    1a54:	86 ea       	ldi	r24, 0xA6	; 166
    1a56:	93 e0       	ldi	r25, 0x03	; 3
    1a58:	9f 93       	push	r25
    1a5a:	8f 93       	push	r24
    1a5c:	1f 92       	push	r1
    1a5e:	80 e4       	ldi	r24, 0x40	; 64
    1a60:	8f 93       	push	r24
    1a62:	8e 01       	movw	r16, r28
    1a64:	0f 5f       	subi	r16, 0xFF	; 255
    1a66:	1f 4f       	sbci	r17, 0xFF	; 255
    1a68:	1f 93       	push	r17
    1a6a:	0f 93       	push	r16
    1a6c:	0e 94 69 12 	call	0x24d2	; 0x24d2 <snprintf>
                    enqueueStr(&MESSAGES_Q, msg);
    1a70:	b8 01       	movw	r22, r16
    1a72:	8e ee       	ldi	r24, 0xEE	; 238
    1a74:	94 e0       	ldi	r25, 0x04	; 4
    1a76:	0e 94 36 02 	call	0x46c	; 0x46c <enqueueStr>
                    SYSTEM_SIGNAL = 1;
    1a7a:	81 e0       	ldi	r24, 0x01	; 1
    1a7c:	80 93 a8 04 	sts	0x04A8, r24	; 0x8004a8 <__data_end>
    1a80:	0f b6       	in	r0, 0x3f	; 63
    1a82:	f8 94       	cli
    1a84:	de bf       	out	0x3e, r29	; 62
    1a86:	0f be       	out	0x3f, r0	; 63
    1a88:	cd bf       	out	0x3d, r28	; 61
    1a8a:	fc c0       	rjmp	.+504    	; 0x1c84 <main+0x464>
        while (active_menu_index == 4 && active_live_view_index != -1)
        {
            while ((pressed_key = KEYPAD_read()) == KEYPAD_NO_KEY)
            {

                switch (live_view_hover_index)
    1a8c:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <live_view_hover_index>
    1a90:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <live_view_hover_index+0x1>
    1a94:	81 30       	cpi	r24, 0x01	; 1
    1a96:	91 05       	cpc	r25, r1
    1a98:	09 f4       	brne	.+2      	; 0x1a9c <main+0x27c>
    1a9a:	40 c0       	rjmp	.+128    	; 0x1b1c <main+0x2fc>
    1a9c:	1c f4       	brge	.+6      	; 0x1aa4 <main+0x284>
    1a9e:	89 2b       	or	r24, r25
    1aa0:	49 f0       	breq	.+18     	; 0x1ab4 <main+0x294>
    1aa2:	d7 c0       	rjmp	.+430    	; 0x1c52 <main+0x432>
    1aa4:	82 30       	cpi	r24, 0x02	; 2
    1aa6:	91 05       	cpc	r25, r1
    1aa8:	09 f4       	brne	.+2      	; 0x1aac <main+0x28c>
    1aaa:	6c c0       	rjmp	.+216    	; 0x1b84 <main+0x364>
    1aac:	03 97       	sbiw	r24, 0x03	; 3
    1aae:	09 f4       	brne	.+2      	; 0x1ab2 <main+0x292>
    1ab0:	9d c0       	rjmp	.+314    	; 0x1bec <main+0x3cc>
    1ab2:	cf c0       	rjmp	.+414    	; 0x1c52 <main+0x432>
                {
                    case 0:
                        if (!(SHOW_LOADING_WIDGET)) {
    1ab4:	80 91 a9 04 	lds	r24, 0x04A9	; 0x8004a9 <SHOW_LOADING_WIDGET>
    1ab8:	81 11       	cpse	r24, r1
    1aba:	14 c0       	rjmp	.+40     	; 0x1ae4 <main+0x2c4>
                            display_set("CAPACITY", "Updating...");
    1abc:	67 ec       	ldi	r22, 0xC7	; 199
    1abe:	73 e0       	ldi	r23, 0x03	; 3
    1ac0:	8d e0       	ldi	r24, 0x0D	; 13
    1ac2:	92 e0       	ldi	r25, 0x02	; 2
    1ac4:	0e 94 cc 04 	call	0x998	; 0x998 <display_set>
                            SHOW_LOADING_WIDGET = 1;
    1ac8:	81 e0       	ldi	r24, 0x01	; 1
    1aca:	80 93 a9 04 	sts	0x04A9, r24	; 0x8004a9 <SHOW_LOADING_WIDGET>
                            current_tank_capacity = get_tank_capacity();
    1ace:	0e 94 b3 05 	call	0xb66	; 0xb66 <get_tank_capacity>
    1ad2:	60 93 b6 04 	sts	0x04B6, r22	; 0x8004b6 <current_tank_capacity>
    1ad6:	70 93 b7 04 	sts	0x04B7, r23	; 0x8004b7 <current_tank_capacity+0x1>
    1ada:	80 93 b8 04 	sts	0x04B8, r24	; 0x8004b8 <current_tank_capacity+0x2>
    1ade:	90 93 b9 04 	sts	0x04B9, r25	; 0x8004b9 <current_tank_capacity+0x3>
    1ae2:	b7 c0       	rjmp	.+366    	; 0x1c52 <main+0x432>
                        }
                        else {
                            format_float(buffer, sizeof(buffer), current_tank_capacity, 1, "Ltrs");
    1ae4:	20 91 b6 04 	lds	r18, 0x04B6	; 0x8004b6 <current_tank_capacity>
    1ae8:	30 91 b7 04 	lds	r19, 0x04B7	; 0x8004b7 <current_tank_capacity+0x1>
    1aec:	40 91 b8 04 	lds	r20, 0x04B8	; 0x8004b8 <current_tank_capacity+0x2>
    1af0:	50 91 b9 04 	lds	r21, 0x04B9	; 0x8004b9 <current_tank_capacity+0x3>
    1af4:	0f 2e       	mov	r0, r31
    1af6:	f1 ea       	ldi	r31, 0xA1	; 161
    1af8:	ef 2e       	mov	r14, r31
    1afa:	f3 e0       	ldi	r31, 0x03	; 3
    1afc:	ff 2e       	mov	r15, r31
    1afe:	f0 2d       	mov	r31, r0
    1b00:	01 e0       	ldi	r16, 0x01	; 1
    1b02:	60 e1       	ldi	r22, 0x10	; 16
    1b04:	70 e0       	ldi	r23, 0x00	; 0
    1b06:	86 ec       	ldi	r24, 0xC6	; 198
    1b08:	94 e0       	ldi	r25, 0x04	; 4
    1b0a:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <format_float>
                            display_set("CAPACITY", buffer);
    1b0e:	66 ec       	ldi	r22, 0xC6	; 198
    1b10:	74 e0       	ldi	r23, 0x04	; 4
    1b12:	8d e0       	ldi	r24, 0x0D	; 13
    1b14:	92 e0       	ldi	r25, 0x02	; 2
    1b16:	0e 94 cc 04 	call	0x998	; 0x998 <display_set>
    1b1a:	9b c0       	rjmp	.+310    	; 0x1c52 <main+0x432>
                        }

                        break;
                    case 1:
                        if (!(SHOW_LOADING_WIDGET))
    1b1c:	80 91 a9 04 	lds	r24, 0x04A9	; 0x8004a9 <SHOW_LOADING_WIDGET>
    1b20:	81 11       	cpse	r24, r1
    1b22:	14 c0       	rjmp	.+40     	; 0x1b4c <main+0x32c>
                        {
                            display_set("REFILL RATE", "Updating...");
    1b24:	67 ec       	ldi	r22, 0xC7	; 199
    1b26:	73 e0       	ldi	r23, 0x03	; 3
    1b28:	86 e1       	ldi	r24, 0x16	; 22
    1b2a:	92 e0       	ldi	r25, 0x02	; 2
    1b2c:	0e 94 cc 04 	call	0x998	; 0x998 <display_set>
                            SHOW_LOADING_WIDGET = 1;
    1b30:	81 e0       	ldi	r24, 0x01	; 1
    1b32:	80 93 a9 04 	sts	0x04A9, r24	; 0x8004a9 <SHOW_LOADING_WIDGET>
                            current_refill_rate = get_refill_rate();
    1b36:	0e 94 c6 05 	call	0xb8c	; 0xb8c <get_refill_rate>
    1b3a:	60 93 b2 04 	sts	0x04B2, r22	; 0x8004b2 <current_refill_rate>
    1b3e:	70 93 b3 04 	sts	0x04B3, r23	; 0x8004b3 <current_refill_rate+0x1>
    1b42:	80 93 b4 04 	sts	0x04B4, r24	; 0x8004b4 <current_refill_rate+0x2>
    1b46:	90 93 b5 04 	sts	0x04B5, r25	; 0x8004b5 <current_refill_rate+0x3>
    1b4a:	83 c0       	rjmp	.+262    	; 0x1c52 <main+0x432>
                        } else {
                            format_float(buffer, sizeof(buffer), current_refill_rate, 1, "Ltrs per min");
    1b4c:	20 91 b2 04 	lds	r18, 0x04B2	; 0x8004b2 <current_refill_rate>
    1b50:	30 91 b3 04 	lds	r19, 0x04B3	; 0x8004b3 <current_refill_rate+0x1>
    1b54:	40 91 b4 04 	lds	r20, 0x04B4	; 0x8004b4 <current_refill_rate+0x2>
    1b58:	50 91 b5 04 	lds	r21, 0x04B5	; 0x8004b5 <current_refill_rate+0x3>
    1b5c:	0f 2e       	mov	r0, r31
    1b5e:	fd e3       	ldi	r31, 0x3D	; 61
    1b60:	ef 2e       	mov	r14, r31
    1b62:	f2 e0       	ldi	r31, 0x02	; 2
    1b64:	ff 2e       	mov	r15, r31
    1b66:	f0 2d       	mov	r31, r0
    1b68:	01 e0       	ldi	r16, 0x01	; 1
    1b6a:	60 e1       	ldi	r22, 0x10	; 16
    1b6c:	70 e0       	ldi	r23, 0x00	; 0
    1b6e:	86 ec       	ldi	r24, 0xC6	; 198
    1b70:	94 e0       	ldi	r25, 0x04	; 4
    1b72:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <format_float>
                            display_set("REFILL RATE", buffer);
    1b76:	66 ec       	ldi	r22, 0xC6	; 198
    1b78:	74 e0       	ldi	r23, 0x04	; 4
    1b7a:	86 e1       	ldi	r24, 0x16	; 22
    1b7c:	92 e0       	ldi	r25, 0x02	; 2
    1b7e:	0e 94 cc 04 	call	0x998	; 0x998 <display_set>
    1b82:	67 c0       	rjmp	.+206    	; 0x1c52 <main+0x432>
                        }
                        break;
                    case 2:
                        if (!(SHOW_LOADING_WIDGET))
    1b84:	80 91 a9 04 	lds	r24, 0x04A9	; 0x8004a9 <SHOW_LOADING_WIDGET>
    1b88:	81 11       	cpse	r24, r1
    1b8a:	14 c0       	rjmp	.+40     	; 0x1bb4 <main+0x394>
                        {
                            display_set("LEAK RATE", "Updating...");
    1b8c:	67 ec       	ldi	r22, 0xC7	; 199
    1b8e:	73 e0       	ldi	r23, 0x03	; 3
    1b90:	85 e6       	ldi	r24, 0x65	; 101
    1b92:	92 e0       	ldi	r25, 0x02	; 2
    1b94:	0e 94 cc 04 	call	0x998	; 0x998 <display_set>
                            SHOW_LOADING_WIDGET = 1;
    1b98:	81 e0       	ldi	r24, 0x01	; 1
    1b9a:	80 93 a9 04 	sts	0x04A9, r24	; 0x8004a9 <SHOW_LOADING_WIDGET>
                            current_leak_rate = get_leak_rate();
    1b9e:	0e 94 39 06 	call	0xc72	; 0xc72 <get_leak_rate>
    1ba2:	60 93 ae 04 	sts	0x04AE, r22	; 0x8004ae <current_leak_rate>
    1ba6:	70 93 af 04 	sts	0x04AF, r23	; 0x8004af <current_leak_rate+0x1>
    1baa:	80 93 b0 04 	sts	0x04B0, r24	; 0x8004b0 <current_leak_rate+0x2>
    1bae:	90 93 b1 04 	sts	0x04B1, r25	; 0x8004b1 <current_leak_rate+0x3>
    1bb2:	4f c0       	rjmp	.+158    	; 0x1c52 <main+0x432>
                        } else {
                            format_float(buffer, sizeof(buffer), current_leak_rate, 1, "Ltrs per min");
    1bb4:	20 91 ae 04 	lds	r18, 0x04AE	; 0x8004ae <current_leak_rate>
    1bb8:	30 91 af 04 	lds	r19, 0x04AF	; 0x8004af <current_leak_rate+0x1>
    1bbc:	40 91 b0 04 	lds	r20, 0x04B0	; 0x8004b0 <current_leak_rate+0x2>
    1bc0:	50 91 b1 04 	lds	r21, 0x04B1	; 0x8004b1 <current_leak_rate+0x3>
    1bc4:	0f 2e       	mov	r0, r31
    1bc6:	fd e3       	ldi	r31, 0x3D	; 61
    1bc8:	ef 2e       	mov	r14, r31
    1bca:	f2 e0       	ldi	r31, 0x02	; 2
    1bcc:	ff 2e       	mov	r15, r31
    1bce:	f0 2d       	mov	r31, r0
    1bd0:	01 e0       	ldi	r16, 0x01	; 1
    1bd2:	60 e1       	ldi	r22, 0x10	; 16
    1bd4:	70 e0       	ldi	r23, 0x00	; 0
    1bd6:	86 ec       	ldi	r24, 0xC6	; 198
    1bd8:	94 e0       	ldi	r25, 0x04	; 4
    1bda:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <format_float>
                            display_set("LEAK RATE", buffer);
    1bde:	66 ec       	ldi	r22, 0xC6	; 198
    1be0:	74 e0       	ldi	r23, 0x04	; 4
    1be2:	85 e6       	ldi	r24, 0x65	; 101
    1be4:	92 e0       	ldi	r25, 0x02	; 2
    1be6:	0e 94 cc 04 	call	0x998	; 0x998 <display_set>
    1bea:	33 c0       	rjmp	.+102    	; 0x1c52 <main+0x432>
                        }
                        
                        break;

                    case 3:
                        if (!(SHOW_LOADING_WIDGET))
    1bec:	80 91 a9 04 	lds	r24, 0x04A9	; 0x8004a9 <SHOW_LOADING_WIDGET>
    1bf0:	81 11       	cpse	r24, r1
    1bf2:	14 c0       	rjmp	.+40     	; 0x1c1c <main+0x3fc>
                        {
                            display_set("SOIL TEMP", "Updating...");
    1bf4:	67 ec       	ldi	r22, 0xC7	; 199
    1bf6:	73 e0       	ldi	r23, 0x03	; 3
    1bf8:	8f e6       	ldi	r24, 0x6F	; 111
    1bfa:	92 e0       	ldi	r25, 0x02	; 2
    1bfc:	0e 94 cc 04 	call	0x998	; 0x998 <display_set>
                            SHOW_LOADING_WIDGET = 1;
    1c00:	81 e0       	ldi	r24, 0x01	; 1
    1c02:	80 93 a9 04 	sts	0x04A9, r24	; 0x8004a9 <SHOW_LOADING_WIDGET>
                            current_soil_temperature = get_soil_temperature();
    1c06:	0e 94 b8 06 	call	0xd70	; 0xd70 <get_soil_temperature>
    1c0a:	60 93 aa 04 	sts	0x04AA, r22	; 0x8004aa <current_soil_temperature>
    1c0e:	70 93 ab 04 	sts	0x04AB, r23	; 0x8004ab <current_soil_temperature+0x1>
    1c12:	80 93 ac 04 	sts	0x04AC, r24	; 0x8004ac <current_soil_temperature+0x2>
    1c16:	90 93 ad 04 	sts	0x04AD, r25	; 0x8004ad <current_soil_temperature+0x3>
    1c1a:	1b c0       	rjmp	.+54     	; 0x1c52 <main+0x432>
                        } else {
                            format_float(buffer, sizeof(buffer), current_soil_temperature, 1, "degrees");
    1c1c:	20 91 aa 04 	lds	r18, 0x04AA	; 0x8004aa <current_soil_temperature>
    1c20:	30 91 ab 04 	lds	r19, 0x04AB	; 0x8004ab <current_soil_temperature+0x1>
    1c24:	40 91 ac 04 	lds	r20, 0x04AC	; 0x8004ac <current_soil_temperature+0x2>
    1c28:	50 91 ad 04 	lds	r21, 0x04AD	; 0x8004ad <current_soil_temperature+0x3>
    1c2c:	0f 2e       	mov	r0, r31
    1c2e:	ff eb       	ldi	r31, 0xBF	; 191
    1c30:	ef 2e       	mov	r14, r31
    1c32:	f3 e0       	ldi	r31, 0x03	; 3
    1c34:	ff 2e       	mov	r15, r31
    1c36:	f0 2d       	mov	r31, r0
    1c38:	01 e0       	ldi	r16, 0x01	; 1
    1c3a:	60 e1       	ldi	r22, 0x10	; 16
    1c3c:	70 e0       	ldi	r23, 0x00	; 0
    1c3e:	86 ec       	ldi	r24, 0xC6	; 198
    1c40:	94 e0       	ldi	r25, 0x04	; 4
    1c42:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <format_float>
                            display_set("SOIL TEMP", buffer);
    1c46:	66 ec       	ldi	r22, 0xC6	; 198
    1c48:	74 e0       	ldi	r23, 0x04	; 4
    1c4a:	8f e6       	ldi	r24, 0x6F	; 111
    1c4c:	92 e0       	ldi	r25, 0x02	; 2
    1c4e:	0e 94 cc 04 	call	0x998	; 0x998 <display_set>
            }
        }

        while (active_menu_index == 4 && active_live_view_index != -1)
        {
            while ((pressed_key = KEYPAD_read()) == KEYPAD_NO_KEY)
    1c52:	0e 94 ba 04 	call	0x974	; 0x974 <KEYPAD_read>
    1c56:	18 2f       	mov	r17, r24
    1c58:	85 30       	cpi	r24, 0x05	; 5
    1c5a:	09 f4       	brne	.+2      	; 0x1c5e <main+0x43e>
    1c5c:	17 cf       	rjmp	.-466    	; 0x1a8c <main+0x26c>
                        break;
                }
                
            }

            SHOW_LOADING_WIDGET = 0;
    1c5e:	10 92 a9 04 	sts	0x04A9, r1	; 0x8004a9 <SHOW_LOADING_WIDGET>

            if (pressed_key == 1)
    1c62:	81 30       	cpi	r24, 0x01	; 1
    1c64:	41 f4       	brne	.+16     	; 0x1c76 <main+0x456>
            {
                // exit live view on key 1 press
                active_menu_index = -1;
    1c66:	8f ef       	ldi	r24, 0xFF	; 255
    1c68:	9f ef       	ldi	r25, 0xFF	; 255
    1c6a:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <active_menu_index+0x1>
    1c6e:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <active_menu_index>
                pressed_key = KEYPAD_NO_KEY;
    1c72:	15 e0       	ldi	r17, 0x05	; 5
                break;
    1c74:	14 c0       	rjmp	.+40     	; 0x1c9e <main+0x47e>
            } else {
                ui_process_key_command(pressed_key);
    1c76:	0e 94 51 09 	call	0x12a2	; 0x12a2 <ui_process_key_command>
            }

            while (KEYPAD_read() != KEYPAD_NO_KEY);
    1c7a:	0e 94 ba 04 	call	0x974	; 0x974 <KEYPAD_read>
    1c7e:	85 30       	cpi	r24, 0x05	; 5
    1c80:	e1 f7       	brne	.-8      	; 0x1c7a <main+0x45a>
    1c82:	01 c0       	rjmp	.+2      	; 0x1c86 <main+0x466>

        if (SYSTEM_SIGNAL) {
            char *msgptr = NULL;
            SYSTEM_SIGNAL = 0;
            peekFrontStr(&MESSAGES_Q, &msgptr);
            display_set("ALERT", msgptr ? msgptr : "System alert");
    1c84:	15 e0       	ldi	r17, 0x05	; 5
                    SYSTEM_SIGNAL = 1;
                }
            }
        }

        while (active_menu_index == 4 && active_live_view_index != -1)
    1c86:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <active_menu_index>
    1c8a:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <active_menu_index+0x1>
    1c8e:	04 97       	sbiw	r24, 0x04	; 4
    1c90:	31 f4       	brne	.+12     	; 0x1c9e <main+0x47e>
    1c92:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <active_live_view_index>
    1c96:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <active_live_view_index+0x1>
    1c9a:	01 96       	adiw	r24, 0x01	; 1
    1c9c:	d1 f6       	brne	.-76     	; 0x1c52 <main+0x432>
        }


        // _delay_ms(20);

        if (pressed_key == KEYPAD_NO_KEY) {
    1c9e:	15 30       	cpi	r17, 0x05	; 5
    1ca0:	49 f4       	brne	.+18     	; 0x1cb4 <main+0x494>
            LED_system_active_on();
    1ca2:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <LED_system_active_on>
            while ((pressed_key = KEYPAD_read()) == KEYPAD_NO_KEY);
    1ca6:	0e 94 ba 04 	call	0x974	; 0x974 <KEYPAD_read>
    1caa:	18 2f       	mov	r17, r24
    1cac:	85 30       	cpi	r24, 0x05	; 5
    1cae:	d9 f3       	breq	.-10     	; 0x1ca6 <main+0x486>
            LED_system_active_off();
    1cb0:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <LED_system_active_off>
        }
        
        // _delay_ms(20);
        if (KEYPAD_read() == pressed_key)
    1cb4:	0e 94 ba 04 	call	0x974	; 0x974 <KEYPAD_read>
    1cb8:	18 13       	cpse	r17, r24
    1cba:	d6 cd       	rjmp	.-1108   	; 0x1868 <main+0x48>
        {
            ui_process_key_command(pressed_key);
    1cbc:	81 2f       	mov	r24, r17
    1cbe:	0e 94 51 09 	call	0x12a2	; 0x12a2 <ui_process_key_command>

            while (KEYPAD_read() != KEYPAD_NO_KEY); // wait until the key is released
    1cc2:	0e 94 ba 04 	call	0x974	; 0x974 <KEYPAD_read>
    1cc6:	85 30       	cpi	r24, 0x05	; 5
    1cc8:	e1 f7       	brne	.-8      	; 0x1cc2 <main+0x4a2>
    1cca:	ce cd       	rjmp	.-1124   	; 0x1868 <main+0x48>

00001ccc <__subsf3>:
    1ccc:	50 58       	subi	r21, 0x80	; 128

00001cce <__addsf3>:
    1cce:	bb 27       	eor	r27, r27
    1cd0:	aa 27       	eor	r26, r26
    1cd2:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <__addsf3x>
    1cd6:	0c 94 f8 0f 	jmp	0x1ff0	; 0x1ff0 <__fp_round>
    1cda:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <__fp_pscA>
    1cde:	38 f0       	brcs	.+14     	; 0x1cee <__addsf3+0x20>
    1ce0:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <__fp_pscB>
    1ce4:	20 f0       	brcs	.+8      	; 0x1cee <__addsf3+0x20>
    1ce6:	39 f4       	brne	.+14     	; 0x1cf6 <__addsf3+0x28>
    1ce8:	9f 3f       	cpi	r25, 0xFF	; 255
    1cea:	19 f4       	brne	.+6      	; 0x1cf2 <__addsf3+0x24>
    1cec:	26 f4       	brtc	.+8      	; 0x1cf6 <__addsf3+0x28>
    1cee:	0c 94 e7 0f 	jmp	0x1fce	; 0x1fce <__fp_nan>
    1cf2:	0e f4       	brtc	.+2      	; 0x1cf6 <__addsf3+0x28>
    1cf4:	e0 95       	com	r30
    1cf6:	e7 fb       	bst	r30, 7
    1cf8:	0c 94 e1 0f 	jmp	0x1fc2	; 0x1fc2 <__fp_inf>

00001cfc <__addsf3x>:
    1cfc:	e9 2f       	mov	r30, r25
    1cfe:	0e 94 09 10 	call	0x2012	; 0x2012 <__fp_split3>
    1d02:	58 f3       	brcs	.-42     	; 0x1cda <__addsf3+0xc>
    1d04:	ba 17       	cp	r27, r26
    1d06:	62 07       	cpc	r22, r18
    1d08:	73 07       	cpc	r23, r19
    1d0a:	84 07       	cpc	r24, r20
    1d0c:	95 07       	cpc	r25, r21
    1d0e:	20 f0       	brcs	.+8      	; 0x1d18 <__addsf3x+0x1c>
    1d10:	79 f4       	brne	.+30     	; 0x1d30 <__addsf3x+0x34>
    1d12:	a6 f5       	brtc	.+104    	; 0x1d7c <__addsf3x+0x80>
    1d14:	0c 94 2b 10 	jmp	0x2056	; 0x2056 <__fp_zero>
    1d18:	0e f4       	brtc	.+2      	; 0x1d1c <__addsf3x+0x20>
    1d1a:	e0 95       	com	r30
    1d1c:	0b 2e       	mov	r0, r27
    1d1e:	ba 2f       	mov	r27, r26
    1d20:	a0 2d       	mov	r26, r0
    1d22:	0b 01       	movw	r0, r22
    1d24:	b9 01       	movw	r22, r18
    1d26:	90 01       	movw	r18, r0
    1d28:	0c 01       	movw	r0, r24
    1d2a:	ca 01       	movw	r24, r20
    1d2c:	a0 01       	movw	r20, r0
    1d2e:	11 24       	eor	r1, r1
    1d30:	ff 27       	eor	r31, r31
    1d32:	59 1b       	sub	r21, r25
    1d34:	99 f0       	breq	.+38     	; 0x1d5c <__addsf3x+0x60>
    1d36:	59 3f       	cpi	r21, 0xF9	; 249
    1d38:	50 f4       	brcc	.+20     	; 0x1d4e <__addsf3x+0x52>
    1d3a:	50 3e       	cpi	r21, 0xE0	; 224
    1d3c:	68 f1       	brcs	.+90     	; 0x1d98 <__addsf3x+0x9c>
    1d3e:	1a 16       	cp	r1, r26
    1d40:	f0 40       	sbci	r31, 0x00	; 0
    1d42:	a2 2f       	mov	r26, r18
    1d44:	23 2f       	mov	r18, r19
    1d46:	34 2f       	mov	r19, r20
    1d48:	44 27       	eor	r20, r20
    1d4a:	58 5f       	subi	r21, 0xF8	; 248
    1d4c:	f3 cf       	rjmp	.-26     	; 0x1d34 <__addsf3x+0x38>
    1d4e:	46 95       	lsr	r20
    1d50:	37 95       	ror	r19
    1d52:	27 95       	ror	r18
    1d54:	a7 95       	ror	r26
    1d56:	f0 40       	sbci	r31, 0x00	; 0
    1d58:	53 95       	inc	r21
    1d5a:	c9 f7       	brne	.-14     	; 0x1d4e <__addsf3x+0x52>
    1d5c:	7e f4       	brtc	.+30     	; 0x1d7c <__addsf3x+0x80>
    1d5e:	1f 16       	cp	r1, r31
    1d60:	ba 0b       	sbc	r27, r26
    1d62:	62 0b       	sbc	r22, r18
    1d64:	73 0b       	sbc	r23, r19
    1d66:	84 0b       	sbc	r24, r20
    1d68:	ba f0       	brmi	.+46     	; 0x1d98 <__addsf3x+0x9c>
    1d6a:	91 50       	subi	r25, 0x01	; 1
    1d6c:	a1 f0       	breq	.+40     	; 0x1d96 <__addsf3x+0x9a>
    1d6e:	ff 0f       	add	r31, r31
    1d70:	bb 1f       	adc	r27, r27
    1d72:	66 1f       	adc	r22, r22
    1d74:	77 1f       	adc	r23, r23
    1d76:	88 1f       	adc	r24, r24
    1d78:	c2 f7       	brpl	.-16     	; 0x1d6a <__addsf3x+0x6e>
    1d7a:	0e c0       	rjmp	.+28     	; 0x1d98 <__addsf3x+0x9c>
    1d7c:	ba 0f       	add	r27, r26
    1d7e:	62 1f       	adc	r22, r18
    1d80:	73 1f       	adc	r23, r19
    1d82:	84 1f       	adc	r24, r20
    1d84:	48 f4       	brcc	.+18     	; 0x1d98 <__addsf3x+0x9c>
    1d86:	87 95       	ror	r24
    1d88:	77 95       	ror	r23
    1d8a:	67 95       	ror	r22
    1d8c:	b7 95       	ror	r27
    1d8e:	f7 95       	ror	r31
    1d90:	9e 3f       	cpi	r25, 0xFE	; 254
    1d92:	08 f0       	brcs	.+2      	; 0x1d96 <__addsf3x+0x9a>
    1d94:	b0 cf       	rjmp	.-160    	; 0x1cf6 <__addsf3+0x28>
    1d96:	93 95       	inc	r25
    1d98:	88 0f       	add	r24, r24
    1d9a:	08 f0       	brcs	.+2      	; 0x1d9e <__addsf3x+0xa2>
    1d9c:	99 27       	eor	r25, r25
    1d9e:	ee 0f       	add	r30, r30
    1da0:	97 95       	ror	r25
    1da2:	87 95       	ror	r24
    1da4:	08 95       	ret

00001da6 <__cmpsf2>:
    1da6:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <__fp_cmp>
    1daa:	08 f4       	brcc	.+2      	; 0x1dae <__cmpsf2+0x8>
    1dac:	81 e0       	ldi	r24, 0x01	; 1
    1dae:	08 95       	ret

00001db0 <__divsf3>:
    1db0:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <__divsf3x>
    1db4:	0c 94 f8 0f 	jmp	0x1ff0	; 0x1ff0 <__fp_round>
    1db8:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <__fp_pscB>
    1dbc:	58 f0       	brcs	.+22     	; 0x1dd4 <__divsf3+0x24>
    1dbe:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <__fp_pscA>
    1dc2:	40 f0       	brcs	.+16     	; 0x1dd4 <__divsf3+0x24>
    1dc4:	29 f4       	brne	.+10     	; 0x1dd0 <__divsf3+0x20>
    1dc6:	5f 3f       	cpi	r21, 0xFF	; 255
    1dc8:	29 f0       	breq	.+10     	; 0x1dd4 <__divsf3+0x24>
    1dca:	0c 94 e1 0f 	jmp	0x1fc2	; 0x1fc2 <__fp_inf>
    1dce:	51 11       	cpse	r21, r1
    1dd0:	0c 94 2c 10 	jmp	0x2058	; 0x2058 <__fp_szero>
    1dd4:	0c 94 e7 0f 	jmp	0x1fce	; 0x1fce <__fp_nan>

00001dd8 <__divsf3x>:
    1dd8:	0e 94 09 10 	call	0x2012	; 0x2012 <__fp_split3>
    1ddc:	68 f3       	brcs	.-38     	; 0x1db8 <__divsf3+0x8>

00001dde <__divsf3_pse>:
    1dde:	99 23       	and	r25, r25
    1de0:	b1 f3       	breq	.-20     	; 0x1dce <__divsf3+0x1e>
    1de2:	55 23       	and	r21, r21
    1de4:	91 f3       	breq	.-28     	; 0x1dca <__divsf3+0x1a>
    1de6:	95 1b       	sub	r25, r21
    1de8:	55 0b       	sbc	r21, r21
    1dea:	bb 27       	eor	r27, r27
    1dec:	aa 27       	eor	r26, r26
    1dee:	62 17       	cp	r22, r18
    1df0:	73 07       	cpc	r23, r19
    1df2:	84 07       	cpc	r24, r20
    1df4:	38 f0       	brcs	.+14     	; 0x1e04 <__divsf3_pse+0x26>
    1df6:	9f 5f       	subi	r25, 0xFF	; 255
    1df8:	5f 4f       	sbci	r21, 0xFF	; 255
    1dfa:	22 0f       	add	r18, r18
    1dfc:	33 1f       	adc	r19, r19
    1dfe:	44 1f       	adc	r20, r20
    1e00:	aa 1f       	adc	r26, r26
    1e02:	a9 f3       	breq	.-22     	; 0x1dee <__divsf3_pse+0x10>
    1e04:	35 d0       	rcall	.+106    	; 0x1e70 <__divsf3_pse+0x92>
    1e06:	0e 2e       	mov	r0, r30
    1e08:	3a f0       	brmi	.+14     	; 0x1e18 <__divsf3_pse+0x3a>
    1e0a:	e0 e8       	ldi	r30, 0x80	; 128
    1e0c:	32 d0       	rcall	.+100    	; 0x1e72 <__divsf3_pse+0x94>
    1e0e:	91 50       	subi	r25, 0x01	; 1
    1e10:	50 40       	sbci	r21, 0x00	; 0
    1e12:	e6 95       	lsr	r30
    1e14:	00 1c       	adc	r0, r0
    1e16:	ca f7       	brpl	.-14     	; 0x1e0a <__divsf3_pse+0x2c>
    1e18:	2b d0       	rcall	.+86     	; 0x1e70 <__divsf3_pse+0x92>
    1e1a:	fe 2f       	mov	r31, r30
    1e1c:	29 d0       	rcall	.+82     	; 0x1e70 <__divsf3_pse+0x92>
    1e1e:	66 0f       	add	r22, r22
    1e20:	77 1f       	adc	r23, r23
    1e22:	88 1f       	adc	r24, r24
    1e24:	bb 1f       	adc	r27, r27
    1e26:	26 17       	cp	r18, r22
    1e28:	37 07       	cpc	r19, r23
    1e2a:	48 07       	cpc	r20, r24
    1e2c:	ab 07       	cpc	r26, r27
    1e2e:	b0 e8       	ldi	r27, 0x80	; 128
    1e30:	09 f0       	breq	.+2      	; 0x1e34 <__divsf3_pse+0x56>
    1e32:	bb 0b       	sbc	r27, r27
    1e34:	80 2d       	mov	r24, r0
    1e36:	bf 01       	movw	r22, r30
    1e38:	ff 27       	eor	r31, r31
    1e3a:	93 58       	subi	r25, 0x83	; 131
    1e3c:	5f 4f       	sbci	r21, 0xFF	; 255
    1e3e:	3a f0       	brmi	.+14     	; 0x1e4e <__divsf3_pse+0x70>
    1e40:	9e 3f       	cpi	r25, 0xFE	; 254
    1e42:	51 05       	cpc	r21, r1
    1e44:	78 f0       	brcs	.+30     	; 0x1e64 <__divsf3_pse+0x86>
    1e46:	0c 94 e1 0f 	jmp	0x1fc2	; 0x1fc2 <__fp_inf>
    1e4a:	0c 94 2c 10 	jmp	0x2058	; 0x2058 <__fp_szero>
    1e4e:	5f 3f       	cpi	r21, 0xFF	; 255
    1e50:	e4 f3       	brlt	.-8      	; 0x1e4a <__divsf3_pse+0x6c>
    1e52:	98 3e       	cpi	r25, 0xE8	; 232
    1e54:	d4 f3       	brlt	.-12     	; 0x1e4a <__divsf3_pse+0x6c>
    1e56:	86 95       	lsr	r24
    1e58:	77 95       	ror	r23
    1e5a:	67 95       	ror	r22
    1e5c:	b7 95       	ror	r27
    1e5e:	f7 95       	ror	r31
    1e60:	9f 5f       	subi	r25, 0xFF	; 255
    1e62:	c9 f7       	brne	.-14     	; 0x1e56 <__divsf3_pse+0x78>
    1e64:	88 0f       	add	r24, r24
    1e66:	91 1d       	adc	r25, r1
    1e68:	96 95       	lsr	r25
    1e6a:	87 95       	ror	r24
    1e6c:	97 f9       	bld	r25, 7
    1e6e:	08 95       	ret
    1e70:	e1 e0       	ldi	r30, 0x01	; 1
    1e72:	66 0f       	add	r22, r22
    1e74:	77 1f       	adc	r23, r23
    1e76:	88 1f       	adc	r24, r24
    1e78:	bb 1f       	adc	r27, r27
    1e7a:	62 17       	cp	r22, r18
    1e7c:	73 07       	cpc	r23, r19
    1e7e:	84 07       	cpc	r24, r20
    1e80:	ba 07       	cpc	r27, r26
    1e82:	20 f0       	brcs	.+8      	; 0x1e8c <__divsf3_pse+0xae>
    1e84:	62 1b       	sub	r22, r18
    1e86:	73 0b       	sbc	r23, r19
    1e88:	84 0b       	sbc	r24, r20
    1e8a:	ba 0b       	sbc	r27, r26
    1e8c:	ee 1f       	adc	r30, r30
    1e8e:	88 f7       	brcc	.-30     	; 0x1e72 <__divsf3_pse+0x94>
    1e90:	e0 95       	com	r30
    1e92:	08 95       	ret

00001e94 <__fixsfsi>:
    1e94:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <__fixunssfsi>
    1e98:	68 94       	set
    1e9a:	b1 11       	cpse	r27, r1
    1e9c:	0c 94 2c 10 	jmp	0x2058	; 0x2058 <__fp_szero>
    1ea0:	08 95       	ret

00001ea2 <__fixunssfsi>:
    1ea2:	0e 94 11 10 	call	0x2022	; 0x2022 <__fp_splitA>
    1ea6:	88 f0       	brcs	.+34     	; 0x1eca <__fixunssfsi+0x28>
    1ea8:	9f 57       	subi	r25, 0x7F	; 127
    1eaa:	98 f0       	brcs	.+38     	; 0x1ed2 <__fixunssfsi+0x30>
    1eac:	b9 2f       	mov	r27, r25
    1eae:	99 27       	eor	r25, r25
    1eb0:	b7 51       	subi	r27, 0x17	; 23
    1eb2:	b0 f0       	brcs	.+44     	; 0x1ee0 <__fixunssfsi+0x3e>
    1eb4:	e1 f0       	breq	.+56     	; 0x1eee <__fixunssfsi+0x4c>
    1eb6:	66 0f       	add	r22, r22
    1eb8:	77 1f       	adc	r23, r23
    1eba:	88 1f       	adc	r24, r24
    1ebc:	99 1f       	adc	r25, r25
    1ebe:	1a f0       	brmi	.+6      	; 0x1ec6 <__fixunssfsi+0x24>
    1ec0:	ba 95       	dec	r27
    1ec2:	c9 f7       	brne	.-14     	; 0x1eb6 <__fixunssfsi+0x14>
    1ec4:	14 c0       	rjmp	.+40     	; 0x1eee <__fixunssfsi+0x4c>
    1ec6:	b1 30       	cpi	r27, 0x01	; 1
    1ec8:	91 f0       	breq	.+36     	; 0x1eee <__fixunssfsi+0x4c>
    1eca:	0e 94 2b 10 	call	0x2056	; 0x2056 <__fp_zero>
    1ece:	b1 e0       	ldi	r27, 0x01	; 1
    1ed0:	08 95       	ret
    1ed2:	0c 94 2b 10 	jmp	0x2056	; 0x2056 <__fp_zero>
    1ed6:	67 2f       	mov	r22, r23
    1ed8:	78 2f       	mov	r23, r24
    1eda:	88 27       	eor	r24, r24
    1edc:	b8 5f       	subi	r27, 0xF8	; 248
    1ede:	39 f0       	breq	.+14     	; 0x1eee <__fixunssfsi+0x4c>
    1ee0:	b9 3f       	cpi	r27, 0xF9	; 249
    1ee2:	cc f3       	brlt	.-14     	; 0x1ed6 <__fixunssfsi+0x34>
    1ee4:	86 95       	lsr	r24
    1ee6:	77 95       	ror	r23
    1ee8:	67 95       	ror	r22
    1eea:	b3 95       	inc	r27
    1eec:	d9 f7       	brne	.-10     	; 0x1ee4 <__fixunssfsi+0x42>
    1eee:	3e f4       	brtc	.+14     	; 0x1efe <__fixunssfsi+0x5c>
    1ef0:	90 95       	com	r25
    1ef2:	80 95       	com	r24
    1ef4:	70 95       	com	r23
    1ef6:	61 95       	neg	r22
    1ef8:	7f 4f       	sbci	r23, 0xFF	; 255
    1efa:	8f 4f       	sbci	r24, 0xFF	; 255
    1efc:	9f 4f       	sbci	r25, 0xFF	; 255
    1efe:	08 95       	ret

00001f00 <__floatunsisf>:
    1f00:	e8 94       	clt
    1f02:	09 c0       	rjmp	.+18     	; 0x1f16 <__floatsisf+0x12>

00001f04 <__floatsisf>:
    1f04:	97 fb       	bst	r25, 7
    1f06:	3e f4       	brtc	.+14     	; 0x1f16 <__floatsisf+0x12>
    1f08:	90 95       	com	r25
    1f0a:	80 95       	com	r24
    1f0c:	70 95       	com	r23
    1f0e:	61 95       	neg	r22
    1f10:	7f 4f       	sbci	r23, 0xFF	; 255
    1f12:	8f 4f       	sbci	r24, 0xFF	; 255
    1f14:	9f 4f       	sbci	r25, 0xFF	; 255
    1f16:	99 23       	and	r25, r25
    1f18:	a9 f0       	breq	.+42     	; 0x1f44 <__floatsisf+0x40>
    1f1a:	f9 2f       	mov	r31, r25
    1f1c:	96 e9       	ldi	r25, 0x96	; 150
    1f1e:	bb 27       	eor	r27, r27
    1f20:	93 95       	inc	r25
    1f22:	f6 95       	lsr	r31
    1f24:	87 95       	ror	r24
    1f26:	77 95       	ror	r23
    1f28:	67 95       	ror	r22
    1f2a:	b7 95       	ror	r27
    1f2c:	f1 11       	cpse	r31, r1
    1f2e:	f8 cf       	rjmp	.-16     	; 0x1f20 <__floatsisf+0x1c>
    1f30:	fa f4       	brpl	.+62     	; 0x1f70 <__floatsisf+0x6c>
    1f32:	bb 0f       	add	r27, r27
    1f34:	11 f4       	brne	.+4      	; 0x1f3a <__floatsisf+0x36>
    1f36:	60 ff       	sbrs	r22, 0
    1f38:	1b c0       	rjmp	.+54     	; 0x1f70 <__floatsisf+0x6c>
    1f3a:	6f 5f       	subi	r22, 0xFF	; 255
    1f3c:	7f 4f       	sbci	r23, 0xFF	; 255
    1f3e:	8f 4f       	sbci	r24, 0xFF	; 255
    1f40:	9f 4f       	sbci	r25, 0xFF	; 255
    1f42:	16 c0       	rjmp	.+44     	; 0x1f70 <__floatsisf+0x6c>
    1f44:	88 23       	and	r24, r24
    1f46:	11 f0       	breq	.+4      	; 0x1f4c <__floatsisf+0x48>
    1f48:	96 e9       	ldi	r25, 0x96	; 150
    1f4a:	11 c0       	rjmp	.+34     	; 0x1f6e <__floatsisf+0x6a>
    1f4c:	77 23       	and	r23, r23
    1f4e:	21 f0       	breq	.+8      	; 0x1f58 <__floatsisf+0x54>
    1f50:	9e e8       	ldi	r25, 0x8E	; 142
    1f52:	87 2f       	mov	r24, r23
    1f54:	76 2f       	mov	r23, r22
    1f56:	05 c0       	rjmp	.+10     	; 0x1f62 <__floatsisf+0x5e>
    1f58:	66 23       	and	r22, r22
    1f5a:	71 f0       	breq	.+28     	; 0x1f78 <__floatsisf+0x74>
    1f5c:	96 e8       	ldi	r25, 0x86	; 134
    1f5e:	86 2f       	mov	r24, r22
    1f60:	70 e0       	ldi	r23, 0x00	; 0
    1f62:	60 e0       	ldi	r22, 0x00	; 0
    1f64:	2a f0       	brmi	.+10     	; 0x1f70 <__floatsisf+0x6c>
    1f66:	9a 95       	dec	r25
    1f68:	66 0f       	add	r22, r22
    1f6a:	77 1f       	adc	r23, r23
    1f6c:	88 1f       	adc	r24, r24
    1f6e:	da f7       	brpl	.-10     	; 0x1f66 <__floatsisf+0x62>
    1f70:	88 0f       	add	r24, r24
    1f72:	96 95       	lsr	r25
    1f74:	87 95       	ror	r24
    1f76:	97 f9       	bld	r25, 7
    1f78:	08 95       	ret

00001f7a <__fp_cmp>:
    1f7a:	99 0f       	add	r25, r25
    1f7c:	00 08       	sbc	r0, r0
    1f7e:	55 0f       	add	r21, r21
    1f80:	aa 0b       	sbc	r26, r26
    1f82:	e0 e8       	ldi	r30, 0x80	; 128
    1f84:	fe ef       	ldi	r31, 0xFE	; 254
    1f86:	16 16       	cp	r1, r22
    1f88:	17 06       	cpc	r1, r23
    1f8a:	e8 07       	cpc	r30, r24
    1f8c:	f9 07       	cpc	r31, r25
    1f8e:	c0 f0       	brcs	.+48     	; 0x1fc0 <__fp_cmp+0x46>
    1f90:	12 16       	cp	r1, r18
    1f92:	13 06       	cpc	r1, r19
    1f94:	e4 07       	cpc	r30, r20
    1f96:	f5 07       	cpc	r31, r21
    1f98:	98 f0       	brcs	.+38     	; 0x1fc0 <__fp_cmp+0x46>
    1f9a:	62 1b       	sub	r22, r18
    1f9c:	73 0b       	sbc	r23, r19
    1f9e:	84 0b       	sbc	r24, r20
    1fa0:	95 0b       	sbc	r25, r21
    1fa2:	39 f4       	brne	.+14     	; 0x1fb2 <__fp_cmp+0x38>
    1fa4:	0a 26       	eor	r0, r26
    1fa6:	61 f0       	breq	.+24     	; 0x1fc0 <__fp_cmp+0x46>
    1fa8:	23 2b       	or	r18, r19
    1faa:	24 2b       	or	r18, r20
    1fac:	25 2b       	or	r18, r21
    1fae:	21 f4       	brne	.+8      	; 0x1fb8 <__fp_cmp+0x3e>
    1fb0:	08 95       	ret
    1fb2:	0a 26       	eor	r0, r26
    1fb4:	09 f4       	brne	.+2      	; 0x1fb8 <__fp_cmp+0x3e>
    1fb6:	a1 40       	sbci	r26, 0x01	; 1
    1fb8:	a6 95       	lsr	r26
    1fba:	8f ef       	ldi	r24, 0xFF	; 255
    1fbc:	81 1d       	adc	r24, r1
    1fbe:	81 1d       	adc	r24, r1
    1fc0:	08 95       	ret

00001fc2 <__fp_inf>:
    1fc2:	97 f9       	bld	r25, 7
    1fc4:	9f 67       	ori	r25, 0x7F	; 127
    1fc6:	80 e8       	ldi	r24, 0x80	; 128
    1fc8:	70 e0       	ldi	r23, 0x00	; 0
    1fca:	60 e0       	ldi	r22, 0x00	; 0
    1fcc:	08 95       	ret

00001fce <__fp_nan>:
    1fce:	9f ef       	ldi	r25, 0xFF	; 255
    1fd0:	80 ec       	ldi	r24, 0xC0	; 192
    1fd2:	08 95       	ret

00001fd4 <__fp_pscA>:
    1fd4:	00 24       	eor	r0, r0
    1fd6:	0a 94       	dec	r0
    1fd8:	16 16       	cp	r1, r22
    1fda:	17 06       	cpc	r1, r23
    1fdc:	18 06       	cpc	r1, r24
    1fde:	09 06       	cpc	r0, r25
    1fe0:	08 95       	ret

00001fe2 <__fp_pscB>:
    1fe2:	00 24       	eor	r0, r0
    1fe4:	0a 94       	dec	r0
    1fe6:	12 16       	cp	r1, r18
    1fe8:	13 06       	cpc	r1, r19
    1fea:	14 06       	cpc	r1, r20
    1fec:	05 06       	cpc	r0, r21
    1fee:	08 95       	ret

00001ff0 <__fp_round>:
    1ff0:	09 2e       	mov	r0, r25
    1ff2:	03 94       	inc	r0
    1ff4:	00 0c       	add	r0, r0
    1ff6:	11 f4       	brne	.+4      	; 0x1ffc <__fp_round+0xc>
    1ff8:	88 23       	and	r24, r24
    1ffa:	52 f0       	brmi	.+20     	; 0x2010 <__fp_round+0x20>
    1ffc:	bb 0f       	add	r27, r27
    1ffe:	40 f4       	brcc	.+16     	; 0x2010 <__fp_round+0x20>
    2000:	bf 2b       	or	r27, r31
    2002:	11 f4       	brne	.+4      	; 0x2008 <__fp_round+0x18>
    2004:	60 ff       	sbrs	r22, 0
    2006:	04 c0       	rjmp	.+8      	; 0x2010 <__fp_round+0x20>
    2008:	6f 5f       	subi	r22, 0xFF	; 255
    200a:	7f 4f       	sbci	r23, 0xFF	; 255
    200c:	8f 4f       	sbci	r24, 0xFF	; 255
    200e:	9f 4f       	sbci	r25, 0xFF	; 255
    2010:	08 95       	ret

00002012 <__fp_split3>:
    2012:	57 fd       	sbrc	r21, 7
    2014:	90 58       	subi	r25, 0x80	; 128
    2016:	44 0f       	add	r20, r20
    2018:	55 1f       	adc	r21, r21
    201a:	59 f0       	breq	.+22     	; 0x2032 <__fp_splitA+0x10>
    201c:	5f 3f       	cpi	r21, 0xFF	; 255
    201e:	71 f0       	breq	.+28     	; 0x203c <__fp_splitA+0x1a>
    2020:	47 95       	ror	r20

00002022 <__fp_splitA>:
    2022:	88 0f       	add	r24, r24
    2024:	97 fb       	bst	r25, 7
    2026:	99 1f       	adc	r25, r25
    2028:	61 f0       	breq	.+24     	; 0x2042 <__fp_splitA+0x20>
    202a:	9f 3f       	cpi	r25, 0xFF	; 255
    202c:	79 f0       	breq	.+30     	; 0x204c <__fp_splitA+0x2a>
    202e:	87 95       	ror	r24
    2030:	08 95       	ret
    2032:	12 16       	cp	r1, r18
    2034:	13 06       	cpc	r1, r19
    2036:	14 06       	cpc	r1, r20
    2038:	55 1f       	adc	r21, r21
    203a:	f2 cf       	rjmp	.-28     	; 0x2020 <__fp_split3+0xe>
    203c:	46 95       	lsr	r20
    203e:	f1 df       	rcall	.-30     	; 0x2022 <__fp_splitA>
    2040:	08 c0       	rjmp	.+16     	; 0x2052 <__fp_splitA+0x30>
    2042:	16 16       	cp	r1, r22
    2044:	17 06       	cpc	r1, r23
    2046:	18 06       	cpc	r1, r24
    2048:	99 1f       	adc	r25, r25
    204a:	f1 cf       	rjmp	.-30     	; 0x202e <__fp_splitA+0xc>
    204c:	86 95       	lsr	r24
    204e:	71 05       	cpc	r23, r1
    2050:	61 05       	cpc	r22, r1
    2052:	08 94       	sec
    2054:	08 95       	ret

00002056 <__fp_zero>:
    2056:	e8 94       	clt

00002058 <__fp_szero>:
    2058:	bb 27       	eor	r27, r27
    205a:	66 27       	eor	r22, r22
    205c:	77 27       	eor	r23, r23
    205e:	cb 01       	movw	r24, r22
    2060:	97 f9       	bld	r25, 7
    2062:	08 95       	ret

00002064 <__gesf2>:
    2064:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <__fp_cmp>
    2068:	08 f4       	brcc	.+2      	; 0x206c <__gesf2+0x8>
    206a:	8f ef       	ldi	r24, 0xFF	; 255
    206c:	08 95       	ret

0000206e <__mulsf3>:
    206e:	0e 94 4a 10 	call	0x2094	; 0x2094 <__mulsf3x>
    2072:	0c 94 f8 0f 	jmp	0x1ff0	; 0x1ff0 <__fp_round>
    2076:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <__fp_pscA>
    207a:	38 f0       	brcs	.+14     	; 0x208a <__mulsf3+0x1c>
    207c:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <__fp_pscB>
    2080:	20 f0       	brcs	.+8      	; 0x208a <__mulsf3+0x1c>
    2082:	95 23       	and	r25, r21
    2084:	11 f0       	breq	.+4      	; 0x208a <__mulsf3+0x1c>
    2086:	0c 94 e1 0f 	jmp	0x1fc2	; 0x1fc2 <__fp_inf>
    208a:	0c 94 e7 0f 	jmp	0x1fce	; 0x1fce <__fp_nan>
    208e:	11 24       	eor	r1, r1
    2090:	0c 94 2c 10 	jmp	0x2058	; 0x2058 <__fp_szero>

00002094 <__mulsf3x>:
    2094:	0e 94 09 10 	call	0x2012	; 0x2012 <__fp_split3>
    2098:	70 f3       	brcs	.-36     	; 0x2076 <__mulsf3+0x8>

0000209a <__mulsf3_pse>:
    209a:	95 9f       	mul	r25, r21
    209c:	c1 f3       	breq	.-16     	; 0x208e <__mulsf3+0x20>
    209e:	95 0f       	add	r25, r21
    20a0:	50 e0       	ldi	r21, 0x00	; 0
    20a2:	55 1f       	adc	r21, r21
    20a4:	62 9f       	mul	r22, r18
    20a6:	f0 01       	movw	r30, r0
    20a8:	72 9f       	mul	r23, r18
    20aa:	bb 27       	eor	r27, r27
    20ac:	f0 0d       	add	r31, r0
    20ae:	b1 1d       	adc	r27, r1
    20b0:	63 9f       	mul	r22, r19
    20b2:	aa 27       	eor	r26, r26
    20b4:	f0 0d       	add	r31, r0
    20b6:	b1 1d       	adc	r27, r1
    20b8:	aa 1f       	adc	r26, r26
    20ba:	64 9f       	mul	r22, r20
    20bc:	66 27       	eor	r22, r22
    20be:	b0 0d       	add	r27, r0
    20c0:	a1 1d       	adc	r26, r1
    20c2:	66 1f       	adc	r22, r22
    20c4:	82 9f       	mul	r24, r18
    20c6:	22 27       	eor	r18, r18
    20c8:	b0 0d       	add	r27, r0
    20ca:	a1 1d       	adc	r26, r1
    20cc:	62 1f       	adc	r22, r18
    20ce:	73 9f       	mul	r23, r19
    20d0:	b0 0d       	add	r27, r0
    20d2:	a1 1d       	adc	r26, r1
    20d4:	62 1f       	adc	r22, r18
    20d6:	83 9f       	mul	r24, r19
    20d8:	a0 0d       	add	r26, r0
    20da:	61 1d       	adc	r22, r1
    20dc:	22 1f       	adc	r18, r18
    20de:	74 9f       	mul	r23, r20
    20e0:	33 27       	eor	r19, r19
    20e2:	a0 0d       	add	r26, r0
    20e4:	61 1d       	adc	r22, r1
    20e6:	23 1f       	adc	r18, r19
    20e8:	84 9f       	mul	r24, r20
    20ea:	60 0d       	add	r22, r0
    20ec:	21 1d       	adc	r18, r1
    20ee:	82 2f       	mov	r24, r18
    20f0:	76 2f       	mov	r23, r22
    20f2:	6a 2f       	mov	r22, r26
    20f4:	11 24       	eor	r1, r1
    20f6:	9f 57       	subi	r25, 0x7F	; 127
    20f8:	50 40       	sbci	r21, 0x00	; 0
    20fa:	9a f0       	brmi	.+38     	; 0x2122 <__mulsf3_pse+0x88>
    20fc:	f1 f0       	breq	.+60     	; 0x213a <__mulsf3_pse+0xa0>
    20fe:	88 23       	and	r24, r24
    2100:	4a f0       	brmi	.+18     	; 0x2114 <__mulsf3_pse+0x7a>
    2102:	ee 0f       	add	r30, r30
    2104:	ff 1f       	adc	r31, r31
    2106:	bb 1f       	adc	r27, r27
    2108:	66 1f       	adc	r22, r22
    210a:	77 1f       	adc	r23, r23
    210c:	88 1f       	adc	r24, r24
    210e:	91 50       	subi	r25, 0x01	; 1
    2110:	50 40       	sbci	r21, 0x00	; 0
    2112:	a9 f7       	brne	.-22     	; 0x20fe <__mulsf3_pse+0x64>
    2114:	9e 3f       	cpi	r25, 0xFE	; 254
    2116:	51 05       	cpc	r21, r1
    2118:	80 f0       	brcs	.+32     	; 0x213a <__mulsf3_pse+0xa0>
    211a:	0c 94 e1 0f 	jmp	0x1fc2	; 0x1fc2 <__fp_inf>
    211e:	0c 94 2c 10 	jmp	0x2058	; 0x2058 <__fp_szero>
    2122:	5f 3f       	cpi	r21, 0xFF	; 255
    2124:	e4 f3       	brlt	.-8      	; 0x211e <__mulsf3_pse+0x84>
    2126:	98 3e       	cpi	r25, 0xE8	; 232
    2128:	d4 f3       	brlt	.-12     	; 0x211e <__mulsf3_pse+0x84>
    212a:	86 95       	lsr	r24
    212c:	77 95       	ror	r23
    212e:	67 95       	ror	r22
    2130:	b7 95       	ror	r27
    2132:	f7 95       	ror	r31
    2134:	e7 95       	ror	r30
    2136:	9f 5f       	subi	r25, 0xFF	; 255
    2138:	c1 f7       	brne	.-16     	; 0x212a <__mulsf3_pse+0x90>
    213a:	fe 2b       	or	r31, r30
    213c:	88 0f       	add	r24, r24
    213e:	91 1d       	adc	r25, r1
    2140:	96 95       	lsr	r25
    2142:	87 95       	ror	r24
    2144:	97 f9       	bld	r25, 7
    2146:	08 95       	ret

00002148 <__divmodhi4>:
    2148:	97 fb       	bst	r25, 7
    214a:	07 2e       	mov	r0, r23
    214c:	16 f4       	brtc	.+4      	; 0x2152 <__divmodhi4+0xa>
    214e:	00 94       	com	r0
    2150:	07 d0       	rcall	.+14     	; 0x2160 <__divmodhi4_neg1>
    2152:	77 fd       	sbrc	r23, 7
    2154:	09 d0       	rcall	.+18     	; 0x2168 <__divmodhi4_neg2>
    2156:	0e 94 be 10 	call	0x217c	; 0x217c <__udivmodhi4>
    215a:	07 fc       	sbrc	r0, 7
    215c:	05 d0       	rcall	.+10     	; 0x2168 <__divmodhi4_neg2>
    215e:	3e f4       	brtc	.+14     	; 0x216e <__divmodhi4_exit>

00002160 <__divmodhi4_neg1>:
    2160:	90 95       	com	r25
    2162:	81 95       	neg	r24
    2164:	9f 4f       	sbci	r25, 0xFF	; 255
    2166:	08 95       	ret

00002168 <__divmodhi4_neg2>:
    2168:	70 95       	com	r23
    216a:	61 95       	neg	r22
    216c:	7f 4f       	sbci	r23, 0xFF	; 255

0000216e <__divmodhi4_exit>:
    216e:	08 95       	ret

00002170 <__tablejump2__>:
    2170:	ee 0f       	add	r30, r30
    2172:	ff 1f       	adc	r31, r31
    2174:	05 90       	lpm	r0, Z+
    2176:	f4 91       	lpm	r31, Z
    2178:	e0 2d       	mov	r30, r0
    217a:	09 94       	ijmp

0000217c <__udivmodhi4>:
    217c:	aa 1b       	sub	r26, r26
    217e:	bb 1b       	sub	r27, r27
    2180:	51 e1       	ldi	r21, 0x11	; 17
    2182:	07 c0       	rjmp	.+14     	; 0x2192 <__udivmodhi4_ep>

00002184 <__udivmodhi4_loop>:
    2184:	aa 1f       	adc	r26, r26
    2186:	bb 1f       	adc	r27, r27
    2188:	a6 17       	cp	r26, r22
    218a:	b7 07       	cpc	r27, r23
    218c:	10 f0       	brcs	.+4      	; 0x2192 <__udivmodhi4_ep>
    218e:	a6 1b       	sub	r26, r22
    2190:	b7 0b       	sbc	r27, r23

00002192 <__udivmodhi4_ep>:
    2192:	88 1f       	adc	r24, r24
    2194:	99 1f       	adc	r25, r25
    2196:	5a 95       	dec	r21
    2198:	a9 f7       	brne	.-22     	; 0x2184 <__udivmodhi4_loop>
    219a:	80 95       	com	r24
    219c:	90 95       	com	r25
    219e:	bc 01       	movw	r22, r24
    21a0:	cd 01       	movw	r24, r26
    21a2:	08 95       	ret

000021a4 <dtostrf>:
    21a4:	ef 92       	push	r14
    21a6:	0f 93       	push	r16
    21a8:	1f 93       	push	r17
    21aa:	cf 93       	push	r28
    21ac:	df 93       	push	r29
    21ae:	e8 01       	movw	r28, r16
    21b0:	47 fd       	sbrc	r20, 7
    21b2:	02 c0       	rjmp	.+4      	; 0x21b8 <dtostrf+0x14>
    21b4:	34 e0       	ldi	r19, 0x04	; 4
    21b6:	01 c0       	rjmp	.+2      	; 0x21ba <dtostrf+0x16>
    21b8:	34 e1       	ldi	r19, 0x14	; 20
    21ba:	04 2e       	mov	r0, r20
    21bc:	00 0c       	add	r0, r0
    21be:	55 0b       	sbc	r21, r21
    21c0:	57 ff       	sbrs	r21, 7
    21c2:	03 c0       	rjmp	.+6      	; 0x21ca <dtostrf+0x26>
    21c4:	51 95       	neg	r21
    21c6:	41 95       	neg	r20
    21c8:	51 09       	sbc	r21, r1
    21ca:	e3 2e       	mov	r14, r19
    21cc:	02 2f       	mov	r16, r18
    21ce:	24 2f       	mov	r18, r20
    21d0:	ae 01       	movw	r20, r28
    21d2:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <dtoa_prf>
    21d6:	ce 01       	movw	r24, r28
    21d8:	df 91       	pop	r29
    21da:	cf 91       	pop	r28
    21dc:	1f 91       	pop	r17
    21de:	0f 91       	pop	r16
    21e0:	ef 90       	pop	r14
    21e2:	08 95       	ret

000021e4 <malloc>:
    21e4:	0f 93       	push	r16
    21e6:	1f 93       	push	r17
    21e8:	cf 93       	push	r28
    21ea:	df 93       	push	r29
    21ec:	82 30       	cpi	r24, 0x02	; 2
    21ee:	91 05       	cpc	r25, r1
    21f0:	10 f4       	brcc	.+4      	; 0x21f6 <malloc+0x12>
    21f2:	82 e0       	ldi	r24, 0x02	; 2
    21f4:	90 e0       	ldi	r25, 0x00	; 0
    21f6:	e0 91 08 05 	lds	r30, 0x0508	; 0x800508 <__flp>
    21fa:	f0 91 09 05 	lds	r31, 0x0509	; 0x800509 <__flp+0x1>
    21fe:	20 e0       	ldi	r18, 0x00	; 0
    2200:	30 e0       	ldi	r19, 0x00	; 0
    2202:	a0 e0       	ldi	r26, 0x00	; 0
    2204:	b0 e0       	ldi	r27, 0x00	; 0
    2206:	30 97       	sbiw	r30, 0x00	; 0
    2208:	19 f1       	breq	.+70     	; 0x2250 <malloc+0x6c>
    220a:	40 81       	ld	r20, Z
    220c:	51 81       	ldd	r21, Z+1	; 0x01
    220e:	02 81       	ldd	r16, Z+2	; 0x02
    2210:	13 81       	ldd	r17, Z+3	; 0x03
    2212:	48 17       	cp	r20, r24
    2214:	59 07       	cpc	r21, r25
    2216:	c8 f0       	brcs	.+50     	; 0x224a <malloc+0x66>
    2218:	84 17       	cp	r24, r20
    221a:	95 07       	cpc	r25, r21
    221c:	69 f4       	brne	.+26     	; 0x2238 <malloc+0x54>
    221e:	10 97       	sbiw	r26, 0x00	; 0
    2220:	31 f0       	breq	.+12     	; 0x222e <malloc+0x4a>
    2222:	12 96       	adiw	r26, 0x02	; 2
    2224:	0c 93       	st	X, r16
    2226:	12 97       	sbiw	r26, 0x02	; 2
    2228:	13 96       	adiw	r26, 0x03	; 3
    222a:	1c 93       	st	X, r17
    222c:	27 c0       	rjmp	.+78     	; 0x227c <malloc+0x98>
    222e:	00 93 08 05 	sts	0x0508, r16	; 0x800508 <__flp>
    2232:	10 93 09 05 	sts	0x0509, r17	; 0x800509 <__flp+0x1>
    2236:	22 c0       	rjmp	.+68     	; 0x227c <malloc+0x98>
    2238:	21 15       	cp	r18, r1
    223a:	31 05       	cpc	r19, r1
    223c:	19 f0       	breq	.+6      	; 0x2244 <malloc+0x60>
    223e:	42 17       	cp	r20, r18
    2240:	53 07       	cpc	r21, r19
    2242:	18 f4       	brcc	.+6      	; 0x224a <malloc+0x66>
    2244:	9a 01       	movw	r18, r20
    2246:	bd 01       	movw	r22, r26
    2248:	ef 01       	movw	r28, r30
    224a:	df 01       	movw	r26, r30
    224c:	f8 01       	movw	r30, r16
    224e:	db cf       	rjmp	.-74     	; 0x2206 <malloc+0x22>
    2250:	21 15       	cp	r18, r1
    2252:	31 05       	cpc	r19, r1
    2254:	f9 f0       	breq	.+62     	; 0x2294 <malloc+0xb0>
    2256:	28 1b       	sub	r18, r24
    2258:	39 0b       	sbc	r19, r25
    225a:	24 30       	cpi	r18, 0x04	; 4
    225c:	31 05       	cpc	r19, r1
    225e:	80 f4       	brcc	.+32     	; 0x2280 <malloc+0x9c>
    2260:	8a 81       	ldd	r24, Y+2	; 0x02
    2262:	9b 81       	ldd	r25, Y+3	; 0x03
    2264:	61 15       	cp	r22, r1
    2266:	71 05       	cpc	r23, r1
    2268:	21 f0       	breq	.+8      	; 0x2272 <malloc+0x8e>
    226a:	fb 01       	movw	r30, r22
    226c:	93 83       	std	Z+3, r25	; 0x03
    226e:	82 83       	std	Z+2, r24	; 0x02
    2270:	04 c0       	rjmp	.+8      	; 0x227a <malloc+0x96>
    2272:	90 93 09 05 	sts	0x0509, r25	; 0x800509 <__flp+0x1>
    2276:	80 93 08 05 	sts	0x0508, r24	; 0x800508 <__flp>
    227a:	fe 01       	movw	r30, r28
    227c:	32 96       	adiw	r30, 0x02	; 2
    227e:	44 c0       	rjmp	.+136    	; 0x2308 <malloc+0x124>
    2280:	fe 01       	movw	r30, r28
    2282:	e2 0f       	add	r30, r18
    2284:	f3 1f       	adc	r31, r19
    2286:	81 93       	st	Z+, r24
    2288:	91 93       	st	Z+, r25
    228a:	22 50       	subi	r18, 0x02	; 2
    228c:	31 09       	sbc	r19, r1
    228e:	39 83       	std	Y+1, r19	; 0x01
    2290:	28 83       	st	Y, r18
    2292:	3a c0       	rjmp	.+116    	; 0x2308 <malloc+0x124>
    2294:	20 91 06 05 	lds	r18, 0x0506	; 0x800506 <__brkval>
    2298:	30 91 07 05 	lds	r19, 0x0507	; 0x800507 <__brkval+0x1>
    229c:	23 2b       	or	r18, r19
    229e:	41 f4       	brne	.+16     	; 0x22b0 <malloc+0xcc>
    22a0:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    22a4:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    22a8:	30 93 07 05 	sts	0x0507, r19	; 0x800507 <__brkval+0x1>
    22ac:	20 93 06 05 	sts	0x0506, r18	; 0x800506 <__brkval>
    22b0:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    22b4:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    22b8:	21 15       	cp	r18, r1
    22ba:	31 05       	cpc	r19, r1
    22bc:	41 f4       	brne	.+16     	; 0x22ce <malloc+0xea>
    22be:	2d b7       	in	r18, 0x3d	; 61
    22c0:	3e b7       	in	r19, 0x3e	; 62
    22c2:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    22c6:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    22ca:	24 1b       	sub	r18, r20
    22cc:	35 0b       	sbc	r19, r21
    22ce:	e0 91 06 05 	lds	r30, 0x0506	; 0x800506 <__brkval>
    22d2:	f0 91 07 05 	lds	r31, 0x0507	; 0x800507 <__brkval+0x1>
    22d6:	e2 17       	cp	r30, r18
    22d8:	f3 07       	cpc	r31, r19
    22da:	a0 f4       	brcc	.+40     	; 0x2304 <malloc+0x120>
    22dc:	2e 1b       	sub	r18, r30
    22de:	3f 0b       	sbc	r19, r31
    22e0:	28 17       	cp	r18, r24
    22e2:	39 07       	cpc	r19, r25
    22e4:	78 f0       	brcs	.+30     	; 0x2304 <malloc+0x120>
    22e6:	ac 01       	movw	r20, r24
    22e8:	4e 5f       	subi	r20, 0xFE	; 254
    22ea:	5f 4f       	sbci	r21, 0xFF	; 255
    22ec:	24 17       	cp	r18, r20
    22ee:	35 07       	cpc	r19, r21
    22f0:	48 f0       	brcs	.+18     	; 0x2304 <malloc+0x120>
    22f2:	4e 0f       	add	r20, r30
    22f4:	5f 1f       	adc	r21, r31
    22f6:	50 93 07 05 	sts	0x0507, r21	; 0x800507 <__brkval+0x1>
    22fa:	40 93 06 05 	sts	0x0506, r20	; 0x800506 <__brkval>
    22fe:	81 93       	st	Z+, r24
    2300:	91 93       	st	Z+, r25
    2302:	02 c0       	rjmp	.+4      	; 0x2308 <malloc+0x124>
    2304:	e0 e0       	ldi	r30, 0x00	; 0
    2306:	f0 e0       	ldi	r31, 0x00	; 0
    2308:	cf 01       	movw	r24, r30
    230a:	df 91       	pop	r29
    230c:	cf 91       	pop	r28
    230e:	1f 91       	pop	r17
    2310:	0f 91       	pop	r16
    2312:	08 95       	ret

00002314 <free>:
    2314:	cf 93       	push	r28
    2316:	df 93       	push	r29
    2318:	00 97       	sbiw	r24, 0x00	; 0
    231a:	09 f4       	brne	.+2      	; 0x231e <free+0xa>
    231c:	81 c0       	rjmp	.+258    	; 0x2420 <free+0x10c>
    231e:	fc 01       	movw	r30, r24
    2320:	32 97       	sbiw	r30, 0x02	; 2
    2322:	13 82       	std	Z+3, r1	; 0x03
    2324:	12 82       	std	Z+2, r1	; 0x02
    2326:	a0 91 08 05 	lds	r26, 0x0508	; 0x800508 <__flp>
    232a:	b0 91 09 05 	lds	r27, 0x0509	; 0x800509 <__flp+0x1>
    232e:	10 97       	sbiw	r26, 0x00	; 0
    2330:	81 f4       	brne	.+32     	; 0x2352 <free+0x3e>
    2332:	20 81       	ld	r18, Z
    2334:	31 81       	ldd	r19, Z+1	; 0x01
    2336:	82 0f       	add	r24, r18
    2338:	93 1f       	adc	r25, r19
    233a:	20 91 06 05 	lds	r18, 0x0506	; 0x800506 <__brkval>
    233e:	30 91 07 05 	lds	r19, 0x0507	; 0x800507 <__brkval+0x1>
    2342:	28 17       	cp	r18, r24
    2344:	39 07       	cpc	r19, r25
    2346:	51 f5       	brne	.+84     	; 0x239c <free+0x88>
    2348:	f0 93 07 05 	sts	0x0507, r31	; 0x800507 <__brkval+0x1>
    234c:	e0 93 06 05 	sts	0x0506, r30	; 0x800506 <__brkval>
    2350:	67 c0       	rjmp	.+206    	; 0x2420 <free+0x10c>
    2352:	ed 01       	movw	r28, r26
    2354:	20 e0       	ldi	r18, 0x00	; 0
    2356:	30 e0       	ldi	r19, 0x00	; 0
    2358:	ce 17       	cp	r28, r30
    235a:	df 07       	cpc	r29, r31
    235c:	40 f4       	brcc	.+16     	; 0x236e <free+0x5a>
    235e:	4a 81       	ldd	r20, Y+2	; 0x02
    2360:	5b 81       	ldd	r21, Y+3	; 0x03
    2362:	9e 01       	movw	r18, r28
    2364:	41 15       	cp	r20, r1
    2366:	51 05       	cpc	r21, r1
    2368:	f1 f0       	breq	.+60     	; 0x23a6 <free+0x92>
    236a:	ea 01       	movw	r28, r20
    236c:	f5 cf       	rjmp	.-22     	; 0x2358 <free+0x44>
    236e:	d3 83       	std	Z+3, r29	; 0x03
    2370:	c2 83       	std	Z+2, r28	; 0x02
    2372:	40 81       	ld	r20, Z
    2374:	51 81       	ldd	r21, Z+1	; 0x01
    2376:	84 0f       	add	r24, r20
    2378:	95 1f       	adc	r25, r21
    237a:	c8 17       	cp	r28, r24
    237c:	d9 07       	cpc	r29, r25
    237e:	59 f4       	brne	.+22     	; 0x2396 <free+0x82>
    2380:	88 81       	ld	r24, Y
    2382:	99 81       	ldd	r25, Y+1	; 0x01
    2384:	84 0f       	add	r24, r20
    2386:	95 1f       	adc	r25, r21
    2388:	02 96       	adiw	r24, 0x02	; 2
    238a:	91 83       	std	Z+1, r25	; 0x01
    238c:	80 83       	st	Z, r24
    238e:	8a 81       	ldd	r24, Y+2	; 0x02
    2390:	9b 81       	ldd	r25, Y+3	; 0x03
    2392:	93 83       	std	Z+3, r25	; 0x03
    2394:	82 83       	std	Z+2, r24	; 0x02
    2396:	21 15       	cp	r18, r1
    2398:	31 05       	cpc	r19, r1
    239a:	29 f4       	brne	.+10     	; 0x23a6 <free+0x92>
    239c:	f0 93 09 05 	sts	0x0509, r31	; 0x800509 <__flp+0x1>
    23a0:	e0 93 08 05 	sts	0x0508, r30	; 0x800508 <__flp>
    23a4:	3d c0       	rjmp	.+122    	; 0x2420 <free+0x10c>
    23a6:	e9 01       	movw	r28, r18
    23a8:	fb 83       	std	Y+3, r31	; 0x03
    23aa:	ea 83       	std	Y+2, r30	; 0x02
    23ac:	49 91       	ld	r20, Y+
    23ae:	59 91       	ld	r21, Y+
    23b0:	c4 0f       	add	r28, r20
    23b2:	d5 1f       	adc	r29, r21
    23b4:	ec 17       	cp	r30, r28
    23b6:	fd 07       	cpc	r31, r29
    23b8:	61 f4       	brne	.+24     	; 0x23d2 <free+0xbe>
    23ba:	80 81       	ld	r24, Z
    23bc:	91 81       	ldd	r25, Z+1	; 0x01
    23be:	84 0f       	add	r24, r20
    23c0:	95 1f       	adc	r25, r21
    23c2:	02 96       	adiw	r24, 0x02	; 2
    23c4:	e9 01       	movw	r28, r18
    23c6:	99 83       	std	Y+1, r25	; 0x01
    23c8:	88 83       	st	Y, r24
    23ca:	82 81       	ldd	r24, Z+2	; 0x02
    23cc:	93 81       	ldd	r25, Z+3	; 0x03
    23ce:	9b 83       	std	Y+3, r25	; 0x03
    23d0:	8a 83       	std	Y+2, r24	; 0x02
    23d2:	e0 e0       	ldi	r30, 0x00	; 0
    23d4:	f0 e0       	ldi	r31, 0x00	; 0
    23d6:	12 96       	adiw	r26, 0x02	; 2
    23d8:	8d 91       	ld	r24, X+
    23da:	9c 91       	ld	r25, X
    23dc:	13 97       	sbiw	r26, 0x03	; 3
    23de:	00 97       	sbiw	r24, 0x00	; 0
    23e0:	19 f0       	breq	.+6      	; 0x23e8 <free+0xd4>
    23e2:	fd 01       	movw	r30, r26
    23e4:	dc 01       	movw	r26, r24
    23e6:	f7 cf       	rjmp	.-18     	; 0x23d6 <free+0xc2>
    23e8:	8d 91       	ld	r24, X+
    23ea:	9c 91       	ld	r25, X
    23ec:	11 97       	sbiw	r26, 0x01	; 1
    23ee:	9d 01       	movw	r18, r26
    23f0:	2e 5f       	subi	r18, 0xFE	; 254
    23f2:	3f 4f       	sbci	r19, 0xFF	; 255
    23f4:	82 0f       	add	r24, r18
    23f6:	93 1f       	adc	r25, r19
    23f8:	20 91 06 05 	lds	r18, 0x0506	; 0x800506 <__brkval>
    23fc:	30 91 07 05 	lds	r19, 0x0507	; 0x800507 <__brkval+0x1>
    2400:	28 17       	cp	r18, r24
    2402:	39 07       	cpc	r19, r25
    2404:	69 f4       	brne	.+26     	; 0x2420 <free+0x10c>
    2406:	30 97       	sbiw	r30, 0x00	; 0
    2408:	29 f4       	brne	.+10     	; 0x2414 <free+0x100>
    240a:	10 92 09 05 	sts	0x0509, r1	; 0x800509 <__flp+0x1>
    240e:	10 92 08 05 	sts	0x0508, r1	; 0x800508 <__flp>
    2412:	02 c0       	rjmp	.+4      	; 0x2418 <free+0x104>
    2414:	13 82       	std	Z+3, r1	; 0x03
    2416:	12 82       	std	Z+2, r1	; 0x02
    2418:	b0 93 07 05 	sts	0x0507, r27	; 0x800507 <__brkval+0x1>
    241c:	a0 93 06 05 	sts	0x0506, r26	; 0x800506 <__brkval>
    2420:	df 91       	pop	r29
    2422:	cf 91       	pop	r28
    2424:	08 95       	ret

00002426 <strcmp>:
    2426:	fb 01       	movw	r30, r22
    2428:	dc 01       	movw	r26, r24
    242a:	8d 91       	ld	r24, X+
    242c:	01 90       	ld	r0, Z+
    242e:	80 19       	sub	r24, r0
    2430:	01 10       	cpse	r0, r1
    2432:	d9 f3       	breq	.-10     	; 0x242a <strcmp+0x4>
    2434:	99 0b       	sbc	r25, r25
    2436:	08 95       	ret

00002438 <strcpy>:
    2438:	fb 01       	movw	r30, r22
    243a:	dc 01       	movw	r26, r24
    243c:	01 90       	ld	r0, Z+
    243e:	0d 92       	st	X+, r0
    2440:	00 20       	and	r0, r0
    2442:	e1 f7       	brne	.-8      	; 0x243c <strcpy+0x4>
    2444:	08 95       	ret

00002446 <printf>:
    2446:	a0 e0       	ldi	r26, 0x00	; 0
    2448:	b0 e0       	ldi	r27, 0x00	; 0
    244a:	e9 e2       	ldi	r30, 0x29	; 41
    244c:	f2 e1       	ldi	r31, 0x12	; 18
    244e:	0c 94 6c 17 	jmp	0x2ed8	; 0x2ed8 <__prologue_saves__+0x20>
    2452:	ae 01       	movw	r20, r28
    2454:	4b 5f       	subi	r20, 0xFB	; 251
    2456:	5f 4f       	sbci	r21, 0xFF	; 255
    2458:	fa 01       	movw	r30, r20
    245a:	61 91       	ld	r22, Z+
    245c:	71 91       	ld	r23, Z+
    245e:	af 01       	movw	r20, r30
    2460:	80 91 0c 05 	lds	r24, 0x050C	; 0x80050c <__iob+0x2>
    2464:	90 91 0d 05 	lds	r25, 0x050D	; 0x80050d <__iob+0x3>
    2468:	0e 94 99 12 	call	0x2532	; 0x2532 <vfprintf>
    246c:	e2 e0       	ldi	r30, 0x02	; 2
    246e:	0c 94 88 17 	jmp	0x2f10	; 0x2f10 <__epilogue_restores__+0x20>

00002472 <puts>:
    2472:	0f 93       	push	r16
    2474:	1f 93       	push	r17
    2476:	cf 93       	push	r28
    2478:	df 93       	push	r29
    247a:	e0 91 0c 05 	lds	r30, 0x050C	; 0x80050c <__iob+0x2>
    247e:	f0 91 0d 05 	lds	r31, 0x050D	; 0x80050d <__iob+0x3>
    2482:	23 81       	ldd	r18, Z+3	; 0x03
    2484:	21 ff       	sbrs	r18, 1
    2486:	1b c0       	rjmp	.+54     	; 0x24be <puts+0x4c>
    2488:	8c 01       	movw	r16, r24
    248a:	d0 e0       	ldi	r29, 0x00	; 0
    248c:	c0 e0       	ldi	r28, 0x00	; 0
    248e:	f8 01       	movw	r30, r16
    2490:	81 91       	ld	r24, Z+
    2492:	8f 01       	movw	r16, r30
    2494:	60 91 0c 05 	lds	r22, 0x050C	; 0x80050c <__iob+0x2>
    2498:	70 91 0d 05 	lds	r23, 0x050D	; 0x80050d <__iob+0x3>
    249c:	db 01       	movw	r26, r22
    249e:	18 96       	adiw	r26, 0x08	; 8
    24a0:	ed 91       	ld	r30, X+
    24a2:	fc 91       	ld	r31, X
    24a4:	19 97       	sbiw	r26, 0x09	; 9
    24a6:	88 23       	and	r24, r24
    24a8:	31 f0       	breq	.+12     	; 0x24b6 <puts+0x44>
    24aa:	09 95       	icall
    24ac:	89 2b       	or	r24, r25
    24ae:	79 f3       	breq	.-34     	; 0x248e <puts+0x1c>
    24b0:	df ef       	ldi	r29, 0xFF	; 255
    24b2:	cf ef       	ldi	r28, 0xFF	; 255
    24b4:	ec cf       	rjmp	.-40     	; 0x248e <puts+0x1c>
    24b6:	8a e0       	ldi	r24, 0x0A	; 10
    24b8:	09 95       	icall
    24ba:	89 2b       	or	r24, r25
    24bc:	19 f0       	breq	.+6      	; 0x24c4 <puts+0x52>
    24be:	8f ef       	ldi	r24, 0xFF	; 255
    24c0:	9f ef       	ldi	r25, 0xFF	; 255
    24c2:	02 c0       	rjmp	.+4      	; 0x24c8 <puts+0x56>
    24c4:	8d 2f       	mov	r24, r29
    24c6:	9c 2f       	mov	r25, r28
    24c8:	df 91       	pop	r29
    24ca:	cf 91       	pop	r28
    24cc:	1f 91       	pop	r17
    24ce:	0f 91       	pop	r16
    24d0:	08 95       	ret

000024d2 <snprintf>:
    24d2:	ae e0       	ldi	r26, 0x0E	; 14
    24d4:	b0 e0       	ldi	r27, 0x00	; 0
    24d6:	ef e6       	ldi	r30, 0x6F	; 111
    24d8:	f2 e1       	ldi	r31, 0x12	; 18
    24da:	0c 94 6a 17 	jmp	0x2ed4	; 0x2ed4 <__prologue_saves__+0x1c>
    24de:	0d 89       	ldd	r16, Y+21	; 0x15
    24e0:	1e 89       	ldd	r17, Y+22	; 0x16
    24e2:	8f 89       	ldd	r24, Y+23	; 0x17
    24e4:	98 8d       	ldd	r25, Y+24	; 0x18
    24e6:	26 e0       	ldi	r18, 0x06	; 6
    24e8:	2c 83       	std	Y+4, r18	; 0x04
    24ea:	1a 83       	std	Y+2, r17	; 0x02
    24ec:	09 83       	std	Y+1, r16	; 0x01
    24ee:	97 ff       	sbrs	r25, 7
    24f0:	02 c0       	rjmp	.+4      	; 0x24f6 <snprintf+0x24>
    24f2:	80 e0       	ldi	r24, 0x00	; 0
    24f4:	90 e8       	ldi	r25, 0x80	; 128
    24f6:	01 97       	sbiw	r24, 0x01	; 1
    24f8:	9e 83       	std	Y+6, r25	; 0x06
    24fa:	8d 83       	std	Y+5, r24	; 0x05
    24fc:	ae 01       	movw	r20, r28
    24fe:	45 5e       	subi	r20, 0xE5	; 229
    2500:	5f 4f       	sbci	r21, 0xFF	; 255
    2502:	69 8d       	ldd	r22, Y+25	; 0x19
    2504:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2506:	ce 01       	movw	r24, r28
    2508:	01 96       	adiw	r24, 0x01	; 1
    250a:	0e 94 99 12 	call	0x2532	; 0x2532 <vfprintf>
    250e:	4d 81       	ldd	r20, Y+5	; 0x05
    2510:	5e 81       	ldd	r21, Y+6	; 0x06
    2512:	57 fd       	sbrc	r21, 7
    2514:	0a c0       	rjmp	.+20     	; 0x252a <snprintf+0x58>
    2516:	2f 81       	ldd	r18, Y+7	; 0x07
    2518:	38 85       	ldd	r19, Y+8	; 0x08
    251a:	42 17       	cp	r20, r18
    251c:	53 07       	cpc	r21, r19
    251e:	0c f4       	brge	.+2      	; 0x2522 <snprintf+0x50>
    2520:	9a 01       	movw	r18, r20
    2522:	f8 01       	movw	r30, r16
    2524:	e2 0f       	add	r30, r18
    2526:	f3 1f       	adc	r31, r19
    2528:	10 82       	st	Z, r1
    252a:	2e 96       	adiw	r28, 0x0e	; 14
    252c:	e4 e0       	ldi	r30, 0x04	; 4
    252e:	0c 94 86 17 	jmp	0x2f0c	; 0x2f0c <__epilogue_restores__+0x1c>

00002532 <vfprintf>:
    2532:	ab e0       	ldi	r26, 0x0B	; 11
    2534:	b0 e0       	ldi	r27, 0x00	; 0
    2536:	ef e9       	ldi	r30, 0x9F	; 159
    2538:	f2 e1       	ldi	r31, 0x12	; 18
    253a:	0c 94 5c 17 	jmp	0x2eb8	; 0x2eb8 <__prologue_saves__>
    253e:	6c 01       	movw	r12, r24
    2540:	7b 01       	movw	r14, r22
    2542:	8a 01       	movw	r16, r20
    2544:	fc 01       	movw	r30, r24
    2546:	17 82       	std	Z+7, r1	; 0x07
    2548:	16 82       	std	Z+6, r1	; 0x06
    254a:	83 81       	ldd	r24, Z+3	; 0x03
    254c:	81 ff       	sbrs	r24, 1
    254e:	cc c1       	rjmp	.+920    	; 0x28e8 <vfprintf+0x3b6>
    2550:	ce 01       	movw	r24, r28
    2552:	01 96       	adiw	r24, 0x01	; 1
    2554:	3c 01       	movw	r6, r24
    2556:	f6 01       	movw	r30, r12
    2558:	93 81       	ldd	r25, Z+3	; 0x03
    255a:	f7 01       	movw	r30, r14
    255c:	93 fd       	sbrc	r25, 3
    255e:	85 91       	lpm	r24, Z+
    2560:	93 ff       	sbrs	r25, 3
    2562:	81 91       	ld	r24, Z+
    2564:	7f 01       	movw	r14, r30
    2566:	88 23       	and	r24, r24
    2568:	09 f4       	brne	.+2      	; 0x256c <vfprintf+0x3a>
    256a:	ba c1       	rjmp	.+884    	; 0x28e0 <vfprintf+0x3ae>
    256c:	85 32       	cpi	r24, 0x25	; 37
    256e:	39 f4       	brne	.+14     	; 0x257e <vfprintf+0x4c>
    2570:	93 fd       	sbrc	r25, 3
    2572:	85 91       	lpm	r24, Z+
    2574:	93 ff       	sbrs	r25, 3
    2576:	81 91       	ld	r24, Z+
    2578:	7f 01       	movw	r14, r30
    257a:	85 32       	cpi	r24, 0x25	; 37
    257c:	29 f4       	brne	.+10     	; 0x2588 <vfprintf+0x56>
    257e:	b6 01       	movw	r22, r12
    2580:	90 e0       	ldi	r25, 0x00	; 0
    2582:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <fputc>
    2586:	e7 cf       	rjmp	.-50     	; 0x2556 <vfprintf+0x24>
    2588:	91 2c       	mov	r9, r1
    258a:	21 2c       	mov	r2, r1
    258c:	31 2c       	mov	r3, r1
    258e:	ff e1       	ldi	r31, 0x1F	; 31
    2590:	f3 15       	cp	r31, r3
    2592:	d8 f0       	brcs	.+54     	; 0x25ca <vfprintf+0x98>
    2594:	8b 32       	cpi	r24, 0x2B	; 43
    2596:	79 f0       	breq	.+30     	; 0x25b6 <vfprintf+0x84>
    2598:	38 f4       	brcc	.+14     	; 0x25a8 <vfprintf+0x76>
    259a:	80 32       	cpi	r24, 0x20	; 32
    259c:	79 f0       	breq	.+30     	; 0x25bc <vfprintf+0x8a>
    259e:	83 32       	cpi	r24, 0x23	; 35
    25a0:	a1 f4       	brne	.+40     	; 0x25ca <vfprintf+0x98>
    25a2:	23 2d       	mov	r18, r3
    25a4:	20 61       	ori	r18, 0x10	; 16
    25a6:	1d c0       	rjmp	.+58     	; 0x25e2 <vfprintf+0xb0>
    25a8:	8d 32       	cpi	r24, 0x2D	; 45
    25aa:	61 f0       	breq	.+24     	; 0x25c4 <vfprintf+0x92>
    25ac:	80 33       	cpi	r24, 0x30	; 48
    25ae:	69 f4       	brne	.+26     	; 0x25ca <vfprintf+0x98>
    25b0:	23 2d       	mov	r18, r3
    25b2:	21 60       	ori	r18, 0x01	; 1
    25b4:	16 c0       	rjmp	.+44     	; 0x25e2 <vfprintf+0xb0>
    25b6:	83 2d       	mov	r24, r3
    25b8:	82 60       	ori	r24, 0x02	; 2
    25ba:	38 2e       	mov	r3, r24
    25bc:	e3 2d       	mov	r30, r3
    25be:	e4 60       	ori	r30, 0x04	; 4
    25c0:	3e 2e       	mov	r3, r30
    25c2:	2a c0       	rjmp	.+84     	; 0x2618 <vfprintf+0xe6>
    25c4:	f3 2d       	mov	r31, r3
    25c6:	f8 60       	ori	r31, 0x08	; 8
    25c8:	1d c0       	rjmp	.+58     	; 0x2604 <vfprintf+0xd2>
    25ca:	37 fc       	sbrc	r3, 7
    25cc:	2d c0       	rjmp	.+90     	; 0x2628 <vfprintf+0xf6>
    25ce:	20 ed       	ldi	r18, 0xD0	; 208
    25d0:	28 0f       	add	r18, r24
    25d2:	2a 30       	cpi	r18, 0x0A	; 10
    25d4:	40 f0       	brcs	.+16     	; 0x25e6 <vfprintf+0xb4>
    25d6:	8e 32       	cpi	r24, 0x2E	; 46
    25d8:	b9 f4       	brne	.+46     	; 0x2608 <vfprintf+0xd6>
    25da:	36 fc       	sbrc	r3, 6
    25dc:	81 c1       	rjmp	.+770    	; 0x28e0 <vfprintf+0x3ae>
    25de:	23 2d       	mov	r18, r3
    25e0:	20 64       	ori	r18, 0x40	; 64
    25e2:	32 2e       	mov	r3, r18
    25e4:	19 c0       	rjmp	.+50     	; 0x2618 <vfprintf+0xe6>
    25e6:	36 fe       	sbrs	r3, 6
    25e8:	06 c0       	rjmp	.+12     	; 0x25f6 <vfprintf+0xc4>
    25ea:	8a e0       	ldi	r24, 0x0A	; 10
    25ec:	98 9e       	mul	r9, r24
    25ee:	20 0d       	add	r18, r0
    25f0:	11 24       	eor	r1, r1
    25f2:	92 2e       	mov	r9, r18
    25f4:	11 c0       	rjmp	.+34     	; 0x2618 <vfprintf+0xe6>
    25f6:	ea e0       	ldi	r30, 0x0A	; 10
    25f8:	2e 9e       	mul	r2, r30
    25fa:	20 0d       	add	r18, r0
    25fc:	11 24       	eor	r1, r1
    25fe:	22 2e       	mov	r2, r18
    2600:	f3 2d       	mov	r31, r3
    2602:	f0 62       	ori	r31, 0x20	; 32
    2604:	3f 2e       	mov	r3, r31
    2606:	08 c0       	rjmp	.+16     	; 0x2618 <vfprintf+0xe6>
    2608:	8c 36       	cpi	r24, 0x6C	; 108
    260a:	21 f4       	brne	.+8      	; 0x2614 <vfprintf+0xe2>
    260c:	83 2d       	mov	r24, r3
    260e:	80 68       	ori	r24, 0x80	; 128
    2610:	38 2e       	mov	r3, r24
    2612:	02 c0       	rjmp	.+4      	; 0x2618 <vfprintf+0xe6>
    2614:	88 36       	cpi	r24, 0x68	; 104
    2616:	41 f4       	brne	.+16     	; 0x2628 <vfprintf+0xf6>
    2618:	f7 01       	movw	r30, r14
    261a:	93 fd       	sbrc	r25, 3
    261c:	85 91       	lpm	r24, Z+
    261e:	93 ff       	sbrs	r25, 3
    2620:	81 91       	ld	r24, Z+
    2622:	7f 01       	movw	r14, r30
    2624:	81 11       	cpse	r24, r1
    2626:	b3 cf       	rjmp	.-154    	; 0x258e <vfprintf+0x5c>
    2628:	98 2f       	mov	r25, r24
    262a:	9f 7d       	andi	r25, 0xDF	; 223
    262c:	95 54       	subi	r25, 0x45	; 69
    262e:	93 30       	cpi	r25, 0x03	; 3
    2630:	28 f4       	brcc	.+10     	; 0x263c <vfprintf+0x10a>
    2632:	0c 5f       	subi	r16, 0xFC	; 252
    2634:	1f 4f       	sbci	r17, 0xFF	; 255
    2636:	9f e3       	ldi	r25, 0x3F	; 63
    2638:	99 83       	std	Y+1, r25	; 0x01
    263a:	0d c0       	rjmp	.+26     	; 0x2656 <vfprintf+0x124>
    263c:	83 36       	cpi	r24, 0x63	; 99
    263e:	31 f0       	breq	.+12     	; 0x264c <vfprintf+0x11a>
    2640:	83 37       	cpi	r24, 0x73	; 115
    2642:	71 f0       	breq	.+28     	; 0x2660 <vfprintf+0x12e>
    2644:	83 35       	cpi	r24, 0x53	; 83
    2646:	09 f0       	breq	.+2      	; 0x264a <vfprintf+0x118>
    2648:	59 c0       	rjmp	.+178    	; 0x26fc <vfprintf+0x1ca>
    264a:	21 c0       	rjmp	.+66     	; 0x268e <vfprintf+0x15c>
    264c:	f8 01       	movw	r30, r16
    264e:	80 81       	ld	r24, Z
    2650:	89 83       	std	Y+1, r24	; 0x01
    2652:	0e 5f       	subi	r16, 0xFE	; 254
    2654:	1f 4f       	sbci	r17, 0xFF	; 255
    2656:	88 24       	eor	r8, r8
    2658:	83 94       	inc	r8
    265a:	91 2c       	mov	r9, r1
    265c:	53 01       	movw	r10, r6
    265e:	13 c0       	rjmp	.+38     	; 0x2686 <vfprintf+0x154>
    2660:	28 01       	movw	r4, r16
    2662:	f2 e0       	ldi	r31, 0x02	; 2
    2664:	4f 0e       	add	r4, r31
    2666:	51 1c       	adc	r5, r1
    2668:	f8 01       	movw	r30, r16
    266a:	a0 80       	ld	r10, Z
    266c:	b1 80       	ldd	r11, Z+1	; 0x01
    266e:	36 fe       	sbrs	r3, 6
    2670:	03 c0       	rjmp	.+6      	; 0x2678 <vfprintf+0x146>
    2672:	69 2d       	mov	r22, r9
    2674:	70 e0       	ldi	r23, 0x00	; 0
    2676:	02 c0       	rjmp	.+4      	; 0x267c <vfprintf+0x14a>
    2678:	6f ef       	ldi	r22, 0xFF	; 255
    267a:	7f ef       	ldi	r23, 0xFF	; 255
    267c:	c5 01       	movw	r24, r10
    267e:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <strnlen>
    2682:	4c 01       	movw	r8, r24
    2684:	82 01       	movw	r16, r4
    2686:	f3 2d       	mov	r31, r3
    2688:	ff 77       	andi	r31, 0x7F	; 127
    268a:	3f 2e       	mov	r3, r31
    268c:	16 c0       	rjmp	.+44     	; 0x26ba <vfprintf+0x188>
    268e:	28 01       	movw	r4, r16
    2690:	22 e0       	ldi	r18, 0x02	; 2
    2692:	42 0e       	add	r4, r18
    2694:	51 1c       	adc	r5, r1
    2696:	f8 01       	movw	r30, r16
    2698:	a0 80       	ld	r10, Z
    269a:	b1 80       	ldd	r11, Z+1	; 0x01
    269c:	36 fe       	sbrs	r3, 6
    269e:	03 c0       	rjmp	.+6      	; 0x26a6 <vfprintf+0x174>
    26a0:	69 2d       	mov	r22, r9
    26a2:	70 e0       	ldi	r23, 0x00	; 0
    26a4:	02 c0       	rjmp	.+4      	; 0x26aa <vfprintf+0x178>
    26a6:	6f ef       	ldi	r22, 0xFF	; 255
    26a8:	7f ef       	ldi	r23, 0xFF	; 255
    26aa:	c5 01       	movw	r24, r10
    26ac:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <strnlen_P>
    26b0:	4c 01       	movw	r8, r24
    26b2:	f3 2d       	mov	r31, r3
    26b4:	f0 68       	ori	r31, 0x80	; 128
    26b6:	3f 2e       	mov	r3, r31
    26b8:	82 01       	movw	r16, r4
    26ba:	33 fc       	sbrc	r3, 3
    26bc:	1b c0       	rjmp	.+54     	; 0x26f4 <vfprintf+0x1c2>
    26be:	82 2d       	mov	r24, r2
    26c0:	90 e0       	ldi	r25, 0x00	; 0
    26c2:	88 16       	cp	r8, r24
    26c4:	99 06       	cpc	r9, r25
    26c6:	b0 f4       	brcc	.+44     	; 0x26f4 <vfprintf+0x1c2>
    26c8:	b6 01       	movw	r22, r12
    26ca:	80 e2       	ldi	r24, 0x20	; 32
    26cc:	90 e0       	ldi	r25, 0x00	; 0
    26ce:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <fputc>
    26d2:	2a 94       	dec	r2
    26d4:	f4 cf       	rjmp	.-24     	; 0x26be <vfprintf+0x18c>
    26d6:	f5 01       	movw	r30, r10
    26d8:	37 fc       	sbrc	r3, 7
    26da:	85 91       	lpm	r24, Z+
    26dc:	37 fe       	sbrs	r3, 7
    26de:	81 91       	ld	r24, Z+
    26e0:	5f 01       	movw	r10, r30
    26e2:	b6 01       	movw	r22, r12
    26e4:	90 e0       	ldi	r25, 0x00	; 0
    26e6:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <fputc>
    26ea:	21 10       	cpse	r2, r1
    26ec:	2a 94       	dec	r2
    26ee:	21 e0       	ldi	r18, 0x01	; 1
    26f0:	82 1a       	sub	r8, r18
    26f2:	91 08       	sbc	r9, r1
    26f4:	81 14       	cp	r8, r1
    26f6:	91 04       	cpc	r9, r1
    26f8:	71 f7       	brne	.-36     	; 0x26d6 <vfprintf+0x1a4>
    26fa:	e8 c0       	rjmp	.+464    	; 0x28cc <vfprintf+0x39a>
    26fc:	84 36       	cpi	r24, 0x64	; 100
    26fe:	11 f0       	breq	.+4      	; 0x2704 <vfprintf+0x1d2>
    2700:	89 36       	cpi	r24, 0x69	; 105
    2702:	41 f5       	brne	.+80     	; 0x2754 <vfprintf+0x222>
    2704:	f8 01       	movw	r30, r16
    2706:	37 fe       	sbrs	r3, 7
    2708:	07 c0       	rjmp	.+14     	; 0x2718 <vfprintf+0x1e6>
    270a:	60 81       	ld	r22, Z
    270c:	71 81       	ldd	r23, Z+1	; 0x01
    270e:	82 81       	ldd	r24, Z+2	; 0x02
    2710:	93 81       	ldd	r25, Z+3	; 0x03
    2712:	0c 5f       	subi	r16, 0xFC	; 252
    2714:	1f 4f       	sbci	r17, 0xFF	; 255
    2716:	08 c0       	rjmp	.+16     	; 0x2728 <vfprintf+0x1f6>
    2718:	60 81       	ld	r22, Z
    271a:	71 81       	ldd	r23, Z+1	; 0x01
    271c:	07 2e       	mov	r0, r23
    271e:	00 0c       	add	r0, r0
    2720:	88 0b       	sbc	r24, r24
    2722:	99 0b       	sbc	r25, r25
    2724:	0e 5f       	subi	r16, 0xFE	; 254
    2726:	1f 4f       	sbci	r17, 0xFF	; 255
    2728:	f3 2d       	mov	r31, r3
    272a:	ff 76       	andi	r31, 0x6F	; 111
    272c:	3f 2e       	mov	r3, r31
    272e:	97 ff       	sbrs	r25, 7
    2730:	09 c0       	rjmp	.+18     	; 0x2744 <vfprintf+0x212>
    2732:	90 95       	com	r25
    2734:	80 95       	com	r24
    2736:	70 95       	com	r23
    2738:	61 95       	neg	r22
    273a:	7f 4f       	sbci	r23, 0xFF	; 255
    273c:	8f 4f       	sbci	r24, 0xFF	; 255
    273e:	9f 4f       	sbci	r25, 0xFF	; 255
    2740:	f0 68       	ori	r31, 0x80	; 128
    2742:	3f 2e       	mov	r3, r31
    2744:	2a e0       	ldi	r18, 0x0A	; 10
    2746:	30 e0       	ldi	r19, 0x00	; 0
    2748:	a3 01       	movw	r20, r6
    274a:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <__ultoa_invert>
    274e:	88 2e       	mov	r8, r24
    2750:	86 18       	sub	r8, r6
    2752:	45 c0       	rjmp	.+138    	; 0x27de <vfprintf+0x2ac>
    2754:	85 37       	cpi	r24, 0x75	; 117
    2756:	31 f4       	brne	.+12     	; 0x2764 <vfprintf+0x232>
    2758:	23 2d       	mov	r18, r3
    275a:	2f 7e       	andi	r18, 0xEF	; 239
    275c:	b2 2e       	mov	r11, r18
    275e:	2a e0       	ldi	r18, 0x0A	; 10
    2760:	30 e0       	ldi	r19, 0x00	; 0
    2762:	25 c0       	rjmp	.+74     	; 0x27ae <vfprintf+0x27c>
    2764:	93 2d       	mov	r25, r3
    2766:	99 7f       	andi	r25, 0xF9	; 249
    2768:	b9 2e       	mov	r11, r25
    276a:	8f 36       	cpi	r24, 0x6F	; 111
    276c:	c1 f0       	breq	.+48     	; 0x279e <vfprintf+0x26c>
    276e:	18 f4       	brcc	.+6      	; 0x2776 <vfprintf+0x244>
    2770:	88 35       	cpi	r24, 0x58	; 88
    2772:	79 f0       	breq	.+30     	; 0x2792 <vfprintf+0x260>
    2774:	b5 c0       	rjmp	.+362    	; 0x28e0 <vfprintf+0x3ae>
    2776:	80 37       	cpi	r24, 0x70	; 112
    2778:	19 f0       	breq	.+6      	; 0x2780 <vfprintf+0x24e>
    277a:	88 37       	cpi	r24, 0x78	; 120
    277c:	21 f0       	breq	.+8      	; 0x2786 <vfprintf+0x254>
    277e:	b0 c0       	rjmp	.+352    	; 0x28e0 <vfprintf+0x3ae>
    2780:	e9 2f       	mov	r30, r25
    2782:	e0 61       	ori	r30, 0x10	; 16
    2784:	be 2e       	mov	r11, r30
    2786:	b4 fe       	sbrs	r11, 4
    2788:	0d c0       	rjmp	.+26     	; 0x27a4 <vfprintf+0x272>
    278a:	fb 2d       	mov	r31, r11
    278c:	f4 60       	ori	r31, 0x04	; 4
    278e:	bf 2e       	mov	r11, r31
    2790:	09 c0       	rjmp	.+18     	; 0x27a4 <vfprintf+0x272>
    2792:	34 fe       	sbrs	r3, 4
    2794:	0a c0       	rjmp	.+20     	; 0x27aa <vfprintf+0x278>
    2796:	29 2f       	mov	r18, r25
    2798:	26 60       	ori	r18, 0x06	; 6
    279a:	b2 2e       	mov	r11, r18
    279c:	06 c0       	rjmp	.+12     	; 0x27aa <vfprintf+0x278>
    279e:	28 e0       	ldi	r18, 0x08	; 8
    27a0:	30 e0       	ldi	r19, 0x00	; 0
    27a2:	05 c0       	rjmp	.+10     	; 0x27ae <vfprintf+0x27c>
    27a4:	20 e1       	ldi	r18, 0x10	; 16
    27a6:	30 e0       	ldi	r19, 0x00	; 0
    27a8:	02 c0       	rjmp	.+4      	; 0x27ae <vfprintf+0x27c>
    27aa:	20 e1       	ldi	r18, 0x10	; 16
    27ac:	32 e0       	ldi	r19, 0x02	; 2
    27ae:	f8 01       	movw	r30, r16
    27b0:	b7 fe       	sbrs	r11, 7
    27b2:	07 c0       	rjmp	.+14     	; 0x27c2 <vfprintf+0x290>
    27b4:	60 81       	ld	r22, Z
    27b6:	71 81       	ldd	r23, Z+1	; 0x01
    27b8:	82 81       	ldd	r24, Z+2	; 0x02
    27ba:	93 81       	ldd	r25, Z+3	; 0x03
    27bc:	0c 5f       	subi	r16, 0xFC	; 252
    27be:	1f 4f       	sbci	r17, 0xFF	; 255
    27c0:	06 c0       	rjmp	.+12     	; 0x27ce <vfprintf+0x29c>
    27c2:	60 81       	ld	r22, Z
    27c4:	71 81       	ldd	r23, Z+1	; 0x01
    27c6:	80 e0       	ldi	r24, 0x00	; 0
    27c8:	90 e0       	ldi	r25, 0x00	; 0
    27ca:	0e 5f       	subi	r16, 0xFE	; 254
    27cc:	1f 4f       	sbci	r17, 0xFF	; 255
    27ce:	a3 01       	movw	r20, r6
    27d0:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <__ultoa_invert>
    27d4:	88 2e       	mov	r8, r24
    27d6:	86 18       	sub	r8, r6
    27d8:	fb 2d       	mov	r31, r11
    27da:	ff 77       	andi	r31, 0x7F	; 127
    27dc:	3f 2e       	mov	r3, r31
    27de:	36 fe       	sbrs	r3, 6
    27e0:	0d c0       	rjmp	.+26     	; 0x27fc <vfprintf+0x2ca>
    27e2:	23 2d       	mov	r18, r3
    27e4:	2e 7f       	andi	r18, 0xFE	; 254
    27e6:	a2 2e       	mov	r10, r18
    27e8:	89 14       	cp	r8, r9
    27ea:	58 f4       	brcc	.+22     	; 0x2802 <vfprintf+0x2d0>
    27ec:	34 fe       	sbrs	r3, 4
    27ee:	0b c0       	rjmp	.+22     	; 0x2806 <vfprintf+0x2d4>
    27f0:	32 fc       	sbrc	r3, 2
    27f2:	09 c0       	rjmp	.+18     	; 0x2806 <vfprintf+0x2d4>
    27f4:	83 2d       	mov	r24, r3
    27f6:	8e 7e       	andi	r24, 0xEE	; 238
    27f8:	a8 2e       	mov	r10, r24
    27fa:	05 c0       	rjmp	.+10     	; 0x2806 <vfprintf+0x2d4>
    27fc:	b8 2c       	mov	r11, r8
    27fe:	a3 2c       	mov	r10, r3
    2800:	03 c0       	rjmp	.+6      	; 0x2808 <vfprintf+0x2d6>
    2802:	b8 2c       	mov	r11, r8
    2804:	01 c0       	rjmp	.+2      	; 0x2808 <vfprintf+0x2d6>
    2806:	b9 2c       	mov	r11, r9
    2808:	a4 fe       	sbrs	r10, 4
    280a:	0f c0       	rjmp	.+30     	; 0x282a <vfprintf+0x2f8>
    280c:	fe 01       	movw	r30, r28
    280e:	e8 0d       	add	r30, r8
    2810:	f1 1d       	adc	r31, r1
    2812:	80 81       	ld	r24, Z
    2814:	80 33       	cpi	r24, 0x30	; 48
    2816:	21 f4       	brne	.+8      	; 0x2820 <vfprintf+0x2ee>
    2818:	9a 2d       	mov	r25, r10
    281a:	99 7e       	andi	r25, 0xE9	; 233
    281c:	a9 2e       	mov	r10, r25
    281e:	09 c0       	rjmp	.+18     	; 0x2832 <vfprintf+0x300>
    2820:	a2 fe       	sbrs	r10, 2
    2822:	06 c0       	rjmp	.+12     	; 0x2830 <vfprintf+0x2fe>
    2824:	b3 94       	inc	r11
    2826:	b3 94       	inc	r11
    2828:	04 c0       	rjmp	.+8      	; 0x2832 <vfprintf+0x300>
    282a:	8a 2d       	mov	r24, r10
    282c:	86 78       	andi	r24, 0x86	; 134
    282e:	09 f0       	breq	.+2      	; 0x2832 <vfprintf+0x300>
    2830:	b3 94       	inc	r11
    2832:	a3 fc       	sbrc	r10, 3
    2834:	11 c0       	rjmp	.+34     	; 0x2858 <vfprintf+0x326>
    2836:	a0 fe       	sbrs	r10, 0
    2838:	06 c0       	rjmp	.+12     	; 0x2846 <vfprintf+0x314>
    283a:	b2 14       	cp	r11, r2
    283c:	88 f4       	brcc	.+34     	; 0x2860 <vfprintf+0x32e>
    283e:	28 0c       	add	r2, r8
    2840:	92 2c       	mov	r9, r2
    2842:	9b 18       	sub	r9, r11
    2844:	0e c0       	rjmp	.+28     	; 0x2862 <vfprintf+0x330>
    2846:	b2 14       	cp	r11, r2
    2848:	60 f4       	brcc	.+24     	; 0x2862 <vfprintf+0x330>
    284a:	b6 01       	movw	r22, r12
    284c:	80 e2       	ldi	r24, 0x20	; 32
    284e:	90 e0       	ldi	r25, 0x00	; 0
    2850:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <fputc>
    2854:	b3 94       	inc	r11
    2856:	f7 cf       	rjmp	.-18     	; 0x2846 <vfprintf+0x314>
    2858:	b2 14       	cp	r11, r2
    285a:	18 f4       	brcc	.+6      	; 0x2862 <vfprintf+0x330>
    285c:	2b 18       	sub	r2, r11
    285e:	02 c0       	rjmp	.+4      	; 0x2864 <vfprintf+0x332>
    2860:	98 2c       	mov	r9, r8
    2862:	21 2c       	mov	r2, r1
    2864:	a4 fe       	sbrs	r10, 4
    2866:	10 c0       	rjmp	.+32     	; 0x2888 <vfprintf+0x356>
    2868:	b6 01       	movw	r22, r12
    286a:	80 e3       	ldi	r24, 0x30	; 48
    286c:	90 e0       	ldi	r25, 0x00	; 0
    286e:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <fputc>
    2872:	a2 fe       	sbrs	r10, 2
    2874:	17 c0       	rjmp	.+46     	; 0x28a4 <vfprintf+0x372>
    2876:	a1 fc       	sbrc	r10, 1
    2878:	03 c0       	rjmp	.+6      	; 0x2880 <vfprintf+0x34e>
    287a:	88 e7       	ldi	r24, 0x78	; 120
    287c:	90 e0       	ldi	r25, 0x00	; 0
    287e:	02 c0       	rjmp	.+4      	; 0x2884 <vfprintf+0x352>
    2880:	88 e5       	ldi	r24, 0x58	; 88
    2882:	90 e0       	ldi	r25, 0x00	; 0
    2884:	b6 01       	movw	r22, r12
    2886:	0c c0       	rjmp	.+24     	; 0x28a0 <vfprintf+0x36e>
    2888:	8a 2d       	mov	r24, r10
    288a:	86 78       	andi	r24, 0x86	; 134
    288c:	59 f0       	breq	.+22     	; 0x28a4 <vfprintf+0x372>
    288e:	a1 fe       	sbrs	r10, 1
    2890:	02 c0       	rjmp	.+4      	; 0x2896 <vfprintf+0x364>
    2892:	8b e2       	ldi	r24, 0x2B	; 43
    2894:	01 c0       	rjmp	.+2      	; 0x2898 <vfprintf+0x366>
    2896:	80 e2       	ldi	r24, 0x20	; 32
    2898:	a7 fc       	sbrc	r10, 7
    289a:	8d e2       	ldi	r24, 0x2D	; 45
    289c:	b6 01       	movw	r22, r12
    289e:	90 e0       	ldi	r25, 0x00	; 0
    28a0:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <fputc>
    28a4:	89 14       	cp	r8, r9
    28a6:	38 f4       	brcc	.+14     	; 0x28b6 <vfprintf+0x384>
    28a8:	b6 01       	movw	r22, r12
    28aa:	80 e3       	ldi	r24, 0x30	; 48
    28ac:	90 e0       	ldi	r25, 0x00	; 0
    28ae:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <fputc>
    28b2:	9a 94       	dec	r9
    28b4:	f7 cf       	rjmp	.-18     	; 0x28a4 <vfprintf+0x372>
    28b6:	8a 94       	dec	r8
    28b8:	f3 01       	movw	r30, r6
    28ba:	e8 0d       	add	r30, r8
    28bc:	f1 1d       	adc	r31, r1
    28be:	80 81       	ld	r24, Z
    28c0:	b6 01       	movw	r22, r12
    28c2:	90 e0       	ldi	r25, 0x00	; 0
    28c4:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <fputc>
    28c8:	81 10       	cpse	r8, r1
    28ca:	f5 cf       	rjmp	.-22     	; 0x28b6 <vfprintf+0x384>
    28cc:	22 20       	and	r2, r2
    28ce:	09 f4       	brne	.+2      	; 0x28d2 <vfprintf+0x3a0>
    28d0:	42 ce       	rjmp	.-892    	; 0x2556 <vfprintf+0x24>
    28d2:	b6 01       	movw	r22, r12
    28d4:	80 e2       	ldi	r24, 0x20	; 32
    28d6:	90 e0       	ldi	r25, 0x00	; 0
    28d8:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <fputc>
    28dc:	2a 94       	dec	r2
    28de:	f6 cf       	rjmp	.-20     	; 0x28cc <vfprintf+0x39a>
    28e0:	f6 01       	movw	r30, r12
    28e2:	86 81       	ldd	r24, Z+6	; 0x06
    28e4:	97 81       	ldd	r25, Z+7	; 0x07
    28e6:	02 c0       	rjmp	.+4      	; 0x28ec <vfprintf+0x3ba>
    28e8:	8f ef       	ldi	r24, 0xFF	; 255
    28ea:	9f ef       	ldi	r25, 0xFF	; 255
    28ec:	2b 96       	adiw	r28, 0x0b	; 11
    28ee:	e2 e1       	ldi	r30, 0x12	; 18
    28f0:	0c 94 78 17 	jmp	0x2ef0	; 0x2ef0 <__epilogue_restores__>

000028f4 <dtoa_prf>:
    28f4:	a9 e0       	ldi	r26, 0x09	; 9
    28f6:	b0 e0       	ldi	r27, 0x00	; 0
    28f8:	e0 e8       	ldi	r30, 0x80	; 128
    28fa:	f4 e1       	ldi	r31, 0x14	; 20
    28fc:	0c 94 62 17 	jmp	0x2ec4	; 0x2ec4 <__prologue_saves__+0xc>
    2900:	6a 01       	movw	r12, r20
    2902:	12 2f       	mov	r17, r18
    2904:	b0 2e       	mov	r11, r16
    2906:	2b e3       	ldi	r18, 0x3B	; 59
    2908:	20 17       	cp	r18, r16
    290a:	20 f0       	brcs	.+8      	; 0x2914 <dtoa_prf+0x20>
    290c:	ff 24       	eor	r15, r15
    290e:	f3 94       	inc	r15
    2910:	f0 0e       	add	r15, r16
    2912:	02 c0       	rjmp	.+4      	; 0x2918 <dtoa_prf+0x24>
    2914:	2c e3       	ldi	r18, 0x3C	; 60
    2916:	f2 2e       	mov	r15, r18
    2918:	0f 2d       	mov	r16, r15
    291a:	27 e0       	ldi	r18, 0x07	; 7
    291c:	ae 01       	movw	r20, r28
    291e:	4f 5f       	subi	r20, 0xFF	; 255
    2920:	5f 4f       	sbci	r21, 0xFF	; 255
    2922:	0e 94 d4 15 	call	0x2ba8	; 0x2ba8 <__ftoa_engine>
    2926:	bc 01       	movw	r22, r24
    2928:	49 81       	ldd	r20, Y+1	; 0x01
    292a:	84 2f       	mov	r24, r20
    292c:	89 70       	andi	r24, 0x09	; 9
    292e:	81 30       	cpi	r24, 0x01	; 1
    2930:	31 f0       	breq	.+12     	; 0x293e <dtoa_prf+0x4a>
    2932:	e1 fc       	sbrc	r14, 1
    2934:	06 c0       	rjmp	.+12     	; 0x2942 <dtoa_prf+0x4e>
    2936:	e0 fe       	sbrs	r14, 0
    2938:	06 c0       	rjmp	.+12     	; 0x2946 <dtoa_prf+0x52>
    293a:	90 e2       	ldi	r25, 0x20	; 32
    293c:	05 c0       	rjmp	.+10     	; 0x2948 <dtoa_prf+0x54>
    293e:	9d e2       	ldi	r25, 0x2D	; 45
    2940:	03 c0       	rjmp	.+6      	; 0x2948 <dtoa_prf+0x54>
    2942:	9b e2       	ldi	r25, 0x2B	; 43
    2944:	01 c0       	rjmp	.+2      	; 0x2948 <dtoa_prf+0x54>
    2946:	90 e0       	ldi	r25, 0x00	; 0
    2948:	5e 2d       	mov	r21, r14
    294a:	50 71       	andi	r21, 0x10	; 16
    294c:	43 ff       	sbrs	r20, 3
    294e:	3c c0       	rjmp	.+120    	; 0x29c8 <dtoa_prf+0xd4>
    2950:	91 11       	cpse	r25, r1
    2952:	02 c0       	rjmp	.+4      	; 0x2958 <dtoa_prf+0x64>
    2954:	83 e0       	ldi	r24, 0x03	; 3
    2956:	01 c0       	rjmp	.+2      	; 0x295a <dtoa_prf+0x66>
    2958:	84 e0       	ldi	r24, 0x04	; 4
    295a:	81 17       	cp	r24, r17
    295c:	18 f4       	brcc	.+6      	; 0x2964 <dtoa_prf+0x70>
    295e:	21 2f       	mov	r18, r17
    2960:	28 1b       	sub	r18, r24
    2962:	01 c0       	rjmp	.+2      	; 0x2966 <dtoa_prf+0x72>
    2964:	20 e0       	ldi	r18, 0x00	; 0
    2966:	51 11       	cpse	r21, r1
    2968:	0b c0       	rjmp	.+22     	; 0x2980 <dtoa_prf+0x8c>
    296a:	f6 01       	movw	r30, r12
    296c:	82 2f       	mov	r24, r18
    296e:	30 e2       	ldi	r19, 0x20	; 32
    2970:	88 23       	and	r24, r24
    2972:	19 f0       	breq	.+6      	; 0x297a <dtoa_prf+0x86>
    2974:	31 93       	st	Z+, r19
    2976:	81 50       	subi	r24, 0x01	; 1
    2978:	fb cf       	rjmp	.-10     	; 0x2970 <dtoa_prf+0x7c>
    297a:	c2 0e       	add	r12, r18
    297c:	d1 1c       	adc	r13, r1
    297e:	20 e0       	ldi	r18, 0x00	; 0
    2980:	99 23       	and	r25, r25
    2982:	29 f0       	breq	.+10     	; 0x298e <dtoa_prf+0x9a>
    2984:	d6 01       	movw	r26, r12
    2986:	9c 93       	st	X, r25
    2988:	f6 01       	movw	r30, r12
    298a:	31 96       	adiw	r30, 0x01	; 1
    298c:	6f 01       	movw	r12, r30
    298e:	c6 01       	movw	r24, r12
    2990:	03 96       	adiw	r24, 0x03	; 3
    2992:	e2 fe       	sbrs	r14, 2
    2994:	0a c0       	rjmp	.+20     	; 0x29aa <dtoa_prf+0xb6>
    2996:	3e e4       	ldi	r19, 0x4E	; 78
    2998:	d6 01       	movw	r26, r12
    299a:	3c 93       	st	X, r19
    299c:	41 e4       	ldi	r20, 0x41	; 65
    299e:	11 96       	adiw	r26, 0x01	; 1
    29a0:	4c 93       	st	X, r20
    29a2:	11 97       	sbiw	r26, 0x01	; 1
    29a4:	12 96       	adiw	r26, 0x02	; 2
    29a6:	3c 93       	st	X, r19
    29a8:	06 c0       	rjmp	.+12     	; 0x29b6 <dtoa_prf+0xc2>
    29aa:	3e e6       	ldi	r19, 0x6E	; 110
    29ac:	f6 01       	movw	r30, r12
    29ae:	30 83       	st	Z, r19
    29b0:	41 e6       	ldi	r20, 0x61	; 97
    29b2:	41 83       	std	Z+1, r20	; 0x01
    29b4:	32 83       	std	Z+2, r19	; 0x02
    29b6:	fc 01       	movw	r30, r24
    29b8:	32 2f       	mov	r19, r18
    29ba:	40 e2       	ldi	r20, 0x20	; 32
    29bc:	33 23       	and	r19, r19
    29be:	09 f4       	brne	.+2      	; 0x29c2 <dtoa_prf+0xce>
    29c0:	42 c0       	rjmp	.+132    	; 0x2a46 <dtoa_prf+0x152>
    29c2:	41 93       	st	Z+, r20
    29c4:	31 50       	subi	r19, 0x01	; 1
    29c6:	fa cf       	rjmp	.-12     	; 0x29bc <dtoa_prf+0xc8>
    29c8:	42 ff       	sbrs	r20, 2
    29ca:	44 c0       	rjmp	.+136    	; 0x2a54 <dtoa_prf+0x160>
    29cc:	91 11       	cpse	r25, r1
    29ce:	02 c0       	rjmp	.+4      	; 0x29d4 <dtoa_prf+0xe0>
    29d0:	83 e0       	ldi	r24, 0x03	; 3
    29d2:	01 c0       	rjmp	.+2      	; 0x29d6 <dtoa_prf+0xe2>
    29d4:	84 e0       	ldi	r24, 0x04	; 4
    29d6:	81 17       	cp	r24, r17
    29d8:	18 f4       	brcc	.+6      	; 0x29e0 <dtoa_prf+0xec>
    29da:	21 2f       	mov	r18, r17
    29dc:	28 1b       	sub	r18, r24
    29de:	01 c0       	rjmp	.+2      	; 0x29e2 <dtoa_prf+0xee>
    29e0:	20 e0       	ldi	r18, 0x00	; 0
    29e2:	51 11       	cpse	r21, r1
    29e4:	0b c0       	rjmp	.+22     	; 0x29fc <dtoa_prf+0x108>
    29e6:	f6 01       	movw	r30, r12
    29e8:	82 2f       	mov	r24, r18
    29ea:	30 e2       	ldi	r19, 0x20	; 32
    29ec:	88 23       	and	r24, r24
    29ee:	19 f0       	breq	.+6      	; 0x29f6 <dtoa_prf+0x102>
    29f0:	31 93       	st	Z+, r19
    29f2:	81 50       	subi	r24, 0x01	; 1
    29f4:	fb cf       	rjmp	.-10     	; 0x29ec <dtoa_prf+0xf8>
    29f6:	c2 0e       	add	r12, r18
    29f8:	d1 1c       	adc	r13, r1
    29fa:	20 e0       	ldi	r18, 0x00	; 0
    29fc:	99 23       	and	r25, r25
    29fe:	29 f0       	breq	.+10     	; 0x2a0a <dtoa_prf+0x116>
    2a00:	d6 01       	movw	r26, r12
    2a02:	9c 93       	st	X, r25
    2a04:	f6 01       	movw	r30, r12
    2a06:	31 96       	adiw	r30, 0x01	; 1
    2a08:	6f 01       	movw	r12, r30
    2a0a:	c6 01       	movw	r24, r12
    2a0c:	03 96       	adiw	r24, 0x03	; 3
    2a0e:	e2 fe       	sbrs	r14, 2
    2a10:	0b c0       	rjmp	.+22     	; 0x2a28 <dtoa_prf+0x134>
    2a12:	39 e4       	ldi	r19, 0x49	; 73
    2a14:	d6 01       	movw	r26, r12
    2a16:	3c 93       	st	X, r19
    2a18:	3e e4       	ldi	r19, 0x4E	; 78
    2a1a:	11 96       	adiw	r26, 0x01	; 1
    2a1c:	3c 93       	st	X, r19
    2a1e:	11 97       	sbiw	r26, 0x01	; 1
    2a20:	36 e4       	ldi	r19, 0x46	; 70
    2a22:	12 96       	adiw	r26, 0x02	; 2
    2a24:	3c 93       	st	X, r19
    2a26:	07 c0       	rjmp	.+14     	; 0x2a36 <dtoa_prf+0x142>
    2a28:	39 e6       	ldi	r19, 0x69	; 105
    2a2a:	f6 01       	movw	r30, r12
    2a2c:	30 83       	st	Z, r19
    2a2e:	3e e6       	ldi	r19, 0x6E	; 110
    2a30:	31 83       	std	Z+1, r19	; 0x01
    2a32:	36 e6       	ldi	r19, 0x66	; 102
    2a34:	32 83       	std	Z+2, r19	; 0x02
    2a36:	fc 01       	movw	r30, r24
    2a38:	32 2f       	mov	r19, r18
    2a3a:	40 e2       	ldi	r20, 0x20	; 32
    2a3c:	33 23       	and	r19, r19
    2a3e:	19 f0       	breq	.+6      	; 0x2a46 <dtoa_prf+0x152>
    2a40:	41 93       	st	Z+, r20
    2a42:	31 50       	subi	r19, 0x01	; 1
    2a44:	fb cf       	rjmp	.-10     	; 0x2a3c <dtoa_prf+0x148>
    2a46:	fc 01       	movw	r30, r24
    2a48:	e2 0f       	add	r30, r18
    2a4a:	f1 1d       	adc	r31, r1
    2a4c:	10 82       	st	Z, r1
    2a4e:	8e ef       	ldi	r24, 0xFE	; 254
    2a50:	9f ef       	ldi	r25, 0xFF	; 255
    2a52:	a6 c0       	rjmp	.+332    	; 0x2ba0 <dtoa_prf+0x2ac>
    2a54:	21 e0       	ldi	r18, 0x01	; 1
    2a56:	30 e0       	ldi	r19, 0x00	; 0
    2a58:	91 11       	cpse	r25, r1
    2a5a:	02 c0       	rjmp	.+4      	; 0x2a60 <dtoa_prf+0x16c>
    2a5c:	20 e0       	ldi	r18, 0x00	; 0
    2a5e:	30 e0       	ldi	r19, 0x00	; 0
    2a60:	16 16       	cp	r1, r22
    2a62:	17 06       	cpc	r1, r23
    2a64:	1c f4       	brge	.+6      	; 0x2a6c <dtoa_prf+0x178>
    2a66:	fb 01       	movw	r30, r22
    2a68:	31 96       	adiw	r30, 0x01	; 1
    2a6a:	02 c0       	rjmp	.+4      	; 0x2a70 <dtoa_prf+0x17c>
    2a6c:	e1 e0       	ldi	r30, 0x01	; 1
    2a6e:	f0 e0       	ldi	r31, 0x00	; 0
    2a70:	2e 0f       	add	r18, r30
    2a72:	3f 1f       	adc	r19, r31
    2a74:	bb 20       	and	r11, r11
    2a76:	21 f0       	breq	.+8      	; 0x2a80 <dtoa_prf+0x18c>
    2a78:	eb 2d       	mov	r30, r11
    2a7a:	f0 e0       	ldi	r31, 0x00	; 0
    2a7c:	31 96       	adiw	r30, 0x01	; 1
    2a7e:	02 c0       	rjmp	.+4      	; 0x2a84 <dtoa_prf+0x190>
    2a80:	e0 e0       	ldi	r30, 0x00	; 0
    2a82:	f0 e0       	ldi	r31, 0x00	; 0
    2a84:	2e 0f       	add	r18, r30
    2a86:	3f 1f       	adc	r19, r31
    2a88:	e1 2f       	mov	r30, r17
    2a8a:	f0 e0       	ldi	r31, 0x00	; 0
    2a8c:	2e 17       	cp	r18, r30
    2a8e:	3f 07       	cpc	r19, r31
    2a90:	1c f4       	brge	.+6      	; 0x2a98 <dtoa_prf+0x1a4>
    2a92:	12 1b       	sub	r17, r18
    2a94:	21 2f       	mov	r18, r17
    2a96:	01 c0       	rjmp	.+2      	; 0x2a9a <dtoa_prf+0x1a6>
    2a98:	20 e0       	ldi	r18, 0x00	; 0
    2a9a:	8e 2d       	mov	r24, r14
    2a9c:	88 71       	andi	r24, 0x18	; 24
    2a9e:	59 f4       	brne	.+22     	; 0x2ab6 <dtoa_prf+0x1c2>
    2aa0:	f6 01       	movw	r30, r12
    2aa2:	82 2f       	mov	r24, r18
    2aa4:	30 e2       	ldi	r19, 0x20	; 32
    2aa6:	88 23       	and	r24, r24
    2aa8:	19 f0       	breq	.+6      	; 0x2ab0 <dtoa_prf+0x1bc>
    2aaa:	31 93       	st	Z+, r19
    2aac:	81 50       	subi	r24, 0x01	; 1
    2aae:	fb cf       	rjmp	.-10     	; 0x2aa6 <dtoa_prf+0x1b2>
    2ab0:	c2 0e       	add	r12, r18
    2ab2:	d1 1c       	adc	r13, r1
    2ab4:	20 e0       	ldi	r18, 0x00	; 0
    2ab6:	99 23       	and	r25, r25
    2ab8:	29 f0       	breq	.+10     	; 0x2ac4 <dtoa_prf+0x1d0>
    2aba:	d6 01       	movw	r26, r12
    2abc:	9c 93       	st	X, r25
    2abe:	f6 01       	movw	r30, r12
    2ac0:	31 96       	adiw	r30, 0x01	; 1
    2ac2:	6f 01       	movw	r12, r30
    2ac4:	51 11       	cpse	r21, r1
    2ac6:	0b c0       	rjmp	.+22     	; 0x2ade <dtoa_prf+0x1ea>
    2ac8:	f6 01       	movw	r30, r12
    2aca:	82 2f       	mov	r24, r18
    2acc:	90 e3       	ldi	r25, 0x30	; 48
    2ace:	88 23       	and	r24, r24
    2ad0:	19 f0       	breq	.+6      	; 0x2ad8 <dtoa_prf+0x1e4>
    2ad2:	91 93       	st	Z+, r25
    2ad4:	81 50       	subi	r24, 0x01	; 1
    2ad6:	fb cf       	rjmp	.-10     	; 0x2ace <dtoa_prf+0x1da>
    2ad8:	c2 0e       	add	r12, r18
    2ada:	d1 1c       	adc	r13, r1
    2adc:	20 e0       	ldi	r18, 0x00	; 0
    2ade:	0f 2d       	mov	r16, r15
    2ae0:	06 0f       	add	r16, r22
    2ae2:	9a 81       	ldd	r25, Y+2	; 0x02
    2ae4:	34 2f       	mov	r19, r20
    2ae6:	30 71       	andi	r19, 0x10	; 16
    2ae8:	44 ff       	sbrs	r20, 4
    2aea:	03 c0       	rjmp	.+6      	; 0x2af2 <dtoa_prf+0x1fe>
    2aec:	91 33       	cpi	r25, 0x31	; 49
    2aee:	09 f4       	brne	.+2      	; 0x2af2 <dtoa_prf+0x1fe>
    2af0:	01 50       	subi	r16, 0x01	; 1
    2af2:	10 16       	cp	r1, r16
    2af4:	24 f4       	brge	.+8      	; 0x2afe <dtoa_prf+0x20a>
    2af6:	09 30       	cpi	r16, 0x09	; 9
    2af8:	18 f0       	brcs	.+6      	; 0x2b00 <dtoa_prf+0x20c>
    2afa:	08 e0       	ldi	r16, 0x08	; 8
    2afc:	01 c0       	rjmp	.+2      	; 0x2b00 <dtoa_prf+0x20c>
    2afe:	01 e0       	ldi	r16, 0x01	; 1
    2b00:	ab 01       	movw	r20, r22
    2b02:	77 ff       	sbrs	r23, 7
    2b04:	02 c0       	rjmp	.+4      	; 0x2b0a <dtoa_prf+0x216>
    2b06:	40 e0       	ldi	r20, 0x00	; 0
    2b08:	50 e0       	ldi	r21, 0x00	; 0
    2b0a:	fb 01       	movw	r30, r22
    2b0c:	e4 1b       	sub	r30, r20
    2b0e:	f5 0b       	sbc	r31, r21
    2b10:	a1 e0       	ldi	r26, 0x01	; 1
    2b12:	b0 e0       	ldi	r27, 0x00	; 0
    2b14:	ac 0f       	add	r26, r28
    2b16:	bd 1f       	adc	r27, r29
    2b18:	ea 0f       	add	r30, r26
    2b1a:	fb 1f       	adc	r31, r27
    2b1c:	8e e2       	ldi	r24, 0x2E	; 46
    2b1e:	a8 2e       	mov	r10, r24
    2b20:	4b 01       	movw	r8, r22
    2b22:	80 1a       	sub	r8, r16
    2b24:	91 08       	sbc	r9, r1
    2b26:	0b 2d       	mov	r16, r11
    2b28:	10 e0       	ldi	r17, 0x00	; 0
    2b2a:	11 95       	neg	r17
    2b2c:	01 95       	neg	r16
    2b2e:	11 09       	sbc	r17, r1
    2b30:	4f 3f       	cpi	r20, 0xFF	; 255
    2b32:	bf ef       	ldi	r27, 0xFF	; 255
    2b34:	5b 07       	cpc	r21, r27
    2b36:	21 f4       	brne	.+8      	; 0x2b40 <dtoa_prf+0x24c>
    2b38:	d6 01       	movw	r26, r12
    2b3a:	ac 92       	st	X, r10
    2b3c:	11 96       	adiw	r26, 0x01	; 1
    2b3e:	6d 01       	movw	r12, r26
    2b40:	64 17       	cp	r22, r20
    2b42:	75 07       	cpc	r23, r21
    2b44:	2c f0       	brlt	.+10     	; 0x2b50 <dtoa_prf+0x25c>
    2b46:	84 16       	cp	r8, r20
    2b48:	95 06       	cpc	r9, r21
    2b4a:	14 f4       	brge	.+4      	; 0x2b50 <dtoa_prf+0x25c>
    2b4c:	81 81       	ldd	r24, Z+1	; 0x01
    2b4e:	01 c0       	rjmp	.+2      	; 0x2b52 <dtoa_prf+0x25e>
    2b50:	80 e3       	ldi	r24, 0x30	; 48
    2b52:	41 50       	subi	r20, 0x01	; 1
    2b54:	51 09       	sbc	r21, r1
    2b56:	31 96       	adiw	r30, 0x01	; 1
    2b58:	d6 01       	movw	r26, r12
    2b5a:	11 96       	adiw	r26, 0x01	; 1
    2b5c:	7d 01       	movw	r14, r26
    2b5e:	40 17       	cp	r20, r16
    2b60:	51 07       	cpc	r21, r17
    2b62:	24 f0       	brlt	.+8      	; 0x2b6c <dtoa_prf+0x278>
    2b64:	d6 01       	movw	r26, r12
    2b66:	8c 93       	st	X, r24
    2b68:	67 01       	movw	r12, r14
    2b6a:	e2 cf       	rjmp	.-60     	; 0x2b30 <dtoa_prf+0x23c>
    2b6c:	64 17       	cp	r22, r20
    2b6e:	75 07       	cpc	r23, r21
    2b70:	39 f4       	brne	.+14     	; 0x2b80 <dtoa_prf+0x28c>
    2b72:	96 33       	cpi	r25, 0x36	; 54
    2b74:	20 f4       	brcc	.+8      	; 0x2b7e <dtoa_prf+0x28a>
    2b76:	95 33       	cpi	r25, 0x35	; 53
    2b78:	19 f4       	brne	.+6      	; 0x2b80 <dtoa_prf+0x28c>
    2b7a:	31 11       	cpse	r19, r1
    2b7c:	01 c0       	rjmp	.+2      	; 0x2b80 <dtoa_prf+0x28c>
    2b7e:	81 e3       	ldi	r24, 0x31	; 49
    2b80:	f6 01       	movw	r30, r12
    2b82:	80 83       	st	Z, r24
    2b84:	f7 01       	movw	r30, r14
    2b86:	82 2f       	mov	r24, r18
    2b88:	90 e2       	ldi	r25, 0x20	; 32
    2b8a:	88 23       	and	r24, r24
    2b8c:	19 f0       	breq	.+6      	; 0x2b94 <dtoa_prf+0x2a0>
    2b8e:	91 93       	st	Z+, r25
    2b90:	81 50       	subi	r24, 0x01	; 1
    2b92:	fb cf       	rjmp	.-10     	; 0x2b8a <dtoa_prf+0x296>
    2b94:	f7 01       	movw	r30, r14
    2b96:	e2 0f       	add	r30, r18
    2b98:	f1 1d       	adc	r31, r1
    2b9a:	10 82       	st	Z, r1
    2b9c:	80 e0       	ldi	r24, 0x00	; 0
    2b9e:	90 e0       	ldi	r25, 0x00	; 0
    2ba0:	29 96       	adiw	r28, 0x09	; 9
    2ba2:	ec e0       	ldi	r30, 0x0C	; 12
    2ba4:	0c 94 7e 17 	jmp	0x2efc	; 0x2efc <__epilogue_restores__+0xc>

00002ba8 <__ftoa_engine>:
    2ba8:	28 30       	cpi	r18, 0x08	; 8
    2baa:	08 f0       	brcs	.+2      	; 0x2bae <__ftoa_engine+0x6>
    2bac:	27 e0       	ldi	r18, 0x07	; 7
    2bae:	33 27       	eor	r19, r19
    2bb0:	da 01       	movw	r26, r20
    2bb2:	99 0f       	add	r25, r25
    2bb4:	31 1d       	adc	r19, r1
    2bb6:	87 fd       	sbrc	r24, 7
    2bb8:	91 60       	ori	r25, 0x01	; 1
    2bba:	00 96       	adiw	r24, 0x00	; 0
    2bbc:	61 05       	cpc	r22, r1
    2bbe:	71 05       	cpc	r23, r1
    2bc0:	39 f4       	brne	.+14     	; 0x2bd0 <__ftoa_engine+0x28>
    2bc2:	32 60       	ori	r19, 0x02	; 2
    2bc4:	2e 5f       	subi	r18, 0xFE	; 254
    2bc6:	3d 93       	st	X+, r19
    2bc8:	30 e3       	ldi	r19, 0x30	; 48
    2bca:	2a 95       	dec	r18
    2bcc:	e1 f7       	brne	.-8      	; 0x2bc6 <__ftoa_engine+0x1e>
    2bce:	08 95       	ret
    2bd0:	9f 3f       	cpi	r25, 0xFF	; 255
    2bd2:	30 f0       	brcs	.+12     	; 0x2be0 <__ftoa_engine+0x38>
    2bd4:	80 38       	cpi	r24, 0x80	; 128
    2bd6:	71 05       	cpc	r23, r1
    2bd8:	61 05       	cpc	r22, r1
    2bda:	09 f0       	breq	.+2      	; 0x2bde <__ftoa_engine+0x36>
    2bdc:	3c 5f       	subi	r19, 0xFC	; 252
    2bde:	3c 5f       	subi	r19, 0xFC	; 252
    2be0:	3d 93       	st	X+, r19
    2be2:	91 30       	cpi	r25, 0x01	; 1
    2be4:	08 f0       	brcs	.+2      	; 0x2be8 <__ftoa_engine+0x40>
    2be6:	80 68       	ori	r24, 0x80	; 128
    2be8:	91 1d       	adc	r25, r1
    2bea:	df 93       	push	r29
    2bec:	cf 93       	push	r28
    2bee:	1f 93       	push	r17
    2bf0:	0f 93       	push	r16
    2bf2:	ff 92       	push	r15
    2bf4:	ef 92       	push	r14
    2bf6:	19 2f       	mov	r17, r25
    2bf8:	98 7f       	andi	r25, 0xF8	; 248
    2bfa:	96 95       	lsr	r25
    2bfc:	e9 2f       	mov	r30, r25
    2bfe:	96 95       	lsr	r25
    2c00:	96 95       	lsr	r25
    2c02:	e9 0f       	add	r30, r25
    2c04:	ff 27       	eor	r31, r31
    2c06:	ee 52       	subi	r30, 0x2E	; 46
    2c08:	ff 4f       	sbci	r31, 0xFF	; 255
    2c0a:	99 27       	eor	r25, r25
    2c0c:	33 27       	eor	r19, r19
    2c0e:	ee 24       	eor	r14, r14
    2c10:	ff 24       	eor	r15, r15
    2c12:	a7 01       	movw	r20, r14
    2c14:	e7 01       	movw	r28, r14
    2c16:	05 90       	lpm	r0, Z+
    2c18:	08 94       	sec
    2c1a:	07 94       	ror	r0
    2c1c:	28 f4       	brcc	.+10     	; 0x2c28 <__ftoa_engine+0x80>
    2c1e:	36 0f       	add	r19, r22
    2c20:	e7 1e       	adc	r14, r23
    2c22:	f8 1e       	adc	r15, r24
    2c24:	49 1f       	adc	r20, r25
    2c26:	51 1d       	adc	r21, r1
    2c28:	66 0f       	add	r22, r22
    2c2a:	77 1f       	adc	r23, r23
    2c2c:	88 1f       	adc	r24, r24
    2c2e:	99 1f       	adc	r25, r25
    2c30:	06 94       	lsr	r0
    2c32:	a1 f7       	brne	.-24     	; 0x2c1c <__ftoa_engine+0x74>
    2c34:	05 90       	lpm	r0, Z+
    2c36:	07 94       	ror	r0
    2c38:	28 f4       	brcc	.+10     	; 0x2c44 <__ftoa_engine+0x9c>
    2c3a:	e7 0e       	add	r14, r23
    2c3c:	f8 1e       	adc	r15, r24
    2c3e:	49 1f       	adc	r20, r25
    2c40:	56 1f       	adc	r21, r22
    2c42:	c1 1d       	adc	r28, r1
    2c44:	77 0f       	add	r23, r23
    2c46:	88 1f       	adc	r24, r24
    2c48:	99 1f       	adc	r25, r25
    2c4a:	66 1f       	adc	r22, r22
    2c4c:	06 94       	lsr	r0
    2c4e:	a1 f7       	brne	.-24     	; 0x2c38 <__ftoa_engine+0x90>
    2c50:	05 90       	lpm	r0, Z+
    2c52:	07 94       	ror	r0
    2c54:	28 f4       	brcc	.+10     	; 0x2c60 <__ftoa_engine+0xb8>
    2c56:	f8 0e       	add	r15, r24
    2c58:	49 1f       	adc	r20, r25
    2c5a:	56 1f       	adc	r21, r22
    2c5c:	c7 1f       	adc	r28, r23
    2c5e:	d1 1d       	adc	r29, r1
    2c60:	88 0f       	add	r24, r24
    2c62:	99 1f       	adc	r25, r25
    2c64:	66 1f       	adc	r22, r22
    2c66:	77 1f       	adc	r23, r23
    2c68:	06 94       	lsr	r0
    2c6a:	a1 f7       	brne	.-24     	; 0x2c54 <__ftoa_engine+0xac>
    2c6c:	05 90       	lpm	r0, Z+
    2c6e:	07 94       	ror	r0
    2c70:	20 f4       	brcc	.+8      	; 0x2c7a <__ftoa_engine+0xd2>
    2c72:	49 0f       	add	r20, r25
    2c74:	56 1f       	adc	r21, r22
    2c76:	c7 1f       	adc	r28, r23
    2c78:	d8 1f       	adc	r29, r24
    2c7a:	99 0f       	add	r25, r25
    2c7c:	66 1f       	adc	r22, r22
    2c7e:	77 1f       	adc	r23, r23
    2c80:	88 1f       	adc	r24, r24
    2c82:	06 94       	lsr	r0
    2c84:	a9 f7       	brne	.-22     	; 0x2c70 <__ftoa_engine+0xc8>
    2c86:	84 91       	lpm	r24, Z
    2c88:	10 95       	com	r17
    2c8a:	17 70       	andi	r17, 0x07	; 7
    2c8c:	41 f0       	breq	.+16     	; 0x2c9e <__ftoa_engine+0xf6>
    2c8e:	d6 95       	lsr	r29
    2c90:	c7 95       	ror	r28
    2c92:	57 95       	ror	r21
    2c94:	47 95       	ror	r20
    2c96:	f7 94       	ror	r15
    2c98:	e7 94       	ror	r14
    2c9a:	1a 95       	dec	r17
    2c9c:	c1 f7       	brne	.-16     	; 0x2c8e <__ftoa_engine+0xe6>
    2c9e:	e8 e7       	ldi	r30, 0x78	; 120
    2ca0:	f0 e0       	ldi	r31, 0x00	; 0
    2ca2:	68 94       	set
    2ca4:	15 90       	lpm	r1, Z+
    2ca6:	15 91       	lpm	r17, Z+
    2ca8:	35 91       	lpm	r19, Z+
    2caa:	65 91       	lpm	r22, Z+
    2cac:	95 91       	lpm	r25, Z+
    2cae:	05 90       	lpm	r0, Z+
    2cb0:	7f e2       	ldi	r23, 0x2F	; 47
    2cb2:	73 95       	inc	r23
    2cb4:	e1 18       	sub	r14, r1
    2cb6:	f1 0a       	sbc	r15, r17
    2cb8:	43 0b       	sbc	r20, r19
    2cba:	56 0b       	sbc	r21, r22
    2cbc:	c9 0b       	sbc	r28, r25
    2cbe:	d0 09       	sbc	r29, r0
    2cc0:	c0 f7       	brcc	.-16     	; 0x2cb2 <__ftoa_engine+0x10a>
    2cc2:	e1 0c       	add	r14, r1
    2cc4:	f1 1e       	adc	r15, r17
    2cc6:	43 1f       	adc	r20, r19
    2cc8:	56 1f       	adc	r21, r22
    2cca:	c9 1f       	adc	r28, r25
    2ccc:	d0 1d       	adc	r29, r0
    2cce:	7e f4       	brtc	.+30     	; 0x2cee <__ftoa_engine+0x146>
    2cd0:	70 33       	cpi	r23, 0x30	; 48
    2cd2:	11 f4       	brne	.+4      	; 0x2cd8 <__ftoa_engine+0x130>
    2cd4:	8a 95       	dec	r24
    2cd6:	e6 cf       	rjmp	.-52     	; 0x2ca4 <__ftoa_engine+0xfc>
    2cd8:	e8 94       	clt
    2cda:	01 50       	subi	r16, 0x01	; 1
    2cdc:	30 f0       	brcs	.+12     	; 0x2cea <__ftoa_engine+0x142>
    2cde:	08 0f       	add	r16, r24
    2ce0:	0a f4       	brpl	.+2      	; 0x2ce4 <__ftoa_engine+0x13c>
    2ce2:	00 27       	eor	r16, r16
    2ce4:	02 17       	cp	r16, r18
    2ce6:	08 f4       	brcc	.+2      	; 0x2cea <__ftoa_engine+0x142>
    2ce8:	20 2f       	mov	r18, r16
    2cea:	23 95       	inc	r18
    2cec:	02 2f       	mov	r16, r18
    2cee:	7a 33       	cpi	r23, 0x3A	; 58
    2cf0:	28 f0       	brcs	.+10     	; 0x2cfc <__ftoa_engine+0x154>
    2cf2:	79 e3       	ldi	r23, 0x39	; 57
    2cf4:	7d 93       	st	X+, r23
    2cf6:	2a 95       	dec	r18
    2cf8:	e9 f7       	brne	.-6      	; 0x2cf4 <__ftoa_engine+0x14c>
    2cfa:	10 c0       	rjmp	.+32     	; 0x2d1c <__ftoa_engine+0x174>
    2cfc:	7d 93       	st	X+, r23
    2cfe:	2a 95       	dec	r18
    2d00:	89 f6       	brne	.-94     	; 0x2ca4 <__ftoa_engine+0xfc>
    2d02:	06 94       	lsr	r0
    2d04:	97 95       	ror	r25
    2d06:	67 95       	ror	r22
    2d08:	37 95       	ror	r19
    2d0a:	17 95       	ror	r17
    2d0c:	17 94       	ror	r1
    2d0e:	e1 18       	sub	r14, r1
    2d10:	f1 0a       	sbc	r15, r17
    2d12:	43 0b       	sbc	r20, r19
    2d14:	56 0b       	sbc	r21, r22
    2d16:	c9 0b       	sbc	r28, r25
    2d18:	d0 09       	sbc	r29, r0
    2d1a:	98 f0       	brcs	.+38     	; 0x2d42 <__ftoa_engine+0x19a>
    2d1c:	23 95       	inc	r18
    2d1e:	7e 91       	ld	r23, -X
    2d20:	73 95       	inc	r23
    2d22:	7a 33       	cpi	r23, 0x3A	; 58
    2d24:	08 f0       	brcs	.+2      	; 0x2d28 <__ftoa_engine+0x180>
    2d26:	70 e3       	ldi	r23, 0x30	; 48
    2d28:	7c 93       	st	X, r23
    2d2a:	20 13       	cpse	r18, r16
    2d2c:	b8 f7       	brcc	.-18     	; 0x2d1c <__ftoa_engine+0x174>
    2d2e:	7e 91       	ld	r23, -X
    2d30:	70 61       	ori	r23, 0x10	; 16
    2d32:	7d 93       	st	X+, r23
    2d34:	30 f0       	brcs	.+12     	; 0x2d42 <__ftoa_engine+0x19a>
    2d36:	83 95       	inc	r24
    2d38:	71 e3       	ldi	r23, 0x31	; 49
    2d3a:	7d 93       	st	X+, r23
    2d3c:	70 e3       	ldi	r23, 0x30	; 48
    2d3e:	2a 95       	dec	r18
    2d40:	e1 f7       	brne	.-8      	; 0x2d3a <__ftoa_engine+0x192>
    2d42:	11 24       	eor	r1, r1
    2d44:	ef 90       	pop	r14
    2d46:	ff 90       	pop	r15
    2d48:	0f 91       	pop	r16
    2d4a:	1f 91       	pop	r17
    2d4c:	cf 91       	pop	r28
    2d4e:	df 91       	pop	r29
    2d50:	99 27       	eor	r25, r25
    2d52:	87 fd       	sbrc	r24, 7
    2d54:	90 95       	com	r25
    2d56:	08 95       	ret

00002d58 <strnlen_P>:
    2d58:	fc 01       	movw	r30, r24
    2d5a:	05 90       	lpm	r0, Z+
    2d5c:	61 50       	subi	r22, 0x01	; 1
    2d5e:	70 40       	sbci	r23, 0x00	; 0
    2d60:	01 10       	cpse	r0, r1
    2d62:	d8 f7       	brcc	.-10     	; 0x2d5a <strnlen_P+0x2>
    2d64:	80 95       	com	r24
    2d66:	90 95       	com	r25
    2d68:	8e 0f       	add	r24, r30
    2d6a:	9f 1f       	adc	r25, r31
    2d6c:	08 95       	ret

00002d6e <strnlen>:
    2d6e:	fc 01       	movw	r30, r24
    2d70:	61 50       	subi	r22, 0x01	; 1
    2d72:	70 40       	sbci	r23, 0x00	; 0
    2d74:	01 90       	ld	r0, Z+
    2d76:	01 10       	cpse	r0, r1
    2d78:	d8 f7       	brcc	.-10     	; 0x2d70 <strnlen+0x2>
    2d7a:	80 95       	com	r24
    2d7c:	90 95       	com	r25
    2d7e:	8e 0f       	add	r24, r30
    2d80:	9f 1f       	adc	r25, r31
    2d82:	08 95       	ret

00002d84 <fputc>:
    2d84:	0f 93       	push	r16
    2d86:	1f 93       	push	r17
    2d88:	cf 93       	push	r28
    2d8a:	df 93       	push	r29
    2d8c:	fb 01       	movw	r30, r22
    2d8e:	23 81       	ldd	r18, Z+3	; 0x03
    2d90:	21 fd       	sbrc	r18, 1
    2d92:	03 c0       	rjmp	.+6      	; 0x2d9a <fputc+0x16>
    2d94:	8f ef       	ldi	r24, 0xFF	; 255
    2d96:	9f ef       	ldi	r25, 0xFF	; 255
    2d98:	2c c0       	rjmp	.+88     	; 0x2df2 <fputc+0x6e>
    2d9a:	22 ff       	sbrs	r18, 2
    2d9c:	16 c0       	rjmp	.+44     	; 0x2dca <fputc+0x46>
    2d9e:	46 81       	ldd	r20, Z+6	; 0x06
    2da0:	57 81       	ldd	r21, Z+7	; 0x07
    2da2:	24 81       	ldd	r18, Z+4	; 0x04
    2da4:	35 81       	ldd	r19, Z+5	; 0x05
    2da6:	42 17       	cp	r20, r18
    2da8:	53 07       	cpc	r21, r19
    2daa:	44 f4       	brge	.+16     	; 0x2dbc <fputc+0x38>
    2dac:	a0 81       	ld	r26, Z
    2dae:	b1 81       	ldd	r27, Z+1	; 0x01
    2db0:	9d 01       	movw	r18, r26
    2db2:	2f 5f       	subi	r18, 0xFF	; 255
    2db4:	3f 4f       	sbci	r19, 0xFF	; 255
    2db6:	31 83       	std	Z+1, r19	; 0x01
    2db8:	20 83       	st	Z, r18
    2dba:	8c 93       	st	X, r24
    2dbc:	26 81       	ldd	r18, Z+6	; 0x06
    2dbe:	37 81       	ldd	r19, Z+7	; 0x07
    2dc0:	2f 5f       	subi	r18, 0xFF	; 255
    2dc2:	3f 4f       	sbci	r19, 0xFF	; 255
    2dc4:	37 83       	std	Z+7, r19	; 0x07
    2dc6:	26 83       	std	Z+6, r18	; 0x06
    2dc8:	14 c0       	rjmp	.+40     	; 0x2df2 <fputc+0x6e>
    2dca:	8b 01       	movw	r16, r22
    2dcc:	ec 01       	movw	r28, r24
    2dce:	fb 01       	movw	r30, r22
    2dd0:	00 84       	ldd	r0, Z+8	; 0x08
    2dd2:	f1 85       	ldd	r31, Z+9	; 0x09
    2dd4:	e0 2d       	mov	r30, r0
    2dd6:	09 95       	icall
    2dd8:	89 2b       	or	r24, r25
    2dda:	e1 f6       	brne	.-72     	; 0x2d94 <fputc+0x10>
    2ddc:	d8 01       	movw	r26, r16
    2dde:	16 96       	adiw	r26, 0x06	; 6
    2de0:	8d 91       	ld	r24, X+
    2de2:	9c 91       	ld	r25, X
    2de4:	17 97       	sbiw	r26, 0x07	; 7
    2de6:	01 96       	adiw	r24, 0x01	; 1
    2de8:	17 96       	adiw	r26, 0x07	; 7
    2dea:	9c 93       	st	X, r25
    2dec:	8e 93       	st	-X, r24
    2dee:	16 97       	sbiw	r26, 0x06	; 6
    2df0:	ce 01       	movw	r24, r28
    2df2:	df 91       	pop	r29
    2df4:	cf 91       	pop	r28
    2df6:	1f 91       	pop	r17
    2df8:	0f 91       	pop	r16
    2dfa:	08 95       	ret

00002dfc <__ultoa_invert>:
    2dfc:	fa 01       	movw	r30, r20
    2dfe:	aa 27       	eor	r26, r26
    2e00:	28 30       	cpi	r18, 0x08	; 8
    2e02:	51 f1       	breq	.+84     	; 0x2e58 <__ultoa_invert+0x5c>
    2e04:	20 31       	cpi	r18, 0x10	; 16
    2e06:	81 f1       	breq	.+96     	; 0x2e68 <__ultoa_invert+0x6c>
    2e08:	e8 94       	clt
    2e0a:	6f 93       	push	r22
    2e0c:	6e 7f       	andi	r22, 0xFE	; 254
    2e0e:	6e 5f       	subi	r22, 0xFE	; 254
    2e10:	7f 4f       	sbci	r23, 0xFF	; 255
    2e12:	8f 4f       	sbci	r24, 0xFF	; 255
    2e14:	9f 4f       	sbci	r25, 0xFF	; 255
    2e16:	af 4f       	sbci	r26, 0xFF	; 255
    2e18:	b1 e0       	ldi	r27, 0x01	; 1
    2e1a:	3e d0       	rcall	.+124    	; 0x2e98 <__ultoa_invert+0x9c>
    2e1c:	b4 e0       	ldi	r27, 0x04	; 4
    2e1e:	3c d0       	rcall	.+120    	; 0x2e98 <__ultoa_invert+0x9c>
    2e20:	67 0f       	add	r22, r23
    2e22:	78 1f       	adc	r23, r24
    2e24:	89 1f       	adc	r24, r25
    2e26:	9a 1f       	adc	r25, r26
    2e28:	a1 1d       	adc	r26, r1
    2e2a:	68 0f       	add	r22, r24
    2e2c:	79 1f       	adc	r23, r25
    2e2e:	8a 1f       	adc	r24, r26
    2e30:	91 1d       	adc	r25, r1
    2e32:	a1 1d       	adc	r26, r1
    2e34:	6a 0f       	add	r22, r26
    2e36:	71 1d       	adc	r23, r1
    2e38:	81 1d       	adc	r24, r1
    2e3a:	91 1d       	adc	r25, r1
    2e3c:	a1 1d       	adc	r26, r1
    2e3e:	20 d0       	rcall	.+64     	; 0x2e80 <__ultoa_invert+0x84>
    2e40:	09 f4       	brne	.+2      	; 0x2e44 <__ultoa_invert+0x48>
    2e42:	68 94       	set
    2e44:	3f 91       	pop	r19
    2e46:	2a e0       	ldi	r18, 0x0A	; 10
    2e48:	26 9f       	mul	r18, r22
    2e4a:	11 24       	eor	r1, r1
    2e4c:	30 19       	sub	r19, r0
    2e4e:	30 5d       	subi	r19, 0xD0	; 208
    2e50:	31 93       	st	Z+, r19
    2e52:	de f6       	brtc	.-74     	; 0x2e0a <__ultoa_invert+0xe>
    2e54:	cf 01       	movw	r24, r30
    2e56:	08 95       	ret
    2e58:	46 2f       	mov	r20, r22
    2e5a:	47 70       	andi	r20, 0x07	; 7
    2e5c:	40 5d       	subi	r20, 0xD0	; 208
    2e5e:	41 93       	st	Z+, r20
    2e60:	b3 e0       	ldi	r27, 0x03	; 3
    2e62:	0f d0       	rcall	.+30     	; 0x2e82 <__ultoa_invert+0x86>
    2e64:	c9 f7       	brne	.-14     	; 0x2e58 <__ultoa_invert+0x5c>
    2e66:	f6 cf       	rjmp	.-20     	; 0x2e54 <__ultoa_invert+0x58>
    2e68:	46 2f       	mov	r20, r22
    2e6a:	4f 70       	andi	r20, 0x0F	; 15
    2e6c:	40 5d       	subi	r20, 0xD0	; 208
    2e6e:	4a 33       	cpi	r20, 0x3A	; 58
    2e70:	18 f0       	brcs	.+6      	; 0x2e78 <__ultoa_invert+0x7c>
    2e72:	49 5d       	subi	r20, 0xD9	; 217
    2e74:	31 fd       	sbrc	r19, 1
    2e76:	40 52       	subi	r20, 0x20	; 32
    2e78:	41 93       	st	Z+, r20
    2e7a:	02 d0       	rcall	.+4      	; 0x2e80 <__ultoa_invert+0x84>
    2e7c:	a9 f7       	brne	.-22     	; 0x2e68 <__ultoa_invert+0x6c>
    2e7e:	ea cf       	rjmp	.-44     	; 0x2e54 <__ultoa_invert+0x58>
    2e80:	b4 e0       	ldi	r27, 0x04	; 4
    2e82:	a6 95       	lsr	r26
    2e84:	97 95       	ror	r25
    2e86:	87 95       	ror	r24
    2e88:	77 95       	ror	r23
    2e8a:	67 95       	ror	r22
    2e8c:	ba 95       	dec	r27
    2e8e:	c9 f7       	brne	.-14     	; 0x2e82 <__ultoa_invert+0x86>
    2e90:	00 97       	sbiw	r24, 0x00	; 0
    2e92:	61 05       	cpc	r22, r1
    2e94:	71 05       	cpc	r23, r1
    2e96:	08 95       	ret
    2e98:	9b 01       	movw	r18, r22
    2e9a:	ac 01       	movw	r20, r24
    2e9c:	0a 2e       	mov	r0, r26
    2e9e:	06 94       	lsr	r0
    2ea0:	57 95       	ror	r21
    2ea2:	47 95       	ror	r20
    2ea4:	37 95       	ror	r19
    2ea6:	27 95       	ror	r18
    2ea8:	ba 95       	dec	r27
    2eaa:	c9 f7       	brne	.-14     	; 0x2e9e <__ultoa_invert+0xa2>
    2eac:	62 0f       	add	r22, r18
    2eae:	73 1f       	adc	r23, r19
    2eb0:	84 1f       	adc	r24, r20
    2eb2:	95 1f       	adc	r25, r21
    2eb4:	a0 1d       	adc	r26, r0
    2eb6:	08 95       	ret

00002eb8 <__prologue_saves__>:
    2eb8:	2f 92       	push	r2
    2eba:	3f 92       	push	r3
    2ebc:	4f 92       	push	r4
    2ebe:	5f 92       	push	r5
    2ec0:	6f 92       	push	r6
    2ec2:	7f 92       	push	r7
    2ec4:	8f 92       	push	r8
    2ec6:	9f 92       	push	r9
    2ec8:	af 92       	push	r10
    2eca:	bf 92       	push	r11
    2ecc:	cf 92       	push	r12
    2ece:	df 92       	push	r13
    2ed0:	ef 92       	push	r14
    2ed2:	ff 92       	push	r15
    2ed4:	0f 93       	push	r16
    2ed6:	1f 93       	push	r17
    2ed8:	cf 93       	push	r28
    2eda:	df 93       	push	r29
    2edc:	cd b7       	in	r28, 0x3d	; 61
    2ede:	de b7       	in	r29, 0x3e	; 62
    2ee0:	ca 1b       	sub	r28, r26
    2ee2:	db 0b       	sbc	r29, r27
    2ee4:	0f b6       	in	r0, 0x3f	; 63
    2ee6:	f8 94       	cli
    2ee8:	de bf       	out	0x3e, r29	; 62
    2eea:	0f be       	out	0x3f, r0	; 63
    2eec:	cd bf       	out	0x3d, r28	; 61
    2eee:	09 94       	ijmp

00002ef0 <__epilogue_restores__>:
    2ef0:	2a 88       	ldd	r2, Y+18	; 0x12
    2ef2:	39 88       	ldd	r3, Y+17	; 0x11
    2ef4:	48 88       	ldd	r4, Y+16	; 0x10
    2ef6:	5f 84       	ldd	r5, Y+15	; 0x0f
    2ef8:	6e 84       	ldd	r6, Y+14	; 0x0e
    2efa:	7d 84       	ldd	r7, Y+13	; 0x0d
    2efc:	8c 84       	ldd	r8, Y+12	; 0x0c
    2efe:	9b 84       	ldd	r9, Y+11	; 0x0b
    2f00:	aa 84       	ldd	r10, Y+10	; 0x0a
    2f02:	b9 84       	ldd	r11, Y+9	; 0x09
    2f04:	c8 84       	ldd	r12, Y+8	; 0x08
    2f06:	df 80       	ldd	r13, Y+7	; 0x07
    2f08:	ee 80       	ldd	r14, Y+6	; 0x06
    2f0a:	fd 80       	ldd	r15, Y+5	; 0x05
    2f0c:	0c 81       	ldd	r16, Y+4	; 0x04
    2f0e:	1b 81       	ldd	r17, Y+3	; 0x03
    2f10:	aa 81       	ldd	r26, Y+2	; 0x02
    2f12:	b9 81       	ldd	r27, Y+1	; 0x01
    2f14:	ce 0f       	add	r28, r30
    2f16:	d1 1d       	adc	r29, r1
    2f18:	0f b6       	in	r0, 0x3f	; 63
    2f1a:	f8 94       	cli
    2f1c:	de bf       	out	0x3e, r29	; 62
    2f1e:	0f be       	out	0x3f, r0	; 63
    2f20:	cd bf       	out	0x3d, r28	; 61
    2f22:	ed 01       	movw	r28, r26
    2f24:	08 95       	ret

00002f26 <_exit>:
    2f26:	f8 94       	cli

00002f28 <__stop_program>:
    2f28:	ff cf       	rjmp	.-2      	; 0x2f28 <__stop_program>
