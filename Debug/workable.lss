
workable.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000208  00800100  00001f98  0000202c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001f98  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000018  00800308  00800308  00002234  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002234  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002290  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  000022d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000016ee  00000000  00000000  000023c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000098a  00000000  00000000  00003aae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d1c  00000000  00000000  00004438  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002ec  00000000  00000000  00005154  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007d2  00000000  00000000  00005440  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f55  00000000  00000000  00005c12  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  00006b67  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b8 00 	jmp	0x170	; 0x170 <__ctors_end>
       4:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
       8:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
       c:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      10:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      14:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      18:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      1c:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      20:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      24:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      28:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      2c:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      30:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      34:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      38:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      3c:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      40:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      44:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      48:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      4c:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      50:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      54:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      58:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      5c:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      60:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      64:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      68:	0f 04       	cpc	r0, r15
      6a:	27 04       	cpc	r2, r7
      6c:	3f 04       	cpc	r3, r15
      6e:	57 04       	cpc	r5, r7
      70:	6f 04       	cpc	r6, r15
      72:	ca 04       	cpc	r12, r10
      74:	d9 04       	cpc	r13, r9

00000076 <__trampolines_end>:
      76:	00 40       	sbci	r16, 0x00	; 0
      78:	7a 10       	cpse	r7, r10
      7a:	f3 5a       	subi	r31, 0xA3	; 163
      7c:	00 a0       	ldd	r0, Z+32	; 0x20
      7e:	72 4e       	sbci	r23, 0xE2	; 226
      80:	18 09       	sbc	r17, r8
      82:	00 10       	cpse	r0, r0
      84:	a5 d4       	rcall	.+2378   	; 0x9d0 <__stack+0xd1>
      86:	e8 00       	.word	0x00e8	; ????
      88:	00 e8       	ldi	r16, 0x80	; 128
      8a:	76 48       	sbci	r23, 0x86	; 134
      8c:	17 00       	.word	0x0017	; ????
      8e:	00 e4       	ldi	r16, 0x40	; 64
      90:	0b 54       	subi	r16, 0x4B	; 75
      92:	02 00       	.word	0x0002	; ????
      94:	00 ca       	rjmp	.-3072   	; 0xfffff496 <__eeprom_end+0xff7ef496>
      96:	9a 3b       	cpi	r25, 0xBA	; 186
      98:	00 00       	nop
      9a:	00 e1       	ldi	r16, 0x10	; 16
      9c:	f5 05       	cpc	r31, r5
      9e:	00 00       	nop
      a0:	80 96       	adiw	r24, 0x20	; 32
      a2:	98 00       	.word	0x0098	; ????
      a4:	00 00       	nop
      a6:	40 42       	sbci	r20, 0x20	; 32
      a8:	0f 00       	.word	0x000f	; ????
      aa:	00 00       	nop
      ac:	a0 86       	std	Z+8, r10	; 0x08
      ae:	01 00       	.word	0x0001	; ????
      b0:	00 00       	nop
      b2:	10 27       	eor	r17, r16
      b4:	00 00       	nop
      b6:	00 00       	nop
      b8:	e8 03       	fmulsu	r22, r16
      ba:	00 00       	nop
      bc:	00 00       	nop
      be:	64 00       	.word	0x0064	; ????
      c0:	00 00       	nop
      c2:	00 00       	nop
      c4:	0a 00       	.word	0x000a	; ????
      c6:	00 00       	nop
      c8:	00 00       	nop
      ca:	01 00       	.word	0x0001	; ????
      cc:	00 00       	nop
      ce:	00 00       	nop
      d0:	2c 76       	andi	r18, 0x6C	; 108
      d2:	d8 88       	ldd	r13, Y+16	; 0x10
      d4:	dc 67       	ori	r29, 0x7C	; 124
      d6:	4f 08       	sbc	r4, r15
      d8:	23 df       	rcall	.-442    	; 0xffffff20 <__eeprom_end+0xff7eff20>
      da:	c1 df       	rcall	.-126    	; 0x5e <__SREG__+0x1f>
      dc:	ae 59       	subi	r26, 0x9E	; 158
      de:	e1 b1       	in	r30, 0x01	; 1
      e0:	b7 96       	adiw	r30, 0x27	; 39
      e2:	e5 e3       	ldi	r30, 0x35	; 53
      e4:	e4 53       	subi	r30, 0x34	; 52
      e6:	c6 3a       	cpi	r28, 0xA6	; 166
      e8:	e6 51       	subi	r30, 0x16	; 22
      ea:	99 76       	andi	r25, 0x69	; 105
      ec:	96 e8       	ldi	r25, 0x86	; 134
      ee:	e6 c2       	rjmp	.+1484   	; 0x6bc <get_tank_capacity+0x16>
      f0:	84 26       	eor	r8, r20
      f2:	eb 89       	ldd	r30, Y+19	; 0x13
      f4:	8c 9b       	sbis	0x11, 4	; 17
      f6:	62 ed       	ldi	r22, 0xD2	; 210
      f8:	40 7c       	andi	r20, 0xC0	; 192
      fa:	6f fc       	.word	0xfc6f	; ????
      fc:	ef bc       	out	0x2f, r14	; 47
      fe:	9c 9f       	mul	r25, r28
     100:	40 f2       	brcs	.-112    	; 0x92 <__trampolines_end+0x1c>
     102:	ba a5       	ldd	r27, Y+42	; 0x2a
     104:	6f a5       	ldd	r22, Y+47	; 0x2f
     106:	f4 90       	lpm	r15, Z
     108:	05 5a       	subi	r16, 0xA5	; 165
     10a:	2a f7       	brpl	.-54     	; 0xd6 <__trampolines_end+0x60>
     10c:	5c 93       	st	X, r21
     10e:	6b 6c       	ori	r22, 0xCB	; 203
     110:	f9 67       	ori	r31, 0x79	; 121
     112:	6d c1       	rjmp	.+730    	; 0x3ee <DS18B20_write_bit+0x3a>
     114:	1b fc       	.word	0xfc1b	; ????
     116:	e0 e4       	ldi	r30, 0x40	; 64
     118:	0d 47       	sbci	r16, 0x7D	; 125
     11a:	fe f5       	brtc	.+126    	; 0x19a <.do_clear_bss_loop>
     11c:	20 e6       	ldi	r18, 0x60	; 96
     11e:	b5 00       	.word	0x00b5	; ????
     120:	d0 ed       	ldi	r29, 0xD0	; 208
     122:	90 2e       	mov	r9, r16
     124:	03 00       	.word	0x0003	; ????
     126:	94 35       	cpi	r25, 0x54	; 84
     128:	77 05       	cpc	r23, r7
     12a:	00 80       	ld	r0, Z
     12c:	84 1e       	adc	r8, r20
     12e:	08 00       	.word	0x0008	; ????
     130:	00 20       	and	r0, r0
     132:	4e 0a       	sbc	r4, r30
     134:	00 00       	nop
     136:	00 c8       	rjmp	.-4096   	; 0xfffff138 <__eeprom_end+0xff7ef138>
     138:	0c 33       	cpi	r16, 0x3C	; 60
     13a:	33 33       	cpi	r19, 0x33	; 51
     13c:	33 0f       	add	r19, r19
     13e:	98 6e       	ori	r25, 0xE8	; 232
     140:	12 83       	std	Z+2, r17	; 0x02
     142:	11 41       	sbci	r17, 0x11	; 17
     144:	ef 8d       	ldd	r30, Y+31	; 0x1f
     146:	21 14       	cp	r2, r1
     148:	89 3b       	cpi	r24, 0xB9	; 185
     14a:	e6 55       	subi	r30, 0x56	; 86
     14c:	16 cf       	rjmp	.-468    	; 0xffffff7a <__eeprom_end+0xff7eff7a>
     14e:	fe e6       	ldi	r31, 0x6E	; 110
     150:	db 18       	sub	r13, r11
     152:	d1 84       	ldd	r13, Z+9	; 0x09
     154:	4b 38       	cpi	r20, 0x8B	; 139
     156:	1b f7       	brvc	.-58     	; 0x11e <__trampolines_end+0xa8>
     158:	7c 1d       	adc	r23, r12
     15a:	90 1d       	adc	r25, r0
     15c:	a4 bb       	out	0x14, r26	; 20
     15e:	e4 24       	eor	r14, r4
     160:	20 32       	cpi	r18, 0x20	; 32
     162:	84 72       	andi	r24, 0x24	; 36
     164:	5e 22       	and	r5, r30
     166:	81 00       	.word	0x0081	; ????
     168:	c9 f1       	breq	.+114    	; 0x1dc <format_float+0x2e>
     16a:	24 ec       	ldi	r18, 0xC4	; 196
     16c:	a1 e5       	ldi	r26, 0x51	; 81
     16e:	3d 27       	eor	r19, r29

00000170 <__ctors_end>:
     170:	11 24       	eor	r1, r1
     172:	1f be       	out	0x3f, r1	; 63
     174:	cf ef       	ldi	r28, 0xFF	; 255
     176:	d8 e0       	ldi	r29, 0x08	; 8
     178:	de bf       	out	0x3e, r29	; 62
     17a:	cd bf       	out	0x3d, r28	; 61

0000017c <__do_copy_data>:
     17c:	13 e0       	ldi	r17, 0x03	; 3
     17e:	a0 e0       	ldi	r26, 0x00	; 0
     180:	b1 e0       	ldi	r27, 0x01	; 1
     182:	e8 e9       	ldi	r30, 0x98	; 152
     184:	ff e1       	ldi	r31, 0x1F	; 31
     186:	02 c0       	rjmp	.+4      	; 0x18c <__do_copy_data+0x10>
     188:	05 90       	lpm	r0, Z+
     18a:	0d 92       	st	X+, r0
     18c:	a8 30       	cpi	r26, 0x08	; 8
     18e:	b1 07       	cpc	r27, r17
     190:	d9 f7       	brne	.-10     	; 0x188 <__do_copy_data+0xc>

00000192 <__do_clear_bss>:
     192:	23 e0       	ldi	r18, 0x03	; 3
     194:	a8 e0       	ldi	r26, 0x08	; 8
     196:	b3 e0       	ldi	r27, 0x03	; 3
     198:	01 c0       	rjmp	.+2      	; 0x19c <.do_clear_bss_start>

0000019a <.do_clear_bss_loop>:
     19a:	1d 92       	st	X+, r1

0000019c <.do_clear_bss_start>:
     19c:	a0 32       	cpi	r26, 0x20	; 32
     19e:	b2 07       	cpc	r27, r18
     1a0:	e1 f7       	brne	.-8      	; 0x19a <.do_clear_bss_loop>
     1a2:	0e 94 18 08 	call	0x1030	; 0x1030 <main>
     1a6:	0c 94 ca 0f 	jmp	0x1f94	; 0x1f94 <_exit>

000001aa <__bad_interrupt>:
     1aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ae <format_float>:
{
    while (*str)
    {
        LCD_1602A_load_data(*str++);
    }
}
     1ae:	af 92       	push	r10
     1b0:	bf 92       	push	r11
     1b2:	cf 92       	push	r12
     1b4:	df 92       	push	r13
     1b6:	ef 92       	push	r14
     1b8:	ff 92       	push	r15
     1ba:	0f 93       	push	r16
     1bc:	1f 93       	push	r17
     1be:	cf 93       	push	r28
     1c0:	df 93       	push	r29
     1c2:	cd b7       	in	r28, 0x3d	; 61
     1c4:	de b7       	in	r29, 0x3e	; 62
     1c6:	68 97       	sbiw	r28, 0x18	; 24
     1c8:	0f b6       	in	r0, 0x3f	; 63
     1ca:	f8 94       	cli
     1cc:	de bf       	out	0x3e, r29	; 62
     1ce:	0f be       	out	0x3f, r0	; 63
     1d0:	cd bf       	out	0x3d, r28	; 61
     1d2:	d8 2e       	mov	r13, r24
     1d4:	c9 2e       	mov	r12, r25
     1d6:	b6 2e       	mov	r11, r22
     1d8:	a7 2e       	mov	r10, r23
     1da:	ca 01       	movw	r24, r20
     1dc:	b9 01       	movw	r22, r18
     1de:	20 2f       	mov	r18, r16
     1e0:	8e 01       	movw	r16, r28
     1e2:	0f 5f       	subi	r16, 0xFF	; 255
     1e4:	1f 4f       	sbci	r17, 0xFF	; 255
     1e6:	40 e0       	ldi	r20, 0x00	; 0
     1e8:	0e 94 80 0a 	call	0x1500	; 0x1500 <dtostrf>
     1ec:	e1 14       	cp	r14, r1
     1ee:	f1 04       	cpc	r15, r1
     1f0:	c1 f0       	breq	.+48     	; 0x222 <format_float+0x74>
     1f2:	f7 01       	movw	r30, r14
     1f4:	80 81       	ld	r24, Z
     1f6:	88 23       	and	r24, r24
     1f8:	a1 f0       	breq	.+40     	; 0x222 <format_float+0x74>
     1fa:	ff 92       	push	r15
     1fc:	ef 92       	push	r14
     1fe:	1f 93       	push	r17
     200:	0f 93       	push	r16
     202:	84 e4       	ldi	r24, 0x44	; 68
     204:	91 e0       	ldi	r25, 0x01	; 1
     206:	9f 93       	push	r25
     208:	8f 93       	push	r24
     20a:	af 92       	push	r10
     20c:	bf 92       	push	r11
     20e:	cf 92       	push	r12
     210:	df 92       	push	r13
     212:	0e 94 a0 0a 	call	0x1540	; 0x1540 <snprintf>
     216:	0f b6       	in	r0, 0x3f	; 63
     218:	f8 94       	cli
     21a:	de bf       	out	0x3e, r29	; 62
     21c:	0f be       	out	0x3f, r0	; 63
     21e:	cd bf       	out	0x3d, r28	; 61
     220:	13 c0       	rjmp	.+38     	; 0x248 <format_float+0x9a>
     222:	ce 01       	movw	r24, r28
     224:	01 96       	adiw	r24, 0x01	; 1
     226:	9f 93       	push	r25
     228:	8f 93       	push	r24
     22a:	87 e4       	ldi	r24, 0x47	; 71
     22c:	91 e0       	ldi	r25, 0x01	; 1
     22e:	9f 93       	push	r25
     230:	8f 93       	push	r24
     232:	af 92       	push	r10
     234:	bf 92       	push	r11
     236:	cf 92       	push	r12
     238:	df 92       	push	r13
     23a:	0e 94 a0 0a 	call	0x1540	; 0x1540 <snprintf>
     23e:	0f b6       	in	r0, 0x3f	; 63
     240:	f8 94       	cli
     242:	de bf       	out	0x3e, r29	; 62
     244:	0f be       	out	0x3f, r0	; 63
     246:	cd bf       	out	0x3d, r28	; 61
     248:	68 96       	adiw	r28, 0x18	; 24
     24a:	0f b6       	in	r0, 0x3f	; 63
     24c:	f8 94       	cli
     24e:	de bf       	out	0x3e, r29	; 62
     250:	0f be       	out	0x3f, r0	; 63
     252:	cd bf       	out	0x3d, r28	; 61
     254:	df 91       	pop	r29
     256:	cf 91       	pop	r28
     258:	1f 91       	pop	r17
     25a:	0f 91       	pop	r16
     25c:	ff 90       	pop	r15
     25e:	ef 90       	pop	r14
     260:	df 90       	pop	r13
     262:	cf 90       	pop	r12
     264:	bf 90       	pop	r11
     266:	af 90       	pop	r10
     268:	08 95       	ret

0000026a <LCD_1602A_latch>:
     26a:	85 b1       	in	r24, 0x05	; 5
     26c:	81 60       	ori	r24, 0x01	; 1
     26e:	85 b9       	out	0x05, r24	; 5
     270:	85 e0       	ldi	r24, 0x05	; 5
     272:	8a 95       	dec	r24
     274:	f1 f7       	brne	.-4      	; 0x272 <LCD_1602A_latch+0x8>
     276:	00 00       	nop
     278:	85 b1       	in	r24, 0x05	; 5
     27a:	8e 7f       	andi	r24, 0xFE	; 254
     27c:	85 b9       	out	0x05, r24	; 5
     27e:	8f e8       	ldi	r24, 0x8F	; 143
     280:	91 e0       	ldi	r25, 0x01	; 1
     282:	01 97       	sbiw	r24, 0x01	; 1
     284:	f1 f7       	brne	.-4      	; 0x282 <LCD_1602A_latch+0x18>
     286:	00 c0       	rjmp	.+0      	; 0x288 <LCD_1602A_latch+0x1e>
     288:	00 00       	nop
     28a:	08 95       	ret

0000028c <LCD_1602A_send_nibble>:
     28c:	9b b1       	in	r25, 0x0b	; 11
     28e:	9f 70       	andi	r25, 0x0F	; 15
     290:	9b b9       	out	0x0b, r25	; 11
     292:	80 ff       	sbrs	r24, 0
     294:	03 c0       	rjmp	.+6      	; 0x29c <LCD_1602A_send_nibble+0x10>
     296:	9b b1       	in	r25, 0x0b	; 11
     298:	90 61       	ori	r25, 0x10	; 16
     29a:	9b b9       	out	0x0b, r25	; 11
     29c:	81 ff       	sbrs	r24, 1
     29e:	03 c0       	rjmp	.+6      	; 0x2a6 <LCD_1602A_send_nibble+0x1a>
     2a0:	9b b1       	in	r25, 0x0b	; 11
     2a2:	90 62       	ori	r25, 0x20	; 32
     2a4:	9b b9       	out	0x0b, r25	; 11
     2a6:	82 ff       	sbrs	r24, 2
     2a8:	03 c0       	rjmp	.+6      	; 0x2b0 <LCD_1602A_send_nibble+0x24>
     2aa:	9b b1       	in	r25, 0x0b	; 11
     2ac:	90 64       	ori	r25, 0x40	; 64
     2ae:	9b b9       	out	0x0b, r25	; 11
     2b0:	83 ff       	sbrs	r24, 3
     2b2:	03 c0       	rjmp	.+6      	; 0x2ba <LCD_1602A_send_nibble+0x2e>
     2b4:	8b b1       	in	r24, 0x0b	; 11
     2b6:	80 68       	ori	r24, 0x80	; 128
     2b8:	8b b9       	out	0x0b, r24	; 11
     2ba:	0e 94 35 01 	call	0x26a	; 0x26a <LCD_1602A_latch>
     2be:	08 95       	ret

000002c0 <LCD_1602A_load_command>:
     2c0:	cf 93       	push	r28
     2c2:	c8 2f       	mov	r28, r24
     2c4:	85 b1       	in	r24, 0x05	; 5
     2c6:	8d 7f       	andi	r24, 0xFD	; 253
     2c8:	85 b9       	out	0x05, r24	; 5
     2ca:	8c 2f       	mov	r24, r28
     2cc:	82 95       	swap	r24
     2ce:	8f 70       	andi	r24, 0x0F	; 15
     2d0:	0e 94 46 01 	call	0x28c	; 0x28c <LCD_1602A_send_nibble>
     2d4:	8c 2f       	mov	r24, r28
     2d6:	8f 70       	andi	r24, 0x0F	; 15
     2d8:	0e 94 46 01 	call	0x28c	; 0x28c <LCD_1602A_send_nibble>
     2dc:	cf 91       	pop	r28
     2de:	08 95       	ret

000002e0 <LCD_1602A_load_data>:
     2e0:	cf 93       	push	r28
     2e2:	c8 2f       	mov	r28, r24
     2e4:	85 b1       	in	r24, 0x05	; 5
     2e6:	82 60       	ori	r24, 0x02	; 2
     2e8:	85 b9       	out	0x05, r24	; 5
     2ea:	8c 2f       	mov	r24, r28
     2ec:	82 95       	swap	r24
     2ee:	8f 70       	andi	r24, 0x0F	; 15
     2f0:	0e 94 46 01 	call	0x28c	; 0x28c <LCD_1602A_send_nibble>
     2f4:	8c 2f       	mov	r24, r28
     2f6:	8f 70       	andi	r24, 0x0F	; 15
     2f8:	0e 94 46 01 	call	0x28c	; 0x28c <LCD_1602A_send_nibble>
     2fc:	cf 91       	pop	r28
     2fe:	08 95       	ret

00000300 <LCD_1602A_init>:
    params: void
    returns: void
*/
void LCD_1602A_init(void)
{
    LCD_1602A_CTRL_DDR |= (1 << LCD_1602A_RS) | (1 << LCD_1602A_EN);
     300:	84 b1       	in	r24, 0x04	; 4
     302:	83 60       	ori	r24, 0x03	; 3
     304:	84 b9       	out	0x04, r24	; 4
    LCD_1602A_DATA_DDR |= (1 << LCD_1602A_D4) | (1 << LCD_1602A_D5) | (1 << LCD_1602A_D6) | (1 << LCD_1602A_D7);
     306:	8a b1       	in	r24, 0x0a	; 10
     308:	80 6f       	ori	r24, 0xF0	; 240
     30a:	8a b9       	out	0x0a, r24	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     30c:	2f ef       	ldi	r18, 0xFF	; 255
     30e:	89 ef       	ldi	r24, 0xF9	; 249
     310:	90 e0       	ldi	r25, 0x00	; 0
     312:	21 50       	subi	r18, 0x01	; 1
     314:	80 40       	sbci	r24, 0x00	; 0
     316:	90 40       	sbci	r25, 0x00	; 0
     318:	e1 f7       	brne	.-8      	; 0x312 <LCD_1602A_init+0x12>
     31a:	00 c0       	rjmp	.+0      	; 0x31c <LCD_1602A_init+0x1c>
     31c:	00 00       	nop

    _delay_ms(20); // Wait for LCD power up
    LCD_1602A_send_nibble(DISPLAY_WAIT_POWER_UP);
     31e:	83 e0       	ldi	r24, 0x03	; 3
     320:	0e 94 46 01 	call	0x28c	; 0x28c <LCD_1602A_send_nibble>
     324:	8f e1       	ldi	r24, 0x1F	; 31
     326:	9e e4       	ldi	r25, 0x4E	; 78
     328:	01 97       	sbiw	r24, 0x01	; 1
     32a:	f1 f7       	brne	.-4      	; 0x328 <LCD_1602A_init+0x28>
     32c:	00 c0       	rjmp	.+0      	; 0x32e <LCD_1602A_init+0x2e>
     32e:	00 00       	nop
    _delay_ms(5);
    LCD_1602A_send_nibble(DISPLAY_WAIT_POWER_UP);
     330:	83 e0       	ldi	r24, 0x03	; 3
     332:	0e 94 46 01 	call	0x28c	; 0x28c <LCD_1602A_send_nibble>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     336:	87 e5       	ldi	r24, 0x57	; 87
     338:	92 e0       	ldi	r25, 0x02	; 2
     33a:	01 97       	sbiw	r24, 0x01	; 1
     33c:	f1 f7       	brne	.-4      	; 0x33a <LCD_1602A_init+0x3a>
     33e:	00 c0       	rjmp	.+0      	; 0x340 <LCD_1602A_init+0x40>
     340:	00 00       	nop
    _delay_us(150);
    LCD_1602A_send_nibble(DISPLAY_WAIT_POWER_UP);
     342:	83 e0       	ldi	r24, 0x03	; 3
     344:	0e 94 46 01 	call	0x28c	; 0x28c <LCD_1602A_send_nibble>

    LCD_1602A_send_nibble(DISPLAY_4_BIT_MODE); // Switch to 4-bit mode
     348:	82 e0       	ldi	r24, 0x02	; 2
     34a:	0e 94 46 01 	call	0x28c	; 0x28c <LCD_1602A_send_nibble>

    LCD_1602A_load_command(DISPLAY_FUNCTION_SET_4BIT_2LINE);
     34e:	88 e2       	ldi	r24, 0x28	; 40
     350:	0e 94 60 01 	call	0x2c0	; 0x2c0 <LCD_1602A_load_command>
    LCD_1602A_load_command(DISPLAY_DISPLAY_ON_CURSOR_OFF);
     354:	8c e0       	ldi	r24, 0x0C	; 12
     356:	0e 94 60 01 	call	0x2c0	; 0x2c0 <LCD_1602A_load_command>
    LCD_1602A_load_command(DISPLAY_ENTRY_MODE_SET);
     35a:	86 e0       	ldi	r24, 0x06	; 6
     35c:	0e 94 60 01 	call	0x2c0	; 0x2c0 <LCD_1602A_load_command>
    LCD_1602A_load_command(DISPLAY_CLEAR_SCREEN);
     360:	81 e0       	ldi	r24, 0x01	; 1
     362:	0e 94 60 01 	call	0x2c0	; 0x2c0 <LCD_1602A_load_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     366:	8f e3       	ldi	r24, 0x3F	; 63
     368:	9f e1       	ldi	r25, 0x1F	; 31
     36a:	01 97       	sbiw	r24, 0x01	; 1
     36c:	f1 f7       	brne	.-4      	; 0x36a <LCD_1602A_init+0x6a>
     36e:	00 c0       	rjmp	.+0      	; 0x370 <LCD_1602A_init+0x70>
     370:	00 00       	nop
     372:	08 95       	ret

00000374 <DS18B20_reset>:
    params: void
    returns: uint8_t - 1 if presence pulse detected, 0 otherwise
*/
uint8_t DS18B20_reset(void)
{
    DS18B20_OUTPUT();
     374:	87 b1       	in	r24, 0x07	; 7
     376:	81 60       	ori	r24, 0x01	; 1
     378:	87 b9       	out	0x07, r24	; 7
    DS18B20_LOW();
     37a:	88 b1       	in	r24, 0x08	; 8
     37c:	8e 7f       	andi	r24, 0xFE	; 254
     37e:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     380:	8f e7       	ldi	r24, 0x7F	; 127
     382:	97 e0       	ldi	r25, 0x07	; 7
     384:	01 97       	sbiw	r24, 0x01	; 1
     386:	f1 f7       	brne	.-4      	; 0x384 <DS18B20_reset+0x10>
     388:	00 c0       	rjmp	.+0      	; 0x38a <DS18B20_reset+0x16>
     38a:	00 00       	nop
    _delay_us(480);
    DS18B20_INPUT();
     38c:	87 b1       	in	r24, 0x07	; 7
     38e:	8e 7f       	andi	r24, 0xFE	; 254
     390:	87 b9       	out	0x07, r24	; 7
     392:	ef ee       	ldi	r30, 0xEF	; 239
     394:	f0 e0       	ldi	r31, 0x00	; 0
     396:	31 97       	sbiw	r30, 0x01	; 1
     398:	f1 f7       	brne	.-4      	; 0x396 <DS18B20_reset+0x22>
     39a:	00 c0       	rjmp	.+0      	; 0x39c <DS18B20_reset+0x28>
     39c:	00 00       	nop
    _delay_us(60);

    uint8_t presence = !(DS18B20_PIN & (1 << DS18B20_DQ));
     39e:	96 b1       	in	r25, 0x06	; 6
     3a0:	81 e0       	ldi	r24, 0x01	; 1
     3a2:	89 27       	eor	r24, r25
     3a4:	81 70       	andi	r24, 0x01	; 1
     3a6:	ef e8       	ldi	r30, 0x8F	; 143
     3a8:	f6 e0       	ldi	r31, 0x06	; 6
     3aa:	31 97       	sbiw	r30, 0x01	; 1
     3ac:	f1 f7       	brne	.-4      	; 0x3aa <DS18B20_reset+0x36>
     3ae:	00 c0       	rjmp	.+0      	; 0x3b0 <DS18B20_reset+0x3c>
     3b0:	00 00       	nop
    _delay_us(420);
    return presence;
}
     3b2:	08 95       	ret

000003b4 <DS18B20_write_bit>:
    params: uint8_t bit - the bit to write (0 or 1)
    returns: void
*/
void DS18B20_write_bit(uint8_t bit)
{
    DS18B20_OUTPUT();
     3b4:	97 b1       	in	r25, 0x07	; 7
     3b6:	91 60       	ori	r25, 0x01	; 1
     3b8:	97 b9       	out	0x07, r25	; 7
    DS18B20_LOW();
     3ba:	98 b1       	in	r25, 0x08	; 8
     3bc:	9e 7f       	andi	r25, 0xFE	; 254
     3be:	98 b9       	out	0x08, r25	; 8
    if (bit)
     3c0:	88 23       	and	r24, r24
     3c2:	71 f0       	breq	.+28     	; 0x3e0 <DS18B20_write_bit+0x2c>
     3c4:	85 e0       	ldi	r24, 0x05	; 5
     3c6:	8a 95       	dec	r24
     3c8:	f1 f7       	brne	.-4      	; 0x3c6 <DS18B20_write_bit+0x12>
     3ca:	00 00       	nop
    {
        _delay_us(1);
        DS18B20_INPUT();
     3cc:	87 b1       	in	r24, 0x07	; 7
     3ce:	8e 7f       	andi	r24, 0xFE	; 254
     3d0:	87 b9       	out	0x07, r24	; 7
     3d2:	8f ee       	ldi	r24, 0xEF	; 239
     3d4:	90 e0       	ldi	r25, 0x00	; 0
     3d6:	01 97       	sbiw	r24, 0x01	; 1
     3d8:	f1 f7       	brne	.-4      	; 0x3d6 <DS18B20_write_bit+0x22>
     3da:	00 c0       	rjmp	.+0      	; 0x3dc <DS18B20_write_bit+0x28>
     3dc:	00 00       	nop
     3de:	08 95       	ret
     3e0:	8f ee       	ldi	r24, 0xEF	; 239
     3e2:	90 e0       	ldi	r25, 0x00	; 0
     3e4:	01 97       	sbiw	r24, 0x01	; 1
     3e6:	f1 f7       	brne	.-4      	; 0x3e4 <DS18B20_write_bit+0x30>
     3e8:	00 c0       	rjmp	.+0      	; 0x3ea <DS18B20_write_bit+0x36>
     3ea:	00 00       	nop
        _delay_us(60);
    }
    else
    {
        _delay_us(60);
        DS18B20_INPUT();
     3ec:	87 b1       	in	r24, 0x07	; 7
     3ee:	8e 7f       	andi	r24, 0xFE	; 254
     3f0:	87 b9       	out	0x07, r24	; 7
     3f2:	08 95       	ret

000003f4 <DS18B20_write_byte>:
    write a byte to the DS18B20 sensor
    params: uint8_t data - the byte to write
    returns: void
*/
void DS18B20_write_byte(uint8_t data)
{
     3f4:	cf 93       	push	r28
     3f6:	df 93       	push	r29
     3f8:	d8 2f       	mov	r29, r24
    for (uint8_t i = 0; i < 8; i++)
     3fa:	c0 e0       	ldi	r28, 0x00	; 0
     3fc:	06 c0       	rjmp	.+12     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
    {
        DS18B20_write_bit(data & 0x01);
     3fe:	8d 2f       	mov	r24, r29
     400:	81 70       	andi	r24, 0x01	; 1
     402:	0e 94 da 01 	call	0x3b4	; 0x3b4 <DS18B20_write_bit>
        data >>= 1;
     406:	d6 95       	lsr	r29
    params: uint8_t data - the byte to write
    returns: void
*/
void DS18B20_write_byte(uint8_t data)
{
    for (uint8_t i = 0; i < 8; i++)
     408:	cf 5f       	subi	r28, 0xFF	; 255
     40a:	c8 30       	cpi	r28, 0x08	; 8
     40c:	c0 f3       	brcs	.-16     	; 0x3fe <DS18B20_write_byte+0xa>
    {
        DS18B20_write_bit(data & 0x01);
        data >>= 1;
    }
}
     40e:	df 91       	pop	r29
     410:	cf 91       	pop	r28
     412:	08 95       	ret

00000414 <DS18B20_read_bit>:
    returns: uint8_t - the bit read (0 or 1)
*/
uint8_t DS18B20_read_bit(void)
{
    uint8_t bit;
    DS18B20_OUTPUT();
     414:	87 b1       	in	r24, 0x07	; 7
     416:	81 60       	ori	r24, 0x01	; 1
     418:	87 b9       	out	0x07, r24	; 7
    DS18B20_LOW();
     41a:	88 b1       	in	r24, 0x08	; 8
     41c:	8e 7f       	andi	r24, 0xFE	; 254
     41e:	88 b9       	out	0x08, r24	; 8
     420:	8a e0       	ldi	r24, 0x0A	; 10
     422:	8a 95       	dec	r24
     424:	f1 f7       	brne	.-4      	; 0x422 <DS18B20_read_bit+0xe>
     426:	00 c0       	rjmp	.+0      	; 0x428 <DS18B20_read_bit+0x14>
    _delay_us(2);
    DS18B20_INPUT();
     428:	87 b1       	in	r24, 0x07	; 7
     42a:	8e 7f       	andi	r24, 0xFE	; 254
     42c:	87 b9       	out	0x07, r24	; 7
     42e:	e5 e3       	ldi	r30, 0x35	; 53
     430:	ea 95       	dec	r30
     432:	f1 f7       	brne	.-4      	; 0x430 <DS18B20_read_bit+0x1c>
     434:	00 00       	nop
    _delay_us(10);
    bit = (DS18B20_PIN & (1 << DS18B20_DQ)) ? 1 : 0;
     436:	86 b1       	in	r24, 0x06	; 6
     438:	81 70       	andi	r24, 0x01	; 1
     43a:	e7 ec       	ldi	r30, 0xC7	; 199
     43c:	f0 e0       	ldi	r31, 0x00	; 0
     43e:	31 97       	sbiw	r30, 0x01	; 1
     440:	f1 f7       	brne	.-4      	; 0x43e <DS18B20_read_bit+0x2a>
     442:	00 c0       	rjmp	.+0      	; 0x444 <DS18B20_read_bit+0x30>
     444:	00 00       	nop
    _delay_us(50);
    return bit;
}
     446:	08 95       	ret

00000448 <DS18B20_read_byte>:
    read a byte from the DS18B20 sensor
    params: void
    returns: uint8_t - the byte read
*/
uint8_t DS18B20_read_byte(void)
{
     448:	cf 93       	push	r28
     44a:	df 93       	push	r29
    uint8_t data = 0;
    for (uint8_t i = 0; i < 8; i++)
     44c:	c0 e0       	ldi	r28, 0x00	; 0
    params: void
    returns: uint8_t - the byte read
*/
uint8_t DS18B20_read_byte(void)
{
    uint8_t data = 0;
     44e:	d0 e0       	ldi	r29, 0x00	; 0
    for (uint8_t i = 0; i < 8; i++)
     450:	06 c0       	rjmp	.+12     	; 0x45e <DS18B20_read_byte+0x16>
    {
        data >>= 1;
     452:	d6 95       	lsr	r29
        if (DS18B20_read_bit())
     454:	0e 94 0a 02 	call	0x414	; 0x414 <DS18B20_read_bit>
     458:	81 11       	cpse	r24, r1
            data |= 0x80;
     45a:	d0 68       	ori	r29, 0x80	; 128
    returns: uint8_t - the byte read
*/
uint8_t DS18B20_read_byte(void)
{
    uint8_t data = 0;
    for (uint8_t i = 0; i < 8; i++)
     45c:	cf 5f       	subi	r28, 0xFF	; 255
     45e:	c8 30       	cpi	r28, 0x08	; 8
     460:	c0 f3       	brcs	.-16     	; 0x452 <DS18B20_read_byte+0xa>
        data >>= 1;
        if (DS18B20_read_bit())
            data |= 0x80;
    }
    return data;
}
     462:	8d 2f       	mov	r24, r29
     464:	df 91       	pop	r29
     466:	cf 91       	pop	r28
     468:	08 95       	ret

0000046a <DS18B20_read_temperature>:
    read temperature from the DS18B20 sensor
    params: void
    returns: float - the temperature in degrees Celsius
*/
float DS18B20_read_temperature(void)
{
     46a:	cf 93       	push	r28
    uint8_t temp_l, temp_h;
    int16_t temp;

    DS18B20_reset();
     46c:	0e 94 ba 01 	call	0x374	; 0x374 <DS18B20_reset>
    DS18B20_write_byte(0xCC);
     470:	8c ec       	ldi	r24, 0xCC	; 204
     472:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <DS18B20_write_byte>
    DS18B20_write_byte(0x44);
     476:	84 e4       	ldi	r24, 0x44	; 68
     478:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <DS18B20_write_byte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     47c:	2f ef       	ldi	r18, 0xFF	; 255
     47e:	8e e9       	ldi	r24, 0x9E	; 158
     480:	94 e2       	ldi	r25, 0x24	; 36
     482:	21 50       	subi	r18, 0x01	; 1
     484:	80 40       	sbci	r24, 0x00	; 0
     486:	90 40       	sbci	r25, 0x00	; 0
     488:	e1 f7       	brne	.-8      	; 0x482 <DS18B20_read_temperature+0x18>
     48a:	00 c0       	rjmp	.+0      	; 0x48c <DS18B20_read_temperature+0x22>
     48c:	00 00       	nop
    _delay_ms(750);

    DS18B20_reset();
     48e:	0e 94 ba 01 	call	0x374	; 0x374 <DS18B20_reset>
    DS18B20_write_byte(0xCC);
     492:	8c ec       	ldi	r24, 0xCC	; 204
     494:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <DS18B20_write_byte>
    DS18B20_write_byte(0xBE);
     498:	8e eb       	ldi	r24, 0xBE	; 190
     49a:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <DS18B20_write_byte>

    temp_l = DS18B20_read_byte();
     49e:	0e 94 24 02 	call	0x448	; 0x448 <DS18B20_read_byte>
     4a2:	c8 2f       	mov	r28, r24
    temp_h = DS18B20_read_byte();
     4a4:	0e 94 24 02 	call	0x448	; 0x448 <DS18B20_read_byte>

    temp = (temp_h << 8) | temp_l;
     4a8:	68 2f       	mov	r22, r24
     4aa:	70 e0       	ldi	r23, 0x00	; 0
     4ac:	76 2f       	mov	r23, r22
     4ae:	66 27       	eor	r22, r22
     4b0:	6c 2b       	or	r22, r28

    return (float)temp / 16.0;
     4b2:	07 2e       	mov	r0, r23
     4b4:	00 0c       	add	r0, r0
     4b6:	88 0b       	sbc	r24, r24
     4b8:	99 0b       	sbc	r25, r25
     4ba:	0e 94 58 09 	call	0x12b0	; 0x12b0 <__floatsisf>
     4be:	20 e0       	ldi	r18, 0x00	; 0
     4c0:	30 e0       	ldi	r19, 0x00	; 0
     4c2:	40 e8       	ldi	r20, 0x80	; 128
     4c4:	5d e3       	ldi	r21, 0x3D	; 61
     4c6:	0e 94 0d 0a 	call	0x141a	; 0x141a <__mulsf3>
}
     4ca:	cf 91       	pop	r28
     4cc:	08 95       	ret

000004ce <HCSR04_init>:
    params: void
    returns: void
*/
void HCSR04_init(void)
{
    HCSR04_TRIG_DDR |= (1 << HCSR04_TRIG_PIN);
     4ce:	8a b1       	in	r24, 0x0a	; 10
     4d0:	84 60       	ori	r24, 0x04	; 4
     4d2:	8a b9       	out	0x0a, r24	; 10
    HCSR04_ECHO_DDR &= ~(1 << HCSR04_ECHO_PIN);
     4d4:	8a b1       	in	r24, 0x0a	; 10
     4d6:	87 7f       	andi	r24, 0xF7	; 247
     4d8:	8a b9       	out	0x0a, r24	; 10
     4da:	08 95       	ret

000004dc <HCSR04_trigger>:
    params: void
    returns: void
*/
void HCSR04_trigger(void)
{
    HCSR04_TRIG_PORT &= ~(1 << HCSR04_TRIG_PIN);
     4dc:	8b b1       	in	r24, 0x0b	; 11
     4de:	8b 7f       	andi	r24, 0xFB	; 251
     4e0:	8b b9       	out	0x0b, r24	; 11
     4e2:	2f ef       	ldi	r18, 0xFF	; 255
     4e4:	83 ec       	ldi	r24, 0xC3	; 195
     4e6:	99 e0       	ldi	r25, 0x09	; 9
     4e8:	21 50       	subi	r18, 0x01	; 1
     4ea:	80 40       	sbci	r24, 0x00	; 0
     4ec:	90 40       	sbci	r25, 0x00	; 0
     4ee:	e1 f7       	brne	.-8      	; 0x4e8 <HCSR04_trigger+0xc>
     4f0:	00 c0       	rjmp	.+0      	; 0x4f2 <HCSR04_trigger+0x16>
     4f2:	00 00       	nop
    _delay_ms(200);
    HCSR04_TRIG_PORT |= (1 << HCSR04_TRIG_PIN);
     4f4:	8b b1       	in	r24, 0x0b	; 11
     4f6:	84 60       	ori	r24, 0x04	; 4
     4f8:	8b b9       	out	0x0b, r24	; 11
     4fa:	2f ef       	ldi	r18, 0xFF	; 255
     4fc:	83 ec       	ldi	r24, 0xC3	; 195
     4fe:	99 e0       	ldi	r25, 0x09	; 9
     500:	21 50       	subi	r18, 0x01	; 1
     502:	80 40       	sbci	r24, 0x00	; 0
     504:	90 40       	sbci	r25, 0x00	; 0
     506:	e1 f7       	brne	.-8      	; 0x500 <HCSR04_trigger+0x24>
     508:	00 c0       	rjmp	.+0      	; 0x50a <HCSR04_trigger+0x2e>
     50a:	00 00       	nop
    _delay_ms(200);
    HCSR04_TRIG_PORT &= ~(1 << HCSR04_TRIG_PIN);
     50c:	8b b1       	in	r24, 0x0b	; 11
     50e:	8b 7f       	andi	r24, 0xFB	; 251
     510:	8b b9       	out	0x0b, r24	; 11
     512:	08 95       	ret

00000514 <HCSR04_read>:
*/
uint16_t HCSR04_read(void)
{
    uint32_t count = 0;

    while (!(HCSR04_ECHO_DEF_PIN & (1 << HCSR04_ECHO_PIN)));
     514:	4b 9b       	sbis	0x09, 3	; 9
     516:	fe cf       	rjmp	.-4      	; 0x514 <HCSR04_read>
     518:	60 e0       	ldi	r22, 0x00	; 0
     51a:	70 e0       	ldi	r23, 0x00	; 0
     51c:	cb 01       	movw	r24, r22
     51e:	08 c0       	rjmp	.+16     	; 0x530 <HCSR04_read+0x1c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     520:	25 e0       	ldi	r18, 0x05	; 5
     522:	2a 95       	dec	r18
     524:	f1 f7       	brne	.-4      	; 0x522 <HCSR04_read+0xe>
     526:	00 00       	nop

    while (HCSR04_ECHO_DEF_PIN & (1 << HCSR04_ECHO_PIN))
    {
        _delay_us(1);
        count++;
     528:	6f 5f       	subi	r22, 0xFF	; 255
     52a:	7f 4f       	sbci	r23, 0xFF	; 255
     52c:	8f 4f       	sbci	r24, 0xFF	; 255
     52e:	9f 4f       	sbci	r25, 0xFF	; 255
{
    uint32_t count = 0;

    while (!(HCSR04_ECHO_DEF_PIN & (1 << HCSR04_ECHO_PIN)));

    while (HCSR04_ECHO_DEF_PIN & (1 << HCSR04_ECHO_PIN))
     530:	4b 99       	sbic	0x09, 3	; 9
     532:	f6 cf       	rjmp	.-20     	; 0x520 <HCSR04_read+0xc>
    {
        _delay_us(1);
        count++;
    }

    return (uint16_t)(count / 58.0);
     534:	0e 94 56 09 	call	0x12ac	; 0x12ac <__floatunsisf>
     538:	20 e0       	ldi	r18, 0x00	; 0
     53a:	30 e0       	ldi	r19, 0x00	; 0
     53c:	48 e6       	ldi	r20, 0x68	; 104
     53e:	52 e4       	ldi	r21, 0x42	; 66
     540:	0e 94 b5 08 	call	0x116a	; 0x116a <__divsf3>
     544:	0e 94 27 09 	call	0x124e	; 0x124e <__fixunssfsi>
}
     548:	cb 01       	movw	r24, r22
     54a:	08 95       	ret

0000054c <HCSR04_get_distance>:
    params: void
    returns: uint16_t - the distance in centimeters
*/
uint16_t HCSR04_get_distance(void)
{
    HCSR04_trigger();
     54c:	0e 94 6e 02 	call	0x4dc	; 0x4dc <HCSR04_trigger>
    return HCSR04_read();
     550:	0e 94 8a 02 	call	0x514	; 0x514 <HCSR04_read>
}
     554:	08 95       	ret

00000556 <KEYPAD_init>:
    params: void
    returns: void
*/
void KEYPAD_init(void)
{
    KEYPAD_DDR &= ~((1 << KEYPAD_KEY_1) | (1 << KEYPAD_KEY_2) | (1 << KEYPAD_KEY_3) | (1 << KEYPAD_KEY_4));
     556:	84 b1       	in	r24, 0x04	; 4
     558:	83 7c       	andi	r24, 0xC3	; 195
     55a:	84 b9       	out	0x04, r24	; 4
    KEYPAD_PORT |= (1 << KEYPAD_KEY_1) | (1 << KEYPAD_KEY_2) | (1 << KEYPAD_KEY_3) | (1 << KEYPAD_KEY_4);
     55c:	85 b1       	in	r24, 0x05	; 5
     55e:	8c 63       	ori	r24, 0x3C	; 60
     560:	85 b9       	out	0x05, r24	; 5
     562:	08 95       	ret

00000564 <KEYPAD_read>:
    params: void
    returns: uint8_t - the key number (1-4) or KEYPAD_NO_KEY if no key is pressed
*/
uint8_t KEYPAD_read(void)
{
    if (!(KEYPAD_PIN & (1 << KEYPAD_KEY_1))) return 1;
     564:	1a 9b       	sbis	0x03, 2	; 3
     566:	08 c0       	rjmp	.+16     	; 0x578 <KEYPAD_read+0x14>
    if (!(KEYPAD_PIN & (1 << KEYPAD_KEY_2))) return 2;
     568:	1b 9b       	sbis	0x03, 3	; 3
     56a:	08 c0       	rjmp	.+16     	; 0x57c <KEYPAD_read+0x18>
    if (!(KEYPAD_PIN & (1 << KEYPAD_KEY_3))) return 3;
     56c:	1c 9b       	sbis	0x03, 4	; 3
     56e:	08 c0       	rjmp	.+16     	; 0x580 <KEYPAD_read+0x1c>
    if (!(KEYPAD_PIN & (1 << KEYPAD_KEY_4))) return 4;
     570:	1d 99       	sbic	0x03, 5	; 3
     572:	08 c0       	rjmp	.+16     	; 0x584 <KEYPAD_read+0x20>
     574:	84 e0       	ldi	r24, 0x04	; 4
     576:	08 95       	ret
    params: void
    returns: uint8_t - the key number (1-4) or KEYPAD_NO_KEY if no key is pressed
*/
uint8_t KEYPAD_read(void)
{
    if (!(KEYPAD_PIN & (1 << KEYPAD_KEY_1))) return 1;
     578:	81 e0       	ldi	r24, 0x01	; 1
     57a:	08 95       	ret
    if (!(KEYPAD_PIN & (1 << KEYPAD_KEY_2))) return 2;
     57c:	82 e0       	ldi	r24, 0x02	; 2
     57e:	08 95       	ret
    if (!(KEYPAD_PIN & (1 << KEYPAD_KEY_3))) return 3;
     580:	83 e0       	ldi	r24, 0x03	; 3
     582:	08 95       	ret
    if (!(KEYPAD_PIN & (1 << KEYPAD_KEY_4))) return 4;
    return KEYPAD_NO_KEY;
     584:	85 e0       	ldi	r24, 0x05	; 5
}
     586:	08 95       	ret

00000588 <display_set>:
    params: const unsigned char* title - title string (max 12 chars)
            const unsigned char* data - data string (max 16 chars)
    returns: void
*/
void display_set(const unsigned char *title, const unsigned char *data)
{
     588:	0f 93       	push	r16
     58a:	1f 93       	push	r17
     58c:	cf 93       	push	r28
     58e:	df 93       	push	r29
     590:	cd b7       	in	r28, 0x3d	; 61
     592:	de b7       	in	r29, 0x3e	; 62
     594:	a0 97       	sbiw	r28, 0x20	; 32
     596:	0f b6       	in	r0, 0x3f	; 63
     598:	f8 94       	cli
     59a:	de bf       	out	0x3e, r29	; 62
     59c:	0f be       	out	0x3f, r0	; 63
     59e:	cd bf       	out	0x3d, r28	; 61
     5a0:	db 01       	movw	r26, r22
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5a2:	ef e3       	ldi	r30, 0x3F	; 63
     5a4:	ff e1       	ldi	r31, 0x1F	; 31
     5a6:	31 97       	sbiw	r30, 0x01	; 1
     5a8:	f1 f7       	brne	.-4      	; 0x5a6 <display_set+0x1e>
     5aa:	00 c0       	rjmp	.+0      	; 0x5ac <display_set+0x24>
     5ac:	00 00       	nop

    unsigned char line1[16];
    unsigned char line2[16];

    // prepare line1: copy up to 12 chars from title, pad with spaces
    int i = 0;
     5ae:	20 e0       	ldi	r18, 0x00	; 0
     5b0:	30 e0       	ldi	r19, 0x00	; 0
    for (; i < 12 && *title; ++i)
     5b2:	0a c0       	rjmp	.+20     	; 0x5c8 <display_set+0x40>
        line1[i] = *title++;
     5b4:	01 96       	adiw	r24, 0x01	; 1
     5b6:	e1 e0       	ldi	r30, 0x01	; 1
     5b8:	f0 e0       	ldi	r31, 0x00	; 0
     5ba:	ec 0f       	add	r30, r28
     5bc:	fd 1f       	adc	r31, r29
     5be:	e2 0f       	add	r30, r18
     5c0:	f3 1f       	adc	r31, r19
     5c2:	40 83       	st	Z, r20
    unsigned char line1[16];
    unsigned char line2[16];

    // prepare line1: copy up to 12 chars from title, pad with spaces
    int i = 0;
    for (; i < 12 && *title; ++i)
     5c4:	2f 5f       	subi	r18, 0xFF	; 255
     5c6:	3f 4f       	sbci	r19, 0xFF	; 255
     5c8:	2c 30       	cpi	r18, 0x0C	; 12
     5ca:	31 05       	cpc	r19, r1
     5cc:	7c f4       	brge	.+30     	; 0x5ec <display_set+0x64>
     5ce:	fc 01       	movw	r30, r24
     5d0:	40 81       	ld	r20, Z
     5d2:	41 11       	cpse	r20, r1
     5d4:	ef cf       	rjmp	.-34     	; 0x5b4 <display_set+0x2c>
     5d6:	0a c0       	rjmp	.+20     	; 0x5ec <display_set+0x64>
        line1[i] = *title++;
    for (; i < 12; ++i)
        line1[i] = ' ';
     5d8:	e1 e0       	ldi	r30, 0x01	; 1
     5da:	f0 e0       	ldi	r31, 0x00	; 0
     5dc:	ec 0f       	add	r30, r28
     5de:	fd 1f       	adc	r31, r29
     5e0:	e2 0f       	add	r30, r18
     5e2:	f3 1f       	adc	r31, r19
     5e4:	80 e2       	ldi	r24, 0x20	; 32
     5e6:	80 83       	st	Z, r24

    // prepare line1: copy up to 12 chars from title, pad with spaces
    int i = 0;
    for (; i < 12 && *title; ++i)
        line1[i] = *title++;
    for (; i < 12; ++i)
     5e8:	2f 5f       	subi	r18, 0xFF	; 255
     5ea:	3f 4f       	sbci	r19, 0xFF	; 255
     5ec:	2c 30       	cpi	r18, 0x0C	; 12
     5ee:	31 05       	cpc	r19, r1
     5f0:	9c f3       	brlt	.-26     	; 0x5d8 <display_set+0x50>
        line1[i] = ' ';

    // add control commands at the end of line1
    line1[12] = 0x7F;
     5f2:	8f e7       	ldi	r24, 0x7F	; 127
     5f4:	8d 87       	std	Y+13, r24	; 0x0d
    line1[13] = '-';
     5f6:	8d e2       	ldi	r24, 0x2D	; 45
     5f8:	8e 87       	std	Y+14, r24	; 0x0e
    line1[14] = '+';
     5fa:	8b e2       	ldi	r24, 0x2B	; 43
     5fc:	8f 87       	std	Y+15, r24	; 0x0f
    line1[15] = 0x7E;
     5fe:	8e e7       	ldi	r24, 0x7E	; 126
     600:	88 8b       	std	Y+16, r24	; 0x10

    // prepare line2: copy up to 16 chars from data, pad with spaces
    i = 0;
     602:	80 e0       	ldi	r24, 0x00	; 0
     604:	90 e0       	ldi	r25, 0x00	; 0
    for (; i < 16 && *data; ++i)
     606:	09 c0       	rjmp	.+18     	; 0x61a <display_set+0x92>
        line2[i] = *data++;
     608:	11 96       	adiw	r26, 0x01	; 1
     60a:	e1 e1       	ldi	r30, 0x11	; 17
     60c:	f0 e0       	ldi	r31, 0x00	; 0
     60e:	ec 0f       	add	r30, r28
     610:	fd 1f       	adc	r31, r29
     612:	e8 0f       	add	r30, r24
     614:	f9 1f       	adc	r31, r25
     616:	20 83       	st	Z, r18
    line1[14] = '+';
    line1[15] = 0x7E;

    // prepare line2: copy up to 16 chars from data, pad with spaces
    i = 0;
    for (; i < 16 && *data; ++i)
     618:	01 96       	adiw	r24, 0x01	; 1
     61a:	80 31       	cpi	r24, 0x10	; 16
     61c:	91 05       	cpc	r25, r1
     61e:	6c f4       	brge	.+26     	; 0x63a <display_set+0xb2>
     620:	2c 91       	ld	r18, X
     622:	21 11       	cpse	r18, r1
     624:	f1 cf       	rjmp	.-30     	; 0x608 <display_set+0x80>
     626:	09 c0       	rjmp	.+18     	; 0x63a <display_set+0xb2>
        line2[i] = *data++;
    for (; i < 16; ++i)
        line2[i] = ' ';
     628:	e1 e1       	ldi	r30, 0x11	; 17
     62a:	f0 e0       	ldi	r31, 0x00	; 0
     62c:	ec 0f       	add	r30, r28
     62e:	fd 1f       	adc	r31, r29
     630:	e8 0f       	add	r30, r24
     632:	f9 1f       	adc	r31, r25
     634:	20 e2       	ldi	r18, 0x20	; 32
     636:	20 83       	st	Z, r18

    // prepare line2: copy up to 16 chars from data, pad with spaces
    i = 0;
    for (; i < 16 && *data; ++i)
        line2[i] = *data++;
    for (; i < 16; ++i)
     638:	01 96       	adiw	r24, 0x01	; 1
     63a:	80 31       	cpi	r24, 0x10	; 16
     63c:	91 05       	cpc	r25, r1
     63e:	a4 f3       	brlt	.-24     	; 0x628 <display_set+0xa0>
        line2[i] = ' ';

    // reset cursor to first line and write 16 chars
    LCD_1602A_load_command(DISPLAY_SET_CURSOR_LINE_1);
     640:	80 e8       	ldi	r24, 0x80	; 128
     642:	0e 94 60 01 	call	0x2c0	; 0x2c0 <LCD_1602A_load_command>
    for (i = 0; i < 16; ++i)
     646:	00 e0       	ldi	r16, 0x00	; 0
     648:	10 e0       	ldi	r17, 0x00	; 0
     64a:	0b c0       	rjmp	.+22     	; 0x662 <display_set+0xda>
    {
        LCD_1602A_load_data(line1[i]);
     64c:	e1 e0       	ldi	r30, 0x01	; 1
     64e:	f0 e0       	ldi	r31, 0x00	; 0
     650:	ec 0f       	add	r30, r28
     652:	fd 1f       	adc	r31, r29
     654:	e0 0f       	add	r30, r16
     656:	f1 1f       	adc	r31, r17
     658:	80 81       	ld	r24, Z
     65a:	0e 94 70 01 	call	0x2e0	; 0x2e0 <LCD_1602A_load_data>
    for (; i < 16; ++i)
        line2[i] = ' ';

    // reset cursor to first line and write 16 chars
    LCD_1602A_load_command(DISPLAY_SET_CURSOR_LINE_1);
    for (i = 0; i < 16; ++i)
     65e:	0f 5f       	subi	r16, 0xFF	; 255
     660:	1f 4f       	sbci	r17, 0xFF	; 255
     662:	00 31       	cpi	r16, 0x10	; 16
     664:	11 05       	cpc	r17, r1
     666:	94 f3       	brlt	.-28     	; 0x64c <display_set+0xc4>
    {
        LCD_1602A_load_data(line1[i]);
    }

    // reset cursor to second line and write 16 chars
    LCD_1602A_load_command(DISPLAY_SET_CURSOR_LINE_2);
     668:	80 ec       	ldi	r24, 0xC0	; 192
     66a:	0e 94 60 01 	call	0x2c0	; 0x2c0 <LCD_1602A_load_command>
    for (i = 0; i < 16; ++i)
     66e:	00 e0       	ldi	r16, 0x00	; 0
     670:	10 e0       	ldi	r17, 0x00	; 0
     672:	0b c0       	rjmp	.+22     	; 0x68a <display_set+0x102>
    {
        LCD_1602A_load_data(line2[i]);
     674:	e1 e1       	ldi	r30, 0x11	; 17
     676:	f0 e0       	ldi	r31, 0x00	; 0
     678:	ec 0f       	add	r30, r28
     67a:	fd 1f       	adc	r31, r29
     67c:	e0 0f       	add	r30, r16
     67e:	f1 1f       	adc	r31, r17
     680:	80 81       	ld	r24, Z
     682:	0e 94 70 01 	call	0x2e0	; 0x2e0 <LCD_1602A_load_data>
        LCD_1602A_load_data(line1[i]);
    }

    // reset cursor to second line and write 16 chars
    LCD_1602A_load_command(DISPLAY_SET_CURSOR_LINE_2);
    for (i = 0; i < 16; ++i)
     686:	0f 5f       	subi	r16, 0xFF	; 255
     688:	1f 4f       	sbci	r17, 0xFF	; 255
     68a:	00 31       	cpi	r16, 0x10	; 16
     68c:	11 05       	cpc	r17, r1
     68e:	94 f3       	brlt	.-28     	; 0x674 <display_set+0xec>
    {
        LCD_1602A_load_data(line2[i]);
    }
}
     690:	a0 96       	adiw	r28, 0x20	; 32
     692:	0f b6       	in	r0, 0x3f	; 63
     694:	f8 94       	cli
     696:	de bf       	out	0x3e, r29	; 62
     698:	0f be       	out	0x3f, r0	; 63
     69a:	cd bf       	out	0x3d, r28	; 61
     69c:	df 91       	pop	r29
     69e:	cf 91       	pop	r28
     6a0:	1f 91       	pop	r17
     6a2:	0f 91       	pop	r16
     6a4:	08 95       	ret

000006a6 <get_tank_capacity>:
    params: void
    returns: float - the tank capacity in liters
*/
float get_tank_capacity()
{
    uint16_t water_depth = HCSR04_get_distance();
     6a6:	0e 94 a6 02 	call	0x54c	; 0x54c <HCSR04_get_distance>

    uint16_t water_height = TANK_HEIGHT_IN_CM - water_depth;
     6aa:	60 e2       	ldi	r22, 0x20	; 32
     6ac:	73 e0       	ldi	r23, 0x03	; 3
     6ae:	68 1b       	sub	r22, r24
     6b0:	79 0b       	sbc	r23, r25

    // The following formula assumes the tank is a perfect cylinder: V = π * r^2 * h
    float volume = (PI * ((float)TANK_RADIUS_IN_CM * (float)TANK_RADIUS_IN_CM) * (float)water_height) / 1000.0; // convert cm^3 to liters
     6b2:	80 e0       	ldi	r24, 0x00	; 0
     6b4:	90 e0       	ldi	r25, 0x00	; 0
     6b6:	0e 94 56 09 	call	0x12ac	; 0x12ac <__floatunsisf>
     6ba:	2a e5       	ldi	r18, 0x5A	; 90
     6bc:	34 e1       	ldi	r19, 0x14	; 20
     6be:	4d e9       	ldi	r20, 0x9D	; 157
     6c0:	52 e4       	ldi	r21, 0x42	; 66
     6c2:	0e 94 0d 0a 	call	0x141a	; 0x141a <__mulsf3>
     6c6:	20 e0       	ldi	r18, 0x00	; 0
     6c8:	30 e0       	ldi	r19, 0x00	; 0
     6ca:	4a e7       	ldi	r20, 0x7A	; 122
     6cc:	54 e4       	ldi	r21, 0x44	; 68
     6ce:	0e 94 b5 08 	call	0x116a	; 0x116a <__divsf3>
    return volume;
}
     6d2:	08 95       	ret

000006d4 <get_refill_rate>:
    get the refill rate based on tank capacity change over time
    params: void
    returns: float - the refill rate in liters per minute
*/
float get_refill_rate()
{
     6d4:	8f 92       	push	r8
     6d6:	9f 92       	push	r9
     6d8:	af 92       	push	r10
     6da:	bf 92       	push	r11
     6dc:	cf 92       	push	r12
     6de:	df 92       	push	r13
     6e0:	ef 92       	push	r14
     6e2:	ff 92       	push	r15
    float capacity_at_start = get_tank_capacity();
     6e4:	0e 94 53 03 	call	0x6a6	; 0x6a6 <get_tank_capacity>
     6e8:	4b 01       	movw	r8, r22
     6ea:	5c 01       	movw	r10, r24
     6ec:	2f ef       	ldi	r18, 0xFF	; 255
     6ee:	87 ea       	ldi	r24, 0xA7	; 167
     6f0:	91 e6       	ldi	r25, 0x61	; 97
     6f2:	21 50       	subi	r18, 0x01	; 1
     6f4:	80 40       	sbci	r24, 0x00	; 0
     6f6:	90 40       	sbci	r25, 0x00	; 0
     6f8:	e1 f7       	brne	.-8      	; 0x6f2 <get_refill_rate+0x1e>
     6fa:	00 c0       	rjmp	.+0      	; 0x6fc <get_refill_rate+0x28>
     6fc:	00 00       	nop
    _delay_ms(2000);
    float capacity_at_end = get_tank_capacity();
     6fe:	0e 94 53 03 	call	0x6a6	; 0x6a6 <get_tank_capacity>
     702:	6b 01       	movw	r12, r22
     704:	7c 01       	movw	r14, r24

    if (capacity_at_end < capacity_at_start) {
     706:	9b 01       	movw	r18, r22
     708:	ac 01       	movw	r20, r24
     70a:	c5 01       	movw	r24, r10
     70c:	b4 01       	movw	r22, r8
     70e:	0e 94 08 0a 	call	0x1410	; 0x1410 <__gesf2>
     712:	18 16       	cp	r1, r24
     714:	9c f0       	brlt	.+38     	; 0x73c <get_refill_rate+0x68>
        return 0.0; // no refill detected
    }

    float refill_rate_per_second = (capacity_at_end - capacity_at_start) / 2.0;
     716:	a5 01       	movw	r20, r10
     718:	94 01       	movw	r18, r8
     71a:	c7 01       	movw	r24, r14
     71c:	b6 01       	movw	r22, r12
     71e:	0e 94 43 08 	call	0x1086	; 0x1086 <__subsf3>
     722:	20 e0       	ldi	r18, 0x00	; 0
     724:	30 e0       	ldi	r19, 0x00	; 0
     726:	40 e0       	ldi	r20, 0x00	; 0
     728:	5f e3       	ldi	r21, 0x3F	; 63
     72a:	0e 94 0d 0a 	call	0x141a	; 0x141a <__mulsf3>

    return refill_rate_per_second * 60.0; // convert to liters per minute
     72e:	20 e0       	ldi	r18, 0x00	; 0
     730:	30 e0       	ldi	r19, 0x00	; 0
     732:	40 e7       	ldi	r20, 0x70	; 112
     734:	52 e4       	ldi	r21, 0x42	; 66
     736:	0e 94 0d 0a 	call	0x141a	; 0x141a <__mulsf3>
     73a:	03 c0       	rjmp	.+6      	; 0x742 <get_refill_rate+0x6e>
    float capacity_at_start = get_tank_capacity();
    _delay_ms(2000);
    float capacity_at_end = get_tank_capacity();

    if (capacity_at_end < capacity_at_start) {
        return 0.0; // no refill detected
     73c:	60 e0       	ldi	r22, 0x00	; 0
     73e:	70 e0       	ldi	r23, 0x00	; 0
     740:	cb 01       	movw	r24, r22
    }

    float refill_rate_per_second = (capacity_at_end - capacity_at_start) / 2.0;

    return refill_rate_per_second * 60.0; // convert to liters per minute
}
     742:	ff 90       	pop	r15
     744:	ef 90       	pop	r14
     746:	df 90       	pop	r13
     748:	cf 90       	pop	r12
     74a:	bf 90       	pop	r11
     74c:	af 90       	pop	r10
     74e:	9f 90       	pop	r9
     750:	8f 90       	pop	r8
     752:	08 95       	ret

00000754 <get_leak_rate>:
    get the leak rate based on tank capacity change over time
    params: void
    returns: float - the leak rate in liters per minute
*/
float get_leak_rate()
{
     754:	8f 92       	push	r8
     756:	9f 92       	push	r9
     758:	af 92       	push	r10
     75a:	bf 92       	push	r11
     75c:	cf 92       	push	r12
     75e:	df 92       	push	r13
     760:	ef 92       	push	r14
     762:	ff 92       	push	r15
    float capacity_at_start = get_tank_capacity();
     764:	0e 94 53 03 	call	0x6a6	; 0x6a6 <get_tank_capacity>
     768:	6b 01       	movw	r12, r22
     76a:	7c 01       	movw	r14, r24
     76c:	2f ef       	ldi	r18, 0xFF	; 255
     76e:	87 ea       	ldi	r24, 0xA7	; 167
     770:	91 e6       	ldi	r25, 0x61	; 97
     772:	21 50       	subi	r18, 0x01	; 1
     774:	80 40       	sbci	r24, 0x00	; 0
     776:	90 40       	sbci	r25, 0x00	; 0
     778:	e1 f7       	brne	.-8      	; 0x772 <get_leak_rate+0x1e>
     77a:	00 c0       	rjmp	.+0      	; 0x77c <get_leak_rate+0x28>
     77c:	00 00       	nop
    _delay_ms(2000);
    float capacity_at_end = get_tank_capacity();
     77e:	0e 94 53 03 	call	0x6a6	; 0x6a6 <get_tank_capacity>
     782:	4b 01       	movw	r8, r22
     784:	5c 01       	movw	r10, r24

    if (capacity_at_start < capacity_at_end) {
     786:	9b 01       	movw	r18, r22
     788:	ac 01       	movw	r20, r24
     78a:	c7 01       	movw	r24, r14
     78c:	b6 01       	movw	r22, r12
     78e:	0e 94 b0 08 	call	0x1160	; 0x1160 <__cmpsf2>
     792:	88 23       	and	r24, r24
     794:	9c f0       	brlt	.+38     	; 0x7bc <get_leak_rate+0x68>
        return 0.0; // no leak detected
    }
    float leak_rate_per_second = (capacity_at_start - capacity_at_end) / 2.0;
     796:	a5 01       	movw	r20, r10
     798:	94 01       	movw	r18, r8
     79a:	c7 01       	movw	r24, r14
     79c:	b6 01       	movw	r22, r12
     79e:	0e 94 43 08 	call	0x1086	; 0x1086 <__subsf3>
     7a2:	20 e0       	ldi	r18, 0x00	; 0
     7a4:	30 e0       	ldi	r19, 0x00	; 0
     7a6:	40 e0       	ldi	r20, 0x00	; 0
     7a8:	5f e3       	ldi	r21, 0x3F	; 63
     7aa:	0e 94 0d 0a 	call	0x141a	; 0x141a <__mulsf3>

    return leak_rate_per_second * 60.0; // convert to liters per minute
     7ae:	20 e0       	ldi	r18, 0x00	; 0
     7b0:	30 e0       	ldi	r19, 0x00	; 0
     7b2:	40 e7       	ldi	r20, 0x70	; 112
     7b4:	52 e4       	ldi	r21, 0x42	; 66
     7b6:	0e 94 0d 0a 	call	0x141a	; 0x141a <__mulsf3>
     7ba:	03 c0       	rjmp	.+6      	; 0x7c2 <get_leak_rate+0x6e>
    float capacity_at_start = get_tank_capacity();
    _delay_ms(2000);
    float capacity_at_end = get_tank_capacity();

    if (capacity_at_start < capacity_at_end) {
        return 0.0; // no leak detected
     7bc:	60 e0       	ldi	r22, 0x00	; 0
     7be:	70 e0       	ldi	r23, 0x00	; 0
     7c0:	cb 01       	movw	r24, r22
    }
    float leak_rate_per_second = (capacity_at_start - capacity_at_end) / 2.0;

    return leak_rate_per_second * 60.0; // convert to liters per minute
}
     7c2:	ff 90       	pop	r15
     7c4:	ef 90       	pop	r14
     7c6:	df 90       	pop	r13
     7c8:	cf 90       	pop	r12
     7ca:	bf 90       	pop	r11
     7cc:	af 90       	pop	r10
     7ce:	9f 90       	pop	r9
     7d0:	8f 90       	pop	r8
     7d2:	08 95       	ret

000007d4 <get_soil_temperature>:

float get_soil_temperature()
{
    return DS18B20_read_temperature();
     7d4:	0e 94 35 02 	call	0x46a	; 0x46a <DS18B20_read_temperature>
}
     7d8:	08 95       	ret

000007da <ui_show_display>:
    update the display based on the current active menu and hover indices
    params: void
    returns: void
*/
void ui_show_display(void)
{
     7da:	ef 92       	push	r14
     7dc:	ff 92       	push	r15
     7de:	0f 93       	push	r16
    if (active_menu_index == -1)
     7e0:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <active_menu_index>
     7e4:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <active_menu_index+0x1>
     7e8:	ef 3f       	cpi	r30, 0xFF	; 255
     7ea:	2f ef       	ldi	r18, 0xFF	; 255
     7ec:	f2 07       	cpc	r31, r18
     7ee:	79 f4       	brne	.+30     	; 0x80e <__DATA_REGION_LENGTH__+0xe>
    {
        display_set("MAIN MENU", MENU_BUFFER[menu_hover_index]);
     7f0:	e0 91 0e 03 	lds	r30, 0x030E	; 0x80030e <menu_hover_index>
     7f4:	f0 91 0f 03 	lds	r31, 0x030F	; 0x80030f <menu_hover_index+0x1>
     7f8:	ee 0f       	add	r30, r30
     7fa:	ff 1f       	adc	r31, r31
     7fc:	ea 5c       	subi	r30, 0xCA	; 202
     7fe:	fe 4f       	sbci	r31, 0xFE	; 254
     800:	60 81       	ld	r22, Z
     802:	71 81       	ldd	r23, Z+1	; 0x01
     804:	8b e5       	ldi	r24, 0x5B	; 91
     806:	91 e0       	ldi	r25, 0x01	; 1
     808:	0e 94 c4 02 	call	0x588	; 0x588 <display_set>
     80c:	aa c1       	rjmp	.+852    	; 0xb62 <__stack+0x263>
    }
    else
    {
        switch (active_menu_index)
     80e:	e7 30       	cpi	r30, 0x07	; 7
     810:	f1 05       	cpc	r31, r1
     812:	08 f0       	brcs	.+2      	; 0x816 <__DATA_REGION_LENGTH__+0x16>
     814:	a0 c1       	rjmp	.+832    	; 0xb56 <__stack+0x257>
     816:	ec 5c       	subi	r30, 0xCC	; 204
     818:	ff 4f       	sbci	r31, 0xFF	; 255
     81a:	0c 94 7a 0a 	jmp	0x14f4	; 0x14f4 <__tablejump2__>
        {
        case 0:
            format_float(buffer, sizeof(buffer), get_tank_capacity(), 1, "Ltrs");
     81e:	0e 94 53 03 	call	0x6a6	; 0x6a6 <get_tank_capacity>
     822:	9b 01       	movw	r18, r22
     824:	ac 01       	movw	r20, r24
     826:	0f 2e       	mov	r0, r31
     828:	f5 e6       	ldi	r31, 0x65	; 101
     82a:	ef 2e       	mov	r14, r31
     82c:	f1 e0       	ldi	r31, 0x01	; 1
     82e:	ff 2e       	mov	r15, r31
     830:	f0 2d       	mov	r31, r0
     832:	01 e0       	ldi	r16, 0x01	; 1
     834:	60 e1       	ldi	r22, 0x10	; 16
     836:	70 e0       	ldi	r23, 0x00	; 0
     838:	80 e1       	ldi	r24, 0x10	; 16
     83a:	93 e0       	ldi	r25, 0x03	; 3
     83c:	0e 94 d7 00 	call	0x1ae	; 0x1ae <format_float>
            display_set("TANK CAPACITY", buffer);
     840:	60 e1       	ldi	r22, 0x10	; 16
     842:	73 e0       	ldi	r23, 0x03	; 3
     844:	8a e6       	ldi	r24, 0x6A	; 106
     846:	91 e0       	ldi	r25, 0x01	; 1
     848:	0e 94 c4 02 	call	0x588	; 0x588 <display_set>
            break;
     84c:	8a c1       	rjmp	.+788    	; 0xb62 <__stack+0x263>
        case 1:
            format_float(buffer, sizeof(buffer), get_refill_rate(), 1, "Ltrs per min");
     84e:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <get_refill_rate>
     852:	9b 01       	movw	r18, r22
     854:	ac 01       	movw	r20, r24
     856:	0f 2e       	mov	r0, r31
     858:	f8 e7       	ldi	r31, 0x78	; 120
     85a:	ef 2e       	mov	r14, r31
     85c:	f1 e0       	ldi	r31, 0x01	; 1
     85e:	ff 2e       	mov	r15, r31
     860:	f0 2d       	mov	r31, r0
     862:	01 e0       	ldi	r16, 0x01	; 1
     864:	60 e1       	ldi	r22, 0x10	; 16
     866:	70 e0       	ldi	r23, 0x00	; 0
     868:	80 e1       	ldi	r24, 0x10	; 16
     86a:	93 e0       	ldi	r25, 0x03	; 3
     86c:	0e 94 d7 00 	call	0x1ae	; 0x1ae <format_float>
            display_set("REFILL RATE", buffer);
     870:	60 e1       	ldi	r22, 0x10	; 16
     872:	73 e0       	ldi	r23, 0x03	; 3
     874:	85 e8       	ldi	r24, 0x85	; 133
     876:	91 e0       	ldi	r25, 0x01	; 1
     878:	0e 94 c4 02 	call	0x588	; 0x588 <display_set>
            break;
     87c:	72 c1       	rjmp	.+740    	; 0xb62 <__stack+0x263>
        case 2:
            format_float(buffer, sizeof(buffer), get_leak_rate(), 1, "Ltrs per min");
     87e:	0e 94 aa 03 	call	0x754	; 0x754 <get_leak_rate>
     882:	9b 01       	movw	r18, r22
     884:	ac 01       	movw	r20, r24
     886:	0f 2e       	mov	r0, r31
     888:	f8 e7       	ldi	r31, 0x78	; 120
     88a:	ef 2e       	mov	r14, r31
     88c:	f1 e0       	ldi	r31, 0x01	; 1
     88e:	ff 2e       	mov	r15, r31
     890:	f0 2d       	mov	r31, r0
     892:	01 e0       	ldi	r16, 0x01	; 1
     894:	60 e1       	ldi	r22, 0x10	; 16
     896:	70 e0       	ldi	r23, 0x00	; 0
     898:	80 e1       	ldi	r24, 0x10	; 16
     89a:	93 e0       	ldi	r25, 0x03	; 3
     89c:	0e 94 d7 00 	call	0x1ae	; 0x1ae <format_float>
            display_set("LEAKAGE RATE", buffer);
     8a0:	60 e1       	ldi	r22, 0x10	; 16
     8a2:	73 e0       	ldi	r23, 0x03	; 3
     8a4:	81 e9       	ldi	r24, 0x91	; 145
     8a6:	91 e0       	ldi	r25, 0x01	; 1
     8a8:	0e 94 c4 02 	call	0x588	; 0x588 <display_set>
            break;
     8ac:	5a c1       	rjmp	.+692    	; 0xb62 <__stack+0x263>
        case 3:
            format_float(buffer, sizeof(buffer), get_soil_temperature(), 1, "degrees");
     8ae:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <get_soil_temperature>
     8b2:	9b 01       	movw	r18, r22
     8b4:	ac 01       	movw	r20, r24
     8b6:	0f 2e       	mov	r0, r31
     8b8:	fe e9       	ldi	r31, 0x9E	; 158
     8ba:	ef 2e       	mov	r14, r31
     8bc:	f1 e0       	ldi	r31, 0x01	; 1
     8be:	ff 2e       	mov	r15, r31
     8c0:	f0 2d       	mov	r31, r0
     8c2:	01 e0       	ldi	r16, 0x01	; 1
     8c4:	60 e1       	ldi	r22, 0x10	; 16
     8c6:	70 e0       	ldi	r23, 0x00	; 0
     8c8:	80 e1       	ldi	r24, 0x10	; 16
     8ca:	93 e0       	ldi	r25, 0x03	; 3
     8cc:	0e 94 d7 00 	call	0x1ae	; 0x1ae <format_float>
            display_set("SOIL TEMPERATURE", buffer);
     8d0:	60 e1       	ldi	r22, 0x10	; 16
     8d2:	73 e0       	ldi	r23, 0x03	; 3
     8d4:	86 ea       	ldi	r24, 0xA6	; 166
     8d6:	91 e0       	ldi	r25, 0x01	; 1
     8d8:	0e 94 c4 02 	call	0x588	; 0x588 <display_set>
            break;
     8dc:	42 c1       	rjmp	.+644    	; 0xb62 <__stack+0x263>
        case 4:
            if (active_trigger_index == -1)
     8de:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <active_trigger_index>
     8e2:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <active_trigger_index+0x1>
     8e6:	8f 3f       	cpi	r24, 0xFF	; 255
     8e8:	2f ef       	ldi	r18, 0xFF	; 255
     8ea:	92 07       	cpc	r25, r18
     8ec:	79 f4       	brne	.+30     	; 0x90c <__stack+0xd>
            {
                display_set("TRIGGERS", TRIGGERS_BUFFER[trigger_hover_index]);
     8ee:	e0 91 0c 03 	lds	r30, 0x030C	; 0x80030c <trigger_hover_index>
     8f2:	f0 91 0d 03 	lds	r31, 0x030D	; 0x80030d <trigger_hover_index+0x1>
     8f6:	ee 0f       	add	r30, r30
     8f8:	ff 1f       	adc	r31, r31
     8fa:	ee 5c       	subi	r30, 0xCE	; 206
     8fc:	fe 4f       	sbci	r31, 0xFE	; 254
     8fe:	60 81       	ld	r22, Z
     900:	71 81       	ldd	r23, Z+1	; 0x01
     902:	89 e2       	ldi	r24, 0x29	; 41
     904:	92 e0       	ldi	r25, 0x02	; 2
     906:	0e 94 c4 02 	call	0x588	; 0x588 <display_set>
     90a:	2b c1       	rjmp	.+598    	; 0xb62 <__stack+0x263>
            }
            else
            {
                switch (active_trigger_index)
     90c:	00 97       	sbiw	r24, 0x00	; 0
     90e:	19 f0       	breq	.+6      	; 0x916 <__stack+0x17>
     910:	01 97       	sbiw	r24, 0x01	; 1
     912:	e9 f0       	breq	.+58     	; 0x94e <__stack+0x4f>
     914:	38 c0       	rjmp	.+112    	; 0x986 <__stack+0x87>
                {
                case 0:
                    format_float(buffer, sizeof(buffer), MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER, 1, "Ltrs");
     916:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER>
     91a:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x1>
     91e:	40 91 18 01 	lds	r20, 0x0118	; 0x800118 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x2>
     922:	50 91 19 01 	lds	r21, 0x0119	; 0x800119 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x3>
     926:	0f 2e       	mov	r0, r31
     928:	f5 e6       	ldi	r31, 0x65	; 101
     92a:	ef 2e       	mov	r14, r31
     92c:	f1 e0       	ldi	r31, 0x01	; 1
     92e:	ff 2e       	mov	r15, r31
     930:	f0 2d       	mov	r31, r0
     932:	01 e0       	ldi	r16, 0x01	; 1
     934:	60 e1       	ldi	r22, 0x10	; 16
     936:	70 e0       	ldi	r23, 0x00	; 0
     938:	80 e1       	ldi	r24, 0x10	; 16
     93a:	93 e0       	ldi	r25, 0x03	; 3
     93c:	0e 94 d7 00 	call	0x1ae	; 0x1ae <format_float>
                    display_set("MIN CAPACITY", buffer);
     940:	60 e1       	ldi	r22, 0x10	; 16
     942:	73 e0       	ldi	r23, 0x03	; 3
     944:	87 eb       	ldi	r24, 0xB7	; 183
     946:	91 e0       	ldi	r25, 0x01	; 1
     948:	0e 94 c4 02 	call	0x588	; 0x588 <display_set>
                    break;
     94c:	0a c1       	rjmp	.+532    	; 0xb62 <__stack+0x263>
                case 1:
                    format_float(buffer, sizeof(buffer), MAXIMUM_TEMPERATURE_BEFORE_PUMPING, 2, "degrees");
     94e:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING>
     952:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x1>
     956:	40 91 14 01 	lds	r20, 0x0114	; 0x800114 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x2>
     95a:	50 91 15 01 	lds	r21, 0x0115	; 0x800115 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x3>
     95e:	0f 2e       	mov	r0, r31
     960:	fe e9       	ldi	r31, 0x9E	; 158
     962:	ef 2e       	mov	r14, r31
     964:	f1 e0       	ldi	r31, 0x01	; 1
     966:	ff 2e       	mov	r15, r31
     968:	f0 2d       	mov	r31, r0
     96a:	02 e0       	ldi	r16, 0x02	; 2
     96c:	60 e1       	ldi	r22, 0x10	; 16
     96e:	70 e0       	ldi	r23, 0x00	; 0
     970:	80 e1       	ldi	r24, 0x10	; 16
     972:	93 e0       	ldi	r25, 0x03	; 3
     974:	0e 94 d7 00 	call	0x1ae	; 0x1ae <format_float>
                    display_set("MAX TEMP", buffer);
     978:	60 e1       	ldi	r22, 0x10	; 16
     97a:	73 e0       	ldi	r23, 0x03	; 3
     97c:	84 ec       	ldi	r24, 0xC4	; 196
     97e:	91 e0       	ldi	r25, 0x01	; 1
     980:	0e 94 c4 02 	call	0x588	; 0x588 <display_set>
                    break;
     984:	ee c0       	rjmp	.+476    	; 0xb62 <__stack+0x263>
                default:
                    display_set("ERROR", "Invalid trigger");
     986:	6d ec       	ldi	r22, 0xCD	; 205
     988:	71 e0       	ldi	r23, 0x01	; 1
     98a:	8d ed       	ldi	r24, 0xDD	; 221
     98c:	91 e0       	ldi	r25, 0x01	; 1
     98e:	0e 94 c4 02 	call	0x588	; 0x588 <display_set>
                    break;
     992:	e7 c0       	rjmp	.+462    	; 0xb62 <__stack+0x263>
                }
            }
            break;

        case 5:
            display_set("MESSAGES", MESSAGES_BUFFER[message_hover_index]);
     994:	e0 91 08 03 	lds	r30, 0x0308	; 0x800308 <__data_end>
     998:	f0 91 09 03 	lds	r31, 0x0309	; 0x800309 <__data_end+0x1>
     99c:	ee 0f       	add	r30, r30
     99e:	ff 1f       	adc	r31, r31
     9a0:	e0 5e       	subi	r30, 0xE0	; 224
     9a2:	fe 4f       	sbci	r31, 0xFE	; 254
     9a4:	60 81       	ld	r22, Z
     9a6:	71 81       	ldd	r23, Z+1	; 0x01
     9a8:	83 ee       	ldi	r24, 0xE3	; 227
     9aa:	91 e0       	ldi	r25, 0x01	; 1
     9ac:	0e 94 c4 02 	call	0x588	; 0x588 <display_set>
            break;
     9b0:	d8 c0       	rjmp	.+432    	; 0xb62 <__stack+0x263>
        case 6:
            if (active_config_index == -1)
     9b2:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <active_config_index>
     9b6:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <active_config_index+0x1>
     9ba:	8f 3f       	cpi	r24, 0xFF	; 255
     9bc:	2f ef       	ldi	r18, 0xFF	; 255
     9be:	92 07       	cpc	r25, r18
     9c0:	79 f4       	brne	.+30     	; 0x9e0 <__stack+0xe1>
            {
                display_set("CONFIG", CONFIG_BUFFER[config_hover_index]);
     9c2:	e0 91 0a 03 	lds	r30, 0x030A	; 0x80030a <config_hover_index>
     9c6:	f0 91 0b 03 	lds	r31, 0x030B	; 0x80030b <config_hover_index+0x1>
     9ca:	ee 0f       	add	r30, r30
     9cc:	ff 1f       	adc	r31, r31
     9ce:	e8 5d       	subi	r30, 0xD8	; 216
     9d0:	fe 4f       	sbci	r31, 0xFE	; 254
     9d2:	60 81       	ld	r22, Z
     9d4:	71 81       	ldd	r23, Z+1	; 0x01
     9d6:	8c ee       	ldi	r24, 0xEC	; 236
     9d8:	91 e0       	ldi	r25, 0x01	; 1
     9da:	0e 94 c4 02 	call	0x588	; 0x588 <display_set>
     9de:	c1 c0       	rjmp	.+386    	; 0xb62 <__stack+0x263>
            }
            else
            {
                switch (active_config_index)
     9e0:	82 30       	cpi	r24, 0x02	; 2
     9e2:	91 05       	cpc	r25, r1
     9e4:	09 f4       	brne	.+2      	; 0x9e8 <__stack+0xe9>
     9e6:	46 c0       	rjmp	.+140    	; 0xa74 <__stack+0x175>
     9e8:	2c f4       	brge	.+10     	; 0x9f4 <__stack+0xf5>
     9ea:	00 97       	sbiw	r24, 0x00	; 0
     9ec:	59 f0       	breq	.+22     	; 0xa04 <__stack+0x105>
     9ee:	01 97       	sbiw	r24, 0x01	; 1
     9f0:	29 f1       	breq	.+74     	; 0xa3c <__stack+0x13d>
     9f2:	aa c0       	rjmp	.+340    	; 0xb48 <__stack+0x249>
     9f4:	83 30       	cpi	r24, 0x03	; 3
     9f6:	91 05       	cpc	r25, r1
     9f8:	09 f4       	brne	.+2      	; 0x9fc <__stack+0xfd>
     9fa:	58 c0       	rjmp	.+176    	; 0xaac <__stack+0x1ad>
     9fc:	04 97       	sbiw	r24, 0x04	; 4
     9fe:	09 f4       	brne	.+2      	; 0xa02 <__stack+0x103>
     a00:	7c c0       	rjmp	.+248    	; 0xafa <__stack+0x1fb>
     a02:	a2 c0       	rjmp	.+324    	; 0xb48 <__stack+0x249>
                {
                case 0:
                    format_float(buffer, sizeof(buffer), STEP_SIZE_FOR_INCREMENTS, 1, "Units");
     a04:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <STEP_SIZE_FOR_INCREMENTS>
     a08:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <STEP_SIZE_FOR_INCREMENTS+0x1>
     a0c:	40 91 10 01 	lds	r20, 0x0110	; 0x800110 <STEP_SIZE_FOR_INCREMENTS+0x2>
     a10:	50 91 11 01 	lds	r21, 0x0111	; 0x800111 <STEP_SIZE_FOR_INCREMENTS+0x3>
     a14:	0f 2e       	mov	r0, r31
     a16:	f3 ef       	ldi	r31, 0xF3	; 243
     a18:	ef 2e       	mov	r14, r31
     a1a:	f1 e0       	ldi	r31, 0x01	; 1
     a1c:	ff 2e       	mov	r15, r31
     a1e:	f0 2d       	mov	r31, r0
     a20:	01 e0       	ldi	r16, 0x01	; 1
     a22:	60 e1       	ldi	r22, 0x10	; 16
     a24:	70 e0       	ldi	r23, 0x00	; 0
     a26:	80 e1       	ldi	r24, 0x10	; 16
     a28:	93 e0       	ldi	r25, 0x03	; 3
     a2a:	0e 94 d7 00 	call	0x1ae	; 0x1ae <format_float>
                    display_set("STEP SIZE", buffer);
     a2e:	60 e1       	ldi	r22, 0x10	; 16
     a30:	73 e0       	ldi	r23, 0x03	; 3
     a32:	89 ef       	ldi	r24, 0xF9	; 249
     a34:	91 e0       	ldi	r25, 0x01	; 1
     a36:	0e 94 c4 02 	call	0x588	; 0x588 <display_set>
                    break;
     a3a:	93 c0       	rjmp	.+294    	; 0xb62 <__stack+0x263>
                case 1:
                    format_float(buffer, sizeof(buffer), PUMP_THRESHOLD, 1, "Ltrs");
     a3c:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <PUMP_THRESHOLD>
     a40:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <PUMP_THRESHOLD+0x1>
     a44:	40 91 08 01 	lds	r20, 0x0108	; 0x800108 <PUMP_THRESHOLD+0x2>
     a48:	50 91 09 01 	lds	r21, 0x0109	; 0x800109 <PUMP_THRESHOLD+0x3>
     a4c:	0f 2e       	mov	r0, r31
     a4e:	f5 e6       	ldi	r31, 0x65	; 101
     a50:	ef 2e       	mov	r14, r31
     a52:	f1 e0       	ldi	r31, 0x01	; 1
     a54:	ff 2e       	mov	r15, r31
     a56:	f0 2d       	mov	r31, r0
     a58:	01 e0       	ldi	r16, 0x01	; 1
     a5a:	60 e1       	ldi	r22, 0x10	; 16
     a5c:	70 e0       	ldi	r23, 0x00	; 0
     a5e:	80 e1       	ldi	r24, 0x10	; 16
     a60:	93 e0       	ldi	r25, 0x03	; 3
     a62:	0e 94 d7 00 	call	0x1ae	; 0x1ae <format_float>
                    display_set("PUMP THRESHOLD", buffer);
     a66:	60 e1       	ldi	r22, 0x10	; 16
     a68:	73 e0       	ldi	r23, 0x03	; 3
     a6a:	83 e0       	ldi	r24, 0x03	; 3
     a6c:	92 e0       	ldi	r25, 0x02	; 2
     a6e:	0e 94 c4 02 	call	0x588	; 0x588 <display_set>
                    break;
     a72:	77 c0       	rjmp	.+238    	; 0xb62 <__stack+0x263>
                case 2:
                    format_float(buffer, sizeof(buffer), SPRAY_THRESHOLD, 1, "degrees");
     a74:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <SPRAY_THRESHOLD>
     a78:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <SPRAY_THRESHOLD+0x1>
     a7c:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <SPRAY_THRESHOLD+0x2>
     a80:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <SPRAY_THRESHOLD+0x3>
     a84:	0f 2e       	mov	r0, r31
     a86:	fe e9       	ldi	r31, 0x9E	; 158
     a88:	ef 2e       	mov	r14, r31
     a8a:	f1 e0       	ldi	r31, 0x01	; 1
     a8c:	ff 2e       	mov	r15, r31
     a8e:	f0 2d       	mov	r31, r0
     a90:	01 e0       	ldi	r16, 0x01	; 1
     a92:	60 e1       	ldi	r22, 0x10	; 16
     a94:	70 e0       	ldi	r23, 0x00	; 0
     a96:	80 e1       	ldi	r24, 0x10	; 16
     a98:	93 e0       	ldi	r25, 0x03	; 3
     a9a:	0e 94 d7 00 	call	0x1ae	; 0x1ae <format_float>
                    display_set("SPRAY THRESHOLD", buffer);
     a9e:	60 e1       	ldi	r22, 0x10	; 16
     aa0:	73 e0       	ldi	r23, 0x03	; 3
     aa2:	82 e1       	ldi	r24, 0x12	; 18
     aa4:	92 e0       	ldi	r25, 0x02	; 2
     aa6:	0e 94 c4 02 	call	0x588	; 0x588 <display_set>
                    break;
     aaa:	5b c0       	rjmp	.+182    	; 0xb62 <__stack+0x263>
                case 3:
                    snprintf(buffer, sizeof(buffer), "%s", ENABLE_TRIGGER_VALUE ? "Enabled" : "Disabled");
     aac:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <ENABLE_TRIGGER_VALUE>
     ab0:	88 23       	and	r24, r24
     ab2:	19 f0       	breq	.+6      	; 0xaba <__stack+0x1bb>
     ab4:	8a e4       	ldi	r24, 0x4A	; 74
     ab6:	91 e0       	ldi	r25, 0x01	; 1
     ab8:	02 c0       	rjmp	.+4      	; 0xabe <__stack+0x1bf>
     aba:	82 e5       	ldi	r24, 0x52	; 82
     abc:	91 e0       	ldi	r25, 0x01	; 1
     abe:	9f 93       	push	r25
     ac0:	8f 93       	push	r24
     ac2:	87 e4       	ldi	r24, 0x47	; 71
     ac4:	91 e0       	ldi	r25, 0x01	; 1
     ac6:	9f 93       	push	r25
     ac8:	8f 93       	push	r24
     aca:	1f 92       	push	r1
     acc:	80 e1       	ldi	r24, 0x10	; 16
     ace:	8f 93       	push	r24
     ad0:	80 e1       	ldi	r24, 0x10	; 16
     ad2:	93 e0       	ldi	r25, 0x03	; 3
     ad4:	9f 93       	push	r25
     ad6:	8f 93       	push	r24
     ad8:	0e 94 a0 0a 	call	0x1540	; 0x1540 <snprintf>
                    display_set("ENABLE TRIGGERS", buffer);
     adc:	60 e1       	ldi	r22, 0x10	; 16
     ade:	73 e0       	ldi	r23, 0x03	; 3
     ae0:	82 e2       	ldi	r24, 0x22	; 34
     ae2:	92 e0       	ldi	r25, 0x02	; 2
     ae4:	0e 94 c4 02 	call	0x588	; 0x588 <display_set>
                    break;
     ae8:	8d b7       	in	r24, 0x3d	; 61
     aea:	9e b7       	in	r25, 0x3e	; 62
     aec:	08 96       	adiw	r24, 0x08	; 8
     aee:	0f b6       	in	r0, 0x3f	; 63
     af0:	f8 94       	cli
     af2:	9e bf       	out	0x3e, r25	; 62
     af4:	0f be       	out	0x3f, r0	; 63
     af6:	8d bf       	out	0x3d, r24	; 61
     af8:	34 c0       	rjmp	.+104    	; 0xb62 <__stack+0x263>
                case 4:
                    snprintf(buffer, sizeof(buffer), "%s", ENABLE_ALERT_VALUE ? "Enabled" : "Disabled");
     afa:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     afe:	88 23       	and	r24, r24
     b00:	19 f0       	breq	.+6      	; 0xb08 <__stack+0x209>
     b02:	8a e4       	ldi	r24, 0x4A	; 74
     b04:	91 e0       	ldi	r25, 0x01	; 1
     b06:	02 c0       	rjmp	.+4      	; 0xb0c <__stack+0x20d>
     b08:	82 e5       	ldi	r24, 0x52	; 82
     b0a:	91 e0       	ldi	r25, 0x01	; 1
     b0c:	9f 93       	push	r25
     b0e:	8f 93       	push	r24
     b10:	87 e4       	ldi	r24, 0x47	; 71
     b12:	91 e0       	ldi	r25, 0x01	; 1
     b14:	9f 93       	push	r25
     b16:	8f 93       	push	r24
     b18:	1f 92       	push	r1
     b1a:	80 e1       	ldi	r24, 0x10	; 16
     b1c:	8f 93       	push	r24
     b1e:	80 e1       	ldi	r24, 0x10	; 16
     b20:	93 e0       	ldi	r25, 0x03	; 3
     b22:	9f 93       	push	r25
     b24:	8f 93       	push	r24
     b26:	0e 94 a0 0a 	call	0x1540	; 0x1540 <snprintf>
                    display_set("ENABLE ALERTS", buffer);
     b2a:	60 e1       	ldi	r22, 0x10	; 16
     b2c:	73 e0       	ldi	r23, 0x03	; 3
     b2e:	82 e3       	ldi	r24, 0x32	; 50
     b30:	92 e0       	ldi	r25, 0x02	; 2
     b32:	0e 94 c4 02 	call	0x588	; 0x588 <display_set>
                    break;
     b36:	8d b7       	in	r24, 0x3d	; 61
     b38:	9e b7       	in	r25, 0x3e	; 62
     b3a:	08 96       	adiw	r24, 0x08	; 8
     b3c:	0f b6       	in	r0, 0x3f	; 63
     b3e:	f8 94       	cli
     b40:	9e bf       	out	0x3e, r25	; 62
     b42:	0f be       	out	0x3f, r0	; 63
     b44:	8d bf       	out	0x3d, r24	; 61
     b46:	0d c0       	rjmp	.+26     	; 0xb62 <__stack+0x263>
                default:
                    display_set("ERROR", "Invalid config");
     b48:	60 e4       	ldi	r22, 0x40	; 64
     b4a:	72 e0       	ldi	r23, 0x02	; 2
     b4c:	8d ed       	ldi	r24, 0xDD	; 221
     b4e:	91 e0       	ldi	r25, 0x01	; 1
     b50:	0e 94 c4 02 	call	0x588	; 0x588 <display_set>
                    break;
     b54:	06 c0       	rjmp	.+12     	; 0xb62 <__stack+0x263>
                }
            }
            break;

        default:
            display_set("ERROR", "Invalid menu");
     b56:	6f e4       	ldi	r22, 0x4F	; 79
     b58:	72 e0       	ldi	r23, 0x02	; 2
     b5a:	8d ed       	ldi	r24, 0xDD	; 221
     b5c:	91 e0       	ldi	r25, 0x01	; 1
     b5e:	0e 94 c4 02 	call	0x588	; 0x588 <display_set>
            break;
        }
    }
}
     b62:	0f 91       	pop	r16
     b64:	ff 90       	pop	r15
     b66:	ef 90       	pop	r14
     b68:	08 95       	ret

00000b6a <ui_process_key_command>:
    process a key command from the keypad and update the UI state
    params: uint8_t key - the key number (1-4)
    returns: void
*/
void ui_process_key_command (uint8_t key) {
    if (key == 1)
     b6a:	81 30       	cpi	r24, 0x01	; 1
     b6c:	41 f5       	brne	.+80     	; 0xbbe <ui_process_key_command+0x54>
    {
        if (active_menu_index == -1)
     b6e:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <active_menu_index>
     b72:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <active_menu_index+0x1>
     b76:	01 96       	adiw	r24, 0x01	; 1
     b78:	09 f4       	brne	.+2      	; 0xb7c <ui_process_key_command+0x12>
     b7a:	59 c2       	rjmp	.+1202   	; 0x102e <ui_process_key_command+0x4c4>
        {
            return;
        }
        else
        {
            if (active_trigger_index != -1)
     b7c:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <active_trigger_index>
     b80:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <active_trigger_index+0x1>
     b84:	01 96       	adiw	r24, 0x01	; 1
     b86:	39 f0       	breq	.+14     	; 0xb96 <ui_process_key_command+0x2c>
            {
                active_trigger_index = -1;
     b88:	8f ef       	ldi	r24, 0xFF	; 255
     b8a:	9f ef       	ldi	r25, 0xFF	; 255
     b8c:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <active_trigger_index+0x1>
     b90:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <active_trigger_index>
     b94:	08 95       	ret
            }
            else if (active_config_index != -1)
     b96:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <active_config_index>
     b9a:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <active_config_index+0x1>
     b9e:	01 96       	adiw	r24, 0x01	; 1
     ba0:	39 f0       	breq	.+14     	; 0xbb0 <ui_process_key_command+0x46>
            {
                active_config_index = -1;
     ba2:	8f ef       	ldi	r24, 0xFF	; 255
     ba4:	9f ef       	ldi	r25, 0xFF	; 255
     ba6:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <active_config_index+0x1>
     baa:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <active_config_index>
     bae:	08 95       	ret
            }
            else
            {
                active_menu_index = -1;
     bb0:	8f ef       	ldi	r24, 0xFF	; 255
     bb2:	9f ef       	ldi	r25, 0xFF	; 255
     bb4:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <active_menu_index+0x1>
     bb8:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <active_menu_index>
     bbc:	08 95       	ret
            }
        }
    }
    else if (key == 2)
     bbe:	82 30       	cpi	r24, 0x02	; 2
     bc0:	09 f0       	breq	.+2      	; 0xbc4 <ui_process_key_command+0x5a>
     bc2:	fd c0       	rjmp	.+506    	; 0xdbe <ui_process_key_command+0x254>
    {
        if (active_menu_index == -1)
     bc4:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <active_menu_index>
     bc8:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <active_menu_index+0x1>
     bcc:	8f 3f       	cpi	r24, 0xFF	; 255
     bce:	2f ef       	ldi	r18, 0xFF	; 255
     bd0:	92 07       	cpc	r25, r18
     bd2:	71 f4       	brne	.+28     	; 0xbf0 <ui_process_key_command+0x86>
        {
            if (menu_hover_index < 6)
     bd4:	80 91 0e 03 	lds	r24, 0x030E	; 0x80030e <menu_hover_index>
     bd8:	90 91 0f 03 	lds	r25, 0x030F	; 0x80030f <menu_hover_index+0x1>
     bdc:	86 30       	cpi	r24, 0x06	; 6
     bde:	91 05       	cpc	r25, r1
     be0:	0c f0       	brlt	.+2      	; 0xbe4 <ui_process_key_command+0x7a>
     be2:	25 c2       	rjmp	.+1098   	; 0x102e <ui_process_key_command+0x4c4>
                menu_hover_index++; // navigate downwards on the main menu
     be4:	01 96       	adiw	r24, 0x01	; 1
     be6:	90 93 0f 03 	sts	0x030F, r25	; 0x80030f <menu_hover_index+0x1>
     bea:	80 93 0e 03 	sts	0x030E, r24	; 0x80030e <menu_hover_index>
     bee:	08 95       	ret
        }
        else if (active_menu_index == 4) 
     bf0:	84 30       	cpi	r24, 0x04	; 4
     bf2:	91 05       	cpc	r25, r1
     bf4:	09 f0       	breq	.+2      	; 0xbf8 <ui_process_key_command+0x8e>
     bf6:	50 c0       	rjmp	.+160    	; 0xc98 <ui_process_key_command+0x12e>
        {
            // user is in the triggers menu
            if (active_trigger_index == -1)
     bf8:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <active_trigger_index>
     bfc:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <active_trigger_index+0x1>
     c00:	8f 3f       	cpi	r24, 0xFF	; 255
     c02:	2f ef       	ldi	r18, 0xFF	; 255
     c04:	92 07       	cpc	r25, r18
     c06:	69 f4       	brne	.+26     	; 0xc22 <ui_process_key_command+0xb8>
            {
                if (trigger_hover_index < (sizeof(TRIGGERS_BUFFER)/sizeof(TRIGGERS_BUFFER[0]) - 1))
     c08:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <trigger_hover_index>
     c0c:	90 91 0d 03 	lds	r25, 0x030D	; 0x80030d <trigger_hover_index+0x1>
     c10:	00 97       	sbiw	r24, 0x00	; 0
     c12:	09 f0       	breq	.+2      	; 0xc16 <ui_process_key_command+0xac>
     c14:	0c c2       	rjmp	.+1048   	; 0x102e <ui_process_key_command+0x4c4>
                    trigger_hover_index++; // navigate downwards on the triggers menu
     c16:	01 96       	adiw	r24, 0x01	; 1
     c18:	90 93 0d 03 	sts	0x030D, r25	; 0x80030d <trigger_hover_index+0x1>
     c1c:	80 93 0c 03 	sts	0x030C, r24	; 0x80030c <trigger_hover_index>
     c20:	08 95       	ret
            } else {
                switch (active_trigger_index) {
     c22:	00 97       	sbiw	r24, 0x00	; 0
     c24:	19 f0       	breq	.+6      	; 0xc2c <ui_process_key_command+0xc2>
     c26:	01 97       	sbiw	r24, 0x01	; 1
     c28:	e1 f0       	breq	.+56     	; 0xc62 <ui_process_key_command+0xf8>
     c2a:	08 95       	ret
                    case 0:
                        // adjust MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER - decrease
                        MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER -= STEP_SIZE_FOR_INCREMENTS;
     c2c:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <STEP_SIZE_FOR_INCREMENTS>
     c30:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <STEP_SIZE_FOR_INCREMENTS+0x1>
     c34:	40 91 10 01 	lds	r20, 0x0110	; 0x800110 <STEP_SIZE_FOR_INCREMENTS+0x2>
     c38:	50 91 11 01 	lds	r21, 0x0111	; 0x800111 <STEP_SIZE_FOR_INCREMENTS+0x3>
     c3c:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER>
     c40:	70 91 17 01 	lds	r23, 0x0117	; 0x800117 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x1>
     c44:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x2>
     c48:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x3>
     c4c:	0e 94 43 08 	call	0x1086	; 0x1086 <__subsf3>
     c50:	60 93 16 01 	sts	0x0116, r22	; 0x800116 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER>
     c54:	70 93 17 01 	sts	0x0117, r23	; 0x800117 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x1>
     c58:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x2>
     c5c:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x3>
                        break;
     c60:	08 95       	ret
                    case 1:
                        // adjust MAXIMUM_TEMPERATURE_BEFORE_PUMPING - decrease
                        MAXIMUM_TEMPERATURE_BEFORE_PUMPING -= STEP_SIZE_FOR_INCREMENTS;
     c62:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <STEP_SIZE_FOR_INCREMENTS>
     c66:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <STEP_SIZE_FOR_INCREMENTS+0x1>
     c6a:	40 91 10 01 	lds	r20, 0x0110	; 0x800110 <STEP_SIZE_FOR_INCREMENTS+0x2>
     c6e:	50 91 11 01 	lds	r21, 0x0111	; 0x800111 <STEP_SIZE_FOR_INCREMENTS+0x3>
     c72:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING>
     c76:	70 91 13 01 	lds	r23, 0x0113	; 0x800113 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x1>
     c7a:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x2>
     c7e:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x3>
     c82:	0e 94 43 08 	call	0x1086	; 0x1086 <__subsf3>
     c86:	60 93 12 01 	sts	0x0112, r22	; 0x800112 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING>
     c8a:	70 93 13 01 	sts	0x0113, r23	; 0x800113 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x1>
     c8e:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x2>
     c92:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x3>
                        break;
     c96:	08 95       	ret
                    default:
                        break;
                }
            }
        }
        else if (active_menu_index == 5) {
     c98:	85 30       	cpi	r24, 0x05	; 5
     c9a:	91 05       	cpc	r25, r1
     c9c:	71 f4       	brne	.+28     	; 0xcba <ui_process_key_command+0x150>
            if (message_hover_index < MSG_BUFFER_SIZE - 1)
     c9e:	80 91 08 03 	lds	r24, 0x0308	; 0x800308 <__data_end>
     ca2:	90 91 09 03 	lds	r25, 0x0309	; 0x800309 <__data_end+0x1>
     ca6:	83 30       	cpi	r24, 0x03	; 3
     ca8:	91 05       	cpc	r25, r1
     caa:	0c f0       	brlt	.+2      	; 0xcae <ui_process_key_command+0x144>
     cac:	c0 c1       	rjmp	.+896    	; 0x102e <ui_process_key_command+0x4c4>
                message_hover_index++;
     cae:	01 96       	adiw	r24, 0x01	; 1
     cb0:	90 93 09 03 	sts	0x0309, r25	; 0x800309 <__data_end+0x1>
     cb4:	80 93 08 03 	sts	0x0308, r24	; 0x800308 <__data_end>
     cb8:	08 95       	ret
        }
        else if (active_menu_index == 6)
     cba:	06 97       	sbiw	r24, 0x06	; 6
     cbc:	09 f0       	breq	.+2      	; 0xcc0 <ui_process_key_command+0x156>
     cbe:	b7 c1       	rjmp	.+878    	; 0x102e <ui_process_key_command+0x4c4>
        {
            if (active_config_index == -1)
     cc0:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <active_config_index>
     cc4:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <active_config_index+0x1>
     cc8:	8f 3f       	cpi	r24, 0xFF	; 255
     cca:	2f ef       	ldi	r18, 0xFF	; 255
     ccc:	92 07       	cpc	r25, r18
     cce:	71 f4       	brne	.+28     	; 0xcec <ui_process_key_command+0x182>
            {
                if (config_hover_index < (sizeof(CONFIG_BUFFER)/sizeof(CONFIG_BUFFER[0]) - 1))
     cd0:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <config_hover_index>
     cd4:	90 91 0b 03 	lds	r25, 0x030B	; 0x80030b <config_hover_index+0x1>
     cd8:	84 30       	cpi	r24, 0x04	; 4
     cda:	91 05       	cpc	r25, r1
     cdc:	08 f0       	brcs	.+2      	; 0xce0 <ui_process_key_command+0x176>
     cde:	a7 c1       	rjmp	.+846    	; 0x102e <ui_process_key_command+0x4c4>
                    config_hover_index++; // navigate downwards on the config menu
     ce0:	01 96       	adiw	r24, 0x01	; 1
     ce2:	90 93 0b 03 	sts	0x030B, r25	; 0x80030b <config_hover_index+0x1>
     ce6:	80 93 0a 03 	sts	0x030A, r24	; 0x80030a <config_hover_index>
     cea:	08 95       	ret
            } else {
                switch (active_config_index)
     cec:	82 30       	cpi	r24, 0x02	; 2
     cee:	91 05       	cpc	r25, r1
     cf0:	09 f4       	brne	.+2      	; 0xcf4 <ui_process_key_command+0x18a>
     cf2:	44 c0       	rjmp	.+136    	; 0xd7c <ui_process_key_command+0x212>
     cf4:	2c f4       	brge	.+10     	; 0xd00 <ui_process_key_command+0x196>
     cf6:	00 97       	sbiw	r24, 0x00	; 0
     cf8:	59 f0       	breq	.+22     	; 0xd10 <ui_process_key_command+0x1a6>
     cfa:	01 97       	sbiw	r24, 0x01	; 1
     cfc:	21 f1       	breq	.+72     	; 0xd46 <ui_process_key_command+0x1dc>
     cfe:	08 95       	ret
     d00:	83 30       	cpi	r24, 0x03	; 3
     d02:	91 05       	cpc	r25, r1
     d04:	09 f4       	brne	.+2      	; 0xd08 <ui_process_key_command+0x19e>
     d06:	55 c0       	rjmp	.+170    	; 0xdb2 <ui_process_key_command+0x248>
     d08:	04 97       	sbiw	r24, 0x04	; 4
     d0a:	09 f4       	brne	.+2      	; 0xd0e <ui_process_key_command+0x1a4>
     d0c:	55 c0       	rjmp	.+170    	; 0xdb8 <ui_process_key_command+0x24e>
     d0e:	08 95       	ret
                {
                case 0:
                    // adjust STEP_SIZE_FOR_INCREMENTS - decrease
                    STEP_SIZE_FOR_INCREMENTS -= STEP_INCREMENT;
     d10:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <STEP_INCREMENT>
     d14:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <STEP_INCREMENT+0x1>
     d18:	40 91 0c 01 	lds	r20, 0x010C	; 0x80010c <STEP_INCREMENT+0x2>
     d1c:	50 91 0d 01 	lds	r21, 0x010D	; 0x80010d <STEP_INCREMENT+0x3>
     d20:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <STEP_SIZE_FOR_INCREMENTS>
     d24:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <STEP_SIZE_FOR_INCREMENTS+0x1>
     d28:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <STEP_SIZE_FOR_INCREMENTS+0x2>
     d2c:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <STEP_SIZE_FOR_INCREMENTS+0x3>
     d30:	0e 94 43 08 	call	0x1086	; 0x1086 <__subsf3>
     d34:	60 93 0e 01 	sts	0x010E, r22	; 0x80010e <STEP_SIZE_FOR_INCREMENTS>
     d38:	70 93 0f 01 	sts	0x010F, r23	; 0x80010f <STEP_SIZE_FOR_INCREMENTS+0x1>
     d3c:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <STEP_SIZE_FOR_INCREMENTS+0x2>
     d40:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <STEP_SIZE_FOR_INCREMENTS+0x3>
                    break;
     d44:	08 95       	ret
                case 1:
                    // adjust PUMP_THRESHOLD - decrease
                    PUMP_THRESHOLD -= STEP_SIZE_FOR_INCREMENTS;
     d46:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <STEP_SIZE_FOR_INCREMENTS>
     d4a:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <STEP_SIZE_FOR_INCREMENTS+0x1>
     d4e:	40 91 10 01 	lds	r20, 0x0110	; 0x800110 <STEP_SIZE_FOR_INCREMENTS+0x2>
     d52:	50 91 11 01 	lds	r21, 0x0111	; 0x800111 <STEP_SIZE_FOR_INCREMENTS+0x3>
     d56:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <PUMP_THRESHOLD>
     d5a:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <PUMP_THRESHOLD+0x1>
     d5e:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <PUMP_THRESHOLD+0x2>
     d62:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <PUMP_THRESHOLD+0x3>
     d66:	0e 94 43 08 	call	0x1086	; 0x1086 <__subsf3>
     d6a:	60 93 06 01 	sts	0x0106, r22	; 0x800106 <PUMP_THRESHOLD>
     d6e:	70 93 07 01 	sts	0x0107, r23	; 0x800107 <PUMP_THRESHOLD+0x1>
     d72:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <PUMP_THRESHOLD+0x2>
     d76:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <PUMP_THRESHOLD+0x3>
                    break;
     d7a:	08 95       	ret
                case 2:
                    // adjust SPRAY_THRESHOLD - decrease
                    SPRAY_THRESHOLD -= STEP_SIZE_FOR_INCREMENTS;
     d7c:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <STEP_SIZE_FOR_INCREMENTS>
     d80:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <STEP_SIZE_FOR_INCREMENTS+0x1>
     d84:	40 91 10 01 	lds	r20, 0x0110	; 0x800110 <STEP_SIZE_FOR_INCREMENTS+0x2>
     d88:	50 91 11 01 	lds	r21, 0x0111	; 0x800111 <STEP_SIZE_FOR_INCREMENTS+0x3>
     d8c:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <SPRAY_THRESHOLD>
     d90:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <SPRAY_THRESHOLD+0x1>
     d94:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <SPRAY_THRESHOLD+0x2>
     d98:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <SPRAY_THRESHOLD+0x3>
     d9c:	0e 94 43 08 	call	0x1086	; 0x1086 <__subsf3>
     da0:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <SPRAY_THRESHOLD>
     da4:	70 93 03 01 	sts	0x0103, r23	; 0x800103 <SPRAY_THRESHOLD+0x1>
     da8:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <SPRAY_THRESHOLD+0x2>
     dac:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <SPRAY_THRESHOLD+0x3>
                    break;
     db0:	08 95       	ret
                case 3:
                    // adjust ENABLE_TRIGGER_VALUE - toggle
                    ENABLE_TRIGGER_VALUE = 0;
     db2:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <ENABLE_TRIGGER_VALUE>
                    break;
     db6:	08 95       	ret
                case 4:
                    // adjust ENABLE_ALERT_VALUE - toggle
                    ENABLE_ALERT_VALUE = 0;
     db8:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
                    break;
     dbc:	08 95       	ret
                    break;
                }
            }
        }
    }
    else if (key == 3)
     dbe:	83 30       	cpi	r24, 0x03	; 3
     dc0:	09 f0       	breq	.+2      	; 0xdc4 <ui_process_key_command+0x25a>
     dc2:	00 c1       	rjmp	.+512    	; 0xfc4 <ui_process_key_command+0x45a>
    {
        if (active_menu_index == -1)
     dc4:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <active_menu_index>
     dc8:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <active_menu_index+0x1>
     dcc:	8f 3f       	cpi	r24, 0xFF	; 255
     dce:	2f ef       	ldi	r18, 0xFF	; 255
     dd0:	92 07       	cpc	r25, r18
     dd2:	71 f4       	brne	.+28     	; 0xdf0 <ui_process_key_command+0x286>
        {
            if (menu_hover_index > 0)
     dd4:	80 91 0e 03 	lds	r24, 0x030E	; 0x80030e <menu_hover_index>
     dd8:	90 91 0f 03 	lds	r25, 0x030F	; 0x80030f <menu_hover_index+0x1>
     ddc:	18 16       	cp	r1, r24
     dde:	19 06       	cpc	r1, r25
     de0:	0c f0       	brlt	.+2      	; 0xde4 <ui_process_key_command+0x27a>
     de2:	25 c1       	rjmp	.+586    	; 0x102e <ui_process_key_command+0x4c4>
                menu_hover_index--;
     de4:	01 97       	sbiw	r24, 0x01	; 1
     de6:	90 93 0f 03 	sts	0x030F, r25	; 0x80030f <menu_hover_index+0x1>
     dea:	80 93 0e 03 	sts	0x030E, r24	; 0x80030e <menu_hover_index>
     dee:	08 95       	ret
        }
        else if (active_menu_index == 4)
     df0:	84 30       	cpi	r24, 0x04	; 4
     df2:	91 05       	cpc	r25, r1
     df4:	09 f0       	breq	.+2      	; 0xdf8 <ui_process_key_command+0x28e>
     df6:	51 c0       	rjmp	.+162    	; 0xe9a <ui_process_key_command+0x330>
        {
            if (active_trigger_index == -1)
     df8:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <active_trigger_index>
     dfc:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <active_trigger_index+0x1>
     e00:	8f 3f       	cpi	r24, 0xFF	; 255
     e02:	2f ef       	ldi	r18, 0xFF	; 255
     e04:	92 07       	cpc	r25, r18
     e06:	71 f4       	brne	.+28     	; 0xe24 <ui_process_key_command+0x2ba>
            {
                if (trigger_hover_index > 0)
     e08:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <trigger_hover_index>
     e0c:	90 91 0d 03 	lds	r25, 0x030D	; 0x80030d <trigger_hover_index+0x1>
     e10:	18 16       	cp	r1, r24
     e12:	19 06       	cpc	r1, r25
     e14:	0c f0       	brlt	.+2      	; 0xe18 <ui_process_key_command+0x2ae>
     e16:	0b c1       	rjmp	.+534    	; 0x102e <ui_process_key_command+0x4c4>
                    trigger_hover_index--;
     e18:	01 97       	sbiw	r24, 0x01	; 1
     e1a:	90 93 0d 03 	sts	0x030D, r25	; 0x80030d <trigger_hover_index+0x1>
     e1e:	80 93 0c 03 	sts	0x030C, r24	; 0x80030c <trigger_hover_index>
     e22:	08 95       	ret
            } else {
                switch (active_trigger_index) {
     e24:	00 97       	sbiw	r24, 0x00	; 0
     e26:	19 f0       	breq	.+6      	; 0xe2e <ui_process_key_command+0x2c4>
     e28:	01 97       	sbiw	r24, 0x01	; 1
     e2a:	e1 f0       	breq	.+56     	; 0xe64 <ui_process_key_command+0x2fa>
     e2c:	08 95       	ret
                    case 0:
                        // adjust MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER - decrease
                        MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER += STEP_SIZE_FOR_INCREMENTS;
     e2e:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <STEP_SIZE_FOR_INCREMENTS>
     e32:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <STEP_SIZE_FOR_INCREMENTS+0x1>
     e36:	40 91 10 01 	lds	r20, 0x0110	; 0x800110 <STEP_SIZE_FOR_INCREMENTS+0x2>
     e3a:	50 91 11 01 	lds	r21, 0x0111	; 0x800111 <STEP_SIZE_FOR_INCREMENTS+0x3>
     e3e:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER>
     e42:	70 91 17 01 	lds	r23, 0x0117	; 0x800117 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x1>
     e46:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x2>
     e4a:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x3>
     e4e:	0e 94 44 08 	call	0x1088	; 0x1088 <__addsf3>
     e52:	60 93 16 01 	sts	0x0116, r22	; 0x800116 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER>
     e56:	70 93 17 01 	sts	0x0117, r23	; 0x800117 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x1>
     e5a:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x2>
     e5e:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x3>
                        break;
     e62:	08 95       	ret
                    case 1:
                        // adjust MAXIMUM_TEMPERATURE_BEFORE_PUMPING - decrease
                        MAXIMUM_TEMPERATURE_BEFORE_PUMPING += STEP_SIZE_FOR_INCREMENTS;
     e64:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <STEP_SIZE_FOR_INCREMENTS>
     e68:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <STEP_SIZE_FOR_INCREMENTS+0x1>
     e6c:	40 91 10 01 	lds	r20, 0x0110	; 0x800110 <STEP_SIZE_FOR_INCREMENTS+0x2>
     e70:	50 91 11 01 	lds	r21, 0x0111	; 0x800111 <STEP_SIZE_FOR_INCREMENTS+0x3>
     e74:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING>
     e78:	70 91 13 01 	lds	r23, 0x0113	; 0x800113 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x1>
     e7c:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x2>
     e80:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x3>
     e84:	0e 94 44 08 	call	0x1088	; 0x1088 <__addsf3>
     e88:	60 93 12 01 	sts	0x0112, r22	; 0x800112 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING>
     e8c:	70 93 13 01 	sts	0x0113, r23	; 0x800113 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x1>
     e90:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x2>
     e94:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x3>
                        break;
     e98:	08 95       	ret
                    default:
                        break;
                }
            }
        } 
        else if (active_menu_index == 5) {
     e9a:	85 30       	cpi	r24, 0x05	; 5
     e9c:	91 05       	cpc	r25, r1
     e9e:	71 f4       	brne	.+28     	; 0xebc <ui_process_key_command+0x352>
            if (message_hover_index > 0)
     ea0:	80 91 08 03 	lds	r24, 0x0308	; 0x800308 <__data_end>
     ea4:	90 91 09 03 	lds	r25, 0x0309	; 0x800309 <__data_end+0x1>
     ea8:	18 16       	cp	r1, r24
     eaa:	19 06       	cpc	r1, r25
     eac:	0c f0       	brlt	.+2      	; 0xeb0 <ui_process_key_command+0x346>
     eae:	bf c0       	rjmp	.+382    	; 0x102e <ui_process_key_command+0x4c4>
                message_hover_index--;
     eb0:	01 97       	sbiw	r24, 0x01	; 1
     eb2:	90 93 09 03 	sts	0x0309, r25	; 0x800309 <__data_end+0x1>
     eb6:	80 93 08 03 	sts	0x0308, r24	; 0x800308 <__data_end>
     eba:	08 95       	ret
        }
        else if (active_menu_index == 6)
     ebc:	06 97       	sbiw	r24, 0x06	; 6
     ebe:	09 f0       	breq	.+2      	; 0xec2 <ui_process_key_command+0x358>
     ec0:	b6 c0       	rjmp	.+364    	; 0x102e <ui_process_key_command+0x4c4>
        {
            if (active_config_index == -1)
     ec2:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <active_config_index>
     ec6:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <active_config_index+0x1>
     eca:	8f 3f       	cpi	r24, 0xFF	; 255
     ecc:	2f ef       	ldi	r18, 0xFF	; 255
     ece:	92 07       	cpc	r25, r18
     ed0:	71 f4       	brne	.+28     	; 0xeee <ui_process_key_command+0x384>
            {
                if (config_hover_index > 0)
     ed2:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <config_hover_index>
     ed6:	90 91 0b 03 	lds	r25, 0x030B	; 0x80030b <config_hover_index+0x1>
     eda:	18 16       	cp	r1, r24
     edc:	19 06       	cpc	r1, r25
     ede:	0c f0       	brlt	.+2      	; 0xee2 <ui_process_key_command+0x378>
     ee0:	a6 c0       	rjmp	.+332    	; 0x102e <ui_process_key_command+0x4c4>
                    config_hover_index--;
     ee2:	01 97       	sbiw	r24, 0x01	; 1
     ee4:	90 93 0b 03 	sts	0x030B, r25	; 0x80030b <config_hover_index+0x1>
     ee8:	80 93 0a 03 	sts	0x030A, r24	; 0x80030a <config_hover_index>
     eec:	08 95       	ret
            } else {
            switch (active_config_index)
     eee:	82 30       	cpi	r24, 0x02	; 2
     ef0:	91 05       	cpc	r25, r1
     ef2:	09 f4       	brne	.+2      	; 0xef6 <ui_process_key_command+0x38c>
     ef4:	44 c0       	rjmp	.+136    	; 0xf7e <ui_process_key_command+0x414>
     ef6:	2c f4       	brge	.+10     	; 0xf02 <ui_process_key_command+0x398>
     ef8:	00 97       	sbiw	r24, 0x00	; 0
     efa:	59 f0       	breq	.+22     	; 0xf12 <ui_process_key_command+0x3a8>
     efc:	01 97       	sbiw	r24, 0x01	; 1
     efe:	21 f1       	breq	.+72     	; 0xf48 <ui_process_key_command+0x3de>
     f00:	08 95       	ret
     f02:	83 30       	cpi	r24, 0x03	; 3
     f04:	91 05       	cpc	r25, r1
     f06:	09 f4       	brne	.+2      	; 0xf0a <ui_process_key_command+0x3a0>
     f08:	55 c0       	rjmp	.+170    	; 0xfb4 <ui_process_key_command+0x44a>
     f0a:	04 97       	sbiw	r24, 0x04	; 4
     f0c:	09 f4       	brne	.+2      	; 0xf10 <ui_process_key_command+0x3a6>
     f0e:	56 c0       	rjmp	.+172    	; 0xfbc <ui_process_key_command+0x452>
     f10:	08 95       	ret
                {
                case 0:
                    // adjust STEP_SIZE_FOR_INCREMENTS - decrease
                    STEP_SIZE_FOR_INCREMENTS += STEP_INCREMENT;
     f12:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <STEP_INCREMENT>
     f16:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <STEP_INCREMENT+0x1>
     f1a:	40 91 0c 01 	lds	r20, 0x010C	; 0x80010c <STEP_INCREMENT+0x2>
     f1e:	50 91 0d 01 	lds	r21, 0x010D	; 0x80010d <STEP_INCREMENT+0x3>
     f22:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <STEP_SIZE_FOR_INCREMENTS>
     f26:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <STEP_SIZE_FOR_INCREMENTS+0x1>
     f2a:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <STEP_SIZE_FOR_INCREMENTS+0x2>
     f2e:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <STEP_SIZE_FOR_INCREMENTS+0x3>
     f32:	0e 94 44 08 	call	0x1088	; 0x1088 <__addsf3>
     f36:	60 93 0e 01 	sts	0x010E, r22	; 0x80010e <STEP_SIZE_FOR_INCREMENTS>
     f3a:	70 93 0f 01 	sts	0x010F, r23	; 0x80010f <STEP_SIZE_FOR_INCREMENTS+0x1>
     f3e:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <STEP_SIZE_FOR_INCREMENTS+0x2>
     f42:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <STEP_SIZE_FOR_INCREMENTS+0x3>
                    break;
     f46:	08 95       	ret
                case 1:
                    // adjust PUMP_THRESHOLD - decrease
                    PUMP_THRESHOLD += STEP_SIZE_FOR_INCREMENTS;
     f48:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <STEP_SIZE_FOR_INCREMENTS>
     f4c:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <STEP_SIZE_FOR_INCREMENTS+0x1>
     f50:	40 91 10 01 	lds	r20, 0x0110	; 0x800110 <STEP_SIZE_FOR_INCREMENTS+0x2>
     f54:	50 91 11 01 	lds	r21, 0x0111	; 0x800111 <STEP_SIZE_FOR_INCREMENTS+0x3>
     f58:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <PUMP_THRESHOLD>
     f5c:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <PUMP_THRESHOLD+0x1>
     f60:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <PUMP_THRESHOLD+0x2>
     f64:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <PUMP_THRESHOLD+0x3>
     f68:	0e 94 44 08 	call	0x1088	; 0x1088 <__addsf3>
     f6c:	60 93 06 01 	sts	0x0106, r22	; 0x800106 <PUMP_THRESHOLD>
     f70:	70 93 07 01 	sts	0x0107, r23	; 0x800107 <PUMP_THRESHOLD+0x1>
     f74:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <PUMP_THRESHOLD+0x2>
     f78:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <PUMP_THRESHOLD+0x3>
                    break;
     f7c:	08 95       	ret
                case 2:
                    // adjust SPRAY_THRESHOLD - decrease
                    SPRAY_THRESHOLD += STEP_SIZE_FOR_INCREMENTS;
     f7e:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <STEP_SIZE_FOR_INCREMENTS>
     f82:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <STEP_SIZE_FOR_INCREMENTS+0x1>
     f86:	40 91 10 01 	lds	r20, 0x0110	; 0x800110 <STEP_SIZE_FOR_INCREMENTS+0x2>
     f8a:	50 91 11 01 	lds	r21, 0x0111	; 0x800111 <STEP_SIZE_FOR_INCREMENTS+0x3>
     f8e:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <SPRAY_THRESHOLD>
     f92:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <SPRAY_THRESHOLD+0x1>
     f96:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <SPRAY_THRESHOLD+0x2>
     f9a:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <SPRAY_THRESHOLD+0x3>
     f9e:	0e 94 44 08 	call	0x1088	; 0x1088 <__addsf3>
     fa2:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <SPRAY_THRESHOLD>
     fa6:	70 93 03 01 	sts	0x0103, r23	; 0x800103 <SPRAY_THRESHOLD+0x1>
     faa:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <SPRAY_THRESHOLD+0x2>
     fae:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <SPRAY_THRESHOLD+0x3>
                    break;
     fb2:	08 95       	ret
                case 3:
                    // adjust ENABLE_TRIGGER_VALUE - toggle
                    ENABLE_TRIGGER_VALUE = 1;
     fb4:	81 e0       	ldi	r24, 0x01	; 1
     fb6:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <ENABLE_TRIGGER_VALUE>
                    break;
     fba:	08 95       	ret
                case 4:
                    // adjust ENABLE_ALERT_VALUE - toggle
                    ENABLE_ALERT_VALUE = 1;
     fbc:	81 e0       	ldi	r24, 0x01	; 1
     fbe:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
                    break;
     fc2:	08 95       	ret
                    break;
                }
            }
        }
    }
    else if (key == 4)
     fc4:	84 30       	cpi	r24, 0x04	; 4
     fc6:	99 f5       	brne	.+102    	; 0x102e <ui_process_key_command+0x4c4>
    {
        if (active_menu_index == -1)
     fc8:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <active_menu_index>
     fcc:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <active_menu_index+0x1>
     fd0:	8f 3f       	cpi	r24, 0xFF	; 255
     fd2:	2f ef       	ldi	r18, 0xFF	; 255
     fd4:	92 07       	cpc	r25, r18
     fd6:	49 f4       	brne	.+18     	; 0xfea <ui_process_key_command+0x480>
        {
            active_menu_index = menu_hover_index;
     fd8:	80 91 0e 03 	lds	r24, 0x030E	; 0x80030e <menu_hover_index>
     fdc:	90 91 0f 03 	lds	r25, 0x030F	; 0x80030f <menu_hover_index+0x1>
     fe0:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <active_menu_index+0x1>
     fe4:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <active_menu_index>
     fe8:	08 95       	ret
        }
        else if (active_menu_index == 4)
     fea:	84 30       	cpi	r24, 0x04	; 4
     fec:	91 05       	cpc	r25, r1
     fee:	79 f4       	brne	.+30     	; 0x100e <ui_process_key_command+0x4a4>
        {
            if (active_trigger_index == -1)
     ff0:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <active_trigger_index>
     ff4:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <active_trigger_index+0x1>
     ff8:	01 96       	adiw	r24, 0x01	; 1
     ffa:	c9 f4       	brne	.+50     	; 0x102e <ui_process_key_command+0x4c4>
            {
                active_trigger_index = trigger_hover_index;
     ffc:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <trigger_hover_index>
    1000:	90 91 0d 03 	lds	r25, 0x030D	; 0x80030d <trigger_hover_index+0x1>
    1004:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <active_trigger_index+0x1>
    1008:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <active_trigger_index>
    100c:	08 95       	ret
            }
        }
        else if (active_menu_index == 6)
    100e:	06 97       	sbiw	r24, 0x06	; 6
    1010:	71 f4       	brne	.+28     	; 0x102e <ui_process_key_command+0x4c4>
        {
            if (active_config_index == -1)
    1012:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <active_config_index>
    1016:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <active_config_index+0x1>
    101a:	01 96       	adiw	r24, 0x01	; 1
    101c:	41 f4       	brne	.+16     	; 0x102e <ui_process_key_command+0x4c4>
            {
                active_config_index = config_hover_index;
    101e:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <config_hover_index>
    1022:	90 91 0b 03 	lds	r25, 0x030B	; 0x80030b <config_hover_index+0x1>
    1026:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <active_config_index+0x1>
    102a:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <active_config_index>
    102e:	08 95       	ret

00001030 <main>:



int main(void)
{
    LCD_1602A_init();
    1030:	0e 94 80 01 	call	0x300	; 0x300 <LCD_1602A_init>
    HCSR04_init();
    1034:	0e 94 67 02 	call	0x4ce	; 0x4ce <HCSR04_init>
    KEYPAD_init();
    1038:	0e 94 ab 02 	call	0x556	; 0x556 <KEYPAD_init>
    uint16_t distance;
    uint8_t pressed_key;

    while (1)
    {
        ui_show_display();
    103c:	0e 94 ed 03 	call	0x7da	; 0x7da <ui_show_display>
    1040:	2f ef       	ldi	r18, 0xFF	; 255
    1042:	89 ef       	ldi	r24, 0xF9	; 249
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	21 50       	subi	r18, 0x01	; 1
    1048:	80 40       	sbci	r24, 0x00	; 0
    104a:	90 40       	sbci	r25, 0x00	; 0
    104c:	e1 f7       	brne	.-8      	; 0x1046 <main+0x16>
    104e:	00 c0       	rjmp	.+0      	; 0x1050 <main+0x20>
    1050:	00 00       	nop
        _delay_ms(20);

        while ((pressed_key = KEYPAD_read()) == KEYPAD_NO_KEY);
    1052:	0e 94 b2 02 	call	0x564	; 0x564 <KEYPAD_read>
    1056:	c8 2f       	mov	r28, r24
    1058:	85 30       	cpi	r24, 0x05	; 5
    105a:	d9 f3       	breq	.-10     	; 0x1052 <main+0x22>
    105c:	2f ef       	ldi	r18, 0xFF	; 255
    105e:	89 ef       	ldi	r24, 0xF9	; 249
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	21 50       	subi	r18, 0x01	; 1
    1064:	80 40       	sbci	r24, 0x00	; 0
    1066:	90 40       	sbci	r25, 0x00	; 0
    1068:	e1 f7       	brne	.-8      	; 0x1062 <main+0x32>
    106a:	00 c0       	rjmp	.+0      	; 0x106c <main+0x3c>
    106c:	00 00       	nop
        _delay_ms(20);
        if (KEYPAD_read() == pressed_key)
    106e:	0e 94 b2 02 	call	0x564	; 0x564 <KEYPAD_read>
    1072:	c8 13       	cpse	r28, r24
    1074:	e3 cf       	rjmp	.-58     	; 0x103c <main+0xc>
        {
            ui_process_key_command(pressed_key);
    1076:	8c 2f       	mov	r24, r28
    1078:	0e 94 b5 05 	call	0xb6a	; 0xb6a <ui_process_key_command>
            while (KEYPAD_read() != KEYPAD_NO_KEY); // wait until the key is released
    107c:	0e 94 b2 02 	call	0x564	; 0x564 <KEYPAD_read>
    1080:	85 30       	cpi	r24, 0x05	; 5
    1082:	e1 f7       	brne	.-8      	; 0x107c <main+0x4c>
    1084:	db cf       	rjmp	.-74     	; 0x103c <main+0xc>

00001086 <__subsf3>:
    1086:	50 58       	subi	r21, 0x80	; 128

00001088 <__addsf3>:
    1088:	bb 27       	eor	r27, r27
    108a:	aa 27       	eor	r26, r26
    108c:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <__addsf3x>
    1090:	0c 94 ce 09 	jmp	0x139c	; 0x139c <__fp_round>
    1094:	0e 94 c0 09 	call	0x1380	; 0x1380 <__fp_pscA>
    1098:	38 f0       	brcs	.+14     	; 0x10a8 <__addsf3+0x20>
    109a:	0e 94 c7 09 	call	0x138e	; 0x138e <__fp_pscB>
    109e:	20 f0       	brcs	.+8      	; 0x10a8 <__addsf3+0x20>
    10a0:	39 f4       	brne	.+14     	; 0x10b0 <__addsf3+0x28>
    10a2:	9f 3f       	cpi	r25, 0xFF	; 255
    10a4:	19 f4       	brne	.+6      	; 0x10ac <__addsf3+0x24>
    10a6:	26 f4       	brtc	.+8      	; 0x10b0 <__addsf3+0x28>
    10a8:	0c 94 bd 09 	jmp	0x137a	; 0x137a <__fp_nan>
    10ac:	0e f4       	brtc	.+2      	; 0x10b0 <__addsf3+0x28>
    10ae:	e0 95       	com	r30
    10b0:	e7 fb       	bst	r30, 7
    10b2:	0c 94 b7 09 	jmp	0x136e	; 0x136e <__fp_inf>

000010b6 <__addsf3x>:
    10b6:	e9 2f       	mov	r30, r25
    10b8:	0e 94 df 09 	call	0x13be	; 0x13be <__fp_split3>
    10bc:	58 f3       	brcs	.-42     	; 0x1094 <__addsf3+0xc>
    10be:	ba 17       	cp	r27, r26
    10c0:	62 07       	cpc	r22, r18
    10c2:	73 07       	cpc	r23, r19
    10c4:	84 07       	cpc	r24, r20
    10c6:	95 07       	cpc	r25, r21
    10c8:	20 f0       	brcs	.+8      	; 0x10d2 <__addsf3x+0x1c>
    10ca:	79 f4       	brne	.+30     	; 0x10ea <__addsf3x+0x34>
    10cc:	a6 f5       	brtc	.+104    	; 0x1136 <__addsf3x+0x80>
    10ce:	0c 94 01 0a 	jmp	0x1402	; 0x1402 <__fp_zero>
    10d2:	0e f4       	brtc	.+2      	; 0x10d6 <__addsf3x+0x20>
    10d4:	e0 95       	com	r30
    10d6:	0b 2e       	mov	r0, r27
    10d8:	ba 2f       	mov	r27, r26
    10da:	a0 2d       	mov	r26, r0
    10dc:	0b 01       	movw	r0, r22
    10de:	b9 01       	movw	r22, r18
    10e0:	90 01       	movw	r18, r0
    10e2:	0c 01       	movw	r0, r24
    10e4:	ca 01       	movw	r24, r20
    10e6:	a0 01       	movw	r20, r0
    10e8:	11 24       	eor	r1, r1
    10ea:	ff 27       	eor	r31, r31
    10ec:	59 1b       	sub	r21, r25
    10ee:	99 f0       	breq	.+38     	; 0x1116 <__addsf3x+0x60>
    10f0:	59 3f       	cpi	r21, 0xF9	; 249
    10f2:	50 f4       	brcc	.+20     	; 0x1108 <__addsf3x+0x52>
    10f4:	50 3e       	cpi	r21, 0xE0	; 224
    10f6:	68 f1       	brcs	.+90     	; 0x1152 <__addsf3x+0x9c>
    10f8:	1a 16       	cp	r1, r26
    10fa:	f0 40       	sbci	r31, 0x00	; 0
    10fc:	a2 2f       	mov	r26, r18
    10fe:	23 2f       	mov	r18, r19
    1100:	34 2f       	mov	r19, r20
    1102:	44 27       	eor	r20, r20
    1104:	58 5f       	subi	r21, 0xF8	; 248
    1106:	f3 cf       	rjmp	.-26     	; 0x10ee <__addsf3x+0x38>
    1108:	46 95       	lsr	r20
    110a:	37 95       	ror	r19
    110c:	27 95       	ror	r18
    110e:	a7 95       	ror	r26
    1110:	f0 40       	sbci	r31, 0x00	; 0
    1112:	53 95       	inc	r21
    1114:	c9 f7       	brne	.-14     	; 0x1108 <__addsf3x+0x52>
    1116:	7e f4       	brtc	.+30     	; 0x1136 <__addsf3x+0x80>
    1118:	1f 16       	cp	r1, r31
    111a:	ba 0b       	sbc	r27, r26
    111c:	62 0b       	sbc	r22, r18
    111e:	73 0b       	sbc	r23, r19
    1120:	84 0b       	sbc	r24, r20
    1122:	ba f0       	brmi	.+46     	; 0x1152 <__addsf3x+0x9c>
    1124:	91 50       	subi	r25, 0x01	; 1
    1126:	a1 f0       	breq	.+40     	; 0x1150 <__addsf3x+0x9a>
    1128:	ff 0f       	add	r31, r31
    112a:	bb 1f       	adc	r27, r27
    112c:	66 1f       	adc	r22, r22
    112e:	77 1f       	adc	r23, r23
    1130:	88 1f       	adc	r24, r24
    1132:	c2 f7       	brpl	.-16     	; 0x1124 <__addsf3x+0x6e>
    1134:	0e c0       	rjmp	.+28     	; 0x1152 <__addsf3x+0x9c>
    1136:	ba 0f       	add	r27, r26
    1138:	62 1f       	adc	r22, r18
    113a:	73 1f       	adc	r23, r19
    113c:	84 1f       	adc	r24, r20
    113e:	48 f4       	brcc	.+18     	; 0x1152 <__addsf3x+0x9c>
    1140:	87 95       	ror	r24
    1142:	77 95       	ror	r23
    1144:	67 95       	ror	r22
    1146:	b7 95       	ror	r27
    1148:	f7 95       	ror	r31
    114a:	9e 3f       	cpi	r25, 0xFE	; 254
    114c:	08 f0       	brcs	.+2      	; 0x1150 <__addsf3x+0x9a>
    114e:	b0 cf       	rjmp	.-160    	; 0x10b0 <__addsf3+0x28>
    1150:	93 95       	inc	r25
    1152:	88 0f       	add	r24, r24
    1154:	08 f0       	brcs	.+2      	; 0x1158 <__addsf3x+0xa2>
    1156:	99 27       	eor	r25, r25
    1158:	ee 0f       	add	r30, r30
    115a:	97 95       	ror	r25
    115c:	87 95       	ror	r24
    115e:	08 95       	ret

00001160 <__cmpsf2>:
    1160:	0e 94 93 09 	call	0x1326	; 0x1326 <__fp_cmp>
    1164:	08 f4       	brcc	.+2      	; 0x1168 <__cmpsf2+0x8>
    1166:	81 e0       	ldi	r24, 0x01	; 1
    1168:	08 95       	ret

0000116a <__divsf3>:
    116a:	0e 94 c9 08 	call	0x1192	; 0x1192 <__divsf3x>
    116e:	0c 94 ce 09 	jmp	0x139c	; 0x139c <__fp_round>
    1172:	0e 94 c7 09 	call	0x138e	; 0x138e <__fp_pscB>
    1176:	58 f0       	brcs	.+22     	; 0x118e <__divsf3+0x24>
    1178:	0e 94 c0 09 	call	0x1380	; 0x1380 <__fp_pscA>
    117c:	40 f0       	brcs	.+16     	; 0x118e <__divsf3+0x24>
    117e:	29 f4       	brne	.+10     	; 0x118a <__divsf3+0x20>
    1180:	5f 3f       	cpi	r21, 0xFF	; 255
    1182:	29 f0       	breq	.+10     	; 0x118e <__divsf3+0x24>
    1184:	0c 94 b7 09 	jmp	0x136e	; 0x136e <__fp_inf>
    1188:	51 11       	cpse	r21, r1
    118a:	0c 94 02 0a 	jmp	0x1404	; 0x1404 <__fp_szero>
    118e:	0c 94 bd 09 	jmp	0x137a	; 0x137a <__fp_nan>

00001192 <__divsf3x>:
    1192:	0e 94 df 09 	call	0x13be	; 0x13be <__fp_split3>
    1196:	68 f3       	brcs	.-38     	; 0x1172 <__divsf3+0x8>

00001198 <__divsf3_pse>:
    1198:	99 23       	and	r25, r25
    119a:	b1 f3       	breq	.-20     	; 0x1188 <__divsf3+0x1e>
    119c:	55 23       	and	r21, r21
    119e:	91 f3       	breq	.-28     	; 0x1184 <__divsf3+0x1a>
    11a0:	95 1b       	sub	r25, r21
    11a2:	55 0b       	sbc	r21, r21
    11a4:	bb 27       	eor	r27, r27
    11a6:	aa 27       	eor	r26, r26
    11a8:	62 17       	cp	r22, r18
    11aa:	73 07       	cpc	r23, r19
    11ac:	84 07       	cpc	r24, r20
    11ae:	38 f0       	brcs	.+14     	; 0x11be <__divsf3_pse+0x26>
    11b0:	9f 5f       	subi	r25, 0xFF	; 255
    11b2:	5f 4f       	sbci	r21, 0xFF	; 255
    11b4:	22 0f       	add	r18, r18
    11b6:	33 1f       	adc	r19, r19
    11b8:	44 1f       	adc	r20, r20
    11ba:	aa 1f       	adc	r26, r26
    11bc:	a9 f3       	breq	.-22     	; 0x11a8 <__divsf3_pse+0x10>
    11be:	35 d0       	rcall	.+106    	; 0x122a <__divsf3_pse+0x92>
    11c0:	0e 2e       	mov	r0, r30
    11c2:	3a f0       	brmi	.+14     	; 0x11d2 <__divsf3_pse+0x3a>
    11c4:	e0 e8       	ldi	r30, 0x80	; 128
    11c6:	32 d0       	rcall	.+100    	; 0x122c <__divsf3_pse+0x94>
    11c8:	91 50       	subi	r25, 0x01	; 1
    11ca:	50 40       	sbci	r21, 0x00	; 0
    11cc:	e6 95       	lsr	r30
    11ce:	00 1c       	adc	r0, r0
    11d0:	ca f7       	brpl	.-14     	; 0x11c4 <__divsf3_pse+0x2c>
    11d2:	2b d0       	rcall	.+86     	; 0x122a <__divsf3_pse+0x92>
    11d4:	fe 2f       	mov	r31, r30
    11d6:	29 d0       	rcall	.+82     	; 0x122a <__divsf3_pse+0x92>
    11d8:	66 0f       	add	r22, r22
    11da:	77 1f       	adc	r23, r23
    11dc:	88 1f       	adc	r24, r24
    11de:	bb 1f       	adc	r27, r27
    11e0:	26 17       	cp	r18, r22
    11e2:	37 07       	cpc	r19, r23
    11e4:	48 07       	cpc	r20, r24
    11e6:	ab 07       	cpc	r26, r27
    11e8:	b0 e8       	ldi	r27, 0x80	; 128
    11ea:	09 f0       	breq	.+2      	; 0x11ee <__divsf3_pse+0x56>
    11ec:	bb 0b       	sbc	r27, r27
    11ee:	80 2d       	mov	r24, r0
    11f0:	bf 01       	movw	r22, r30
    11f2:	ff 27       	eor	r31, r31
    11f4:	93 58       	subi	r25, 0x83	; 131
    11f6:	5f 4f       	sbci	r21, 0xFF	; 255
    11f8:	3a f0       	brmi	.+14     	; 0x1208 <__divsf3_pse+0x70>
    11fa:	9e 3f       	cpi	r25, 0xFE	; 254
    11fc:	51 05       	cpc	r21, r1
    11fe:	78 f0       	brcs	.+30     	; 0x121e <__divsf3_pse+0x86>
    1200:	0c 94 b7 09 	jmp	0x136e	; 0x136e <__fp_inf>
    1204:	0c 94 02 0a 	jmp	0x1404	; 0x1404 <__fp_szero>
    1208:	5f 3f       	cpi	r21, 0xFF	; 255
    120a:	e4 f3       	brlt	.-8      	; 0x1204 <__divsf3_pse+0x6c>
    120c:	98 3e       	cpi	r25, 0xE8	; 232
    120e:	d4 f3       	brlt	.-12     	; 0x1204 <__divsf3_pse+0x6c>
    1210:	86 95       	lsr	r24
    1212:	77 95       	ror	r23
    1214:	67 95       	ror	r22
    1216:	b7 95       	ror	r27
    1218:	f7 95       	ror	r31
    121a:	9f 5f       	subi	r25, 0xFF	; 255
    121c:	c9 f7       	brne	.-14     	; 0x1210 <__divsf3_pse+0x78>
    121e:	88 0f       	add	r24, r24
    1220:	91 1d       	adc	r25, r1
    1222:	96 95       	lsr	r25
    1224:	87 95       	ror	r24
    1226:	97 f9       	bld	r25, 7
    1228:	08 95       	ret
    122a:	e1 e0       	ldi	r30, 0x01	; 1
    122c:	66 0f       	add	r22, r22
    122e:	77 1f       	adc	r23, r23
    1230:	88 1f       	adc	r24, r24
    1232:	bb 1f       	adc	r27, r27
    1234:	62 17       	cp	r22, r18
    1236:	73 07       	cpc	r23, r19
    1238:	84 07       	cpc	r24, r20
    123a:	ba 07       	cpc	r27, r26
    123c:	20 f0       	brcs	.+8      	; 0x1246 <__divsf3_pse+0xae>
    123e:	62 1b       	sub	r22, r18
    1240:	73 0b       	sbc	r23, r19
    1242:	84 0b       	sbc	r24, r20
    1244:	ba 0b       	sbc	r27, r26
    1246:	ee 1f       	adc	r30, r30
    1248:	88 f7       	brcc	.-30     	; 0x122c <__divsf3_pse+0x94>
    124a:	e0 95       	com	r30
    124c:	08 95       	ret

0000124e <__fixunssfsi>:
    124e:	0e 94 e7 09 	call	0x13ce	; 0x13ce <__fp_splitA>
    1252:	88 f0       	brcs	.+34     	; 0x1276 <__fixunssfsi+0x28>
    1254:	9f 57       	subi	r25, 0x7F	; 127
    1256:	98 f0       	brcs	.+38     	; 0x127e <__fixunssfsi+0x30>
    1258:	b9 2f       	mov	r27, r25
    125a:	99 27       	eor	r25, r25
    125c:	b7 51       	subi	r27, 0x17	; 23
    125e:	b0 f0       	brcs	.+44     	; 0x128c <__fixunssfsi+0x3e>
    1260:	e1 f0       	breq	.+56     	; 0x129a <__fixunssfsi+0x4c>
    1262:	66 0f       	add	r22, r22
    1264:	77 1f       	adc	r23, r23
    1266:	88 1f       	adc	r24, r24
    1268:	99 1f       	adc	r25, r25
    126a:	1a f0       	brmi	.+6      	; 0x1272 <__fixunssfsi+0x24>
    126c:	ba 95       	dec	r27
    126e:	c9 f7       	brne	.-14     	; 0x1262 <__fixunssfsi+0x14>
    1270:	14 c0       	rjmp	.+40     	; 0x129a <__fixunssfsi+0x4c>
    1272:	b1 30       	cpi	r27, 0x01	; 1
    1274:	91 f0       	breq	.+36     	; 0x129a <__fixunssfsi+0x4c>
    1276:	0e 94 01 0a 	call	0x1402	; 0x1402 <__fp_zero>
    127a:	b1 e0       	ldi	r27, 0x01	; 1
    127c:	08 95       	ret
    127e:	0c 94 01 0a 	jmp	0x1402	; 0x1402 <__fp_zero>
    1282:	67 2f       	mov	r22, r23
    1284:	78 2f       	mov	r23, r24
    1286:	88 27       	eor	r24, r24
    1288:	b8 5f       	subi	r27, 0xF8	; 248
    128a:	39 f0       	breq	.+14     	; 0x129a <__fixunssfsi+0x4c>
    128c:	b9 3f       	cpi	r27, 0xF9	; 249
    128e:	cc f3       	brlt	.-14     	; 0x1282 <__fixunssfsi+0x34>
    1290:	86 95       	lsr	r24
    1292:	77 95       	ror	r23
    1294:	67 95       	ror	r22
    1296:	b3 95       	inc	r27
    1298:	d9 f7       	brne	.-10     	; 0x1290 <__fixunssfsi+0x42>
    129a:	3e f4       	brtc	.+14     	; 0x12aa <__fixunssfsi+0x5c>
    129c:	90 95       	com	r25
    129e:	80 95       	com	r24
    12a0:	70 95       	com	r23
    12a2:	61 95       	neg	r22
    12a4:	7f 4f       	sbci	r23, 0xFF	; 255
    12a6:	8f 4f       	sbci	r24, 0xFF	; 255
    12a8:	9f 4f       	sbci	r25, 0xFF	; 255
    12aa:	08 95       	ret

000012ac <__floatunsisf>:
    12ac:	e8 94       	clt
    12ae:	09 c0       	rjmp	.+18     	; 0x12c2 <__floatsisf+0x12>

000012b0 <__floatsisf>:
    12b0:	97 fb       	bst	r25, 7
    12b2:	3e f4       	brtc	.+14     	; 0x12c2 <__floatsisf+0x12>
    12b4:	90 95       	com	r25
    12b6:	80 95       	com	r24
    12b8:	70 95       	com	r23
    12ba:	61 95       	neg	r22
    12bc:	7f 4f       	sbci	r23, 0xFF	; 255
    12be:	8f 4f       	sbci	r24, 0xFF	; 255
    12c0:	9f 4f       	sbci	r25, 0xFF	; 255
    12c2:	99 23       	and	r25, r25
    12c4:	a9 f0       	breq	.+42     	; 0x12f0 <__floatsisf+0x40>
    12c6:	f9 2f       	mov	r31, r25
    12c8:	96 e9       	ldi	r25, 0x96	; 150
    12ca:	bb 27       	eor	r27, r27
    12cc:	93 95       	inc	r25
    12ce:	f6 95       	lsr	r31
    12d0:	87 95       	ror	r24
    12d2:	77 95       	ror	r23
    12d4:	67 95       	ror	r22
    12d6:	b7 95       	ror	r27
    12d8:	f1 11       	cpse	r31, r1
    12da:	f8 cf       	rjmp	.-16     	; 0x12cc <__floatsisf+0x1c>
    12dc:	fa f4       	brpl	.+62     	; 0x131c <__floatsisf+0x6c>
    12de:	bb 0f       	add	r27, r27
    12e0:	11 f4       	brne	.+4      	; 0x12e6 <__floatsisf+0x36>
    12e2:	60 ff       	sbrs	r22, 0
    12e4:	1b c0       	rjmp	.+54     	; 0x131c <__floatsisf+0x6c>
    12e6:	6f 5f       	subi	r22, 0xFF	; 255
    12e8:	7f 4f       	sbci	r23, 0xFF	; 255
    12ea:	8f 4f       	sbci	r24, 0xFF	; 255
    12ec:	9f 4f       	sbci	r25, 0xFF	; 255
    12ee:	16 c0       	rjmp	.+44     	; 0x131c <__floatsisf+0x6c>
    12f0:	88 23       	and	r24, r24
    12f2:	11 f0       	breq	.+4      	; 0x12f8 <__floatsisf+0x48>
    12f4:	96 e9       	ldi	r25, 0x96	; 150
    12f6:	11 c0       	rjmp	.+34     	; 0x131a <__floatsisf+0x6a>
    12f8:	77 23       	and	r23, r23
    12fa:	21 f0       	breq	.+8      	; 0x1304 <__floatsisf+0x54>
    12fc:	9e e8       	ldi	r25, 0x8E	; 142
    12fe:	87 2f       	mov	r24, r23
    1300:	76 2f       	mov	r23, r22
    1302:	05 c0       	rjmp	.+10     	; 0x130e <__floatsisf+0x5e>
    1304:	66 23       	and	r22, r22
    1306:	71 f0       	breq	.+28     	; 0x1324 <__floatsisf+0x74>
    1308:	96 e8       	ldi	r25, 0x86	; 134
    130a:	86 2f       	mov	r24, r22
    130c:	70 e0       	ldi	r23, 0x00	; 0
    130e:	60 e0       	ldi	r22, 0x00	; 0
    1310:	2a f0       	brmi	.+10     	; 0x131c <__floatsisf+0x6c>
    1312:	9a 95       	dec	r25
    1314:	66 0f       	add	r22, r22
    1316:	77 1f       	adc	r23, r23
    1318:	88 1f       	adc	r24, r24
    131a:	da f7       	brpl	.-10     	; 0x1312 <__floatsisf+0x62>
    131c:	88 0f       	add	r24, r24
    131e:	96 95       	lsr	r25
    1320:	87 95       	ror	r24
    1322:	97 f9       	bld	r25, 7
    1324:	08 95       	ret

00001326 <__fp_cmp>:
    1326:	99 0f       	add	r25, r25
    1328:	00 08       	sbc	r0, r0
    132a:	55 0f       	add	r21, r21
    132c:	aa 0b       	sbc	r26, r26
    132e:	e0 e8       	ldi	r30, 0x80	; 128
    1330:	fe ef       	ldi	r31, 0xFE	; 254
    1332:	16 16       	cp	r1, r22
    1334:	17 06       	cpc	r1, r23
    1336:	e8 07       	cpc	r30, r24
    1338:	f9 07       	cpc	r31, r25
    133a:	c0 f0       	brcs	.+48     	; 0x136c <__fp_cmp+0x46>
    133c:	12 16       	cp	r1, r18
    133e:	13 06       	cpc	r1, r19
    1340:	e4 07       	cpc	r30, r20
    1342:	f5 07       	cpc	r31, r21
    1344:	98 f0       	brcs	.+38     	; 0x136c <__fp_cmp+0x46>
    1346:	62 1b       	sub	r22, r18
    1348:	73 0b       	sbc	r23, r19
    134a:	84 0b       	sbc	r24, r20
    134c:	95 0b       	sbc	r25, r21
    134e:	39 f4       	brne	.+14     	; 0x135e <__fp_cmp+0x38>
    1350:	0a 26       	eor	r0, r26
    1352:	61 f0       	breq	.+24     	; 0x136c <__fp_cmp+0x46>
    1354:	23 2b       	or	r18, r19
    1356:	24 2b       	or	r18, r20
    1358:	25 2b       	or	r18, r21
    135a:	21 f4       	brne	.+8      	; 0x1364 <__fp_cmp+0x3e>
    135c:	08 95       	ret
    135e:	0a 26       	eor	r0, r26
    1360:	09 f4       	brne	.+2      	; 0x1364 <__fp_cmp+0x3e>
    1362:	a1 40       	sbci	r26, 0x01	; 1
    1364:	a6 95       	lsr	r26
    1366:	8f ef       	ldi	r24, 0xFF	; 255
    1368:	81 1d       	adc	r24, r1
    136a:	81 1d       	adc	r24, r1
    136c:	08 95       	ret

0000136e <__fp_inf>:
    136e:	97 f9       	bld	r25, 7
    1370:	9f 67       	ori	r25, 0x7F	; 127
    1372:	80 e8       	ldi	r24, 0x80	; 128
    1374:	70 e0       	ldi	r23, 0x00	; 0
    1376:	60 e0       	ldi	r22, 0x00	; 0
    1378:	08 95       	ret

0000137a <__fp_nan>:
    137a:	9f ef       	ldi	r25, 0xFF	; 255
    137c:	80 ec       	ldi	r24, 0xC0	; 192
    137e:	08 95       	ret

00001380 <__fp_pscA>:
    1380:	00 24       	eor	r0, r0
    1382:	0a 94       	dec	r0
    1384:	16 16       	cp	r1, r22
    1386:	17 06       	cpc	r1, r23
    1388:	18 06       	cpc	r1, r24
    138a:	09 06       	cpc	r0, r25
    138c:	08 95       	ret

0000138e <__fp_pscB>:
    138e:	00 24       	eor	r0, r0
    1390:	0a 94       	dec	r0
    1392:	12 16       	cp	r1, r18
    1394:	13 06       	cpc	r1, r19
    1396:	14 06       	cpc	r1, r20
    1398:	05 06       	cpc	r0, r21
    139a:	08 95       	ret

0000139c <__fp_round>:
    139c:	09 2e       	mov	r0, r25
    139e:	03 94       	inc	r0
    13a0:	00 0c       	add	r0, r0
    13a2:	11 f4       	brne	.+4      	; 0x13a8 <__fp_round+0xc>
    13a4:	88 23       	and	r24, r24
    13a6:	52 f0       	brmi	.+20     	; 0x13bc <__fp_round+0x20>
    13a8:	bb 0f       	add	r27, r27
    13aa:	40 f4       	brcc	.+16     	; 0x13bc <__fp_round+0x20>
    13ac:	bf 2b       	or	r27, r31
    13ae:	11 f4       	brne	.+4      	; 0x13b4 <__fp_round+0x18>
    13b0:	60 ff       	sbrs	r22, 0
    13b2:	04 c0       	rjmp	.+8      	; 0x13bc <__fp_round+0x20>
    13b4:	6f 5f       	subi	r22, 0xFF	; 255
    13b6:	7f 4f       	sbci	r23, 0xFF	; 255
    13b8:	8f 4f       	sbci	r24, 0xFF	; 255
    13ba:	9f 4f       	sbci	r25, 0xFF	; 255
    13bc:	08 95       	ret

000013be <__fp_split3>:
    13be:	57 fd       	sbrc	r21, 7
    13c0:	90 58       	subi	r25, 0x80	; 128
    13c2:	44 0f       	add	r20, r20
    13c4:	55 1f       	adc	r21, r21
    13c6:	59 f0       	breq	.+22     	; 0x13de <__fp_splitA+0x10>
    13c8:	5f 3f       	cpi	r21, 0xFF	; 255
    13ca:	71 f0       	breq	.+28     	; 0x13e8 <__fp_splitA+0x1a>
    13cc:	47 95       	ror	r20

000013ce <__fp_splitA>:
    13ce:	88 0f       	add	r24, r24
    13d0:	97 fb       	bst	r25, 7
    13d2:	99 1f       	adc	r25, r25
    13d4:	61 f0       	breq	.+24     	; 0x13ee <__fp_splitA+0x20>
    13d6:	9f 3f       	cpi	r25, 0xFF	; 255
    13d8:	79 f0       	breq	.+30     	; 0x13f8 <__fp_splitA+0x2a>
    13da:	87 95       	ror	r24
    13dc:	08 95       	ret
    13de:	12 16       	cp	r1, r18
    13e0:	13 06       	cpc	r1, r19
    13e2:	14 06       	cpc	r1, r20
    13e4:	55 1f       	adc	r21, r21
    13e6:	f2 cf       	rjmp	.-28     	; 0x13cc <__fp_split3+0xe>
    13e8:	46 95       	lsr	r20
    13ea:	f1 df       	rcall	.-30     	; 0x13ce <__fp_splitA>
    13ec:	08 c0       	rjmp	.+16     	; 0x13fe <__fp_splitA+0x30>
    13ee:	16 16       	cp	r1, r22
    13f0:	17 06       	cpc	r1, r23
    13f2:	18 06       	cpc	r1, r24
    13f4:	99 1f       	adc	r25, r25
    13f6:	f1 cf       	rjmp	.-30     	; 0x13da <__fp_splitA+0xc>
    13f8:	86 95       	lsr	r24
    13fa:	71 05       	cpc	r23, r1
    13fc:	61 05       	cpc	r22, r1
    13fe:	08 94       	sec
    1400:	08 95       	ret

00001402 <__fp_zero>:
    1402:	e8 94       	clt

00001404 <__fp_szero>:
    1404:	bb 27       	eor	r27, r27
    1406:	66 27       	eor	r22, r22
    1408:	77 27       	eor	r23, r23
    140a:	cb 01       	movw	r24, r22
    140c:	97 f9       	bld	r25, 7
    140e:	08 95       	ret

00001410 <__gesf2>:
    1410:	0e 94 93 09 	call	0x1326	; 0x1326 <__fp_cmp>
    1414:	08 f4       	brcc	.+2      	; 0x1418 <__gesf2+0x8>
    1416:	8f ef       	ldi	r24, 0xFF	; 255
    1418:	08 95       	ret

0000141a <__mulsf3>:
    141a:	0e 94 20 0a 	call	0x1440	; 0x1440 <__mulsf3x>
    141e:	0c 94 ce 09 	jmp	0x139c	; 0x139c <__fp_round>
    1422:	0e 94 c0 09 	call	0x1380	; 0x1380 <__fp_pscA>
    1426:	38 f0       	brcs	.+14     	; 0x1436 <__mulsf3+0x1c>
    1428:	0e 94 c7 09 	call	0x138e	; 0x138e <__fp_pscB>
    142c:	20 f0       	brcs	.+8      	; 0x1436 <__mulsf3+0x1c>
    142e:	95 23       	and	r25, r21
    1430:	11 f0       	breq	.+4      	; 0x1436 <__mulsf3+0x1c>
    1432:	0c 94 b7 09 	jmp	0x136e	; 0x136e <__fp_inf>
    1436:	0c 94 bd 09 	jmp	0x137a	; 0x137a <__fp_nan>
    143a:	11 24       	eor	r1, r1
    143c:	0c 94 02 0a 	jmp	0x1404	; 0x1404 <__fp_szero>

00001440 <__mulsf3x>:
    1440:	0e 94 df 09 	call	0x13be	; 0x13be <__fp_split3>
    1444:	70 f3       	brcs	.-36     	; 0x1422 <__mulsf3+0x8>

00001446 <__mulsf3_pse>:
    1446:	95 9f       	mul	r25, r21
    1448:	c1 f3       	breq	.-16     	; 0x143a <__mulsf3+0x20>
    144a:	95 0f       	add	r25, r21
    144c:	50 e0       	ldi	r21, 0x00	; 0
    144e:	55 1f       	adc	r21, r21
    1450:	62 9f       	mul	r22, r18
    1452:	f0 01       	movw	r30, r0
    1454:	72 9f       	mul	r23, r18
    1456:	bb 27       	eor	r27, r27
    1458:	f0 0d       	add	r31, r0
    145a:	b1 1d       	adc	r27, r1
    145c:	63 9f       	mul	r22, r19
    145e:	aa 27       	eor	r26, r26
    1460:	f0 0d       	add	r31, r0
    1462:	b1 1d       	adc	r27, r1
    1464:	aa 1f       	adc	r26, r26
    1466:	64 9f       	mul	r22, r20
    1468:	66 27       	eor	r22, r22
    146a:	b0 0d       	add	r27, r0
    146c:	a1 1d       	adc	r26, r1
    146e:	66 1f       	adc	r22, r22
    1470:	82 9f       	mul	r24, r18
    1472:	22 27       	eor	r18, r18
    1474:	b0 0d       	add	r27, r0
    1476:	a1 1d       	adc	r26, r1
    1478:	62 1f       	adc	r22, r18
    147a:	73 9f       	mul	r23, r19
    147c:	b0 0d       	add	r27, r0
    147e:	a1 1d       	adc	r26, r1
    1480:	62 1f       	adc	r22, r18
    1482:	83 9f       	mul	r24, r19
    1484:	a0 0d       	add	r26, r0
    1486:	61 1d       	adc	r22, r1
    1488:	22 1f       	adc	r18, r18
    148a:	74 9f       	mul	r23, r20
    148c:	33 27       	eor	r19, r19
    148e:	a0 0d       	add	r26, r0
    1490:	61 1d       	adc	r22, r1
    1492:	23 1f       	adc	r18, r19
    1494:	84 9f       	mul	r24, r20
    1496:	60 0d       	add	r22, r0
    1498:	21 1d       	adc	r18, r1
    149a:	82 2f       	mov	r24, r18
    149c:	76 2f       	mov	r23, r22
    149e:	6a 2f       	mov	r22, r26
    14a0:	11 24       	eor	r1, r1
    14a2:	9f 57       	subi	r25, 0x7F	; 127
    14a4:	50 40       	sbci	r21, 0x00	; 0
    14a6:	9a f0       	brmi	.+38     	; 0x14ce <__mulsf3_pse+0x88>
    14a8:	f1 f0       	breq	.+60     	; 0x14e6 <__mulsf3_pse+0xa0>
    14aa:	88 23       	and	r24, r24
    14ac:	4a f0       	brmi	.+18     	; 0x14c0 <__mulsf3_pse+0x7a>
    14ae:	ee 0f       	add	r30, r30
    14b0:	ff 1f       	adc	r31, r31
    14b2:	bb 1f       	adc	r27, r27
    14b4:	66 1f       	adc	r22, r22
    14b6:	77 1f       	adc	r23, r23
    14b8:	88 1f       	adc	r24, r24
    14ba:	91 50       	subi	r25, 0x01	; 1
    14bc:	50 40       	sbci	r21, 0x00	; 0
    14be:	a9 f7       	brne	.-22     	; 0x14aa <__mulsf3_pse+0x64>
    14c0:	9e 3f       	cpi	r25, 0xFE	; 254
    14c2:	51 05       	cpc	r21, r1
    14c4:	80 f0       	brcs	.+32     	; 0x14e6 <__mulsf3_pse+0xa0>
    14c6:	0c 94 b7 09 	jmp	0x136e	; 0x136e <__fp_inf>
    14ca:	0c 94 02 0a 	jmp	0x1404	; 0x1404 <__fp_szero>
    14ce:	5f 3f       	cpi	r21, 0xFF	; 255
    14d0:	e4 f3       	brlt	.-8      	; 0x14ca <__mulsf3_pse+0x84>
    14d2:	98 3e       	cpi	r25, 0xE8	; 232
    14d4:	d4 f3       	brlt	.-12     	; 0x14ca <__mulsf3_pse+0x84>
    14d6:	86 95       	lsr	r24
    14d8:	77 95       	ror	r23
    14da:	67 95       	ror	r22
    14dc:	b7 95       	ror	r27
    14de:	f7 95       	ror	r31
    14e0:	e7 95       	ror	r30
    14e2:	9f 5f       	subi	r25, 0xFF	; 255
    14e4:	c1 f7       	brne	.-16     	; 0x14d6 <__mulsf3_pse+0x90>
    14e6:	fe 2b       	or	r31, r30
    14e8:	88 0f       	add	r24, r24
    14ea:	91 1d       	adc	r25, r1
    14ec:	96 95       	lsr	r25
    14ee:	87 95       	ror	r24
    14f0:	97 f9       	bld	r25, 7
    14f2:	08 95       	ret

000014f4 <__tablejump2__>:
    14f4:	ee 0f       	add	r30, r30
    14f6:	ff 1f       	adc	r31, r31
    14f8:	05 90       	lpm	r0, Z+
    14fa:	f4 91       	lpm	r31, Z
    14fc:	e0 2d       	mov	r30, r0
    14fe:	09 94       	ijmp

00001500 <dtostrf>:
    1500:	ef 92       	push	r14
    1502:	0f 93       	push	r16
    1504:	1f 93       	push	r17
    1506:	cf 93       	push	r28
    1508:	df 93       	push	r29
    150a:	e8 01       	movw	r28, r16
    150c:	47 fd       	sbrc	r20, 7
    150e:	02 c0       	rjmp	.+4      	; 0x1514 <dtostrf+0x14>
    1510:	34 e0       	ldi	r19, 0x04	; 4
    1512:	01 c0       	rjmp	.+2      	; 0x1516 <dtostrf+0x16>
    1514:	34 e1       	ldi	r19, 0x14	; 20
    1516:	04 2e       	mov	r0, r20
    1518:	00 0c       	add	r0, r0
    151a:	55 0b       	sbc	r21, r21
    151c:	57 ff       	sbrs	r21, 7
    151e:	03 c0       	rjmp	.+6      	; 0x1526 <dtostrf+0x26>
    1520:	51 95       	neg	r21
    1522:	41 95       	neg	r20
    1524:	51 09       	sbc	r21, r1
    1526:	e3 2e       	mov	r14, r19
    1528:	02 2f       	mov	r16, r18
    152a:	24 2f       	mov	r18, r20
    152c:	ae 01       	movw	r20, r28
    152e:	0e 94 b1 0c 	call	0x1962	; 0x1962 <dtoa_prf>
    1532:	ce 01       	movw	r24, r28
    1534:	df 91       	pop	r29
    1536:	cf 91       	pop	r28
    1538:	1f 91       	pop	r17
    153a:	0f 91       	pop	r16
    153c:	ef 90       	pop	r14
    153e:	08 95       	ret

00001540 <snprintf>:
    1540:	ae e0       	ldi	r26, 0x0E	; 14
    1542:	b0 e0       	ldi	r27, 0x00	; 0
    1544:	e6 ea       	ldi	r30, 0xA6	; 166
    1546:	fa e0       	ldi	r31, 0x0A	; 10
    1548:	0c 94 a1 0f 	jmp	0x1f42	; 0x1f42 <__prologue_saves__+0x1c>
    154c:	0d 89       	ldd	r16, Y+21	; 0x15
    154e:	1e 89       	ldd	r17, Y+22	; 0x16
    1550:	8f 89       	ldd	r24, Y+23	; 0x17
    1552:	98 8d       	ldd	r25, Y+24	; 0x18
    1554:	26 e0       	ldi	r18, 0x06	; 6
    1556:	2c 83       	std	Y+4, r18	; 0x04
    1558:	1a 83       	std	Y+2, r17	; 0x02
    155a:	09 83       	std	Y+1, r16	; 0x01
    155c:	97 ff       	sbrs	r25, 7
    155e:	02 c0       	rjmp	.+4      	; 0x1564 <snprintf+0x24>
    1560:	80 e0       	ldi	r24, 0x00	; 0
    1562:	90 e8       	ldi	r25, 0x80	; 128
    1564:	01 97       	sbiw	r24, 0x01	; 1
    1566:	9e 83       	std	Y+6, r25	; 0x06
    1568:	8d 83       	std	Y+5, r24	; 0x05
    156a:	ae 01       	movw	r20, r28
    156c:	45 5e       	subi	r20, 0xE5	; 229
    156e:	5f 4f       	sbci	r21, 0xFF	; 255
    1570:	69 8d       	ldd	r22, Y+25	; 0x19
    1572:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1574:	ce 01       	movw	r24, r28
    1576:	01 96       	adiw	r24, 0x01	; 1
    1578:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <vfprintf>
    157c:	4d 81       	ldd	r20, Y+5	; 0x05
    157e:	5e 81       	ldd	r21, Y+6	; 0x06
    1580:	57 fd       	sbrc	r21, 7
    1582:	0a c0       	rjmp	.+20     	; 0x1598 <snprintf+0x58>
    1584:	2f 81       	ldd	r18, Y+7	; 0x07
    1586:	38 85       	ldd	r19, Y+8	; 0x08
    1588:	42 17       	cp	r20, r18
    158a:	53 07       	cpc	r21, r19
    158c:	0c f4       	brge	.+2      	; 0x1590 <snprintf+0x50>
    158e:	9a 01       	movw	r18, r20
    1590:	f8 01       	movw	r30, r16
    1592:	e2 0f       	add	r30, r18
    1594:	f3 1f       	adc	r31, r19
    1596:	10 82       	st	Z, r1
    1598:	2e 96       	adiw	r28, 0x0e	; 14
    159a:	e4 e0       	ldi	r30, 0x04	; 4
    159c:	0c 94 bd 0f 	jmp	0x1f7a	; 0x1f7a <__epilogue_restores__+0x1c>

000015a0 <vfprintf>:
    15a0:	ab e0       	ldi	r26, 0x0B	; 11
    15a2:	b0 e0       	ldi	r27, 0x00	; 0
    15a4:	e6 ed       	ldi	r30, 0xD6	; 214
    15a6:	fa e0       	ldi	r31, 0x0A	; 10
    15a8:	0c 94 93 0f 	jmp	0x1f26	; 0x1f26 <__prologue_saves__>
    15ac:	6c 01       	movw	r12, r24
    15ae:	7b 01       	movw	r14, r22
    15b0:	8a 01       	movw	r16, r20
    15b2:	fc 01       	movw	r30, r24
    15b4:	17 82       	std	Z+7, r1	; 0x07
    15b6:	16 82       	std	Z+6, r1	; 0x06
    15b8:	83 81       	ldd	r24, Z+3	; 0x03
    15ba:	81 ff       	sbrs	r24, 1
    15bc:	cc c1       	rjmp	.+920    	; 0x1956 <vfprintf+0x3b6>
    15be:	ce 01       	movw	r24, r28
    15c0:	01 96       	adiw	r24, 0x01	; 1
    15c2:	3c 01       	movw	r6, r24
    15c4:	f6 01       	movw	r30, r12
    15c6:	93 81       	ldd	r25, Z+3	; 0x03
    15c8:	f7 01       	movw	r30, r14
    15ca:	93 fd       	sbrc	r25, 3
    15cc:	85 91       	lpm	r24, Z+
    15ce:	93 ff       	sbrs	r25, 3
    15d0:	81 91       	ld	r24, Z+
    15d2:	7f 01       	movw	r14, r30
    15d4:	88 23       	and	r24, r24
    15d6:	09 f4       	brne	.+2      	; 0x15da <vfprintf+0x3a>
    15d8:	ba c1       	rjmp	.+884    	; 0x194e <vfprintf+0x3ae>
    15da:	85 32       	cpi	r24, 0x25	; 37
    15dc:	39 f4       	brne	.+14     	; 0x15ec <vfprintf+0x4c>
    15de:	93 fd       	sbrc	r25, 3
    15e0:	85 91       	lpm	r24, Z+
    15e2:	93 ff       	sbrs	r25, 3
    15e4:	81 91       	ld	r24, Z+
    15e6:	7f 01       	movw	r14, r30
    15e8:	85 32       	cpi	r24, 0x25	; 37
    15ea:	29 f4       	brne	.+10     	; 0x15f6 <vfprintf+0x56>
    15ec:	b6 01       	movw	r22, r12
    15ee:	90 e0       	ldi	r25, 0x00	; 0
    15f0:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <fputc>
    15f4:	e7 cf       	rjmp	.-50     	; 0x15c4 <vfprintf+0x24>
    15f6:	91 2c       	mov	r9, r1
    15f8:	21 2c       	mov	r2, r1
    15fa:	31 2c       	mov	r3, r1
    15fc:	ff e1       	ldi	r31, 0x1F	; 31
    15fe:	f3 15       	cp	r31, r3
    1600:	d8 f0       	brcs	.+54     	; 0x1638 <vfprintf+0x98>
    1602:	8b 32       	cpi	r24, 0x2B	; 43
    1604:	79 f0       	breq	.+30     	; 0x1624 <vfprintf+0x84>
    1606:	38 f4       	brcc	.+14     	; 0x1616 <vfprintf+0x76>
    1608:	80 32       	cpi	r24, 0x20	; 32
    160a:	79 f0       	breq	.+30     	; 0x162a <vfprintf+0x8a>
    160c:	83 32       	cpi	r24, 0x23	; 35
    160e:	a1 f4       	brne	.+40     	; 0x1638 <vfprintf+0x98>
    1610:	23 2d       	mov	r18, r3
    1612:	20 61       	ori	r18, 0x10	; 16
    1614:	1d c0       	rjmp	.+58     	; 0x1650 <vfprintf+0xb0>
    1616:	8d 32       	cpi	r24, 0x2D	; 45
    1618:	61 f0       	breq	.+24     	; 0x1632 <vfprintf+0x92>
    161a:	80 33       	cpi	r24, 0x30	; 48
    161c:	69 f4       	brne	.+26     	; 0x1638 <vfprintf+0x98>
    161e:	23 2d       	mov	r18, r3
    1620:	21 60       	ori	r18, 0x01	; 1
    1622:	16 c0       	rjmp	.+44     	; 0x1650 <vfprintf+0xb0>
    1624:	83 2d       	mov	r24, r3
    1626:	82 60       	ori	r24, 0x02	; 2
    1628:	38 2e       	mov	r3, r24
    162a:	e3 2d       	mov	r30, r3
    162c:	e4 60       	ori	r30, 0x04	; 4
    162e:	3e 2e       	mov	r3, r30
    1630:	2a c0       	rjmp	.+84     	; 0x1686 <vfprintf+0xe6>
    1632:	f3 2d       	mov	r31, r3
    1634:	f8 60       	ori	r31, 0x08	; 8
    1636:	1d c0       	rjmp	.+58     	; 0x1672 <vfprintf+0xd2>
    1638:	37 fc       	sbrc	r3, 7
    163a:	2d c0       	rjmp	.+90     	; 0x1696 <vfprintf+0xf6>
    163c:	20 ed       	ldi	r18, 0xD0	; 208
    163e:	28 0f       	add	r18, r24
    1640:	2a 30       	cpi	r18, 0x0A	; 10
    1642:	40 f0       	brcs	.+16     	; 0x1654 <vfprintf+0xb4>
    1644:	8e 32       	cpi	r24, 0x2E	; 46
    1646:	b9 f4       	brne	.+46     	; 0x1676 <vfprintf+0xd6>
    1648:	36 fc       	sbrc	r3, 6
    164a:	81 c1       	rjmp	.+770    	; 0x194e <vfprintf+0x3ae>
    164c:	23 2d       	mov	r18, r3
    164e:	20 64       	ori	r18, 0x40	; 64
    1650:	32 2e       	mov	r3, r18
    1652:	19 c0       	rjmp	.+50     	; 0x1686 <vfprintf+0xe6>
    1654:	36 fe       	sbrs	r3, 6
    1656:	06 c0       	rjmp	.+12     	; 0x1664 <vfprintf+0xc4>
    1658:	8a e0       	ldi	r24, 0x0A	; 10
    165a:	98 9e       	mul	r9, r24
    165c:	20 0d       	add	r18, r0
    165e:	11 24       	eor	r1, r1
    1660:	92 2e       	mov	r9, r18
    1662:	11 c0       	rjmp	.+34     	; 0x1686 <vfprintf+0xe6>
    1664:	ea e0       	ldi	r30, 0x0A	; 10
    1666:	2e 9e       	mul	r2, r30
    1668:	20 0d       	add	r18, r0
    166a:	11 24       	eor	r1, r1
    166c:	22 2e       	mov	r2, r18
    166e:	f3 2d       	mov	r31, r3
    1670:	f0 62       	ori	r31, 0x20	; 32
    1672:	3f 2e       	mov	r3, r31
    1674:	08 c0       	rjmp	.+16     	; 0x1686 <vfprintf+0xe6>
    1676:	8c 36       	cpi	r24, 0x6C	; 108
    1678:	21 f4       	brne	.+8      	; 0x1682 <vfprintf+0xe2>
    167a:	83 2d       	mov	r24, r3
    167c:	80 68       	ori	r24, 0x80	; 128
    167e:	38 2e       	mov	r3, r24
    1680:	02 c0       	rjmp	.+4      	; 0x1686 <vfprintf+0xe6>
    1682:	88 36       	cpi	r24, 0x68	; 104
    1684:	41 f4       	brne	.+16     	; 0x1696 <vfprintf+0xf6>
    1686:	f7 01       	movw	r30, r14
    1688:	93 fd       	sbrc	r25, 3
    168a:	85 91       	lpm	r24, Z+
    168c:	93 ff       	sbrs	r25, 3
    168e:	81 91       	ld	r24, Z+
    1690:	7f 01       	movw	r14, r30
    1692:	81 11       	cpse	r24, r1
    1694:	b3 cf       	rjmp	.-154    	; 0x15fc <vfprintf+0x5c>
    1696:	98 2f       	mov	r25, r24
    1698:	9f 7d       	andi	r25, 0xDF	; 223
    169a:	95 54       	subi	r25, 0x45	; 69
    169c:	93 30       	cpi	r25, 0x03	; 3
    169e:	28 f4       	brcc	.+10     	; 0x16aa <vfprintf+0x10a>
    16a0:	0c 5f       	subi	r16, 0xFC	; 252
    16a2:	1f 4f       	sbci	r17, 0xFF	; 255
    16a4:	9f e3       	ldi	r25, 0x3F	; 63
    16a6:	99 83       	std	Y+1, r25	; 0x01
    16a8:	0d c0       	rjmp	.+26     	; 0x16c4 <vfprintf+0x124>
    16aa:	83 36       	cpi	r24, 0x63	; 99
    16ac:	31 f0       	breq	.+12     	; 0x16ba <vfprintf+0x11a>
    16ae:	83 37       	cpi	r24, 0x73	; 115
    16b0:	71 f0       	breq	.+28     	; 0x16ce <vfprintf+0x12e>
    16b2:	83 35       	cpi	r24, 0x53	; 83
    16b4:	09 f0       	breq	.+2      	; 0x16b8 <vfprintf+0x118>
    16b6:	59 c0       	rjmp	.+178    	; 0x176a <vfprintf+0x1ca>
    16b8:	21 c0       	rjmp	.+66     	; 0x16fc <vfprintf+0x15c>
    16ba:	f8 01       	movw	r30, r16
    16bc:	80 81       	ld	r24, Z
    16be:	89 83       	std	Y+1, r24	; 0x01
    16c0:	0e 5f       	subi	r16, 0xFE	; 254
    16c2:	1f 4f       	sbci	r17, 0xFF	; 255
    16c4:	88 24       	eor	r8, r8
    16c6:	83 94       	inc	r8
    16c8:	91 2c       	mov	r9, r1
    16ca:	53 01       	movw	r10, r6
    16cc:	13 c0       	rjmp	.+38     	; 0x16f4 <vfprintf+0x154>
    16ce:	28 01       	movw	r4, r16
    16d0:	f2 e0       	ldi	r31, 0x02	; 2
    16d2:	4f 0e       	add	r4, r31
    16d4:	51 1c       	adc	r5, r1
    16d6:	f8 01       	movw	r30, r16
    16d8:	a0 80       	ld	r10, Z
    16da:	b1 80       	ldd	r11, Z+1	; 0x01
    16dc:	36 fe       	sbrs	r3, 6
    16de:	03 c0       	rjmp	.+6      	; 0x16e6 <vfprintf+0x146>
    16e0:	69 2d       	mov	r22, r9
    16e2:	70 e0       	ldi	r23, 0x00	; 0
    16e4:	02 c0       	rjmp	.+4      	; 0x16ea <vfprintf+0x14a>
    16e6:	6f ef       	ldi	r22, 0xFF	; 255
    16e8:	7f ef       	ldi	r23, 0xFF	; 255
    16ea:	c5 01       	movw	r24, r10
    16ec:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <strnlen>
    16f0:	4c 01       	movw	r8, r24
    16f2:	82 01       	movw	r16, r4
    16f4:	f3 2d       	mov	r31, r3
    16f6:	ff 77       	andi	r31, 0x7F	; 127
    16f8:	3f 2e       	mov	r3, r31
    16fa:	16 c0       	rjmp	.+44     	; 0x1728 <vfprintf+0x188>
    16fc:	28 01       	movw	r4, r16
    16fe:	22 e0       	ldi	r18, 0x02	; 2
    1700:	42 0e       	add	r4, r18
    1702:	51 1c       	adc	r5, r1
    1704:	f8 01       	movw	r30, r16
    1706:	a0 80       	ld	r10, Z
    1708:	b1 80       	ldd	r11, Z+1	; 0x01
    170a:	36 fe       	sbrs	r3, 6
    170c:	03 c0       	rjmp	.+6      	; 0x1714 <vfprintf+0x174>
    170e:	69 2d       	mov	r22, r9
    1710:	70 e0       	ldi	r23, 0x00	; 0
    1712:	02 c0       	rjmp	.+4      	; 0x1718 <vfprintf+0x178>
    1714:	6f ef       	ldi	r22, 0xFF	; 255
    1716:	7f ef       	ldi	r23, 0xFF	; 255
    1718:	c5 01       	movw	r24, r10
    171a:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <strnlen_P>
    171e:	4c 01       	movw	r8, r24
    1720:	f3 2d       	mov	r31, r3
    1722:	f0 68       	ori	r31, 0x80	; 128
    1724:	3f 2e       	mov	r3, r31
    1726:	82 01       	movw	r16, r4
    1728:	33 fc       	sbrc	r3, 3
    172a:	1b c0       	rjmp	.+54     	; 0x1762 <vfprintf+0x1c2>
    172c:	82 2d       	mov	r24, r2
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	88 16       	cp	r8, r24
    1732:	99 06       	cpc	r9, r25
    1734:	b0 f4       	brcc	.+44     	; 0x1762 <vfprintf+0x1c2>
    1736:	b6 01       	movw	r22, r12
    1738:	80 e2       	ldi	r24, 0x20	; 32
    173a:	90 e0       	ldi	r25, 0x00	; 0
    173c:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <fputc>
    1740:	2a 94       	dec	r2
    1742:	f4 cf       	rjmp	.-24     	; 0x172c <vfprintf+0x18c>
    1744:	f5 01       	movw	r30, r10
    1746:	37 fc       	sbrc	r3, 7
    1748:	85 91       	lpm	r24, Z+
    174a:	37 fe       	sbrs	r3, 7
    174c:	81 91       	ld	r24, Z+
    174e:	5f 01       	movw	r10, r30
    1750:	b6 01       	movw	r22, r12
    1752:	90 e0       	ldi	r25, 0x00	; 0
    1754:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <fputc>
    1758:	21 10       	cpse	r2, r1
    175a:	2a 94       	dec	r2
    175c:	21 e0       	ldi	r18, 0x01	; 1
    175e:	82 1a       	sub	r8, r18
    1760:	91 08       	sbc	r9, r1
    1762:	81 14       	cp	r8, r1
    1764:	91 04       	cpc	r9, r1
    1766:	71 f7       	brne	.-36     	; 0x1744 <vfprintf+0x1a4>
    1768:	e8 c0       	rjmp	.+464    	; 0x193a <vfprintf+0x39a>
    176a:	84 36       	cpi	r24, 0x64	; 100
    176c:	11 f0       	breq	.+4      	; 0x1772 <vfprintf+0x1d2>
    176e:	89 36       	cpi	r24, 0x69	; 105
    1770:	41 f5       	brne	.+80     	; 0x17c2 <vfprintf+0x222>
    1772:	f8 01       	movw	r30, r16
    1774:	37 fe       	sbrs	r3, 7
    1776:	07 c0       	rjmp	.+14     	; 0x1786 <vfprintf+0x1e6>
    1778:	60 81       	ld	r22, Z
    177a:	71 81       	ldd	r23, Z+1	; 0x01
    177c:	82 81       	ldd	r24, Z+2	; 0x02
    177e:	93 81       	ldd	r25, Z+3	; 0x03
    1780:	0c 5f       	subi	r16, 0xFC	; 252
    1782:	1f 4f       	sbci	r17, 0xFF	; 255
    1784:	08 c0       	rjmp	.+16     	; 0x1796 <vfprintf+0x1f6>
    1786:	60 81       	ld	r22, Z
    1788:	71 81       	ldd	r23, Z+1	; 0x01
    178a:	07 2e       	mov	r0, r23
    178c:	00 0c       	add	r0, r0
    178e:	88 0b       	sbc	r24, r24
    1790:	99 0b       	sbc	r25, r25
    1792:	0e 5f       	subi	r16, 0xFE	; 254
    1794:	1f 4f       	sbci	r17, 0xFF	; 255
    1796:	f3 2d       	mov	r31, r3
    1798:	ff 76       	andi	r31, 0x6F	; 111
    179a:	3f 2e       	mov	r3, r31
    179c:	97 ff       	sbrs	r25, 7
    179e:	09 c0       	rjmp	.+18     	; 0x17b2 <vfprintf+0x212>
    17a0:	90 95       	com	r25
    17a2:	80 95       	com	r24
    17a4:	70 95       	com	r23
    17a6:	61 95       	neg	r22
    17a8:	7f 4f       	sbci	r23, 0xFF	; 255
    17aa:	8f 4f       	sbci	r24, 0xFF	; 255
    17ac:	9f 4f       	sbci	r25, 0xFF	; 255
    17ae:	f0 68       	ori	r31, 0x80	; 128
    17b0:	3f 2e       	mov	r3, r31
    17b2:	2a e0       	ldi	r18, 0x0A	; 10
    17b4:	30 e0       	ldi	r19, 0x00	; 0
    17b6:	a3 01       	movw	r20, r6
    17b8:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <__ultoa_invert>
    17bc:	88 2e       	mov	r8, r24
    17be:	86 18       	sub	r8, r6
    17c0:	45 c0       	rjmp	.+138    	; 0x184c <vfprintf+0x2ac>
    17c2:	85 37       	cpi	r24, 0x75	; 117
    17c4:	31 f4       	brne	.+12     	; 0x17d2 <vfprintf+0x232>
    17c6:	23 2d       	mov	r18, r3
    17c8:	2f 7e       	andi	r18, 0xEF	; 239
    17ca:	b2 2e       	mov	r11, r18
    17cc:	2a e0       	ldi	r18, 0x0A	; 10
    17ce:	30 e0       	ldi	r19, 0x00	; 0
    17d0:	25 c0       	rjmp	.+74     	; 0x181c <vfprintf+0x27c>
    17d2:	93 2d       	mov	r25, r3
    17d4:	99 7f       	andi	r25, 0xF9	; 249
    17d6:	b9 2e       	mov	r11, r25
    17d8:	8f 36       	cpi	r24, 0x6F	; 111
    17da:	c1 f0       	breq	.+48     	; 0x180c <vfprintf+0x26c>
    17dc:	18 f4       	brcc	.+6      	; 0x17e4 <vfprintf+0x244>
    17de:	88 35       	cpi	r24, 0x58	; 88
    17e0:	79 f0       	breq	.+30     	; 0x1800 <vfprintf+0x260>
    17e2:	b5 c0       	rjmp	.+362    	; 0x194e <vfprintf+0x3ae>
    17e4:	80 37       	cpi	r24, 0x70	; 112
    17e6:	19 f0       	breq	.+6      	; 0x17ee <vfprintf+0x24e>
    17e8:	88 37       	cpi	r24, 0x78	; 120
    17ea:	21 f0       	breq	.+8      	; 0x17f4 <vfprintf+0x254>
    17ec:	b0 c0       	rjmp	.+352    	; 0x194e <vfprintf+0x3ae>
    17ee:	e9 2f       	mov	r30, r25
    17f0:	e0 61       	ori	r30, 0x10	; 16
    17f2:	be 2e       	mov	r11, r30
    17f4:	b4 fe       	sbrs	r11, 4
    17f6:	0d c0       	rjmp	.+26     	; 0x1812 <vfprintf+0x272>
    17f8:	fb 2d       	mov	r31, r11
    17fa:	f4 60       	ori	r31, 0x04	; 4
    17fc:	bf 2e       	mov	r11, r31
    17fe:	09 c0       	rjmp	.+18     	; 0x1812 <vfprintf+0x272>
    1800:	34 fe       	sbrs	r3, 4
    1802:	0a c0       	rjmp	.+20     	; 0x1818 <vfprintf+0x278>
    1804:	29 2f       	mov	r18, r25
    1806:	26 60       	ori	r18, 0x06	; 6
    1808:	b2 2e       	mov	r11, r18
    180a:	06 c0       	rjmp	.+12     	; 0x1818 <vfprintf+0x278>
    180c:	28 e0       	ldi	r18, 0x08	; 8
    180e:	30 e0       	ldi	r19, 0x00	; 0
    1810:	05 c0       	rjmp	.+10     	; 0x181c <vfprintf+0x27c>
    1812:	20 e1       	ldi	r18, 0x10	; 16
    1814:	30 e0       	ldi	r19, 0x00	; 0
    1816:	02 c0       	rjmp	.+4      	; 0x181c <vfprintf+0x27c>
    1818:	20 e1       	ldi	r18, 0x10	; 16
    181a:	32 e0       	ldi	r19, 0x02	; 2
    181c:	f8 01       	movw	r30, r16
    181e:	b7 fe       	sbrs	r11, 7
    1820:	07 c0       	rjmp	.+14     	; 0x1830 <vfprintf+0x290>
    1822:	60 81       	ld	r22, Z
    1824:	71 81       	ldd	r23, Z+1	; 0x01
    1826:	82 81       	ldd	r24, Z+2	; 0x02
    1828:	93 81       	ldd	r25, Z+3	; 0x03
    182a:	0c 5f       	subi	r16, 0xFC	; 252
    182c:	1f 4f       	sbci	r17, 0xFF	; 255
    182e:	06 c0       	rjmp	.+12     	; 0x183c <vfprintf+0x29c>
    1830:	60 81       	ld	r22, Z
    1832:	71 81       	ldd	r23, Z+1	; 0x01
    1834:	80 e0       	ldi	r24, 0x00	; 0
    1836:	90 e0       	ldi	r25, 0x00	; 0
    1838:	0e 5f       	subi	r16, 0xFE	; 254
    183a:	1f 4f       	sbci	r17, 0xFF	; 255
    183c:	a3 01       	movw	r20, r6
    183e:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <__ultoa_invert>
    1842:	88 2e       	mov	r8, r24
    1844:	86 18       	sub	r8, r6
    1846:	fb 2d       	mov	r31, r11
    1848:	ff 77       	andi	r31, 0x7F	; 127
    184a:	3f 2e       	mov	r3, r31
    184c:	36 fe       	sbrs	r3, 6
    184e:	0d c0       	rjmp	.+26     	; 0x186a <vfprintf+0x2ca>
    1850:	23 2d       	mov	r18, r3
    1852:	2e 7f       	andi	r18, 0xFE	; 254
    1854:	a2 2e       	mov	r10, r18
    1856:	89 14       	cp	r8, r9
    1858:	58 f4       	brcc	.+22     	; 0x1870 <vfprintf+0x2d0>
    185a:	34 fe       	sbrs	r3, 4
    185c:	0b c0       	rjmp	.+22     	; 0x1874 <vfprintf+0x2d4>
    185e:	32 fc       	sbrc	r3, 2
    1860:	09 c0       	rjmp	.+18     	; 0x1874 <vfprintf+0x2d4>
    1862:	83 2d       	mov	r24, r3
    1864:	8e 7e       	andi	r24, 0xEE	; 238
    1866:	a8 2e       	mov	r10, r24
    1868:	05 c0       	rjmp	.+10     	; 0x1874 <vfprintf+0x2d4>
    186a:	b8 2c       	mov	r11, r8
    186c:	a3 2c       	mov	r10, r3
    186e:	03 c0       	rjmp	.+6      	; 0x1876 <vfprintf+0x2d6>
    1870:	b8 2c       	mov	r11, r8
    1872:	01 c0       	rjmp	.+2      	; 0x1876 <vfprintf+0x2d6>
    1874:	b9 2c       	mov	r11, r9
    1876:	a4 fe       	sbrs	r10, 4
    1878:	0f c0       	rjmp	.+30     	; 0x1898 <vfprintf+0x2f8>
    187a:	fe 01       	movw	r30, r28
    187c:	e8 0d       	add	r30, r8
    187e:	f1 1d       	adc	r31, r1
    1880:	80 81       	ld	r24, Z
    1882:	80 33       	cpi	r24, 0x30	; 48
    1884:	21 f4       	brne	.+8      	; 0x188e <vfprintf+0x2ee>
    1886:	9a 2d       	mov	r25, r10
    1888:	99 7e       	andi	r25, 0xE9	; 233
    188a:	a9 2e       	mov	r10, r25
    188c:	09 c0       	rjmp	.+18     	; 0x18a0 <vfprintf+0x300>
    188e:	a2 fe       	sbrs	r10, 2
    1890:	06 c0       	rjmp	.+12     	; 0x189e <vfprintf+0x2fe>
    1892:	b3 94       	inc	r11
    1894:	b3 94       	inc	r11
    1896:	04 c0       	rjmp	.+8      	; 0x18a0 <vfprintf+0x300>
    1898:	8a 2d       	mov	r24, r10
    189a:	86 78       	andi	r24, 0x86	; 134
    189c:	09 f0       	breq	.+2      	; 0x18a0 <vfprintf+0x300>
    189e:	b3 94       	inc	r11
    18a0:	a3 fc       	sbrc	r10, 3
    18a2:	11 c0       	rjmp	.+34     	; 0x18c6 <vfprintf+0x326>
    18a4:	a0 fe       	sbrs	r10, 0
    18a6:	06 c0       	rjmp	.+12     	; 0x18b4 <vfprintf+0x314>
    18a8:	b2 14       	cp	r11, r2
    18aa:	88 f4       	brcc	.+34     	; 0x18ce <vfprintf+0x32e>
    18ac:	28 0c       	add	r2, r8
    18ae:	92 2c       	mov	r9, r2
    18b0:	9b 18       	sub	r9, r11
    18b2:	0e c0       	rjmp	.+28     	; 0x18d0 <vfprintf+0x330>
    18b4:	b2 14       	cp	r11, r2
    18b6:	60 f4       	brcc	.+24     	; 0x18d0 <vfprintf+0x330>
    18b8:	b6 01       	movw	r22, r12
    18ba:	80 e2       	ldi	r24, 0x20	; 32
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <fputc>
    18c2:	b3 94       	inc	r11
    18c4:	f7 cf       	rjmp	.-18     	; 0x18b4 <vfprintf+0x314>
    18c6:	b2 14       	cp	r11, r2
    18c8:	18 f4       	brcc	.+6      	; 0x18d0 <vfprintf+0x330>
    18ca:	2b 18       	sub	r2, r11
    18cc:	02 c0       	rjmp	.+4      	; 0x18d2 <vfprintf+0x332>
    18ce:	98 2c       	mov	r9, r8
    18d0:	21 2c       	mov	r2, r1
    18d2:	a4 fe       	sbrs	r10, 4
    18d4:	10 c0       	rjmp	.+32     	; 0x18f6 <vfprintf+0x356>
    18d6:	b6 01       	movw	r22, r12
    18d8:	80 e3       	ldi	r24, 0x30	; 48
    18da:	90 e0       	ldi	r25, 0x00	; 0
    18dc:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <fputc>
    18e0:	a2 fe       	sbrs	r10, 2
    18e2:	17 c0       	rjmp	.+46     	; 0x1912 <vfprintf+0x372>
    18e4:	a1 fc       	sbrc	r10, 1
    18e6:	03 c0       	rjmp	.+6      	; 0x18ee <vfprintf+0x34e>
    18e8:	88 e7       	ldi	r24, 0x78	; 120
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	02 c0       	rjmp	.+4      	; 0x18f2 <vfprintf+0x352>
    18ee:	88 e5       	ldi	r24, 0x58	; 88
    18f0:	90 e0       	ldi	r25, 0x00	; 0
    18f2:	b6 01       	movw	r22, r12
    18f4:	0c c0       	rjmp	.+24     	; 0x190e <vfprintf+0x36e>
    18f6:	8a 2d       	mov	r24, r10
    18f8:	86 78       	andi	r24, 0x86	; 134
    18fa:	59 f0       	breq	.+22     	; 0x1912 <vfprintf+0x372>
    18fc:	a1 fe       	sbrs	r10, 1
    18fe:	02 c0       	rjmp	.+4      	; 0x1904 <vfprintf+0x364>
    1900:	8b e2       	ldi	r24, 0x2B	; 43
    1902:	01 c0       	rjmp	.+2      	; 0x1906 <vfprintf+0x366>
    1904:	80 e2       	ldi	r24, 0x20	; 32
    1906:	a7 fc       	sbrc	r10, 7
    1908:	8d e2       	ldi	r24, 0x2D	; 45
    190a:	b6 01       	movw	r22, r12
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <fputc>
    1912:	89 14       	cp	r8, r9
    1914:	38 f4       	brcc	.+14     	; 0x1924 <vfprintf+0x384>
    1916:	b6 01       	movw	r22, r12
    1918:	80 e3       	ldi	r24, 0x30	; 48
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <fputc>
    1920:	9a 94       	dec	r9
    1922:	f7 cf       	rjmp	.-18     	; 0x1912 <vfprintf+0x372>
    1924:	8a 94       	dec	r8
    1926:	f3 01       	movw	r30, r6
    1928:	e8 0d       	add	r30, r8
    192a:	f1 1d       	adc	r31, r1
    192c:	80 81       	ld	r24, Z
    192e:	b6 01       	movw	r22, r12
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <fputc>
    1936:	81 10       	cpse	r8, r1
    1938:	f5 cf       	rjmp	.-22     	; 0x1924 <vfprintf+0x384>
    193a:	22 20       	and	r2, r2
    193c:	09 f4       	brne	.+2      	; 0x1940 <vfprintf+0x3a0>
    193e:	42 ce       	rjmp	.-892    	; 0x15c4 <vfprintf+0x24>
    1940:	b6 01       	movw	r22, r12
    1942:	80 e2       	ldi	r24, 0x20	; 32
    1944:	90 e0       	ldi	r25, 0x00	; 0
    1946:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <fputc>
    194a:	2a 94       	dec	r2
    194c:	f6 cf       	rjmp	.-20     	; 0x193a <vfprintf+0x39a>
    194e:	f6 01       	movw	r30, r12
    1950:	86 81       	ldd	r24, Z+6	; 0x06
    1952:	97 81       	ldd	r25, Z+7	; 0x07
    1954:	02 c0       	rjmp	.+4      	; 0x195a <vfprintf+0x3ba>
    1956:	8f ef       	ldi	r24, 0xFF	; 255
    1958:	9f ef       	ldi	r25, 0xFF	; 255
    195a:	2b 96       	adiw	r28, 0x0b	; 11
    195c:	e2 e1       	ldi	r30, 0x12	; 18
    195e:	0c 94 af 0f 	jmp	0x1f5e	; 0x1f5e <__epilogue_restores__>

00001962 <dtoa_prf>:
    1962:	a9 e0       	ldi	r26, 0x09	; 9
    1964:	b0 e0       	ldi	r27, 0x00	; 0
    1966:	e7 eb       	ldi	r30, 0xB7	; 183
    1968:	fc e0       	ldi	r31, 0x0C	; 12
    196a:	0c 94 99 0f 	jmp	0x1f32	; 0x1f32 <__prologue_saves__+0xc>
    196e:	6a 01       	movw	r12, r20
    1970:	12 2f       	mov	r17, r18
    1972:	b0 2e       	mov	r11, r16
    1974:	2b e3       	ldi	r18, 0x3B	; 59
    1976:	20 17       	cp	r18, r16
    1978:	20 f0       	brcs	.+8      	; 0x1982 <dtoa_prf+0x20>
    197a:	ff 24       	eor	r15, r15
    197c:	f3 94       	inc	r15
    197e:	f0 0e       	add	r15, r16
    1980:	02 c0       	rjmp	.+4      	; 0x1986 <dtoa_prf+0x24>
    1982:	2c e3       	ldi	r18, 0x3C	; 60
    1984:	f2 2e       	mov	r15, r18
    1986:	0f 2d       	mov	r16, r15
    1988:	27 e0       	ldi	r18, 0x07	; 7
    198a:	ae 01       	movw	r20, r28
    198c:	4f 5f       	subi	r20, 0xFF	; 255
    198e:	5f 4f       	sbci	r21, 0xFF	; 255
    1990:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <__ftoa_engine>
    1994:	bc 01       	movw	r22, r24
    1996:	49 81       	ldd	r20, Y+1	; 0x01
    1998:	84 2f       	mov	r24, r20
    199a:	89 70       	andi	r24, 0x09	; 9
    199c:	81 30       	cpi	r24, 0x01	; 1
    199e:	31 f0       	breq	.+12     	; 0x19ac <dtoa_prf+0x4a>
    19a0:	e1 fc       	sbrc	r14, 1
    19a2:	06 c0       	rjmp	.+12     	; 0x19b0 <dtoa_prf+0x4e>
    19a4:	e0 fe       	sbrs	r14, 0
    19a6:	06 c0       	rjmp	.+12     	; 0x19b4 <dtoa_prf+0x52>
    19a8:	90 e2       	ldi	r25, 0x20	; 32
    19aa:	05 c0       	rjmp	.+10     	; 0x19b6 <dtoa_prf+0x54>
    19ac:	9d e2       	ldi	r25, 0x2D	; 45
    19ae:	03 c0       	rjmp	.+6      	; 0x19b6 <dtoa_prf+0x54>
    19b0:	9b e2       	ldi	r25, 0x2B	; 43
    19b2:	01 c0       	rjmp	.+2      	; 0x19b6 <dtoa_prf+0x54>
    19b4:	90 e0       	ldi	r25, 0x00	; 0
    19b6:	5e 2d       	mov	r21, r14
    19b8:	50 71       	andi	r21, 0x10	; 16
    19ba:	43 ff       	sbrs	r20, 3
    19bc:	3c c0       	rjmp	.+120    	; 0x1a36 <dtoa_prf+0xd4>
    19be:	91 11       	cpse	r25, r1
    19c0:	02 c0       	rjmp	.+4      	; 0x19c6 <dtoa_prf+0x64>
    19c2:	83 e0       	ldi	r24, 0x03	; 3
    19c4:	01 c0       	rjmp	.+2      	; 0x19c8 <dtoa_prf+0x66>
    19c6:	84 e0       	ldi	r24, 0x04	; 4
    19c8:	81 17       	cp	r24, r17
    19ca:	18 f4       	brcc	.+6      	; 0x19d2 <dtoa_prf+0x70>
    19cc:	21 2f       	mov	r18, r17
    19ce:	28 1b       	sub	r18, r24
    19d0:	01 c0       	rjmp	.+2      	; 0x19d4 <dtoa_prf+0x72>
    19d2:	20 e0       	ldi	r18, 0x00	; 0
    19d4:	51 11       	cpse	r21, r1
    19d6:	0b c0       	rjmp	.+22     	; 0x19ee <dtoa_prf+0x8c>
    19d8:	f6 01       	movw	r30, r12
    19da:	82 2f       	mov	r24, r18
    19dc:	30 e2       	ldi	r19, 0x20	; 32
    19de:	88 23       	and	r24, r24
    19e0:	19 f0       	breq	.+6      	; 0x19e8 <dtoa_prf+0x86>
    19e2:	31 93       	st	Z+, r19
    19e4:	81 50       	subi	r24, 0x01	; 1
    19e6:	fb cf       	rjmp	.-10     	; 0x19de <dtoa_prf+0x7c>
    19e8:	c2 0e       	add	r12, r18
    19ea:	d1 1c       	adc	r13, r1
    19ec:	20 e0       	ldi	r18, 0x00	; 0
    19ee:	99 23       	and	r25, r25
    19f0:	29 f0       	breq	.+10     	; 0x19fc <dtoa_prf+0x9a>
    19f2:	d6 01       	movw	r26, r12
    19f4:	9c 93       	st	X, r25
    19f6:	f6 01       	movw	r30, r12
    19f8:	31 96       	adiw	r30, 0x01	; 1
    19fa:	6f 01       	movw	r12, r30
    19fc:	c6 01       	movw	r24, r12
    19fe:	03 96       	adiw	r24, 0x03	; 3
    1a00:	e2 fe       	sbrs	r14, 2
    1a02:	0a c0       	rjmp	.+20     	; 0x1a18 <dtoa_prf+0xb6>
    1a04:	3e e4       	ldi	r19, 0x4E	; 78
    1a06:	d6 01       	movw	r26, r12
    1a08:	3c 93       	st	X, r19
    1a0a:	41 e4       	ldi	r20, 0x41	; 65
    1a0c:	11 96       	adiw	r26, 0x01	; 1
    1a0e:	4c 93       	st	X, r20
    1a10:	11 97       	sbiw	r26, 0x01	; 1
    1a12:	12 96       	adiw	r26, 0x02	; 2
    1a14:	3c 93       	st	X, r19
    1a16:	06 c0       	rjmp	.+12     	; 0x1a24 <dtoa_prf+0xc2>
    1a18:	3e e6       	ldi	r19, 0x6E	; 110
    1a1a:	f6 01       	movw	r30, r12
    1a1c:	30 83       	st	Z, r19
    1a1e:	41 e6       	ldi	r20, 0x61	; 97
    1a20:	41 83       	std	Z+1, r20	; 0x01
    1a22:	32 83       	std	Z+2, r19	; 0x02
    1a24:	fc 01       	movw	r30, r24
    1a26:	32 2f       	mov	r19, r18
    1a28:	40 e2       	ldi	r20, 0x20	; 32
    1a2a:	33 23       	and	r19, r19
    1a2c:	09 f4       	brne	.+2      	; 0x1a30 <dtoa_prf+0xce>
    1a2e:	42 c0       	rjmp	.+132    	; 0x1ab4 <dtoa_prf+0x152>
    1a30:	41 93       	st	Z+, r20
    1a32:	31 50       	subi	r19, 0x01	; 1
    1a34:	fa cf       	rjmp	.-12     	; 0x1a2a <dtoa_prf+0xc8>
    1a36:	42 ff       	sbrs	r20, 2
    1a38:	44 c0       	rjmp	.+136    	; 0x1ac2 <dtoa_prf+0x160>
    1a3a:	91 11       	cpse	r25, r1
    1a3c:	02 c0       	rjmp	.+4      	; 0x1a42 <dtoa_prf+0xe0>
    1a3e:	83 e0       	ldi	r24, 0x03	; 3
    1a40:	01 c0       	rjmp	.+2      	; 0x1a44 <dtoa_prf+0xe2>
    1a42:	84 e0       	ldi	r24, 0x04	; 4
    1a44:	81 17       	cp	r24, r17
    1a46:	18 f4       	brcc	.+6      	; 0x1a4e <dtoa_prf+0xec>
    1a48:	21 2f       	mov	r18, r17
    1a4a:	28 1b       	sub	r18, r24
    1a4c:	01 c0       	rjmp	.+2      	; 0x1a50 <dtoa_prf+0xee>
    1a4e:	20 e0       	ldi	r18, 0x00	; 0
    1a50:	51 11       	cpse	r21, r1
    1a52:	0b c0       	rjmp	.+22     	; 0x1a6a <dtoa_prf+0x108>
    1a54:	f6 01       	movw	r30, r12
    1a56:	82 2f       	mov	r24, r18
    1a58:	30 e2       	ldi	r19, 0x20	; 32
    1a5a:	88 23       	and	r24, r24
    1a5c:	19 f0       	breq	.+6      	; 0x1a64 <dtoa_prf+0x102>
    1a5e:	31 93       	st	Z+, r19
    1a60:	81 50       	subi	r24, 0x01	; 1
    1a62:	fb cf       	rjmp	.-10     	; 0x1a5a <dtoa_prf+0xf8>
    1a64:	c2 0e       	add	r12, r18
    1a66:	d1 1c       	adc	r13, r1
    1a68:	20 e0       	ldi	r18, 0x00	; 0
    1a6a:	99 23       	and	r25, r25
    1a6c:	29 f0       	breq	.+10     	; 0x1a78 <dtoa_prf+0x116>
    1a6e:	d6 01       	movw	r26, r12
    1a70:	9c 93       	st	X, r25
    1a72:	f6 01       	movw	r30, r12
    1a74:	31 96       	adiw	r30, 0x01	; 1
    1a76:	6f 01       	movw	r12, r30
    1a78:	c6 01       	movw	r24, r12
    1a7a:	03 96       	adiw	r24, 0x03	; 3
    1a7c:	e2 fe       	sbrs	r14, 2
    1a7e:	0b c0       	rjmp	.+22     	; 0x1a96 <dtoa_prf+0x134>
    1a80:	39 e4       	ldi	r19, 0x49	; 73
    1a82:	d6 01       	movw	r26, r12
    1a84:	3c 93       	st	X, r19
    1a86:	3e e4       	ldi	r19, 0x4E	; 78
    1a88:	11 96       	adiw	r26, 0x01	; 1
    1a8a:	3c 93       	st	X, r19
    1a8c:	11 97       	sbiw	r26, 0x01	; 1
    1a8e:	36 e4       	ldi	r19, 0x46	; 70
    1a90:	12 96       	adiw	r26, 0x02	; 2
    1a92:	3c 93       	st	X, r19
    1a94:	07 c0       	rjmp	.+14     	; 0x1aa4 <dtoa_prf+0x142>
    1a96:	39 e6       	ldi	r19, 0x69	; 105
    1a98:	f6 01       	movw	r30, r12
    1a9a:	30 83       	st	Z, r19
    1a9c:	3e e6       	ldi	r19, 0x6E	; 110
    1a9e:	31 83       	std	Z+1, r19	; 0x01
    1aa0:	36 e6       	ldi	r19, 0x66	; 102
    1aa2:	32 83       	std	Z+2, r19	; 0x02
    1aa4:	fc 01       	movw	r30, r24
    1aa6:	32 2f       	mov	r19, r18
    1aa8:	40 e2       	ldi	r20, 0x20	; 32
    1aaa:	33 23       	and	r19, r19
    1aac:	19 f0       	breq	.+6      	; 0x1ab4 <dtoa_prf+0x152>
    1aae:	41 93       	st	Z+, r20
    1ab0:	31 50       	subi	r19, 0x01	; 1
    1ab2:	fb cf       	rjmp	.-10     	; 0x1aaa <dtoa_prf+0x148>
    1ab4:	fc 01       	movw	r30, r24
    1ab6:	e2 0f       	add	r30, r18
    1ab8:	f1 1d       	adc	r31, r1
    1aba:	10 82       	st	Z, r1
    1abc:	8e ef       	ldi	r24, 0xFE	; 254
    1abe:	9f ef       	ldi	r25, 0xFF	; 255
    1ac0:	a6 c0       	rjmp	.+332    	; 0x1c0e <dtoa_prf+0x2ac>
    1ac2:	21 e0       	ldi	r18, 0x01	; 1
    1ac4:	30 e0       	ldi	r19, 0x00	; 0
    1ac6:	91 11       	cpse	r25, r1
    1ac8:	02 c0       	rjmp	.+4      	; 0x1ace <dtoa_prf+0x16c>
    1aca:	20 e0       	ldi	r18, 0x00	; 0
    1acc:	30 e0       	ldi	r19, 0x00	; 0
    1ace:	16 16       	cp	r1, r22
    1ad0:	17 06       	cpc	r1, r23
    1ad2:	1c f4       	brge	.+6      	; 0x1ada <dtoa_prf+0x178>
    1ad4:	fb 01       	movw	r30, r22
    1ad6:	31 96       	adiw	r30, 0x01	; 1
    1ad8:	02 c0       	rjmp	.+4      	; 0x1ade <dtoa_prf+0x17c>
    1ada:	e1 e0       	ldi	r30, 0x01	; 1
    1adc:	f0 e0       	ldi	r31, 0x00	; 0
    1ade:	2e 0f       	add	r18, r30
    1ae0:	3f 1f       	adc	r19, r31
    1ae2:	bb 20       	and	r11, r11
    1ae4:	21 f0       	breq	.+8      	; 0x1aee <dtoa_prf+0x18c>
    1ae6:	eb 2d       	mov	r30, r11
    1ae8:	f0 e0       	ldi	r31, 0x00	; 0
    1aea:	31 96       	adiw	r30, 0x01	; 1
    1aec:	02 c0       	rjmp	.+4      	; 0x1af2 <dtoa_prf+0x190>
    1aee:	e0 e0       	ldi	r30, 0x00	; 0
    1af0:	f0 e0       	ldi	r31, 0x00	; 0
    1af2:	2e 0f       	add	r18, r30
    1af4:	3f 1f       	adc	r19, r31
    1af6:	e1 2f       	mov	r30, r17
    1af8:	f0 e0       	ldi	r31, 0x00	; 0
    1afa:	2e 17       	cp	r18, r30
    1afc:	3f 07       	cpc	r19, r31
    1afe:	1c f4       	brge	.+6      	; 0x1b06 <dtoa_prf+0x1a4>
    1b00:	12 1b       	sub	r17, r18
    1b02:	21 2f       	mov	r18, r17
    1b04:	01 c0       	rjmp	.+2      	; 0x1b08 <dtoa_prf+0x1a6>
    1b06:	20 e0       	ldi	r18, 0x00	; 0
    1b08:	8e 2d       	mov	r24, r14
    1b0a:	88 71       	andi	r24, 0x18	; 24
    1b0c:	59 f4       	brne	.+22     	; 0x1b24 <dtoa_prf+0x1c2>
    1b0e:	f6 01       	movw	r30, r12
    1b10:	82 2f       	mov	r24, r18
    1b12:	30 e2       	ldi	r19, 0x20	; 32
    1b14:	88 23       	and	r24, r24
    1b16:	19 f0       	breq	.+6      	; 0x1b1e <dtoa_prf+0x1bc>
    1b18:	31 93       	st	Z+, r19
    1b1a:	81 50       	subi	r24, 0x01	; 1
    1b1c:	fb cf       	rjmp	.-10     	; 0x1b14 <dtoa_prf+0x1b2>
    1b1e:	c2 0e       	add	r12, r18
    1b20:	d1 1c       	adc	r13, r1
    1b22:	20 e0       	ldi	r18, 0x00	; 0
    1b24:	99 23       	and	r25, r25
    1b26:	29 f0       	breq	.+10     	; 0x1b32 <dtoa_prf+0x1d0>
    1b28:	d6 01       	movw	r26, r12
    1b2a:	9c 93       	st	X, r25
    1b2c:	f6 01       	movw	r30, r12
    1b2e:	31 96       	adiw	r30, 0x01	; 1
    1b30:	6f 01       	movw	r12, r30
    1b32:	51 11       	cpse	r21, r1
    1b34:	0b c0       	rjmp	.+22     	; 0x1b4c <dtoa_prf+0x1ea>
    1b36:	f6 01       	movw	r30, r12
    1b38:	82 2f       	mov	r24, r18
    1b3a:	90 e3       	ldi	r25, 0x30	; 48
    1b3c:	88 23       	and	r24, r24
    1b3e:	19 f0       	breq	.+6      	; 0x1b46 <dtoa_prf+0x1e4>
    1b40:	91 93       	st	Z+, r25
    1b42:	81 50       	subi	r24, 0x01	; 1
    1b44:	fb cf       	rjmp	.-10     	; 0x1b3c <dtoa_prf+0x1da>
    1b46:	c2 0e       	add	r12, r18
    1b48:	d1 1c       	adc	r13, r1
    1b4a:	20 e0       	ldi	r18, 0x00	; 0
    1b4c:	0f 2d       	mov	r16, r15
    1b4e:	06 0f       	add	r16, r22
    1b50:	9a 81       	ldd	r25, Y+2	; 0x02
    1b52:	34 2f       	mov	r19, r20
    1b54:	30 71       	andi	r19, 0x10	; 16
    1b56:	44 ff       	sbrs	r20, 4
    1b58:	03 c0       	rjmp	.+6      	; 0x1b60 <dtoa_prf+0x1fe>
    1b5a:	91 33       	cpi	r25, 0x31	; 49
    1b5c:	09 f4       	brne	.+2      	; 0x1b60 <dtoa_prf+0x1fe>
    1b5e:	01 50       	subi	r16, 0x01	; 1
    1b60:	10 16       	cp	r1, r16
    1b62:	24 f4       	brge	.+8      	; 0x1b6c <dtoa_prf+0x20a>
    1b64:	09 30       	cpi	r16, 0x09	; 9
    1b66:	18 f0       	brcs	.+6      	; 0x1b6e <dtoa_prf+0x20c>
    1b68:	08 e0       	ldi	r16, 0x08	; 8
    1b6a:	01 c0       	rjmp	.+2      	; 0x1b6e <dtoa_prf+0x20c>
    1b6c:	01 e0       	ldi	r16, 0x01	; 1
    1b6e:	ab 01       	movw	r20, r22
    1b70:	77 ff       	sbrs	r23, 7
    1b72:	02 c0       	rjmp	.+4      	; 0x1b78 <dtoa_prf+0x216>
    1b74:	40 e0       	ldi	r20, 0x00	; 0
    1b76:	50 e0       	ldi	r21, 0x00	; 0
    1b78:	fb 01       	movw	r30, r22
    1b7a:	e4 1b       	sub	r30, r20
    1b7c:	f5 0b       	sbc	r31, r21
    1b7e:	a1 e0       	ldi	r26, 0x01	; 1
    1b80:	b0 e0       	ldi	r27, 0x00	; 0
    1b82:	ac 0f       	add	r26, r28
    1b84:	bd 1f       	adc	r27, r29
    1b86:	ea 0f       	add	r30, r26
    1b88:	fb 1f       	adc	r31, r27
    1b8a:	8e e2       	ldi	r24, 0x2E	; 46
    1b8c:	a8 2e       	mov	r10, r24
    1b8e:	4b 01       	movw	r8, r22
    1b90:	80 1a       	sub	r8, r16
    1b92:	91 08       	sbc	r9, r1
    1b94:	0b 2d       	mov	r16, r11
    1b96:	10 e0       	ldi	r17, 0x00	; 0
    1b98:	11 95       	neg	r17
    1b9a:	01 95       	neg	r16
    1b9c:	11 09       	sbc	r17, r1
    1b9e:	4f 3f       	cpi	r20, 0xFF	; 255
    1ba0:	bf ef       	ldi	r27, 0xFF	; 255
    1ba2:	5b 07       	cpc	r21, r27
    1ba4:	21 f4       	brne	.+8      	; 0x1bae <dtoa_prf+0x24c>
    1ba6:	d6 01       	movw	r26, r12
    1ba8:	ac 92       	st	X, r10
    1baa:	11 96       	adiw	r26, 0x01	; 1
    1bac:	6d 01       	movw	r12, r26
    1bae:	64 17       	cp	r22, r20
    1bb0:	75 07       	cpc	r23, r21
    1bb2:	2c f0       	brlt	.+10     	; 0x1bbe <dtoa_prf+0x25c>
    1bb4:	84 16       	cp	r8, r20
    1bb6:	95 06       	cpc	r9, r21
    1bb8:	14 f4       	brge	.+4      	; 0x1bbe <dtoa_prf+0x25c>
    1bba:	81 81       	ldd	r24, Z+1	; 0x01
    1bbc:	01 c0       	rjmp	.+2      	; 0x1bc0 <dtoa_prf+0x25e>
    1bbe:	80 e3       	ldi	r24, 0x30	; 48
    1bc0:	41 50       	subi	r20, 0x01	; 1
    1bc2:	51 09       	sbc	r21, r1
    1bc4:	31 96       	adiw	r30, 0x01	; 1
    1bc6:	d6 01       	movw	r26, r12
    1bc8:	11 96       	adiw	r26, 0x01	; 1
    1bca:	7d 01       	movw	r14, r26
    1bcc:	40 17       	cp	r20, r16
    1bce:	51 07       	cpc	r21, r17
    1bd0:	24 f0       	brlt	.+8      	; 0x1bda <dtoa_prf+0x278>
    1bd2:	d6 01       	movw	r26, r12
    1bd4:	8c 93       	st	X, r24
    1bd6:	67 01       	movw	r12, r14
    1bd8:	e2 cf       	rjmp	.-60     	; 0x1b9e <dtoa_prf+0x23c>
    1bda:	64 17       	cp	r22, r20
    1bdc:	75 07       	cpc	r23, r21
    1bde:	39 f4       	brne	.+14     	; 0x1bee <dtoa_prf+0x28c>
    1be0:	96 33       	cpi	r25, 0x36	; 54
    1be2:	20 f4       	brcc	.+8      	; 0x1bec <dtoa_prf+0x28a>
    1be4:	95 33       	cpi	r25, 0x35	; 53
    1be6:	19 f4       	brne	.+6      	; 0x1bee <dtoa_prf+0x28c>
    1be8:	31 11       	cpse	r19, r1
    1bea:	01 c0       	rjmp	.+2      	; 0x1bee <dtoa_prf+0x28c>
    1bec:	81 e3       	ldi	r24, 0x31	; 49
    1bee:	f6 01       	movw	r30, r12
    1bf0:	80 83       	st	Z, r24
    1bf2:	f7 01       	movw	r30, r14
    1bf4:	82 2f       	mov	r24, r18
    1bf6:	90 e2       	ldi	r25, 0x20	; 32
    1bf8:	88 23       	and	r24, r24
    1bfa:	19 f0       	breq	.+6      	; 0x1c02 <dtoa_prf+0x2a0>
    1bfc:	91 93       	st	Z+, r25
    1bfe:	81 50       	subi	r24, 0x01	; 1
    1c00:	fb cf       	rjmp	.-10     	; 0x1bf8 <dtoa_prf+0x296>
    1c02:	f7 01       	movw	r30, r14
    1c04:	e2 0f       	add	r30, r18
    1c06:	f1 1d       	adc	r31, r1
    1c08:	10 82       	st	Z, r1
    1c0a:	80 e0       	ldi	r24, 0x00	; 0
    1c0c:	90 e0       	ldi	r25, 0x00	; 0
    1c0e:	29 96       	adiw	r28, 0x09	; 9
    1c10:	ec e0       	ldi	r30, 0x0C	; 12
    1c12:	0c 94 b5 0f 	jmp	0x1f6a	; 0x1f6a <__epilogue_restores__+0xc>

00001c16 <__ftoa_engine>:
    1c16:	28 30       	cpi	r18, 0x08	; 8
    1c18:	08 f0       	brcs	.+2      	; 0x1c1c <__ftoa_engine+0x6>
    1c1a:	27 e0       	ldi	r18, 0x07	; 7
    1c1c:	33 27       	eor	r19, r19
    1c1e:	da 01       	movw	r26, r20
    1c20:	99 0f       	add	r25, r25
    1c22:	31 1d       	adc	r19, r1
    1c24:	87 fd       	sbrc	r24, 7
    1c26:	91 60       	ori	r25, 0x01	; 1
    1c28:	00 96       	adiw	r24, 0x00	; 0
    1c2a:	61 05       	cpc	r22, r1
    1c2c:	71 05       	cpc	r23, r1
    1c2e:	39 f4       	brne	.+14     	; 0x1c3e <__ftoa_engine+0x28>
    1c30:	32 60       	ori	r19, 0x02	; 2
    1c32:	2e 5f       	subi	r18, 0xFE	; 254
    1c34:	3d 93       	st	X+, r19
    1c36:	30 e3       	ldi	r19, 0x30	; 48
    1c38:	2a 95       	dec	r18
    1c3a:	e1 f7       	brne	.-8      	; 0x1c34 <__ftoa_engine+0x1e>
    1c3c:	08 95       	ret
    1c3e:	9f 3f       	cpi	r25, 0xFF	; 255
    1c40:	30 f0       	brcs	.+12     	; 0x1c4e <__ftoa_engine+0x38>
    1c42:	80 38       	cpi	r24, 0x80	; 128
    1c44:	71 05       	cpc	r23, r1
    1c46:	61 05       	cpc	r22, r1
    1c48:	09 f0       	breq	.+2      	; 0x1c4c <__ftoa_engine+0x36>
    1c4a:	3c 5f       	subi	r19, 0xFC	; 252
    1c4c:	3c 5f       	subi	r19, 0xFC	; 252
    1c4e:	3d 93       	st	X+, r19
    1c50:	91 30       	cpi	r25, 0x01	; 1
    1c52:	08 f0       	brcs	.+2      	; 0x1c56 <__ftoa_engine+0x40>
    1c54:	80 68       	ori	r24, 0x80	; 128
    1c56:	91 1d       	adc	r25, r1
    1c58:	df 93       	push	r29
    1c5a:	cf 93       	push	r28
    1c5c:	1f 93       	push	r17
    1c5e:	0f 93       	push	r16
    1c60:	ff 92       	push	r15
    1c62:	ef 92       	push	r14
    1c64:	19 2f       	mov	r17, r25
    1c66:	98 7f       	andi	r25, 0xF8	; 248
    1c68:	96 95       	lsr	r25
    1c6a:	e9 2f       	mov	r30, r25
    1c6c:	96 95       	lsr	r25
    1c6e:	96 95       	lsr	r25
    1c70:	e9 0f       	add	r30, r25
    1c72:	ff 27       	eor	r31, r31
    1c74:	e0 53       	subi	r30, 0x30	; 48
    1c76:	ff 4f       	sbci	r31, 0xFF	; 255
    1c78:	99 27       	eor	r25, r25
    1c7a:	33 27       	eor	r19, r19
    1c7c:	ee 24       	eor	r14, r14
    1c7e:	ff 24       	eor	r15, r15
    1c80:	a7 01       	movw	r20, r14
    1c82:	e7 01       	movw	r28, r14
    1c84:	05 90       	lpm	r0, Z+
    1c86:	08 94       	sec
    1c88:	07 94       	ror	r0
    1c8a:	28 f4       	brcc	.+10     	; 0x1c96 <__ftoa_engine+0x80>
    1c8c:	36 0f       	add	r19, r22
    1c8e:	e7 1e       	adc	r14, r23
    1c90:	f8 1e       	adc	r15, r24
    1c92:	49 1f       	adc	r20, r25
    1c94:	51 1d       	adc	r21, r1
    1c96:	66 0f       	add	r22, r22
    1c98:	77 1f       	adc	r23, r23
    1c9a:	88 1f       	adc	r24, r24
    1c9c:	99 1f       	adc	r25, r25
    1c9e:	06 94       	lsr	r0
    1ca0:	a1 f7       	brne	.-24     	; 0x1c8a <__ftoa_engine+0x74>
    1ca2:	05 90       	lpm	r0, Z+
    1ca4:	07 94       	ror	r0
    1ca6:	28 f4       	brcc	.+10     	; 0x1cb2 <__ftoa_engine+0x9c>
    1ca8:	e7 0e       	add	r14, r23
    1caa:	f8 1e       	adc	r15, r24
    1cac:	49 1f       	adc	r20, r25
    1cae:	56 1f       	adc	r21, r22
    1cb0:	c1 1d       	adc	r28, r1
    1cb2:	77 0f       	add	r23, r23
    1cb4:	88 1f       	adc	r24, r24
    1cb6:	99 1f       	adc	r25, r25
    1cb8:	66 1f       	adc	r22, r22
    1cba:	06 94       	lsr	r0
    1cbc:	a1 f7       	brne	.-24     	; 0x1ca6 <__ftoa_engine+0x90>
    1cbe:	05 90       	lpm	r0, Z+
    1cc0:	07 94       	ror	r0
    1cc2:	28 f4       	brcc	.+10     	; 0x1cce <__ftoa_engine+0xb8>
    1cc4:	f8 0e       	add	r15, r24
    1cc6:	49 1f       	adc	r20, r25
    1cc8:	56 1f       	adc	r21, r22
    1cca:	c7 1f       	adc	r28, r23
    1ccc:	d1 1d       	adc	r29, r1
    1cce:	88 0f       	add	r24, r24
    1cd0:	99 1f       	adc	r25, r25
    1cd2:	66 1f       	adc	r22, r22
    1cd4:	77 1f       	adc	r23, r23
    1cd6:	06 94       	lsr	r0
    1cd8:	a1 f7       	brne	.-24     	; 0x1cc2 <__ftoa_engine+0xac>
    1cda:	05 90       	lpm	r0, Z+
    1cdc:	07 94       	ror	r0
    1cde:	20 f4       	brcc	.+8      	; 0x1ce8 <__ftoa_engine+0xd2>
    1ce0:	49 0f       	add	r20, r25
    1ce2:	56 1f       	adc	r21, r22
    1ce4:	c7 1f       	adc	r28, r23
    1ce6:	d8 1f       	adc	r29, r24
    1ce8:	99 0f       	add	r25, r25
    1cea:	66 1f       	adc	r22, r22
    1cec:	77 1f       	adc	r23, r23
    1cee:	88 1f       	adc	r24, r24
    1cf0:	06 94       	lsr	r0
    1cf2:	a9 f7       	brne	.-22     	; 0x1cde <__ftoa_engine+0xc8>
    1cf4:	84 91       	lpm	r24, Z
    1cf6:	10 95       	com	r17
    1cf8:	17 70       	andi	r17, 0x07	; 7
    1cfa:	41 f0       	breq	.+16     	; 0x1d0c <__ftoa_engine+0xf6>
    1cfc:	d6 95       	lsr	r29
    1cfe:	c7 95       	ror	r28
    1d00:	57 95       	ror	r21
    1d02:	47 95       	ror	r20
    1d04:	f7 94       	ror	r15
    1d06:	e7 94       	ror	r14
    1d08:	1a 95       	dec	r17
    1d0a:	c1 f7       	brne	.-16     	; 0x1cfc <__ftoa_engine+0xe6>
    1d0c:	e6 e7       	ldi	r30, 0x76	; 118
    1d0e:	f0 e0       	ldi	r31, 0x00	; 0
    1d10:	68 94       	set
    1d12:	15 90       	lpm	r1, Z+
    1d14:	15 91       	lpm	r17, Z+
    1d16:	35 91       	lpm	r19, Z+
    1d18:	65 91       	lpm	r22, Z+
    1d1a:	95 91       	lpm	r25, Z+
    1d1c:	05 90       	lpm	r0, Z+
    1d1e:	7f e2       	ldi	r23, 0x2F	; 47
    1d20:	73 95       	inc	r23
    1d22:	e1 18       	sub	r14, r1
    1d24:	f1 0a       	sbc	r15, r17
    1d26:	43 0b       	sbc	r20, r19
    1d28:	56 0b       	sbc	r21, r22
    1d2a:	c9 0b       	sbc	r28, r25
    1d2c:	d0 09       	sbc	r29, r0
    1d2e:	c0 f7       	brcc	.-16     	; 0x1d20 <__ftoa_engine+0x10a>
    1d30:	e1 0c       	add	r14, r1
    1d32:	f1 1e       	adc	r15, r17
    1d34:	43 1f       	adc	r20, r19
    1d36:	56 1f       	adc	r21, r22
    1d38:	c9 1f       	adc	r28, r25
    1d3a:	d0 1d       	adc	r29, r0
    1d3c:	7e f4       	brtc	.+30     	; 0x1d5c <__ftoa_engine+0x146>
    1d3e:	70 33       	cpi	r23, 0x30	; 48
    1d40:	11 f4       	brne	.+4      	; 0x1d46 <__ftoa_engine+0x130>
    1d42:	8a 95       	dec	r24
    1d44:	e6 cf       	rjmp	.-52     	; 0x1d12 <__ftoa_engine+0xfc>
    1d46:	e8 94       	clt
    1d48:	01 50       	subi	r16, 0x01	; 1
    1d4a:	30 f0       	brcs	.+12     	; 0x1d58 <__ftoa_engine+0x142>
    1d4c:	08 0f       	add	r16, r24
    1d4e:	0a f4       	brpl	.+2      	; 0x1d52 <__ftoa_engine+0x13c>
    1d50:	00 27       	eor	r16, r16
    1d52:	02 17       	cp	r16, r18
    1d54:	08 f4       	brcc	.+2      	; 0x1d58 <__ftoa_engine+0x142>
    1d56:	20 2f       	mov	r18, r16
    1d58:	23 95       	inc	r18
    1d5a:	02 2f       	mov	r16, r18
    1d5c:	7a 33       	cpi	r23, 0x3A	; 58
    1d5e:	28 f0       	brcs	.+10     	; 0x1d6a <__ftoa_engine+0x154>
    1d60:	79 e3       	ldi	r23, 0x39	; 57
    1d62:	7d 93       	st	X+, r23
    1d64:	2a 95       	dec	r18
    1d66:	e9 f7       	brne	.-6      	; 0x1d62 <__ftoa_engine+0x14c>
    1d68:	10 c0       	rjmp	.+32     	; 0x1d8a <__ftoa_engine+0x174>
    1d6a:	7d 93       	st	X+, r23
    1d6c:	2a 95       	dec	r18
    1d6e:	89 f6       	brne	.-94     	; 0x1d12 <__ftoa_engine+0xfc>
    1d70:	06 94       	lsr	r0
    1d72:	97 95       	ror	r25
    1d74:	67 95       	ror	r22
    1d76:	37 95       	ror	r19
    1d78:	17 95       	ror	r17
    1d7a:	17 94       	ror	r1
    1d7c:	e1 18       	sub	r14, r1
    1d7e:	f1 0a       	sbc	r15, r17
    1d80:	43 0b       	sbc	r20, r19
    1d82:	56 0b       	sbc	r21, r22
    1d84:	c9 0b       	sbc	r28, r25
    1d86:	d0 09       	sbc	r29, r0
    1d88:	98 f0       	brcs	.+38     	; 0x1db0 <__ftoa_engine+0x19a>
    1d8a:	23 95       	inc	r18
    1d8c:	7e 91       	ld	r23, -X
    1d8e:	73 95       	inc	r23
    1d90:	7a 33       	cpi	r23, 0x3A	; 58
    1d92:	08 f0       	brcs	.+2      	; 0x1d96 <__ftoa_engine+0x180>
    1d94:	70 e3       	ldi	r23, 0x30	; 48
    1d96:	7c 93       	st	X, r23
    1d98:	20 13       	cpse	r18, r16
    1d9a:	b8 f7       	brcc	.-18     	; 0x1d8a <__ftoa_engine+0x174>
    1d9c:	7e 91       	ld	r23, -X
    1d9e:	70 61       	ori	r23, 0x10	; 16
    1da0:	7d 93       	st	X+, r23
    1da2:	30 f0       	brcs	.+12     	; 0x1db0 <__ftoa_engine+0x19a>
    1da4:	83 95       	inc	r24
    1da6:	71 e3       	ldi	r23, 0x31	; 49
    1da8:	7d 93       	st	X+, r23
    1daa:	70 e3       	ldi	r23, 0x30	; 48
    1dac:	2a 95       	dec	r18
    1dae:	e1 f7       	brne	.-8      	; 0x1da8 <__ftoa_engine+0x192>
    1db0:	11 24       	eor	r1, r1
    1db2:	ef 90       	pop	r14
    1db4:	ff 90       	pop	r15
    1db6:	0f 91       	pop	r16
    1db8:	1f 91       	pop	r17
    1dba:	cf 91       	pop	r28
    1dbc:	df 91       	pop	r29
    1dbe:	99 27       	eor	r25, r25
    1dc0:	87 fd       	sbrc	r24, 7
    1dc2:	90 95       	com	r25
    1dc4:	08 95       	ret

00001dc6 <strnlen_P>:
    1dc6:	fc 01       	movw	r30, r24
    1dc8:	05 90       	lpm	r0, Z+
    1dca:	61 50       	subi	r22, 0x01	; 1
    1dcc:	70 40       	sbci	r23, 0x00	; 0
    1dce:	01 10       	cpse	r0, r1
    1dd0:	d8 f7       	brcc	.-10     	; 0x1dc8 <strnlen_P+0x2>
    1dd2:	80 95       	com	r24
    1dd4:	90 95       	com	r25
    1dd6:	8e 0f       	add	r24, r30
    1dd8:	9f 1f       	adc	r25, r31
    1dda:	08 95       	ret

00001ddc <strnlen>:
    1ddc:	fc 01       	movw	r30, r24
    1dde:	61 50       	subi	r22, 0x01	; 1
    1de0:	70 40       	sbci	r23, 0x00	; 0
    1de2:	01 90       	ld	r0, Z+
    1de4:	01 10       	cpse	r0, r1
    1de6:	d8 f7       	brcc	.-10     	; 0x1dde <strnlen+0x2>
    1de8:	80 95       	com	r24
    1dea:	90 95       	com	r25
    1dec:	8e 0f       	add	r24, r30
    1dee:	9f 1f       	adc	r25, r31
    1df0:	08 95       	ret

00001df2 <fputc>:
    1df2:	0f 93       	push	r16
    1df4:	1f 93       	push	r17
    1df6:	cf 93       	push	r28
    1df8:	df 93       	push	r29
    1dfa:	fb 01       	movw	r30, r22
    1dfc:	23 81       	ldd	r18, Z+3	; 0x03
    1dfe:	21 fd       	sbrc	r18, 1
    1e00:	03 c0       	rjmp	.+6      	; 0x1e08 <fputc+0x16>
    1e02:	8f ef       	ldi	r24, 0xFF	; 255
    1e04:	9f ef       	ldi	r25, 0xFF	; 255
    1e06:	2c c0       	rjmp	.+88     	; 0x1e60 <fputc+0x6e>
    1e08:	22 ff       	sbrs	r18, 2
    1e0a:	16 c0       	rjmp	.+44     	; 0x1e38 <fputc+0x46>
    1e0c:	46 81       	ldd	r20, Z+6	; 0x06
    1e0e:	57 81       	ldd	r21, Z+7	; 0x07
    1e10:	24 81       	ldd	r18, Z+4	; 0x04
    1e12:	35 81       	ldd	r19, Z+5	; 0x05
    1e14:	42 17       	cp	r20, r18
    1e16:	53 07       	cpc	r21, r19
    1e18:	44 f4       	brge	.+16     	; 0x1e2a <fputc+0x38>
    1e1a:	a0 81       	ld	r26, Z
    1e1c:	b1 81       	ldd	r27, Z+1	; 0x01
    1e1e:	9d 01       	movw	r18, r26
    1e20:	2f 5f       	subi	r18, 0xFF	; 255
    1e22:	3f 4f       	sbci	r19, 0xFF	; 255
    1e24:	31 83       	std	Z+1, r19	; 0x01
    1e26:	20 83       	st	Z, r18
    1e28:	8c 93       	st	X, r24
    1e2a:	26 81       	ldd	r18, Z+6	; 0x06
    1e2c:	37 81       	ldd	r19, Z+7	; 0x07
    1e2e:	2f 5f       	subi	r18, 0xFF	; 255
    1e30:	3f 4f       	sbci	r19, 0xFF	; 255
    1e32:	37 83       	std	Z+7, r19	; 0x07
    1e34:	26 83       	std	Z+6, r18	; 0x06
    1e36:	14 c0       	rjmp	.+40     	; 0x1e60 <fputc+0x6e>
    1e38:	8b 01       	movw	r16, r22
    1e3a:	ec 01       	movw	r28, r24
    1e3c:	fb 01       	movw	r30, r22
    1e3e:	00 84       	ldd	r0, Z+8	; 0x08
    1e40:	f1 85       	ldd	r31, Z+9	; 0x09
    1e42:	e0 2d       	mov	r30, r0
    1e44:	09 95       	icall
    1e46:	89 2b       	or	r24, r25
    1e48:	e1 f6       	brne	.-72     	; 0x1e02 <fputc+0x10>
    1e4a:	d8 01       	movw	r26, r16
    1e4c:	16 96       	adiw	r26, 0x06	; 6
    1e4e:	8d 91       	ld	r24, X+
    1e50:	9c 91       	ld	r25, X
    1e52:	17 97       	sbiw	r26, 0x07	; 7
    1e54:	01 96       	adiw	r24, 0x01	; 1
    1e56:	17 96       	adiw	r26, 0x07	; 7
    1e58:	9c 93       	st	X, r25
    1e5a:	8e 93       	st	-X, r24
    1e5c:	16 97       	sbiw	r26, 0x06	; 6
    1e5e:	ce 01       	movw	r24, r28
    1e60:	df 91       	pop	r29
    1e62:	cf 91       	pop	r28
    1e64:	1f 91       	pop	r17
    1e66:	0f 91       	pop	r16
    1e68:	08 95       	ret

00001e6a <__ultoa_invert>:
    1e6a:	fa 01       	movw	r30, r20
    1e6c:	aa 27       	eor	r26, r26
    1e6e:	28 30       	cpi	r18, 0x08	; 8
    1e70:	51 f1       	breq	.+84     	; 0x1ec6 <__ultoa_invert+0x5c>
    1e72:	20 31       	cpi	r18, 0x10	; 16
    1e74:	81 f1       	breq	.+96     	; 0x1ed6 <__ultoa_invert+0x6c>
    1e76:	e8 94       	clt
    1e78:	6f 93       	push	r22
    1e7a:	6e 7f       	andi	r22, 0xFE	; 254
    1e7c:	6e 5f       	subi	r22, 0xFE	; 254
    1e7e:	7f 4f       	sbci	r23, 0xFF	; 255
    1e80:	8f 4f       	sbci	r24, 0xFF	; 255
    1e82:	9f 4f       	sbci	r25, 0xFF	; 255
    1e84:	af 4f       	sbci	r26, 0xFF	; 255
    1e86:	b1 e0       	ldi	r27, 0x01	; 1
    1e88:	3e d0       	rcall	.+124    	; 0x1f06 <__ultoa_invert+0x9c>
    1e8a:	b4 e0       	ldi	r27, 0x04	; 4
    1e8c:	3c d0       	rcall	.+120    	; 0x1f06 <__ultoa_invert+0x9c>
    1e8e:	67 0f       	add	r22, r23
    1e90:	78 1f       	adc	r23, r24
    1e92:	89 1f       	adc	r24, r25
    1e94:	9a 1f       	adc	r25, r26
    1e96:	a1 1d       	adc	r26, r1
    1e98:	68 0f       	add	r22, r24
    1e9a:	79 1f       	adc	r23, r25
    1e9c:	8a 1f       	adc	r24, r26
    1e9e:	91 1d       	adc	r25, r1
    1ea0:	a1 1d       	adc	r26, r1
    1ea2:	6a 0f       	add	r22, r26
    1ea4:	71 1d       	adc	r23, r1
    1ea6:	81 1d       	adc	r24, r1
    1ea8:	91 1d       	adc	r25, r1
    1eaa:	a1 1d       	adc	r26, r1
    1eac:	20 d0       	rcall	.+64     	; 0x1eee <__ultoa_invert+0x84>
    1eae:	09 f4       	brne	.+2      	; 0x1eb2 <__ultoa_invert+0x48>
    1eb0:	68 94       	set
    1eb2:	3f 91       	pop	r19
    1eb4:	2a e0       	ldi	r18, 0x0A	; 10
    1eb6:	26 9f       	mul	r18, r22
    1eb8:	11 24       	eor	r1, r1
    1eba:	30 19       	sub	r19, r0
    1ebc:	30 5d       	subi	r19, 0xD0	; 208
    1ebe:	31 93       	st	Z+, r19
    1ec0:	de f6       	brtc	.-74     	; 0x1e78 <__ultoa_invert+0xe>
    1ec2:	cf 01       	movw	r24, r30
    1ec4:	08 95       	ret
    1ec6:	46 2f       	mov	r20, r22
    1ec8:	47 70       	andi	r20, 0x07	; 7
    1eca:	40 5d       	subi	r20, 0xD0	; 208
    1ecc:	41 93       	st	Z+, r20
    1ece:	b3 e0       	ldi	r27, 0x03	; 3
    1ed0:	0f d0       	rcall	.+30     	; 0x1ef0 <__ultoa_invert+0x86>
    1ed2:	c9 f7       	brne	.-14     	; 0x1ec6 <__ultoa_invert+0x5c>
    1ed4:	f6 cf       	rjmp	.-20     	; 0x1ec2 <__ultoa_invert+0x58>
    1ed6:	46 2f       	mov	r20, r22
    1ed8:	4f 70       	andi	r20, 0x0F	; 15
    1eda:	40 5d       	subi	r20, 0xD0	; 208
    1edc:	4a 33       	cpi	r20, 0x3A	; 58
    1ede:	18 f0       	brcs	.+6      	; 0x1ee6 <__ultoa_invert+0x7c>
    1ee0:	49 5d       	subi	r20, 0xD9	; 217
    1ee2:	31 fd       	sbrc	r19, 1
    1ee4:	40 52       	subi	r20, 0x20	; 32
    1ee6:	41 93       	st	Z+, r20
    1ee8:	02 d0       	rcall	.+4      	; 0x1eee <__ultoa_invert+0x84>
    1eea:	a9 f7       	brne	.-22     	; 0x1ed6 <__ultoa_invert+0x6c>
    1eec:	ea cf       	rjmp	.-44     	; 0x1ec2 <__ultoa_invert+0x58>
    1eee:	b4 e0       	ldi	r27, 0x04	; 4
    1ef0:	a6 95       	lsr	r26
    1ef2:	97 95       	ror	r25
    1ef4:	87 95       	ror	r24
    1ef6:	77 95       	ror	r23
    1ef8:	67 95       	ror	r22
    1efa:	ba 95       	dec	r27
    1efc:	c9 f7       	brne	.-14     	; 0x1ef0 <__ultoa_invert+0x86>
    1efe:	00 97       	sbiw	r24, 0x00	; 0
    1f00:	61 05       	cpc	r22, r1
    1f02:	71 05       	cpc	r23, r1
    1f04:	08 95       	ret
    1f06:	9b 01       	movw	r18, r22
    1f08:	ac 01       	movw	r20, r24
    1f0a:	0a 2e       	mov	r0, r26
    1f0c:	06 94       	lsr	r0
    1f0e:	57 95       	ror	r21
    1f10:	47 95       	ror	r20
    1f12:	37 95       	ror	r19
    1f14:	27 95       	ror	r18
    1f16:	ba 95       	dec	r27
    1f18:	c9 f7       	brne	.-14     	; 0x1f0c <__ultoa_invert+0xa2>
    1f1a:	62 0f       	add	r22, r18
    1f1c:	73 1f       	adc	r23, r19
    1f1e:	84 1f       	adc	r24, r20
    1f20:	95 1f       	adc	r25, r21
    1f22:	a0 1d       	adc	r26, r0
    1f24:	08 95       	ret

00001f26 <__prologue_saves__>:
    1f26:	2f 92       	push	r2
    1f28:	3f 92       	push	r3
    1f2a:	4f 92       	push	r4
    1f2c:	5f 92       	push	r5
    1f2e:	6f 92       	push	r6
    1f30:	7f 92       	push	r7
    1f32:	8f 92       	push	r8
    1f34:	9f 92       	push	r9
    1f36:	af 92       	push	r10
    1f38:	bf 92       	push	r11
    1f3a:	cf 92       	push	r12
    1f3c:	df 92       	push	r13
    1f3e:	ef 92       	push	r14
    1f40:	ff 92       	push	r15
    1f42:	0f 93       	push	r16
    1f44:	1f 93       	push	r17
    1f46:	cf 93       	push	r28
    1f48:	df 93       	push	r29
    1f4a:	cd b7       	in	r28, 0x3d	; 61
    1f4c:	de b7       	in	r29, 0x3e	; 62
    1f4e:	ca 1b       	sub	r28, r26
    1f50:	db 0b       	sbc	r29, r27
    1f52:	0f b6       	in	r0, 0x3f	; 63
    1f54:	f8 94       	cli
    1f56:	de bf       	out	0x3e, r29	; 62
    1f58:	0f be       	out	0x3f, r0	; 63
    1f5a:	cd bf       	out	0x3d, r28	; 61
    1f5c:	09 94       	ijmp

00001f5e <__epilogue_restores__>:
    1f5e:	2a 88       	ldd	r2, Y+18	; 0x12
    1f60:	39 88       	ldd	r3, Y+17	; 0x11
    1f62:	48 88       	ldd	r4, Y+16	; 0x10
    1f64:	5f 84       	ldd	r5, Y+15	; 0x0f
    1f66:	6e 84       	ldd	r6, Y+14	; 0x0e
    1f68:	7d 84       	ldd	r7, Y+13	; 0x0d
    1f6a:	8c 84       	ldd	r8, Y+12	; 0x0c
    1f6c:	9b 84       	ldd	r9, Y+11	; 0x0b
    1f6e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1f70:	b9 84       	ldd	r11, Y+9	; 0x09
    1f72:	c8 84       	ldd	r12, Y+8	; 0x08
    1f74:	df 80       	ldd	r13, Y+7	; 0x07
    1f76:	ee 80       	ldd	r14, Y+6	; 0x06
    1f78:	fd 80       	ldd	r15, Y+5	; 0x05
    1f7a:	0c 81       	ldd	r16, Y+4	; 0x04
    1f7c:	1b 81       	ldd	r17, Y+3	; 0x03
    1f7e:	aa 81       	ldd	r26, Y+2	; 0x02
    1f80:	b9 81       	ldd	r27, Y+1	; 0x01
    1f82:	ce 0f       	add	r28, r30
    1f84:	d1 1d       	adc	r29, r1
    1f86:	0f b6       	in	r0, 0x3f	; 63
    1f88:	f8 94       	cli
    1f8a:	de bf       	out	0x3e, r29	; 62
    1f8c:	0f be       	out	0x3f, r0	; 63
    1f8e:	cd bf       	out	0x3d, r28	; 61
    1f90:	ed 01       	movw	r28, r26
    1f92:	08 95       	ret

00001f94 <_exit>:
    1f94:	f8 94       	cli

00001f96 <__stop_program>:
    1f96:	ff cf       	rjmp	.-2      	; 0x1f96 <__stop_program>
