
workable.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000302  00800100  00002802  00002896  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002802  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004a  00800402  00800402  00002b98  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002b98  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002bf4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000168  00000000  00000000  00002c34  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001ed3  00000000  00000000  00002d9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009b4  00000000  00000000  00004c6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000122e  00000000  00000000  00005623  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000500  00000000  00000000  00006854  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009c4  00000000  00000000  00006d54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000171b  00000000  00000000  00007718  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000170  00000000  00000000  00008e33  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b9 00 	jmp	0x172	; 0x172 <__ctors_end>
       4:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
       8:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
       c:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
      10:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
      14:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
      18:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
      1c:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
      20:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
      24:	0c 94 17 0b 	jmp	0x162e	; 0x162e <__vector_9>
      28:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
      2c:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
      30:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
      34:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
      38:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
      3c:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
      40:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
      44:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
      48:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
      4c:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
      50:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
      54:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
      58:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
      5c:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
      60:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
      64:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
      68:	16 06       	cpc	r1, r22
      6a:	34 06       	cpc	r3, r20
      6c:	52 06       	cpc	r5, r18
      6e:	70 06       	cpc	r7, r16
      70:	8e 06       	cpc	r8, r30
      72:	2c 07       	cpc	r18, r28
      74:	87 07       	cpc	r24, r23
      76:	96 07       	cpc	r25, r22

00000078 <__trampolines_end>:
      78:	00 40       	sbci	r16, 0x00	; 0
      7a:	7a 10       	cpse	r7, r10
      7c:	f3 5a       	subi	r31, 0xA3	; 163
      7e:	00 a0       	ldd	r0, Z+32	; 0x20
      80:	72 4e       	sbci	r23, 0xE2	; 226
      82:	18 09       	sbc	r17, r8
      84:	00 10       	cpse	r0, r0
      86:	a5 d4       	rcall	.+2378   	; 0x9d2 <get_tank_capacity+0x38>
      88:	e8 00       	.word	0x00e8	; ????
      8a:	00 e8       	ldi	r16, 0x80	; 128
      8c:	76 48       	sbci	r23, 0x86	; 134
      8e:	17 00       	.word	0x0017	; ????
      90:	00 e4       	ldi	r16, 0x40	; 64
      92:	0b 54       	subi	r16, 0x4B	; 75
      94:	02 00       	.word	0x0002	; ????
      96:	00 ca       	rjmp	.-3072   	; 0xfffff498 <__eeprom_end+0xff7ef498>
      98:	9a 3b       	cpi	r25, 0xBA	; 186
      9a:	00 00       	nop
      9c:	00 e1       	ldi	r16, 0x10	; 16
      9e:	f5 05       	cpc	r31, r5
      a0:	00 00       	nop
      a2:	80 96       	adiw	r24, 0x20	; 32
      a4:	98 00       	.word	0x0098	; ????
      a6:	00 00       	nop
      a8:	40 42       	sbci	r20, 0x20	; 32
      aa:	0f 00       	.word	0x000f	; ????
      ac:	00 00       	nop
      ae:	a0 86       	std	Z+8, r10	; 0x08
      b0:	01 00       	.word	0x0001	; ????
      b2:	00 00       	nop
      b4:	10 27       	eor	r17, r16
      b6:	00 00       	nop
      b8:	00 00       	nop
      ba:	e8 03       	fmulsu	r22, r16
      bc:	00 00       	nop
      be:	00 00       	nop
      c0:	64 00       	.word	0x0064	; ????
      c2:	00 00       	nop
      c4:	00 00       	nop
      c6:	0a 00       	.word	0x000a	; ????
      c8:	00 00       	nop
      ca:	00 00       	nop
      cc:	01 00       	.word	0x0001	; ????
      ce:	00 00       	nop
      d0:	00 00       	nop
      d2:	2c 76       	andi	r18, 0x6C	; 108
      d4:	d8 88       	ldd	r13, Y+16	; 0x10
      d6:	dc 67       	ori	r29, 0x7C	; 124
      d8:	4f 08       	sbc	r4, r15
      da:	23 df       	rcall	.-442    	; 0xffffff22 <__eeprom_end+0xff7eff22>
      dc:	c1 df       	rcall	.-126    	; 0x60 <__SREG__+0x21>
      de:	ae 59       	subi	r26, 0x9E	; 158
      e0:	e1 b1       	in	r30, 0x01	; 1
      e2:	b7 96       	adiw	r30, 0x27	; 39
      e4:	e5 e3       	ldi	r30, 0x35	; 53
      e6:	e4 53       	subi	r30, 0x34	; 52
      e8:	c6 3a       	cpi	r28, 0xA6	; 166
      ea:	e6 51       	subi	r30, 0x16	; 22
      ec:	99 76       	andi	r25, 0x69	; 105
      ee:	96 e8       	ldi	r25, 0x86	; 134
      f0:	e6 c2       	rjmp	.+1484   	; 0x6be <DS18B20_read_temperature+0x46>
      f2:	84 26       	eor	r8, r20
      f4:	eb 89       	ldd	r30, Y+19	; 0x13
      f6:	8c 9b       	sbis	0x11, 4	; 17
      f8:	62 ed       	ldi	r22, 0xD2	; 210
      fa:	40 7c       	andi	r20, 0xC0	; 192
      fc:	6f fc       	.word	0xfc6f	; ????
      fe:	ef bc       	out	0x2f, r14	; 47
     100:	9c 9f       	mul	r25, r28
     102:	40 f2       	brcs	.-112    	; 0x94 <__trampolines_end+0x1c>
     104:	ba a5       	ldd	r27, Y+42	; 0x2a
     106:	6f a5       	ldd	r22, Y+47	; 0x2f
     108:	f4 90       	lpm	r15, Z
     10a:	05 5a       	subi	r16, 0xA5	; 165
     10c:	2a f7       	brpl	.-54     	; 0xd8 <__trampolines_end+0x60>
     10e:	5c 93       	st	X, r21
     110:	6b 6c       	ori	r22, 0xCB	; 203
     112:	f9 67       	ori	r31, 0x79	; 121
     114:	6d c1       	rjmp	.+730    	; 0x3f0 <peekRear+0x32>
     116:	1b fc       	.word	0xfc1b	; ????
     118:	e0 e4       	ldi	r30, 0x40	; 64
     11a:	0d 47       	sbci	r16, 0x7D	; 125
     11c:	fe f5       	brtc	.+126    	; 0x19c <.do_clear_bss_loop>
     11e:	20 e6       	ldi	r18, 0x60	; 96
     120:	b5 00       	.word	0x00b5	; ????
     122:	d0 ed       	ldi	r29, 0xD0	; 208
     124:	90 2e       	mov	r9, r16
     126:	03 00       	.word	0x0003	; ????
     128:	94 35       	cpi	r25, 0x54	; 84
     12a:	77 05       	cpc	r23, r7
     12c:	00 80       	ld	r0, Z
     12e:	84 1e       	adc	r8, r20
     130:	08 00       	.word	0x0008	; ????
     132:	00 20       	and	r0, r0
     134:	4e 0a       	sbc	r4, r30
     136:	00 00       	nop
     138:	00 c8       	rjmp	.-4096   	; 0xfffff13a <__eeprom_end+0xff7ef13a>
     13a:	0c 33       	cpi	r16, 0x3C	; 60
     13c:	33 33       	cpi	r19, 0x33	; 51
     13e:	33 0f       	add	r19, r19
     140:	98 6e       	ori	r25, 0xE8	; 232
     142:	12 83       	std	Z+2, r17	; 0x02
     144:	11 41       	sbci	r17, 0x11	; 17
     146:	ef 8d       	ldd	r30, Y+31	; 0x1f
     148:	21 14       	cp	r2, r1
     14a:	89 3b       	cpi	r24, 0xB9	; 185
     14c:	e6 55       	subi	r30, 0x56	; 86
     14e:	16 cf       	rjmp	.-468    	; 0xffffff7c <__eeprom_end+0xff7eff7c>
     150:	fe e6       	ldi	r31, 0x6E	; 110
     152:	db 18       	sub	r13, r11
     154:	d1 84       	ldd	r13, Z+9	; 0x09
     156:	4b 38       	cpi	r20, 0x8B	; 139
     158:	1b f7       	brvc	.-58     	; 0x120 <__trampolines_end+0xa8>
     15a:	7c 1d       	adc	r23, r12
     15c:	90 1d       	adc	r25, r0
     15e:	a4 bb       	out	0x14, r26	; 20
     160:	e4 24       	eor	r14, r4
     162:	20 32       	cpi	r18, 0x20	; 32
     164:	84 72       	andi	r24, 0x24	; 36
     166:	5e 22       	and	r5, r30
     168:	81 00       	.word	0x0081	; ????
     16a:	c9 f1       	breq	.+114    	; 0x1de <format_float+0x2e>
     16c:	24 ec       	ldi	r18, 0xC4	; 196
     16e:	a1 e5       	ldi	r26, 0x51	; 81
     170:	3d 27       	eor	r19, r29

00000172 <__ctors_end>:
     172:	11 24       	eor	r1, r1
     174:	1f be       	out	0x3f, r1	; 63
     176:	cf ef       	ldi	r28, 0xFF	; 255
     178:	d8 e0       	ldi	r29, 0x08	; 8
     17a:	de bf       	out	0x3e, r29	; 62
     17c:	cd bf       	out	0x3d, r28	; 61

0000017e <__do_copy_data>:
     17e:	14 e0       	ldi	r17, 0x04	; 4
     180:	a0 e0       	ldi	r26, 0x00	; 0
     182:	b1 e0       	ldi	r27, 0x01	; 1
     184:	e2 e0       	ldi	r30, 0x02	; 2
     186:	f8 e2       	ldi	r31, 0x28	; 40
     188:	02 c0       	rjmp	.+4      	; 0x18e <__do_copy_data+0x10>
     18a:	05 90       	lpm	r0, Z+
     18c:	0d 92       	st	X+, r0
     18e:	a2 30       	cpi	r26, 0x02	; 2
     190:	b1 07       	cpc	r27, r17
     192:	d9 f7       	brne	.-10     	; 0x18a <__do_copy_data+0xc>

00000194 <__do_clear_bss>:
     194:	24 e0       	ldi	r18, 0x04	; 4
     196:	a2 e0       	ldi	r26, 0x02	; 2
     198:	b4 e0       	ldi	r27, 0x04	; 4
     19a:	01 c0       	rjmp	.+2      	; 0x19e <.do_clear_bss_start>

0000019c <.do_clear_bss_loop>:
     19c:	1d 92       	st	X+, r1

0000019e <.do_clear_bss_start>:
     19e:	ac 34       	cpi	r26, 0x4C	; 76
     1a0:	b2 07       	cpc	r27, r18
     1a2:	e1 f7       	brne	.-8      	; 0x19c <.do_clear_bss_loop>
     1a4:	0e 94 4f 0b 	call	0x169e	; 0x169e <main>
     1a8:	0c 94 ff 13 	jmp	0x27fe	; 0x27fe <_exit>

000001ac <__bad_interrupt>:
     1ac:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001b0 <format_float>:
{
    while (*str)
    {
        LCD_1602A_load_data(*str++);
    }
}
     1b0:	af 92       	push	r10
     1b2:	bf 92       	push	r11
     1b4:	cf 92       	push	r12
     1b6:	df 92       	push	r13
     1b8:	ef 92       	push	r14
     1ba:	ff 92       	push	r15
     1bc:	0f 93       	push	r16
     1be:	1f 93       	push	r17
     1c0:	cf 93       	push	r28
     1c2:	df 93       	push	r29
     1c4:	cd b7       	in	r28, 0x3d	; 61
     1c6:	de b7       	in	r29, 0x3e	; 62
     1c8:	68 97       	sbiw	r28, 0x18	; 24
     1ca:	0f b6       	in	r0, 0x3f	; 63
     1cc:	f8 94       	cli
     1ce:	de bf       	out	0x3e, r29	; 62
     1d0:	0f be       	out	0x3f, r0	; 63
     1d2:	cd bf       	out	0x3d, r28	; 61
     1d4:	d8 2e       	mov	r13, r24
     1d6:	c9 2e       	mov	r12, r25
     1d8:	b6 2e       	mov	r11, r22
     1da:	a7 2e       	mov	r10, r23
     1dc:	ca 01       	movw	r24, r20
     1de:	b9 01       	movw	r22, r18
     1e0:	20 2f       	mov	r18, r16
     1e2:	8e 01       	movw	r16, r28
     1e4:	0f 5f       	subi	r16, 0xFF	; 255
     1e6:	1f 4f       	sbci	r17, 0xFF	; 255
     1e8:	40 e0       	ldi	r20, 0x00	; 0
     1ea:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <dtostrf>
     1ee:	e1 14       	cp	r14, r1
     1f0:	f1 04       	cpc	r15, r1
     1f2:	c1 f0       	breq	.+48     	; 0x224 <format_float+0x74>
     1f4:	f7 01       	movw	r30, r14
     1f6:	80 81       	ld	r24, Z
     1f8:	88 23       	and	r24, r24
     1fa:	a1 f0       	breq	.+40     	; 0x224 <format_float+0x74>
     1fc:	ff 92       	push	r15
     1fe:	ef 92       	push	r14
     200:	1f 93       	push	r17
     202:	0f 93       	push	r16
     204:	80 e7       	ldi	r24, 0x70	; 112
     206:	91 e0       	ldi	r25, 0x01	; 1
     208:	9f 93       	push	r25
     20a:	8f 93       	push	r24
     20c:	af 92       	push	r10
     20e:	bf 92       	push	r11
     210:	cf 92       	push	r12
     212:	df 92       	push	r13
     214:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <snprintf>
     218:	0f b6       	in	r0, 0x3f	; 63
     21a:	f8 94       	cli
     21c:	de bf       	out	0x3e, r29	; 62
     21e:	0f be       	out	0x3f, r0	; 63
     220:	cd bf       	out	0x3d, r28	; 61
     222:	13 c0       	rjmp	.+38     	; 0x24a <format_float+0x9a>
     224:	ce 01       	movw	r24, r28
     226:	01 96       	adiw	r24, 0x01	; 1
     228:	9f 93       	push	r25
     22a:	8f 93       	push	r24
     22c:	83 e7       	ldi	r24, 0x73	; 115
     22e:	91 e0       	ldi	r25, 0x01	; 1
     230:	9f 93       	push	r25
     232:	8f 93       	push	r24
     234:	af 92       	push	r10
     236:	bf 92       	push	r11
     238:	cf 92       	push	r12
     23a:	df 92       	push	r13
     23c:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <snprintf>
     240:	0f b6       	in	r0, 0x3f	; 63
     242:	f8 94       	cli
     244:	de bf       	out	0x3e, r29	; 62
     246:	0f be       	out	0x3f, r0	; 63
     248:	cd bf       	out	0x3d, r28	; 61
     24a:	68 96       	adiw	r28, 0x18	; 24
     24c:	0f b6       	in	r0, 0x3f	; 63
     24e:	f8 94       	cli
     250:	de bf       	out	0x3e, r29	; 62
     252:	0f be       	out	0x3f, r0	; 63
     254:	cd bf       	out	0x3d, r28	; 61
     256:	df 91       	pop	r29
     258:	cf 91       	pop	r28
     25a:	1f 91       	pop	r17
     25c:	0f 91       	pop	r16
     25e:	ff 90       	pop	r15
     260:	ef 90       	pop	r14
     262:	df 90       	pop	r13
     264:	cf 90       	pop	r12
     266:	bf 90       	pop	r11
     268:	af 90       	pop	r10
     26a:	08 95       	ret

0000026c <initQueue>:
     26c:	2f ef       	ldi	r18, 0xFF	; 255
     26e:	3f ef       	ldi	r19, 0xFF	; 255
     270:	fc 01       	movw	r30, r24
     272:	35 8b       	std	Z+21, r19	; 0x15
     274:	24 8b       	std	Z+20, r18	; 0x14
     276:	37 8b       	std	Z+23, r19	; 0x17
     278:	26 8b       	std	Z+22, r18	; 0x16
     27a:	08 95       	ret

0000027c <isEmpty>:
     27c:	fc 01       	movw	r30, r24
     27e:	24 89       	ldd	r18, Z+20	; 0x14
     280:	35 89       	ldd	r19, Z+21	; 0x15
     282:	81 e0       	ldi	r24, 0x01	; 1
     284:	2f 3f       	cpi	r18, 0xFF	; 255
     286:	3f 4f       	sbci	r19, 0xFF	; 255
     288:	09 f0       	breq	.+2      	; 0x28c <isEmpty+0x10>
     28a:	80 e0       	ldi	r24, 0x00	; 0
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	08 95       	ret

00000290 <isFull>:
     290:	fc 01       	movw	r30, r24
     292:	86 89       	ldd	r24, Z+22	; 0x16
     294:	97 89       	ldd	r25, Z+23	; 0x17
     296:	01 96       	adiw	r24, 0x01	; 1
     298:	6a e0       	ldi	r22, 0x0A	; 10
     29a:	70 e0       	ldi	r23, 0x00	; 0
     29c:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <__divmodhi4>
     2a0:	ac 01       	movw	r20, r24
     2a2:	24 89       	ldd	r18, Z+20	; 0x14
     2a4:	35 89       	ldd	r19, Z+21	; 0x15
     2a6:	81 e0       	ldi	r24, 0x01	; 1
     2a8:	42 17       	cp	r20, r18
     2aa:	53 07       	cpc	r21, r19
     2ac:	09 f0       	breq	.+2      	; 0x2b0 <isFull+0x20>
     2ae:	80 e0       	ldi	r24, 0x00	; 0
     2b0:	90 e0       	ldi	r25, 0x00	; 0
     2b2:	08 95       	ret

000002b4 <enqueue>:
     2b4:	0f 93       	push	r16
     2b6:	1f 93       	push	r17
     2b8:	cf 93       	push	r28
     2ba:	df 93       	push	r29
     2bc:	ec 01       	movw	r28, r24
     2be:	16 2f       	mov	r17, r22
     2c0:	07 2f       	mov	r16, r23
     2c2:	0e 94 48 01 	call	0x290	; 0x290 <isFull>
     2c6:	89 2b       	or	r24, r25
     2c8:	29 f1       	breq	.+74     	; 0x314 <enqueue+0x60>
     2ca:	8c 89       	ldd	r24, Y+20	; 0x14
     2cc:	9d 89       	ldd	r25, Y+21	; 0x15
     2ce:	01 96       	adiw	r24, 0x01	; 1
     2d0:	2a e0       	ldi	r18, 0x0A	; 10
     2d2:	30 e0       	ldi	r19, 0x00	; 0
     2d4:	b9 01       	movw	r22, r18
     2d6:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <__divmodhi4>
     2da:	9d 8b       	std	Y+21, r25	; 0x15
     2dc:	8c 8b       	std	Y+20, r24	; 0x14
     2de:	8e 89       	ldd	r24, Y+22	; 0x16
     2e0:	9f 89       	ldd	r25, Y+23	; 0x17
     2e2:	01 96       	adiw	r24, 0x01	; 1
     2e4:	b9 01       	movw	r22, r18
     2e6:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <__divmodhi4>
     2ea:	9f 8b       	std	Y+23, r25	; 0x17
     2ec:	8e 8b       	std	Y+22, r24	; 0x16
     2ee:	88 0f       	add	r24, r24
     2f0:	99 1f       	adc	r25, r25
     2f2:	c8 0f       	add	r28, r24
     2f4:	d9 1f       	adc	r29, r25
     2f6:	18 83       	st	Y, r17
     2f8:	09 83       	std	Y+1, r16	; 0x01
     2fa:	0f 93       	push	r16
     2fc:	1f 93       	push	r17
     2fe:	86 e8       	ldi	r24, 0x86	; 134
     300:	91 e0       	ldi	r25, 0x01	; 1
     302:	9f 93       	push	r25
     304:	8f 93       	push	r24
     306:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <printf>
     30a:	0f 90       	pop	r0
     30c:	0f 90       	pop	r0
     30e:	0f 90       	pop	r0
     310:	0f 90       	pop	r0
     312:	33 c0       	rjmp	.+102    	; 0x37a <enqueue+0xc6>
     314:	ce 01       	movw	r24, r28
     316:	0e 94 3e 01 	call	0x27c	; 0x27c <isEmpty>
     31a:	89 2b       	or	r24, r25
     31c:	99 f0       	breq	.+38     	; 0x344 <enqueue+0x90>
     31e:	1d 8a       	std	Y+21, r1	; 0x15
     320:	1c 8a       	std	Y+20, r1	; 0x14
     322:	1f 8a       	std	Y+23, r1	; 0x17
     324:	1e 8a       	std	Y+22, r1	; 0x16
     326:	18 83       	st	Y, r17
     328:	09 83       	std	Y+1, r16	; 0x01
     32a:	0f 93       	push	r16
     32c:	1f 93       	push	r17
     32e:	8d ea       	ldi	r24, 0xAD	; 173
     330:	91 e0       	ldi	r25, 0x01	; 1
     332:	9f 93       	push	r25
     334:	8f 93       	push	r24
     336:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <printf>
     33a:	0f 90       	pop	r0
     33c:	0f 90       	pop	r0
     33e:	0f 90       	pop	r0
     340:	0f 90       	pop	r0
     342:	1b c0       	rjmp	.+54     	; 0x37a <enqueue+0xc6>
     344:	8e 89       	ldd	r24, Y+22	; 0x16
     346:	9f 89       	ldd	r25, Y+23	; 0x17
     348:	01 96       	adiw	r24, 0x01	; 1
     34a:	6a e0       	ldi	r22, 0x0A	; 10
     34c:	70 e0       	ldi	r23, 0x00	; 0
     34e:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <__divmodhi4>
     352:	9f 8b       	std	Y+23, r25	; 0x17
     354:	8e 8b       	std	Y+22, r24	; 0x16
     356:	88 0f       	add	r24, r24
     358:	99 1f       	adc	r25, r25
     35a:	c8 0f       	add	r28, r24
     35c:	d9 1f       	adc	r29, r25
     35e:	18 83       	st	Y, r17
     360:	09 83       	std	Y+1, r16	; 0x01
     362:	0f 93       	push	r16
     364:	1f 93       	push	r17
     366:	8d ea       	ldi	r24, 0xAD	; 173
     368:	91 e0       	ldi	r25, 0x01	; 1
     36a:	9f 93       	push	r25
     36c:	8f 93       	push	r24
     36e:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <printf>
     372:	0f 90       	pop	r0
     374:	0f 90       	pop	r0
     376:	0f 90       	pop	r0
     378:	0f 90       	pop	r0
     37a:	df 91       	pop	r29
     37c:	cf 91       	pop	r28
     37e:	1f 91       	pop	r17
     380:	0f 91       	pop	r16
     382:	08 95       	ret

00000384 <peekFront>:
     384:	0f 93       	push	r16
     386:	1f 93       	push	r17
     388:	cf 93       	push	r28
     38a:	df 93       	push	r29
     38c:	ec 01       	movw	r28, r24
     38e:	8b 01       	movw	r16, r22
     390:	0e 94 3e 01 	call	0x27c	; 0x27c <isEmpty>
     394:	00 97       	sbiw	r24, 0x00	; 0
     396:	61 f4       	brne	.+24     	; 0x3b0 <peekFront+0x2c>
     398:	ec 89       	ldd	r30, Y+20	; 0x14
     39a:	fd 89       	ldd	r31, Y+21	; 0x15
     39c:	ee 0f       	add	r30, r30
     39e:	ff 1f       	adc	r31, r31
     3a0:	ec 0f       	add	r30, r28
     3a2:	fd 1f       	adc	r31, r29
     3a4:	20 81       	ld	r18, Z
     3a6:	31 81       	ldd	r19, Z+1	; 0x01
     3a8:	f8 01       	movw	r30, r16
     3aa:	31 83       	std	Z+1, r19	; 0x01
     3ac:	20 83       	st	Z, r18
     3ae:	02 c0       	rjmp	.+4      	; 0x3b4 <peekFront+0x30>
     3b0:	8f ef       	ldi	r24, 0xFF	; 255
     3b2:	9f ef       	ldi	r25, 0xFF	; 255
     3b4:	df 91       	pop	r29
     3b6:	cf 91       	pop	r28
     3b8:	1f 91       	pop	r17
     3ba:	0f 91       	pop	r16
     3bc:	08 95       	ret

000003be <peekRear>:
     3be:	0f 93       	push	r16
     3c0:	1f 93       	push	r17
     3c2:	cf 93       	push	r28
     3c4:	df 93       	push	r29
     3c6:	ec 01       	movw	r28, r24
     3c8:	8b 01       	movw	r16, r22
     3ca:	0e 94 3e 01 	call	0x27c	; 0x27c <isEmpty>
     3ce:	00 97       	sbiw	r24, 0x00	; 0
     3d0:	61 f4       	brne	.+24     	; 0x3ea <peekRear+0x2c>
     3d2:	ee 89       	ldd	r30, Y+22	; 0x16
     3d4:	ff 89       	ldd	r31, Y+23	; 0x17
     3d6:	ee 0f       	add	r30, r30
     3d8:	ff 1f       	adc	r31, r31
     3da:	ec 0f       	add	r30, r28
     3dc:	fd 1f       	adc	r31, r29
     3de:	20 81       	ld	r18, Z
     3e0:	31 81       	ldd	r19, Z+1	; 0x01
     3e2:	f8 01       	movw	r30, r16
     3e4:	31 83       	std	Z+1, r19	; 0x01
     3e6:	20 83       	st	Z, r18
     3e8:	02 c0       	rjmp	.+4      	; 0x3ee <peekRear+0x30>
     3ea:	8f ef       	ldi	r24, 0xFF	; 255
     3ec:	9f ef       	ldi	r25, 0xFF	; 255
     3ee:	df 91       	pop	r29
     3f0:	cf 91       	pop	r28
     3f2:	1f 91       	pop	r17
     3f4:	0f 91       	pop	r16
     3f6:	08 95       	ret

000003f8 <TIMER0_INIT>:
     3f8:	87 b1       	in	r24, 0x07	; 7
     3fa:	84 60       	ori	r24, 0x04	; 4
     3fc:	87 b9       	out	0x07, r24	; 7
     3fe:	88 b1       	in	r24, 0x08	; 8
     400:	8b 7f       	andi	r24, 0xFB	; 251
     402:	88 b9       	out	0x08, r24	; 8
     404:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     408:	87 e0       	ldi	r24, 0x07	; 7
     40a:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
     40e:	81 e0       	ldi	r24, 0x01	; 1
     410:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
     414:	78 94       	sei
     416:	08 95       	ret

00000418 <LED_SYSTEM_ACTIVE_INIT>:
     418:	87 b1       	in	r24, 0x07	; 7
     41a:	82 60       	ori	r24, 0x02	; 2
     41c:	87 b9       	out	0x07, r24	; 7
     41e:	88 b1       	in	r24, 0x08	; 8
     420:	8d 7f       	andi	r24, 0xFD	; 253
     422:	88 b9       	out	0x08, r24	; 8
     424:	08 95       	ret

00000426 <LED_system_active_off>:
     426:	88 b1       	in	r24, 0x08	; 8
     428:	8d 7f       	andi	r24, 0xFD	; 253
     42a:	88 b9       	out	0x08, r24	; 8
     42c:	08 95       	ret

0000042e <LED_system_active_on>:
     42e:	88 b1       	in	r24, 0x08	; 8
     430:	82 60       	ori	r24, 0x02	; 2
     432:	88 b9       	out	0x08, r24	; 8
     434:	08 95       	ret

00000436 <LCD_1602A_latch>:
     436:	85 b1       	in	r24, 0x05	; 5
     438:	82 60       	ori	r24, 0x02	; 2
     43a:	85 b9       	out	0x05, r24	; 5
     43c:	85 e0       	ldi	r24, 0x05	; 5
     43e:	8a 95       	dec	r24
     440:	f1 f7       	brne	.-4      	; 0x43e <LCD_1602A_latch+0x8>
     442:	00 00       	nop
     444:	85 b1       	in	r24, 0x05	; 5
     446:	8d 7f       	andi	r24, 0xFD	; 253
     448:	85 b9       	out	0x05, r24	; 5
     44a:	8f e8       	ldi	r24, 0x8F	; 143
     44c:	91 e0       	ldi	r25, 0x01	; 1
     44e:	01 97       	sbiw	r24, 0x01	; 1
     450:	f1 f7       	brne	.-4      	; 0x44e <LCD_1602A_latch+0x18>
     452:	00 c0       	rjmp	.+0      	; 0x454 <LCD_1602A_latch+0x1e>
     454:	00 00       	nop
     456:	08 95       	ret

00000458 <LCD_1602A_send_nibble>:
     458:	9b b1       	in	r25, 0x0b	; 11
     45a:	9f 70       	andi	r25, 0x0F	; 15
     45c:	9b b9       	out	0x0b, r25	; 11
     45e:	80 ff       	sbrs	r24, 0
     460:	03 c0       	rjmp	.+6      	; 0x468 <LCD_1602A_send_nibble+0x10>
     462:	9b b1       	in	r25, 0x0b	; 11
     464:	90 61       	ori	r25, 0x10	; 16
     466:	9b b9       	out	0x0b, r25	; 11
     468:	81 ff       	sbrs	r24, 1
     46a:	03 c0       	rjmp	.+6      	; 0x472 <LCD_1602A_send_nibble+0x1a>
     46c:	9b b1       	in	r25, 0x0b	; 11
     46e:	90 62       	ori	r25, 0x20	; 32
     470:	9b b9       	out	0x0b, r25	; 11
     472:	82 ff       	sbrs	r24, 2
     474:	03 c0       	rjmp	.+6      	; 0x47c <LCD_1602A_send_nibble+0x24>
     476:	9b b1       	in	r25, 0x0b	; 11
     478:	90 64       	ori	r25, 0x40	; 64
     47a:	9b b9       	out	0x0b, r25	; 11
     47c:	83 ff       	sbrs	r24, 3
     47e:	03 c0       	rjmp	.+6      	; 0x486 <LCD_1602A_send_nibble+0x2e>
     480:	8b b1       	in	r24, 0x0b	; 11
     482:	80 68       	ori	r24, 0x80	; 128
     484:	8b b9       	out	0x0b, r24	; 11
     486:	0e 94 1b 02 	call	0x436	; 0x436 <LCD_1602A_latch>
     48a:	08 95       	ret

0000048c <LCD_1602A_load_command>:
     48c:	cf 93       	push	r28
     48e:	c8 2f       	mov	r28, r24
     490:	85 b1       	in	r24, 0x05	; 5
     492:	8e 7f       	andi	r24, 0xFE	; 254
     494:	85 b9       	out	0x05, r24	; 5
     496:	8c 2f       	mov	r24, r28
     498:	82 95       	swap	r24
     49a:	8f 70       	andi	r24, 0x0F	; 15
     49c:	0e 94 2c 02 	call	0x458	; 0x458 <LCD_1602A_send_nibble>
     4a0:	8c 2f       	mov	r24, r28
     4a2:	8f 70       	andi	r24, 0x0F	; 15
     4a4:	0e 94 2c 02 	call	0x458	; 0x458 <LCD_1602A_send_nibble>
     4a8:	cf 91       	pop	r28
     4aa:	08 95       	ret

000004ac <LCD_1602A_load_data>:
     4ac:	cf 93       	push	r28
     4ae:	c8 2f       	mov	r28, r24
     4b0:	85 b1       	in	r24, 0x05	; 5
     4b2:	81 60       	ori	r24, 0x01	; 1
     4b4:	85 b9       	out	0x05, r24	; 5
     4b6:	8c 2f       	mov	r24, r28
     4b8:	82 95       	swap	r24
     4ba:	8f 70       	andi	r24, 0x0F	; 15
     4bc:	0e 94 2c 02 	call	0x458	; 0x458 <LCD_1602A_send_nibble>
     4c0:	8c 2f       	mov	r24, r28
     4c2:	8f 70       	andi	r24, 0x0F	; 15
     4c4:	0e 94 2c 02 	call	0x458	; 0x458 <LCD_1602A_send_nibble>
     4c8:	cf 91       	pop	r28
     4ca:	08 95       	ret

000004cc <LCD_1602A_create_char>:

void LCD_1602A_create_char(uint8_t location, uint8_t charmap[])
{
     4cc:	0f 93       	push	r16
     4ce:	1f 93       	push	r17
     4d0:	cf 93       	push	r28
     4d2:	8b 01       	movw	r16, r22
    location &= 0x07;                               // only 0–7 valid
     4d4:	87 70       	andi	r24, 0x07	; 7
    LCD_1602A_load_command(0x40 | (location << 3)); // Set CGRAM address
     4d6:	90 e0       	ldi	r25, 0x00	; 0
     4d8:	88 0f       	add	r24, r24
     4da:	99 1f       	adc	r25, r25
     4dc:	88 0f       	add	r24, r24
     4de:	99 1f       	adc	r25, r25
     4e0:	88 0f       	add	r24, r24
     4e2:	99 1f       	adc	r25, r25
     4e4:	80 64       	ori	r24, 0x40	; 64
     4e6:	0e 94 46 02 	call	0x48c	; 0x48c <LCD_1602A_load_command>

    for (uint8_t i = 0; i < 8; i++)
     4ea:	c0 e0       	ldi	r28, 0x00	; 0
     4ec:	07 c0       	rjmp	.+14     	; 0x4fc <LCD_1602A_create_char+0x30>
    {
        LCD_1602A_load_data(charmap[i]); // write pixel pattern
     4ee:	f8 01       	movw	r30, r16
     4f0:	ec 0f       	add	r30, r28
     4f2:	f1 1d       	adc	r31, r1
     4f4:	80 81       	ld	r24, Z
     4f6:	0e 94 56 02 	call	0x4ac	; 0x4ac <LCD_1602A_load_data>
void LCD_1602A_create_char(uint8_t location, uint8_t charmap[])
{
    location &= 0x07;                               // only 0–7 valid
    LCD_1602A_load_command(0x40 | (location << 3)); // Set CGRAM address

    for (uint8_t i = 0; i < 8; i++)
     4fa:	cf 5f       	subi	r28, 0xFF	; 255
     4fc:	c8 30       	cpi	r28, 0x08	; 8
     4fe:	b8 f3       	brcs	.-18     	; 0x4ee <LCD_1602A_create_char+0x22>
    {
        LCD_1602A_load_data(charmap[i]); // write pixel pattern
    }

    // Return to DDRAM (display memory)
    LCD_1602A_load_command(0x80);
     500:	80 e8       	ldi	r24, 0x80	; 128
     502:	0e 94 46 02 	call	0x48c	; 0x48c <LCD_1602A_load_command>
}
     506:	cf 91       	pop	r28
     508:	1f 91       	pop	r17
     50a:	0f 91       	pop	r16
     50c:	08 95       	ret

0000050e <LCD_1602A_init>:
    params: void
    returns: void
*/
void LCD_1602A_init(void)
{
    LCD_1602A_CTRL_DDR |= (1 << LCD_1602A_RS) | (1 << LCD_1602A_EN);
     50e:	84 b1       	in	r24, 0x04	; 4
     510:	83 60       	ori	r24, 0x03	; 3
     512:	84 b9       	out	0x04, r24	; 4
    LCD_1602A_DATA_DDR |= (1 << LCD_1602A_D4) | (1 << LCD_1602A_D5) | (1 << LCD_1602A_D6) | (1 << LCD_1602A_D7);
     514:	8a b1       	in	r24, 0x0a	; 10
     516:	80 6f       	ori	r24, 0xF0	; 240
     518:	8a b9       	out	0x0a, r24	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     51a:	2f ef       	ldi	r18, 0xFF	; 255
     51c:	89 ef       	ldi	r24, 0xF9	; 249
     51e:	90 e0       	ldi	r25, 0x00	; 0
     520:	21 50       	subi	r18, 0x01	; 1
     522:	80 40       	sbci	r24, 0x00	; 0
     524:	90 40       	sbci	r25, 0x00	; 0
     526:	e1 f7       	brne	.-8      	; 0x520 <LCD_1602A_init+0x12>
     528:	00 c0       	rjmp	.+0      	; 0x52a <LCD_1602A_init+0x1c>
     52a:	00 00       	nop

    _delay_ms(20); // Wait for LCD power up
    LCD_1602A_send_nibble(DISPLAY_WAIT_POWER_UP);
     52c:	83 e0       	ldi	r24, 0x03	; 3
     52e:	0e 94 2c 02 	call	0x458	; 0x458 <LCD_1602A_send_nibble>
     532:	8f e1       	ldi	r24, 0x1F	; 31
     534:	9e e4       	ldi	r25, 0x4E	; 78
     536:	01 97       	sbiw	r24, 0x01	; 1
     538:	f1 f7       	brne	.-4      	; 0x536 <LCD_1602A_init+0x28>
     53a:	00 c0       	rjmp	.+0      	; 0x53c <LCD_1602A_init+0x2e>
     53c:	00 00       	nop
    _delay_ms(5);
    LCD_1602A_send_nibble(DISPLAY_WAIT_POWER_UP);
     53e:	83 e0       	ldi	r24, 0x03	; 3
     540:	0e 94 2c 02 	call	0x458	; 0x458 <LCD_1602A_send_nibble>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     544:	87 e5       	ldi	r24, 0x57	; 87
     546:	92 e0       	ldi	r25, 0x02	; 2
     548:	01 97       	sbiw	r24, 0x01	; 1
     54a:	f1 f7       	brne	.-4      	; 0x548 <LCD_1602A_init+0x3a>
     54c:	00 c0       	rjmp	.+0      	; 0x54e <LCD_1602A_init+0x40>
     54e:	00 00       	nop
    _delay_us(150);
    LCD_1602A_send_nibble(DISPLAY_WAIT_POWER_UP);
     550:	83 e0       	ldi	r24, 0x03	; 3
     552:	0e 94 2c 02 	call	0x458	; 0x458 <LCD_1602A_send_nibble>

    LCD_1602A_send_nibble(DISPLAY_4_BIT_MODE); // Switch to 4-bit mode
     556:	82 e0       	ldi	r24, 0x02	; 2
     558:	0e 94 2c 02 	call	0x458	; 0x458 <LCD_1602A_send_nibble>

    LCD_1602A_load_command(DISPLAY_FUNCTION_SET_4BIT_2LINE);
     55c:	88 e2       	ldi	r24, 0x28	; 40
     55e:	0e 94 46 02 	call	0x48c	; 0x48c <LCD_1602A_load_command>
    LCD_1602A_load_command(DISPLAY_DISPLAY_ON_CURSOR_OFF);
     562:	8c e0       	ldi	r24, 0x0C	; 12
     564:	0e 94 46 02 	call	0x48c	; 0x48c <LCD_1602A_load_command>
    LCD_1602A_load_command(DISPLAY_ENTRY_MODE_SET);
     568:	86 e0       	ldi	r24, 0x06	; 6
     56a:	0e 94 46 02 	call	0x48c	; 0x48c <LCD_1602A_load_command>
    LCD_1602A_load_command(DISPLAY_CLEAR_SCREEN);
     56e:	81 e0       	ldi	r24, 0x01	; 1
     570:	0e 94 46 02 	call	0x48c	; 0x48c <LCD_1602A_load_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     574:	8f e3       	ldi	r24, 0x3F	; 63
     576:	9f e1       	ldi	r25, 0x1F	; 31
     578:	01 97       	sbiw	r24, 0x01	; 1
     57a:	f1 f7       	brne	.-4      	; 0x578 <LCD_1602A_init+0x6a>
     57c:	00 c0       	rjmp	.+0      	; 0x57e <LCD_1602A_init+0x70>
     57e:	00 00       	nop
     580:	08 95       	ret

00000582 <DS18B20_reset>:
    params: void
    returns: uint8_t - 1 if presence pulse detected, 0 otherwise
*/
uint8_t DS18B20_reset(void)
{
    DS18B20_OUTPUT();
     582:	87 b1       	in	r24, 0x07	; 7
     584:	81 60       	ori	r24, 0x01	; 1
     586:	87 b9       	out	0x07, r24	; 7
    DS18B20_LOW();
     588:	88 b1       	in	r24, 0x08	; 8
     58a:	8e 7f       	andi	r24, 0xFE	; 254
     58c:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     58e:	8f e7       	ldi	r24, 0x7F	; 127
     590:	97 e0       	ldi	r25, 0x07	; 7
     592:	01 97       	sbiw	r24, 0x01	; 1
     594:	f1 f7       	brne	.-4      	; 0x592 <DS18B20_reset+0x10>
     596:	00 c0       	rjmp	.+0      	; 0x598 <DS18B20_reset+0x16>
     598:	00 00       	nop
    _delay_us(480);
    DS18B20_INPUT();
     59a:	87 b1       	in	r24, 0x07	; 7
     59c:	8e 7f       	andi	r24, 0xFE	; 254
     59e:	87 b9       	out	0x07, r24	; 7
     5a0:	ef ee       	ldi	r30, 0xEF	; 239
     5a2:	f0 e0       	ldi	r31, 0x00	; 0
     5a4:	31 97       	sbiw	r30, 0x01	; 1
     5a6:	f1 f7       	brne	.-4      	; 0x5a4 <DS18B20_reset+0x22>
     5a8:	00 c0       	rjmp	.+0      	; 0x5aa <DS18B20_reset+0x28>
     5aa:	00 00       	nop
    _delay_us(60);

    uint8_t presence = !(DS18B20_PIN & (1 << DS18B20_DQ));
     5ac:	96 b1       	in	r25, 0x06	; 6
     5ae:	81 e0       	ldi	r24, 0x01	; 1
     5b0:	89 27       	eor	r24, r25
     5b2:	81 70       	andi	r24, 0x01	; 1
     5b4:	ef e8       	ldi	r30, 0x8F	; 143
     5b6:	f6 e0       	ldi	r31, 0x06	; 6
     5b8:	31 97       	sbiw	r30, 0x01	; 1
     5ba:	f1 f7       	brne	.-4      	; 0x5b8 <DS18B20_reset+0x36>
     5bc:	00 c0       	rjmp	.+0      	; 0x5be <DS18B20_reset+0x3c>
     5be:	00 00       	nop
    _delay_us(420);
    return presence;
}
     5c0:	08 95       	ret

000005c2 <DS18B20_write_bit>:
    params: uint8_t bit - the bit to write (0 or 1)
    returns: void
*/
void DS18B20_write_bit(uint8_t bit)
{
    DS18B20_OUTPUT();
     5c2:	97 b1       	in	r25, 0x07	; 7
     5c4:	91 60       	ori	r25, 0x01	; 1
     5c6:	97 b9       	out	0x07, r25	; 7
    DS18B20_LOW();
     5c8:	98 b1       	in	r25, 0x08	; 8
     5ca:	9e 7f       	andi	r25, 0xFE	; 254
     5cc:	98 b9       	out	0x08, r25	; 8
    if (bit)
     5ce:	88 23       	and	r24, r24
     5d0:	71 f0       	breq	.+28     	; 0x5ee <DS18B20_write_bit+0x2c>
     5d2:	85 e0       	ldi	r24, 0x05	; 5
     5d4:	8a 95       	dec	r24
     5d6:	f1 f7       	brne	.-4      	; 0x5d4 <DS18B20_write_bit+0x12>
     5d8:	00 00       	nop
    {
        _delay_us(1);
        DS18B20_INPUT();
     5da:	87 b1       	in	r24, 0x07	; 7
     5dc:	8e 7f       	andi	r24, 0xFE	; 254
     5de:	87 b9       	out	0x07, r24	; 7
     5e0:	8f ee       	ldi	r24, 0xEF	; 239
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	01 97       	sbiw	r24, 0x01	; 1
     5e6:	f1 f7       	brne	.-4      	; 0x5e4 <DS18B20_write_bit+0x22>
     5e8:	00 c0       	rjmp	.+0      	; 0x5ea <DS18B20_write_bit+0x28>
     5ea:	00 00       	nop
     5ec:	08 95       	ret
     5ee:	8f ee       	ldi	r24, 0xEF	; 239
     5f0:	90 e0       	ldi	r25, 0x00	; 0
     5f2:	01 97       	sbiw	r24, 0x01	; 1
     5f4:	f1 f7       	brne	.-4      	; 0x5f2 <DS18B20_write_bit+0x30>
     5f6:	00 c0       	rjmp	.+0      	; 0x5f8 <DS18B20_write_bit+0x36>
     5f8:	00 00       	nop
        _delay_us(60);
    }
    else
    {
        _delay_us(60);
        DS18B20_INPUT();
     5fa:	87 b1       	in	r24, 0x07	; 7
     5fc:	8e 7f       	andi	r24, 0xFE	; 254
     5fe:	87 b9       	out	0x07, r24	; 7
     600:	08 95       	ret

00000602 <DS18B20_write_byte>:
    write a byte to the DS18B20 sensor
    params: uint8_t data - the byte to write
    returns: void
*/
void DS18B20_write_byte(uint8_t data)
{
     602:	cf 93       	push	r28
     604:	df 93       	push	r29
     606:	d8 2f       	mov	r29, r24
    for (uint8_t i = 0; i < 8; i++)
     608:	c0 e0       	ldi	r28, 0x00	; 0
     60a:	06 c0       	rjmp	.+12     	; 0x618 <DS18B20_write_byte+0x16>
    {
        DS18B20_write_bit(data & 0x01);
     60c:	8d 2f       	mov	r24, r29
     60e:	81 70       	andi	r24, 0x01	; 1
     610:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <DS18B20_write_bit>
        data >>= 1;
     614:	d6 95       	lsr	r29
    params: uint8_t data - the byte to write
    returns: void
*/
void DS18B20_write_byte(uint8_t data)
{
    for (uint8_t i = 0; i < 8; i++)
     616:	cf 5f       	subi	r28, 0xFF	; 255
     618:	c8 30       	cpi	r28, 0x08	; 8
     61a:	c0 f3       	brcs	.-16     	; 0x60c <DS18B20_write_byte+0xa>
    {
        DS18B20_write_bit(data & 0x01);
        data >>= 1;
    }
}
     61c:	df 91       	pop	r29
     61e:	cf 91       	pop	r28
     620:	08 95       	ret

00000622 <DS18B20_read_bit>:
    returns: uint8_t - the bit read (0 or 1)
*/
uint8_t DS18B20_read_bit(void)
{
    uint8_t bit;
    DS18B20_OUTPUT();
     622:	87 b1       	in	r24, 0x07	; 7
     624:	81 60       	ori	r24, 0x01	; 1
     626:	87 b9       	out	0x07, r24	; 7
    DS18B20_LOW();
     628:	88 b1       	in	r24, 0x08	; 8
     62a:	8e 7f       	andi	r24, 0xFE	; 254
     62c:	88 b9       	out	0x08, r24	; 8
     62e:	8a e0       	ldi	r24, 0x0A	; 10
     630:	8a 95       	dec	r24
     632:	f1 f7       	brne	.-4      	; 0x630 <DS18B20_read_bit+0xe>
     634:	00 c0       	rjmp	.+0      	; 0x636 <DS18B20_read_bit+0x14>
    _delay_us(2);
    DS18B20_INPUT();
     636:	87 b1       	in	r24, 0x07	; 7
     638:	8e 7f       	andi	r24, 0xFE	; 254
     63a:	87 b9       	out	0x07, r24	; 7
     63c:	e5 e3       	ldi	r30, 0x35	; 53
     63e:	ea 95       	dec	r30
     640:	f1 f7       	brne	.-4      	; 0x63e <DS18B20_read_bit+0x1c>
     642:	00 00       	nop
    _delay_us(10);
    bit = (DS18B20_PIN & (1 << DS18B20_DQ)) ? 1 : 0;
     644:	86 b1       	in	r24, 0x06	; 6
     646:	81 70       	andi	r24, 0x01	; 1
     648:	e7 ec       	ldi	r30, 0xC7	; 199
     64a:	f0 e0       	ldi	r31, 0x00	; 0
     64c:	31 97       	sbiw	r30, 0x01	; 1
     64e:	f1 f7       	brne	.-4      	; 0x64c <DS18B20_read_bit+0x2a>
     650:	00 c0       	rjmp	.+0      	; 0x652 <DS18B20_read_bit+0x30>
     652:	00 00       	nop
    _delay_us(50);
    return bit;
}
     654:	08 95       	ret

00000656 <DS18B20_read_byte>:
    read a byte from the DS18B20 sensor
    params: void
    returns: uint8_t - the byte read
*/
uint8_t DS18B20_read_byte(void)
{
     656:	cf 93       	push	r28
     658:	df 93       	push	r29
    uint8_t data = 0;
    for (uint8_t i = 0; i < 8; i++)
     65a:	c0 e0       	ldi	r28, 0x00	; 0
    params: void
    returns: uint8_t - the byte read
*/
uint8_t DS18B20_read_byte(void)
{
    uint8_t data = 0;
     65c:	d0 e0       	ldi	r29, 0x00	; 0
    for (uint8_t i = 0; i < 8; i++)
     65e:	06 c0       	rjmp	.+12     	; 0x66c <DS18B20_read_byte+0x16>
    {
        data >>= 1;
     660:	d6 95       	lsr	r29
        if (DS18B20_read_bit())
     662:	0e 94 11 03 	call	0x622	; 0x622 <DS18B20_read_bit>
     666:	81 11       	cpse	r24, r1
            data |= 0x80;
     668:	d0 68       	ori	r29, 0x80	; 128
    returns: uint8_t - the byte read
*/
uint8_t DS18B20_read_byte(void)
{
    uint8_t data = 0;
    for (uint8_t i = 0; i < 8; i++)
     66a:	cf 5f       	subi	r28, 0xFF	; 255
     66c:	c8 30       	cpi	r28, 0x08	; 8
     66e:	c0 f3       	brcs	.-16     	; 0x660 <DS18B20_read_byte+0xa>
        data >>= 1;
        if (DS18B20_read_bit())
            data |= 0x80;
    }
    return data;
}
     670:	8d 2f       	mov	r24, r29
     672:	df 91       	pop	r29
     674:	cf 91       	pop	r28
     676:	08 95       	ret

00000678 <DS18B20_read_temperature>:
    read temperature from the DS18B20 sensor
    params: void
    returns: float - the temperature in degrees Celsius
*/
float DS18B20_read_temperature(void)
{
     678:	cf 93       	push	r28
    uint8_t temp_l, temp_h;
    int16_t temp;

    DS18B20_reset();
     67a:	0e 94 c1 02 	call	0x582	; 0x582 <DS18B20_reset>
    DS18B20_write_byte(0xCC);
     67e:	8c ec       	ldi	r24, 0xCC	; 204
     680:	0e 94 01 03 	call	0x602	; 0x602 <DS18B20_write_byte>
    DS18B20_write_byte(0x44);
     684:	84 e4       	ldi	r24, 0x44	; 68
     686:	0e 94 01 03 	call	0x602	; 0x602 <DS18B20_write_byte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     68a:	2f ef       	ldi	r18, 0xFF	; 255
     68c:	8e e9       	ldi	r24, 0x9E	; 158
     68e:	94 e2       	ldi	r25, 0x24	; 36
     690:	21 50       	subi	r18, 0x01	; 1
     692:	80 40       	sbci	r24, 0x00	; 0
     694:	90 40       	sbci	r25, 0x00	; 0
     696:	e1 f7       	brne	.-8      	; 0x690 <DS18B20_read_temperature+0x18>
     698:	00 c0       	rjmp	.+0      	; 0x69a <DS18B20_read_temperature+0x22>
     69a:	00 00       	nop
    _delay_ms(750);

    DS18B20_reset();
     69c:	0e 94 c1 02 	call	0x582	; 0x582 <DS18B20_reset>
    DS18B20_write_byte(0xCC);
     6a0:	8c ec       	ldi	r24, 0xCC	; 204
     6a2:	0e 94 01 03 	call	0x602	; 0x602 <DS18B20_write_byte>
    DS18B20_write_byte(0xBE);
     6a6:	8e eb       	ldi	r24, 0xBE	; 190
     6a8:	0e 94 01 03 	call	0x602	; 0x602 <DS18B20_write_byte>

    temp_l = DS18B20_read_byte();
     6ac:	0e 94 2b 03 	call	0x656	; 0x656 <DS18B20_read_byte>
     6b0:	c8 2f       	mov	r28, r24
    temp_h = DS18B20_read_byte();
     6b2:	0e 94 2b 03 	call	0x656	; 0x656 <DS18B20_read_byte>

    temp = (temp_h << 8) | temp_l;
     6b6:	68 2f       	mov	r22, r24
     6b8:	70 e0       	ldi	r23, 0x00	; 0
     6ba:	76 2f       	mov	r23, r22
     6bc:	66 27       	eor	r22, r22
     6be:	6c 2b       	or	r22, r28

    return (float)temp / 16.0;
     6c0:	07 2e       	mov	r0, r23
     6c2:	00 0c       	add	r0, r0
     6c4:	88 0b       	sbc	r24, r24
     6c6:	99 0b       	sbc	r25, r25
     6c8:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <__floatsisf>
     6cc:	20 e0       	ldi	r18, 0x00	; 0
     6ce:	30 e0       	ldi	r19, 0x00	; 0
     6d0:	40 e8       	ldi	r20, 0x80	; 128
     6d2:	5d e3       	ldi	r21, 0x3D	; 61
     6d4:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <__mulsf3>
}
     6d8:	cf 91       	pop	r28
     6da:	08 95       	ret

000006dc <HCSR04_init>:
    params: void
    returns: void
*/
void HCSR04_init(void)
{
    HCSR04_TRIG_DDR |= (1 << HCSR04_TRIG_PIN);
     6dc:	8a b1       	in	r24, 0x0a	; 10
     6de:	84 60       	ori	r24, 0x04	; 4
     6e0:	8a b9       	out	0x0a, r24	; 10
    HCSR04_ECHO_DDR &= ~(1 << HCSR04_ECHO_PIN);
     6e2:	8a b1       	in	r24, 0x0a	; 10
     6e4:	87 7f       	andi	r24, 0xF7	; 247
     6e6:	8a b9       	out	0x0a, r24	; 10
     6e8:	08 95       	ret

000006ea <HCSR04_trigger>:
    params: void
    returns: void
*/
void HCSR04_trigger(void)
{
    HCSR04_TRIG_PORT &= ~(1 << HCSR04_TRIG_PIN);
     6ea:	8b b1       	in	r24, 0x0b	; 11
     6ec:	8b 7f       	andi	r24, 0xFB	; 251
     6ee:	8b b9       	out	0x0b, r24	; 11
     6f0:	2f ef       	ldi	r18, 0xFF	; 255
     6f2:	87 e8       	ldi	r24, 0x87	; 135
     6f4:	93 e1       	ldi	r25, 0x13	; 19
     6f6:	21 50       	subi	r18, 0x01	; 1
     6f8:	80 40       	sbci	r24, 0x00	; 0
     6fa:	90 40       	sbci	r25, 0x00	; 0
     6fc:	e1 f7       	brne	.-8      	; 0x6f6 <HCSR04_trigger+0xc>
     6fe:	00 c0       	rjmp	.+0      	; 0x700 <HCSR04_trigger+0x16>
     700:	00 00       	nop
    _delay_ms(400);
    HCSR04_TRIG_PORT |= (1 << HCSR04_TRIG_PIN);
     702:	8b b1       	in	r24, 0x0b	; 11
     704:	84 60       	ori	r24, 0x04	; 4
     706:	8b b9       	out	0x0b, r24	; 11
     708:	2f ef       	ldi	r18, 0xFF	; 255
     70a:	87 e8       	ldi	r24, 0x87	; 135
     70c:	93 e1       	ldi	r25, 0x13	; 19
     70e:	21 50       	subi	r18, 0x01	; 1
     710:	80 40       	sbci	r24, 0x00	; 0
     712:	90 40       	sbci	r25, 0x00	; 0
     714:	e1 f7       	brne	.-8      	; 0x70e <HCSR04_trigger+0x24>
     716:	00 c0       	rjmp	.+0      	; 0x718 <HCSR04_trigger+0x2e>
     718:	00 00       	nop
    _delay_ms(400);
    HCSR04_TRIG_PORT &= ~(1 << HCSR04_TRIG_PIN);
     71a:	8b b1       	in	r24, 0x0b	; 11
     71c:	8b 7f       	andi	r24, 0xFB	; 251
     71e:	8b b9       	out	0x0b, r24	; 11
     720:	08 95       	ret

00000722 <HCSR04_read>:
*/
uint16_t HCSR04_read(void)
{
    uint32_t count = 0;

    while (!(HCSR04_ECHO_DEF_PIN & (1 << HCSR04_ECHO_PIN)));
     722:	4b 9b       	sbis	0x09, 3	; 9
     724:	fe cf       	rjmp	.-4      	; 0x722 <HCSR04_read>
     726:	60 e0       	ldi	r22, 0x00	; 0
     728:	70 e0       	ldi	r23, 0x00	; 0
     72a:	cb 01       	movw	r24, r22
     72c:	08 c0       	rjmp	.+16     	; 0x73e <HCSR04_read+0x1c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     72e:	25 e0       	ldi	r18, 0x05	; 5
     730:	2a 95       	dec	r18
     732:	f1 f7       	brne	.-4      	; 0x730 <HCSR04_read+0xe>
     734:	00 00       	nop

    while (HCSR04_ECHO_DEF_PIN & (1 << HCSR04_ECHO_PIN))
    {
        _delay_us(1);
        count++;
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	8f 4f       	sbci	r24, 0xFF	; 255
     73c:	9f 4f       	sbci	r25, 0xFF	; 255
{
    uint32_t count = 0;

    while (!(HCSR04_ECHO_DEF_PIN & (1 << HCSR04_ECHO_PIN)));

    while (HCSR04_ECHO_DEF_PIN & (1 << HCSR04_ECHO_PIN))
     73e:	4b 99       	sbic	0x09, 3	; 9
     740:	f6 cf       	rjmp	.-20     	; 0x72e <HCSR04_read+0xc>
    {
        _delay_us(1);
        count++;
    }

    return (uint16_t)(count / 58.0);
     742:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <__floatunsisf>
     746:	20 e0       	ldi	r18, 0x00	; 0
     748:	30 e0       	ldi	r19, 0x00	; 0
     74a:	48 e6       	ldi	r20, 0x68	; 104
     74c:	52 e4       	ldi	r21, 0x42	; 66
     74e:	0e 94 a5 0c 	call	0x194a	; 0x194a <__divsf3>
     752:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <__fixunssfsi>
}
     756:	cb 01       	movw	r24, r22
     758:	08 95       	ret

0000075a <HCSR04_get_distance>:
    params: void
    returns: uint16_t - the distance in centimeters
*/
uint16_t HCSR04_get_distance(void)
{
    HCSR04_trigger();
     75a:	0e 94 75 03 	call	0x6ea	; 0x6ea <HCSR04_trigger>
    return HCSR04_read();
     75e:	0e 94 91 03 	call	0x722	; 0x722 <HCSR04_read>
}
     762:	08 95       	ret

00000764 <KEYPAD_init>:
    params: void
    returns: void
*/
void KEYPAD_init(void)
{
    KEYPAD_DDR &= ~((1 << KEYPAD_KEY_1) | (1 << KEYPAD_KEY_2) | (1 << KEYPAD_KEY_3) | (1 << KEYPAD_KEY_4));
     764:	84 b1       	in	r24, 0x04	; 4
     766:	83 7c       	andi	r24, 0xC3	; 195
     768:	84 b9       	out	0x04, r24	; 4
    KEYPAD_PORT |= (1 << KEYPAD_KEY_1) | (1 << KEYPAD_KEY_2) | (1 << KEYPAD_KEY_3) | (1 << KEYPAD_KEY_4);
     76a:	85 b1       	in	r24, 0x05	; 5
     76c:	8c 63       	ori	r24, 0x3C	; 60
     76e:	85 b9       	out	0x05, r24	; 5
     770:	08 95       	ret

00000772 <KEYPAD_read>:
    params: void
    returns: uint8_t - the key number (1-4) or KEYPAD_NO_KEY if no key is pressed
*/
uint8_t KEYPAD_read(void)
{
    if (!(KEYPAD_PIN & (1 << KEYPAD_KEY_1))) return 1;
     772:	1a 9b       	sbis	0x03, 2	; 3
     774:	08 c0       	rjmp	.+16     	; 0x786 <KEYPAD_read+0x14>
    if (!(KEYPAD_PIN & (1 << KEYPAD_KEY_2))) return 2;
     776:	1b 9b       	sbis	0x03, 3	; 3
     778:	08 c0       	rjmp	.+16     	; 0x78a <KEYPAD_read+0x18>
    if (!(KEYPAD_PIN & (1 << KEYPAD_KEY_3))) return 3;
     77a:	1c 9b       	sbis	0x03, 4	; 3
     77c:	08 c0       	rjmp	.+16     	; 0x78e <KEYPAD_read+0x1c>
    if (!(KEYPAD_PIN & (1 << KEYPAD_KEY_4))) return 4;
     77e:	1d 99       	sbic	0x03, 5	; 3
     780:	08 c0       	rjmp	.+16     	; 0x792 <KEYPAD_read+0x20>
     782:	84 e0       	ldi	r24, 0x04	; 4
     784:	08 95       	ret
    params: void
    returns: uint8_t - the key number (1-4) or KEYPAD_NO_KEY if no key is pressed
*/
uint8_t KEYPAD_read(void)
{
    if (!(KEYPAD_PIN & (1 << KEYPAD_KEY_1))) return 1;
     786:	81 e0       	ldi	r24, 0x01	; 1
     788:	08 95       	ret
    if (!(KEYPAD_PIN & (1 << KEYPAD_KEY_2))) return 2;
     78a:	82 e0       	ldi	r24, 0x02	; 2
     78c:	08 95       	ret
    if (!(KEYPAD_PIN & (1 << KEYPAD_KEY_3))) return 3;
     78e:	83 e0       	ldi	r24, 0x03	; 3
     790:	08 95       	ret
    if (!(KEYPAD_PIN & (1 << KEYPAD_KEY_4))) return 4;
    return KEYPAD_NO_KEY;
     792:	85 e0       	ldi	r24, 0x05	; 5
}
     794:	08 95       	ret

00000796 <display_set>:
    params: const unsigned char* title - title string (max 12 chars)
            const unsigned char* data - data string (max 16 chars)
    returns: void
*/
void display_set(const unsigned char *title, const unsigned char *data)
{
     796:	0f 93       	push	r16
     798:	1f 93       	push	r17
     79a:	cf 93       	push	r28
     79c:	df 93       	push	r29
     79e:	cd b7       	in	r28, 0x3d	; 61
     7a0:	de b7       	in	r29, 0x3e	; 62
     7a2:	ec 97       	sbiw	r28, 0x3c	; 60
     7a4:	0f b6       	in	r0, 0x3f	; 63
     7a6:	f8 94       	cli
     7a8:	de bf       	out	0x3e, r29	; 62
     7aa:	0f be       	out	0x3f, r0	; 63
     7ac:	cd bf       	out	0x3d, r28	; 61
     7ae:	dc 01       	movw	r26, r24
     7b0:	8b 01       	movw	r16, r22
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7b2:	8f e3       	ldi	r24, 0x3F	; 63
     7b4:	9f e1       	ldi	r25, 0x1F	; 31
     7b6:	01 97       	sbiw	r24, 0x01	; 1
     7b8:	f1 f7       	brne	.-4      	; 0x7b6 <display_set+0x20>
     7ba:	00 c0       	rjmp	.+0      	; 0x7bc <display_set+0x26>
     7bc:	00 00       	nop

    unsigned char line1[12];
    unsigned char line2[16];

    // prepare line1: copy up to 12 chars from title, pad with spaces
    int i = 0;
     7be:	20 e0       	ldi	r18, 0x00	; 0
     7c0:	30 e0       	ldi	r19, 0x00	; 0
    for (; i < 12 && *title; ++i)
     7c2:	0a c0       	rjmp	.+20     	; 0x7d8 <display_set+0x42>
        line1[i] = *title++;
     7c4:	11 96       	adiw	r26, 0x01	; 1
     7c6:	e1 e0       	ldi	r30, 0x01	; 1
     7c8:	f0 e0       	ldi	r31, 0x00	; 0
     7ca:	ec 0f       	add	r30, r28
     7cc:	fd 1f       	adc	r31, r29
     7ce:	e2 0f       	add	r30, r18
     7d0:	f3 1f       	adc	r31, r19
     7d2:	80 83       	st	Z, r24
    unsigned char line1[12];
    unsigned char line2[16];

    // prepare line1: copy up to 12 chars from title, pad with spaces
    int i = 0;
    for (; i < 12 && *title; ++i)
     7d4:	2f 5f       	subi	r18, 0xFF	; 255
     7d6:	3f 4f       	sbci	r19, 0xFF	; 255
     7d8:	2c 30       	cpi	r18, 0x0C	; 12
     7da:	31 05       	cpc	r19, r1
     7dc:	74 f4       	brge	.+28     	; 0x7fa <display_set+0x64>
     7de:	8c 91       	ld	r24, X
     7e0:	81 11       	cpse	r24, r1
     7e2:	f0 cf       	rjmp	.-32     	; 0x7c4 <display_set+0x2e>
     7e4:	0a c0       	rjmp	.+20     	; 0x7fa <display_set+0x64>
        line1[i] = *title++;

    for (; i < 12; ++i)
        line1[i] = ' ';
     7e6:	e1 e0       	ldi	r30, 0x01	; 1
     7e8:	f0 e0       	ldi	r31, 0x00	; 0
     7ea:	ec 0f       	add	r30, r28
     7ec:	fd 1f       	adc	r31, r29
     7ee:	e2 0f       	add	r30, r18
     7f0:	f3 1f       	adc	r31, r19
     7f2:	80 e2       	ldi	r24, 0x20	; 32
     7f4:	80 83       	st	Z, r24
    // prepare line1: copy up to 12 chars from title, pad with spaces
    int i = 0;
    for (; i < 12 && *title; ++i)
        line1[i] = *title++;

    for (; i < 12; ++i)
     7f6:	2f 5f       	subi	r18, 0xFF	; 255
     7f8:	3f 4f       	sbci	r19, 0xFF	; 255
     7fa:	2c 30       	cpi	r18, 0x0C	; 12
     7fc:	31 05       	cpc	r19, r1
     7fe:	9c f3       	brlt	.-26     	; 0x7e6 <display_set+0x50>
        line1[i] = ' ';

    uint8_t arrow_down[8] = {
     800:	88 e0       	ldi	r24, 0x08	; 8
     802:	e0 e5       	ldi	r30, 0x50	; 80
     804:	f1 e0       	ldi	r31, 0x01	; 1
     806:	de 01       	movw	r26, r28
     808:	5d 96       	adiw	r26, 0x1d	; 29
     80a:	01 90       	ld	r0, Z+
     80c:	0d 92       	st	X+, r0
     80e:	8a 95       	dec	r24
     810:	e1 f7       	brne	.-8      	; 0x80a <__DATA_REGION_LENGTH__+0xa>
        0x0E,
        0x04,
        0x00
    };

    uint8_t arrow_up[8] = {
     812:	88 e0       	ldi	r24, 0x08	; 8
     814:	e8 e5       	ldi	r30, 0x58	; 88
     816:	f1 e0       	ldi	r31, 0x01	; 1
     818:	de 01       	movw	r26, r28
     81a:	95 96       	adiw	r26, 0x25	; 37
     81c:	01 90       	ld	r0, Z+
     81e:	0d 92       	st	X+, r0
     820:	8a 95       	dec	r24
     822:	e1 f7       	brne	.-8      	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
        0x04,
        0x04,
        0x00
    };

    uint8_t arrow_right[8] = {
     824:	88 e0       	ldi	r24, 0x08	; 8
     826:	e0 e6       	ldi	r30, 0x60	; 96
     828:	f1 e0       	ldi	r31, 0x01	; 1
     82a:	de 01       	movw	r26, r28
     82c:	9d 96       	adiw	r26, 0x2d	; 45
     82e:	01 90       	ld	r0, Z+
     830:	0d 92       	st	X+, r0
     832:	8a 95       	dec	r24
     834:	e1 f7       	brne	.-8      	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
        0x04,
        0x00,
        0x00
    };

    uint8_t arrow_left[8] = {
     836:	88 e0       	ldi	r24, 0x08	; 8
     838:	e8 e6       	ldi	r30, 0x68	; 104
     83a:	f1 e0       	ldi	r31, 0x01	; 1
     83c:	de 01       	movw	r26, r28
     83e:	d5 96       	adiw	r26, 0x35	; 53
     840:	01 90       	ld	r0, Z+
     842:	0d 92       	st	X+, r0
     844:	8a 95       	dec	r24
     846:	e1 f7       	brne	.-8      	; 0x840 <__DATA_REGION_LENGTH__+0x40>
        0x04,
        0x00,
        0x00
    };

    LCD_1602A_create_char(0, arrow_down); // store at location 0
     848:	be 01       	movw	r22, r28
     84a:	63 5e       	subi	r22, 0xE3	; 227
     84c:	7f 4f       	sbci	r23, 0xFF	; 255
     84e:	80 e0       	ldi	r24, 0x00	; 0
     850:	0e 94 66 02 	call	0x4cc	; 0x4cc <LCD_1602A_create_char>
    LCD_1602A_create_char(1, arrow_up);   // store at location 1
     854:	be 01       	movw	r22, r28
     856:	6b 5d       	subi	r22, 0xDB	; 219
     858:	7f 4f       	sbci	r23, 0xFF	; 255
     85a:	81 e0       	ldi	r24, 0x01	; 1
     85c:	0e 94 66 02 	call	0x4cc	; 0x4cc <LCD_1602A_create_char>
    LCD_1602A_create_char(2, arrow_left);   // store at location 2
     860:	be 01       	movw	r22, r28
     862:	6b 5c       	subi	r22, 0xCB	; 203
     864:	7f 4f       	sbci	r23, 0xFF	; 255
     866:	82 e0       	ldi	r24, 0x02	; 2
     868:	0e 94 66 02 	call	0x4cc	; 0x4cc <LCD_1602A_create_char>
    LCD_1602A_create_char(3, arrow_right);   // store at location 3
     86c:	be 01       	movw	r22, r28
     86e:	63 5d       	subi	r22, 0xD3	; 211
     870:	7f 4f       	sbci	r23, 0xFF	; 255
     872:	83 e0       	ldi	r24, 0x03	; 3
     874:	0e 94 66 02 	call	0x4cc	; 0x4cc <LCD_1602A_create_char>

    // prepare line2: copy up to 16 chars from data, pad with spaces
    i = 0;
     878:	80 e0       	ldi	r24, 0x00	; 0
     87a:	90 e0       	ldi	r25, 0x00	; 0
    for (; i < 16 && *data; ++i)
     87c:	0a c0       	rjmp	.+20     	; 0x892 <__DATA_REGION_LENGTH__+0x92>
        line2[i] = *data++;
     87e:	0f 5f       	subi	r16, 0xFF	; 255
     880:	1f 4f       	sbci	r17, 0xFF	; 255
     882:	ed e0       	ldi	r30, 0x0D	; 13
     884:	f0 e0       	ldi	r31, 0x00	; 0
     886:	ec 0f       	add	r30, r28
     888:	fd 1f       	adc	r31, r29
     88a:	e8 0f       	add	r30, r24
     88c:	f9 1f       	adc	r31, r25
     88e:	20 83       	st	Z, r18
    LCD_1602A_create_char(2, arrow_left);   // store at location 2
    LCD_1602A_create_char(3, arrow_right);   // store at location 3

    // prepare line2: copy up to 16 chars from data, pad with spaces
    i = 0;
    for (; i < 16 && *data; ++i)
     890:	01 96       	adiw	r24, 0x01	; 1
     892:	80 31       	cpi	r24, 0x10	; 16
     894:	91 05       	cpc	r25, r1
     896:	74 f4       	brge	.+28     	; 0x8b4 <__DATA_REGION_LENGTH__+0xb4>
     898:	f8 01       	movw	r30, r16
     89a:	20 81       	ld	r18, Z
     89c:	21 11       	cpse	r18, r1
     89e:	ef cf       	rjmp	.-34     	; 0x87e <__DATA_REGION_LENGTH__+0x7e>
     8a0:	09 c0       	rjmp	.+18     	; 0x8b4 <__DATA_REGION_LENGTH__+0xb4>
        line2[i] = *data++;

    // LCD_1602A_load_data(0);

    for (; i < 16; ++i)
        line2[i] = ' ';
     8a2:	ed e0       	ldi	r30, 0x0D	; 13
     8a4:	f0 e0       	ldi	r31, 0x00	; 0
     8a6:	ec 0f       	add	r30, r28
     8a8:	fd 1f       	adc	r31, r29
     8aa:	e8 0f       	add	r30, r24
     8ac:	f9 1f       	adc	r31, r25
     8ae:	20 e2       	ldi	r18, 0x20	; 32
     8b0:	20 83       	st	Z, r18
    for (; i < 16 && *data; ++i)
        line2[i] = *data++;

    // LCD_1602A_load_data(0);

    for (; i < 16; ++i)
     8b2:	01 96       	adiw	r24, 0x01	; 1
     8b4:	80 31       	cpi	r24, 0x10	; 16
     8b6:	91 05       	cpc	r25, r1
     8b8:	a4 f3       	brlt	.-24     	; 0x8a2 <__DATA_REGION_LENGTH__+0xa2>
        line2[i] = ' ';

    // reset cursor to first line and write 12 chars
    LCD_1602A_load_command(DISPLAY_SET_CURSOR_LINE_1);
     8ba:	80 e8       	ldi	r24, 0x80	; 128
     8bc:	0e 94 46 02 	call	0x48c	; 0x48c <LCD_1602A_load_command>
    for (i = 0; i < 12; ++i)
     8c0:	00 e0       	ldi	r16, 0x00	; 0
     8c2:	10 e0       	ldi	r17, 0x00	; 0
     8c4:	0b c0       	rjmp	.+22     	; 0x8dc <__DATA_REGION_LENGTH__+0xdc>
    {
        LCD_1602A_load_data(line1[i]);
     8c6:	e1 e0       	ldi	r30, 0x01	; 1
     8c8:	f0 e0       	ldi	r31, 0x00	; 0
     8ca:	ec 0f       	add	r30, r28
     8cc:	fd 1f       	adc	r31, r29
     8ce:	e0 0f       	add	r30, r16
     8d0:	f1 1f       	adc	r31, r17
     8d2:	80 81       	ld	r24, Z
     8d4:	0e 94 56 02 	call	0x4ac	; 0x4ac <LCD_1602A_load_data>
    for (; i < 16; ++i)
        line2[i] = ' ';

    // reset cursor to first line and write 12 chars
    LCD_1602A_load_command(DISPLAY_SET_CURSOR_LINE_1);
    for (i = 0; i < 12; ++i)
     8d8:	0f 5f       	subi	r16, 0xFF	; 255
     8da:	1f 4f       	sbci	r17, 0xFF	; 255
     8dc:	0c 30       	cpi	r16, 0x0C	; 12
     8de:	11 05       	cpc	r17, r1
     8e0:	94 f3       	brlt	.-28     	; 0x8c6 <__DATA_REGION_LENGTH__+0xc6>
    {
        LCD_1602A_load_data(line1[i]);
    }

    LCD_1602A_load_data(2);
     8e2:	82 e0       	ldi	r24, 0x02	; 2
     8e4:	0e 94 56 02 	call	0x4ac	; 0x4ac <LCD_1602A_load_data>
    LCD_1602A_load_data(0);
     8e8:	80 e0       	ldi	r24, 0x00	; 0
     8ea:	0e 94 56 02 	call	0x4ac	; 0x4ac <LCD_1602A_load_data>
    LCD_1602A_load_data(1);
     8ee:	81 e0       	ldi	r24, 0x01	; 1
     8f0:	0e 94 56 02 	call	0x4ac	; 0x4ac <LCD_1602A_load_data>
    LCD_1602A_load_data(3);
     8f4:	83 e0       	ldi	r24, 0x03	; 3
     8f6:	0e 94 56 02 	call	0x4ac	; 0x4ac <LCD_1602A_load_data>

    // reset cursor to second line and write 16 chars
    LCD_1602A_load_command(DISPLAY_SET_CURSOR_LINE_2);
     8fa:	80 ec       	ldi	r24, 0xC0	; 192
     8fc:	0e 94 46 02 	call	0x48c	; 0x48c <LCD_1602A_load_command>
    for (i = 0; i < 16; ++i)
     900:	00 e0       	ldi	r16, 0x00	; 0
     902:	10 e0       	ldi	r17, 0x00	; 0
     904:	0b c0       	rjmp	.+22     	; 0x91c <__stack+0x1d>
    {
        LCD_1602A_load_data(line2[i]);
     906:	ed e0       	ldi	r30, 0x0D	; 13
     908:	f0 e0       	ldi	r31, 0x00	; 0
     90a:	ec 0f       	add	r30, r28
     90c:	fd 1f       	adc	r31, r29
     90e:	e0 0f       	add	r30, r16
     910:	f1 1f       	adc	r31, r17
     912:	80 81       	ld	r24, Z
     914:	0e 94 56 02 	call	0x4ac	; 0x4ac <LCD_1602A_load_data>
    LCD_1602A_load_data(1);
    LCD_1602A_load_data(3);

    // reset cursor to second line and write 16 chars
    LCD_1602A_load_command(DISPLAY_SET_CURSOR_LINE_2);
    for (i = 0; i < 16; ++i)
     918:	0f 5f       	subi	r16, 0xFF	; 255
     91a:	1f 4f       	sbci	r17, 0xFF	; 255
     91c:	00 31       	cpi	r16, 0x10	; 16
     91e:	11 05       	cpc	r17, r1
     920:	94 f3       	brlt	.-28     	; 0x906 <__stack+0x7>
    {
        LCD_1602A_load_data(line2[i]);
    }
}
     922:	ec 96       	adiw	r28, 0x3c	; 60
     924:	0f b6       	in	r0, 0x3f	; 63
     926:	f8 94       	cli
     928:	de bf       	out	0x3e, r29	; 62
     92a:	0f be       	out	0x3f, r0	; 63
     92c:	cd bf       	out	0x3d, r28	; 61
     92e:	df 91       	pop	r29
     930:	cf 91       	pop	r28
     932:	1f 91       	pop	r17
     934:	0f 91       	pop	r16
     936:	08 95       	ret

00000938 <get_tank_capacity_at_height>:


float get_tank_capacity_at_height(int water_depth)
{
     938:	cf 92       	push	r12
     93a:	df 92       	push	r13
     93c:	ef 92       	push	r14
     93e:	ff 92       	push	r15
    float water_height = (float)TANK_HEIGHT_IN_CM - (float)water_depth;
     940:	bc 01       	movw	r22, r24
     942:	99 0f       	add	r25, r25
     944:	88 0b       	sbc	r24, r24
     946:	99 0b       	sbc	r25, r25
     948:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <__floatsisf>
     94c:	9b 01       	movw	r18, r22
     94e:	ac 01       	movw	r20, r24
     950:	6a e9       	ldi	r22, 0x9A	; 154
     952:	79 e9       	ldi	r23, 0x99	; 153
     954:	89 e7       	ldi	r24, 0x79	; 121
     956:	91 e4       	ldi	r25, 0x41	; 65
     958:	0e 94 33 0c 	call	0x1866	; 0x1866 <__subsf3>

    // // The following formula assumes the tank is a perfect cylinder: V = π * r^2 * h
    float volume = (PI * ((float)TANK_RADIUS_IN_CM * (float)TANK_RADIUS_IN_CM) * water_height) / 1000.0; // convert cm^3 to liters
     95c:	20 ed       	ldi	r18, 0xD0	; 208
     95e:	3f e0       	ldi	r19, 0x0F	; 15
     960:	49 e4       	ldi	r20, 0x49	; 73
     962:	53 e4       	ldi	r21, 0x43	; 67
     964:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <__mulsf3>
     968:	20 e0       	ldi	r18, 0x00	; 0
     96a:	30 e0       	ldi	r19, 0x00	; 0
     96c:	4a e7       	ldi	r20, 0x7A	; 122
     96e:	54 e4       	ldi	r21, 0x44	; 68
     970:	0e 94 a5 0c 	call	0x194a	; 0x194a <__divsf3>
     974:	6b 01       	movw	r12, r22
     976:	7c 01       	movw	r14, r24

    if (volume < 0.0)
     978:	20 e0       	ldi	r18, 0x00	; 0
     97a:	30 e0       	ldi	r19, 0x00	; 0
     97c:	a9 01       	movw	r20, r18
     97e:	0e 94 a0 0c 	call	0x1940	; 0x1940 <__cmpsf2>
     982:	88 23       	and	r24, r24
     984:	1c f4       	brge	.+6      	; 0x98c <get_tank_capacity_at_height+0x54>
    {
        volume = 0.0;
     986:	c1 2c       	mov	r12, r1
     988:	d1 2c       	mov	r13, r1
     98a:	76 01       	movw	r14, r12
    }

    return volume;
}
     98c:	c7 01       	movw	r24, r14
     98e:	b6 01       	movw	r22, r12
     990:	ff 90       	pop	r15
     992:	ef 90       	pop	r14
     994:	df 90       	pop	r13
     996:	cf 90       	pop	r12
     998:	08 95       	ret

0000099a <get_tank_capacity>:
    get the tank capacity based on sonar distance measurement
    params: void
    returns: float - the tank capacity in liters
*/
float get_tank_capacity()
{
     99a:	cf 92       	push	r12
     99c:	df 92       	push	r13
     99e:	ef 92       	push	r14
     9a0:	ff 92       	push	r15

    uint16_t water_depth = HCSR04_get_distance();
     9a2:	0e 94 ad 03 	call	0x75a	; 0x75a <HCSR04_get_distance>
    water_depth *= 1.5; // convert to float
     9a6:	bc 01       	movw	r22, r24
     9a8:	80 e0       	ldi	r24, 0x00	; 0
     9aa:	90 e0       	ldi	r25, 0x00	; 0
     9ac:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <__floatunsisf>
     9b0:	20 e0       	ldi	r18, 0x00	; 0
     9b2:	30 e0       	ldi	r19, 0x00	; 0
     9b4:	40 ec       	ldi	r20, 0xC0	; 192
     9b6:	5f e3       	ldi	r21, 0x3F	; 63
     9b8:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <__mulsf3>
     9bc:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <__fixunssfsi>

    float water_height = TANK_HEIGHT_IN_CM - water_depth;
     9c0:	80 e0       	ldi	r24, 0x00	; 0
     9c2:	90 e0       	ldi	r25, 0x00	; 0
     9c4:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <__floatunsisf>
     9c8:	9b 01       	movw	r18, r22
     9ca:	ac 01       	movw	r20, r24
     9cc:	6a e9       	ldi	r22, 0x9A	; 154
     9ce:	79 e9       	ldi	r23, 0x99	; 153
     9d0:	89 e7       	ldi	r24, 0x79	; 121
     9d2:	91 e4       	ldi	r25, 0x41	; 65
     9d4:	0e 94 33 0c 	call	0x1866	; 0x1866 <__subsf3>

    // // The following formula assumes the tank is a perfect cylinder: V = π * r^2 * h
    float volume = (PI * ((float)TANK_RADIUS_IN_CM * (float)TANK_RADIUS_IN_CM) * water_height) / 1000.0; // convert cm^3 to liters
     9d8:	20 ed       	ldi	r18, 0xD0	; 208
     9da:	3f e0       	ldi	r19, 0x0F	; 15
     9dc:	49 e4       	ldi	r20, 0x49	; 73
     9de:	53 e4       	ldi	r21, 0x43	; 67
     9e0:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <__mulsf3>
     9e4:	20 e0       	ldi	r18, 0x00	; 0
     9e6:	30 e0       	ldi	r19, 0x00	; 0
     9e8:	4a e7       	ldi	r20, 0x7A	; 122
     9ea:	54 e4       	ldi	r21, 0x44	; 68
     9ec:	0e 94 a5 0c 	call	0x194a	; 0x194a <__divsf3>
     9f0:	6b 01       	movw	r12, r22
     9f2:	7c 01       	movw	r14, r24
    if (volume < 0.0) {
     9f4:	20 e0       	ldi	r18, 0x00	; 0
     9f6:	30 e0       	ldi	r19, 0x00	; 0
     9f8:	a9 01       	movw	r20, r18
     9fa:	0e 94 a0 0c 	call	0x1940	; 0x1940 <__cmpsf2>
     9fe:	88 23       	and	r24, r24
     a00:	1c f4       	brge	.+6      	; 0xa08 <get_tank_capacity+0x6e>
        volume = 0.0;
     a02:	c1 2c       	mov	r12, r1
     a04:	d1 2c       	mov	r13, r1
     a06:	76 01       	movw	r14, r12
    }
    return volume;
}
     a08:	c7 01       	movw	r24, r14
     a0a:	b6 01       	movw	r22, r12
     a0c:	ff 90       	pop	r15
     a0e:	ef 90       	pop	r14
     a10:	df 90       	pop	r13
     a12:	cf 90       	pop	r12
     a14:	08 95       	ret

00000a16 <get_refill_rate>:
    get the refill rate based on tank capacity change over time
    params: void
    returns: float - the refill rate in liters per minute
*/
float get_refill_rate()
{
     a16:	8f 92       	push	r8
     a18:	9f 92       	push	r9
     a1a:	af 92       	push	r10
     a1c:	bf 92       	push	r11
     a1e:	cf 92       	push	r12
     a20:	df 92       	push	r13
     a22:	ef 92       	push	r14
     a24:	ff 92       	push	r15
     a26:	cf 93       	push	r28
     a28:	df 93       	push	r29
     a2a:	00 d0       	rcall	.+0      	; 0xa2c <get_refill_rate+0x16>
     a2c:	00 d0       	rcall	.+0      	; 0xa2e <get_refill_rate+0x18>
     a2e:	cd b7       	in	r28, 0x3d	; 61
     a30:	de b7       	in	r29, 0x3e	; 62
    int height_1;
    peekRear(&height_per_second, &height_1);
     a32:	be 01       	movw	r22, r28
     a34:	6f 5f       	subi	r22, 0xFF	; 255
     a36:	7f 4f       	sbci	r23, 0xFF	; 255
     a38:	8e e2       	ldi	r24, 0x2E	; 46
     a3a:	94 e0       	ldi	r25, 0x04	; 4
     a3c:	0e 94 df 01 	call	0x3be	; 0x3be <peekRear>

    int height_2;
    peekFront(&height_per_second, &height_2);
     a40:	be 01       	movw	r22, r28
     a42:	6d 5f       	subi	r22, 0xFD	; 253
     a44:	7f 4f       	sbci	r23, 0xFF	; 255
     a46:	8e e2       	ldi	r24, 0x2E	; 46
     a48:	94 e0       	ldi	r25, 0x04	; 4
     a4a:	0e 94 c2 01 	call	0x384	; 0x384 <peekFront>

    float capacity_at_1 = get_tank_capacity_at_height(height_1 * 1.5);
     a4e:	69 81       	ldd	r22, Y+1	; 0x01
     a50:	7a 81       	ldd	r23, Y+2	; 0x02
     a52:	07 2e       	mov	r0, r23
     a54:	00 0c       	add	r0, r0
     a56:	88 0b       	sbc	r24, r24
     a58:	99 0b       	sbc	r25, r25
     a5a:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <__floatsisf>
     a5e:	20 e0       	ldi	r18, 0x00	; 0
     a60:	30 e0       	ldi	r19, 0x00	; 0
     a62:	40 ec       	ldi	r20, 0xC0	; 192
     a64:	5f e3       	ldi	r21, 0x3F	; 63
     a66:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <__mulsf3>
     a6a:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <__fixsfsi>
     a6e:	cb 01       	movw	r24, r22
     a70:	0e 94 9c 04 	call	0x938	; 0x938 <get_tank_capacity_at_height>
     a74:	4b 01       	movw	r8, r22
     a76:	5c 01       	movw	r10, r24
    float capacity_at_2 = get_tank_capacity_at_height(height_2 * 1.5);
     a78:	6b 81       	ldd	r22, Y+3	; 0x03
     a7a:	7c 81       	ldd	r23, Y+4	; 0x04
     a7c:	07 2e       	mov	r0, r23
     a7e:	00 0c       	add	r0, r0
     a80:	88 0b       	sbc	r24, r24
     a82:	99 0b       	sbc	r25, r25
     a84:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <__floatsisf>
     a88:	20 e0       	ldi	r18, 0x00	; 0
     a8a:	30 e0       	ldi	r19, 0x00	; 0
     a8c:	40 ec       	ldi	r20, 0xC0	; 192
     a8e:	5f e3       	ldi	r21, 0x3F	; 63
     a90:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <__mulsf3>
     a94:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <__fixsfsi>
     a98:	cb 01       	movw	r24, r22
     a9a:	0e 94 9c 04 	call	0x938	; 0x938 <get_tank_capacity_at_height>
     a9e:	6b 01       	movw	r12, r22
     aa0:	7c 01       	movw	r14, r24

    if (capacity_at_1 > capacity_at_2)
     aa2:	9b 01       	movw	r18, r22
     aa4:	ac 01       	movw	r20, r24
     aa6:	c5 01       	movw	r24, r10
     aa8:	b4 01       	movw	r22, r8
     aaa:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <__gesf2>
     aae:	18 16       	cp	r1, r24
     ab0:	9c f0       	brlt	.+38     	; 0xad8 <get_refill_rate+0xc2>
    {
        return 0.0; // no leak detected
    }

    float leak_rate_per_second = (capacity_at_2 - capacity_at_1) / 2.0;
     ab2:	a5 01       	movw	r20, r10
     ab4:	94 01       	movw	r18, r8
     ab6:	c7 01       	movw	r24, r14
     ab8:	b6 01       	movw	r22, r12
     aba:	0e 94 33 0c 	call	0x1866	; 0x1866 <__subsf3>
     abe:	20 e0       	ldi	r18, 0x00	; 0
     ac0:	30 e0       	ldi	r19, 0x00	; 0
     ac2:	40 e0       	ldi	r20, 0x00	; 0
     ac4:	5f e3       	ldi	r21, 0x3F	; 63
     ac6:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <__mulsf3>

    return leak_rate_per_second * 60.0; // convert to liters per minute
     aca:	20 e0       	ldi	r18, 0x00	; 0
     acc:	30 e0       	ldi	r19, 0x00	; 0
     ace:	40 e7       	ldi	r20, 0x70	; 112
     ad0:	52 e4       	ldi	r21, 0x42	; 66
     ad2:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <__mulsf3>
     ad6:	03 c0       	rjmp	.+6      	; 0xade <get_refill_rate+0xc8>
    float capacity_at_1 = get_tank_capacity_at_height(height_1 * 1.5);
    float capacity_at_2 = get_tank_capacity_at_height(height_2 * 1.5);

    if (capacity_at_1 > capacity_at_2)
    {
        return 0.0; // no leak detected
     ad8:	60 e0       	ldi	r22, 0x00	; 0
     ada:	70 e0       	ldi	r23, 0x00	; 0
     adc:	cb 01       	movw	r24, r22
    }

    float leak_rate_per_second = (capacity_at_2 - capacity_at_1) / 2.0;

    return leak_rate_per_second * 60.0; // convert to liters per minute
}
     ade:	0f 90       	pop	r0
     ae0:	0f 90       	pop	r0
     ae2:	0f 90       	pop	r0
     ae4:	0f 90       	pop	r0
     ae6:	df 91       	pop	r29
     ae8:	cf 91       	pop	r28
     aea:	ff 90       	pop	r15
     aec:	ef 90       	pop	r14
     aee:	df 90       	pop	r13
     af0:	cf 90       	pop	r12
     af2:	bf 90       	pop	r11
     af4:	af 90       	pop	r10
     af6:	9f 90       	pop	r9
     af8:	8f 90       	pop	r8
     afa:	08 95       	ret

00000afc <get_leak_rate>:
    get the leak rate based on tank capacity change over time
    params: void
    returns: float - the leak rate in liters per minute
*/
float get_leak_rate()
{
     afc:	8f 92       	push	r8
     afe:	9f 92       	push	r9
     b00:	af 92       	push	r10
     b02:	bf 92       	push	r11
     b04:	cf 92       	push	r12
     b06:	df 92       	push	r13
     b08:	ef 92       	push	r14
     b0a:	ff 92       	push	r15
     b0c:	cf 93       	push	r28
     b0e:	df 93       	push	r29
     b10:	00 d0       	rcall	.+0      	; 0xb12 <get_leak_rate+0x16>
     b12:	00 d0       	rcall	.+0      	; 0xb14 <get_leak_rate+0x18>
     b14:	cd b7       	in	r28, 0x3d	; 61
     b16:	de b7       	in	r29, 0x3e	; 62
    int height_1;
    peekRear(&height_per_second, &height_1);
     b18:	be 01       	movw	r22, r28
     b1a:	6f 5f       	subi	r22, 0xFF	; 255
     b1c:	7f 4f       	sbci	r23, 0xFF	; 255
     b1e:	8e e2       	ldi	r24, 0x2E	; 46
     b20:	94 e0       	ldi	r25, 0x04	; 4
     b22:	0e 94 df 01 	call	0x3be	; 0x3be <peekRear>

    int height_2;
    peekFront(&height_per_second, &height_2);
     b26:	be 01       	movw	r22, r28
     b28:	6d 5f       	subi	r22, 0xFD	; 253
     b2a:	7f 4f       	sbci	r23, 0xFF	; 255
     b2c:	8e e2       	ldi	r24, 0x2E	; 46
     b2e:	94 e0       	ldi	r25, 0x04	; 4
     b30:	0e 94 c2 01 	call	0x384	; 0x384 <peekFront>

    float capacity_at_1 = get_tank_capacity_at_height(height_1 * 1.5);
     b34:	69 81       	ldd	r22, Y+1	; 0x01
     b36:	7a 81       	ldd	r23, Y+2	; 0x02
     b38:	07 2e       	mov	r0, r23
     b3a:	00 0c       	add	r0, r0
     b3c:	88 0b       	sbc	r24, r24
     b3e:	99 0b       	sbc	r25, r25
     b40:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <__floatsisf>
     b44:	20 e0       	ldi	r18, 0x00	; 0
     b46:	30 e0       	ldi	r19, 0x00	; 0
     b48:	40 ec       	ldi	r20, 0xC0	; 192
     b4a:	5f e3       	ldi	r21, 0x3F	; 63
     b4c:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <__mulsf3>
     b50:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <__fixsfsi>
     b54:	cb 01       	movw	r24, r22
     b56:	0e 94 9c 04 	call	0x938	; 0x938 <get_tank_capacity_at_height>
     b5a:	6b 01       	movw	r12, r22
     b5c:	7c 01       	movw	r14, r24
    float capacity_at_2 = get_tank_capacity_at_height(height_2 * 1.5);
     b5e:	6b 81       	ldd	r22, Y+3	; 0x03
     b60:	7c 81       	ldd	r23, Y+4	; 0x04
     b62:	07 2e       	mov	r0, r23
     b64:	00 0c       	add	r0, r0
     b66:	88 0b       	sbc	r24, r24
     b68:	99 0b       	sbc	r25, r25
     b6a:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <__floatsisf>
     b6e:	20 e0       	ldi	r18, 0x00	; 0
     b70:	30 e0       	ldi	r19, 0x00	; 0
     b72:	40 ec       	ldi	r20, 0xC0	; 192
     b74:	5f e3       	ldi	r21, 0x3F	; 63
     b76:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <__mulsf3>
     b7a:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <__fixsfsi>
     b7e:	cb 01       	movw	r24, r22
     b80:	0e 94 9c 04 	call	0x938	; 0x938 <get_tank_capacity_at_height>
     b84:	4b 01       	movw	r8, r22
     b86:	5c 01       	movw	r10, r24

    if (capacity_at_1 < capacity_at_2) {
     b88:	9b 01       	movw	r18, r22
     b8a:	ac 01       	movw	r20, r24
     b8c:	c7 01       	movw	r24, r14
     b8e:	b6 01       	movw	r22, r12
     b90:	0e 94 a0 0c 	call	0x1940	; 0x1940 <__cmpsf2>
     b94:	88 23       	and	r24, r24
     b96:	9c f0       	brlt	.+38     	; 0xbbe <get_leak_rate+0xc2>
        return 0.0; // no leak detected
    }
    float leak_rate_per_second = (capacity_at_1 - capacity_at_2) / 2.0;
     b98:	a5 01       	movw	r20, r10
     b9a:	94 01       	movw	r18, r8
     b9c:	c7 01       	movw	r24, r14
     b9e:	b6 01       	movw	r22, r12
     ba0:	0e 94 33 0c 	call	0x1866	; 0x1866 <__subsf3>
     ba4:	20 e0       	ldi	r18, 0x00	; 0
     ba6:	30 e0       	ldi	r19, 0x00	; 0
     ba8:	40 e0       	ldi	r20, 0x00	; 0
     baa:	5f e3       	ldi	r21, 0x3F	; 63
     bac:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <__mulsf3>

    return leak_rate_per_second * 60.0; // convert to liters per minute
     bb0:	20 e0       	ldi	r18, 0x00	; 0
     bb2:	30 e0       	ldi	r19, 0x00	; 0
     bb4:	40 e7       	ldi	r20, 0x70	; 112
     bb6:	52 e4       	ldi	r21, 0x42	; 66
     bb8:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <__mulsf3>
     bbc:	03 c0       	rjmp	.+6      	; 0xbc4 <get_leak_rate+0xc8>

    float capacity_at_1 = get_tank_capacity_at_height(height_1 * 1.5);
    float capacity_at_2 = get_tank_capacity_at_height(height_2 * 1.5);

    if (capacity_at_1 < capacity_at_2) {
        return 0.0; // no leak detected
     bbe:	60 e0       	ldi	r22, 0x00	; 0
     bc0:	70 e0       	ldi	r23, 0x00	; 0
     bc2:	cb 01       	movw	r24, r22
    }
    float leak_rate_per_second = (capacity_at_1 - capacity_at_2) / 2.0;

    return leak_rate_per_second * 60.0; // convert to liters per minute
}
     bc4:	0f 90       	pop	r0
     bc6:	0f 90       	pop	r0
     bc8:	0f 90       	pop	r0
     bca:	0f 90       	pop	r0
     bcc:	df 91       	pop	r29
     bce:	cf 91       	pop	r28
     bd0:	ff 90       	pop	r15
     bd2:	ef 90       	pop	r14
     bd4:	df 90       	pop	r13
     bd6:	cf 90       	pop	r12
     bd8:	bf 90       	pop	r11
     bda:	af 90       	pop	r10
     bdc:	9f 90       	pop	r9
     bde:	8f 90       	pop	r8
     be0:	08 95       	ret

00000be2 <get_soil_temperature>:

float get_soil_temperature()
{
    return DS18B20_read_temperature();
     be2:	0e 94 3c 03 	call	0x678	; 0x678 <DS18B20_read_temperature>
}
     be6:	08 95       	ret

00000be8 <ui_show_display>:
    update the display based on the current active menu and hover indices
    params: void
    returns: void
*/
void ui_show_display(void)
{
     be8:	ef 92       	push	r14
     bea:	ff 92       	push	r15
     bec:	0f 93       	push	r16
    if (active_menu_index == -1)
     bee:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <active_menu_index>
     bf2:	f0 91 21 01 	lds	r31, 0x0121	; 0x800121 <active_menu_index+0x1>
     bf6:	ef 3f       	cpi	r30, 0xFF	; 255
     bf8:	2f ef       	ldi	r18, 0xFF	; 255
     bfa:	f2 07       	cpc	r31, r18
     bfc:	79 f4       	brne	.+30     	; 0xc1c <ui_show_display+0x34>
    {
        display_set("MAIN MENU", MENU_BUFFER[menu_hover_index]);
     bfe:	e0 91 1b 04 	lds	r30, 0x041B	; 0x80041b <menu_hover_index>
     c02:	f0 91 1c 04 	lds	r31, 0x041C	; 0x80041c <menu_hover_index+0x1>
     c06:	ee 0f       	add	r30, r30
     c08:	ff 1f       	adc	r31, r31
     c0a:	e0 5c       	subi	r30, 0xC0	; 192
     c0c:	fe 4f       	sbci	r31, 0xFE	; 254
     c0e:	60 81       	ld	r22, Z
     c10:	71 81       	ldd	r23, Z+1	; 0x01
     c12:	8c ec       	ldi	r24, 0xCC	; 204
     c14:	91 e0       	ldi	r25, 0x01	; 1
     c16:	0e 94 cb 03 	call	0x796	; 0x796 <display_set>
     c1a:	60 c2       	rjmp	.+1216   	; 0x10dc <ui_show_display+0x4f4>
    }
    else
    {
        switch (active_menu_index)
     c1c:	e8 30       	cpi	r30, 0x08	; 8
     c1e:	f1 05       	cpc	r31, r1
     c20:	08 f0       	brcs	.+2      	; 0xc24 <ui_show_display+0x3c>
     c22:	56 c2       	rjmp	.+1196   	; 0x10d0 <ui_show_display+0x4e8>
     c24:	ec 5c       	subi	r30, 0xCC	; 204
     c26:	ff 4f       	sbci	r31, 0xFF	; 255
     c28:	0c 94 85 0e 	jmp	0x1d0a	; 0x1d0a <__tablejump2__>
        {
        case 0:
            display_set("TANK CAPACITY", "Loading...");
     c2c:	66 ed       	ldi	r22, 0xD6	; 214
     c2e:	71 e0       	ldi	r23, 0x01	; 1
     c30:	81 ee       	ldi	r24, 0xE1	; 225
     c32:	91 e0       	ldi	r25, 0x01	; 1
     c34:	0e 94 cb 03 	call	0x796	; 0x796 <display_set>
            format_float(buffer, sizeof(buffer), get_tank_capacity(), 1, "Ltrs");
     c38:	0e 94 cd 04 	call	0x99a	; 0x99a <get_tank_capacity>
     c3c:	9b 01       	movw	r18, r22
     c3e:	ac 01       	movw	r20, r24
     c40:	0f 2e       	mov	r0, r31
     c42:	ff ee       	ldi	r31, 0xEF	; 239
     c44:	ef 2e       	mov	r14, r31
     c46:	f1 e0       	ldi	r31, 0x01	; 1
     c48:	ff 2e       	mov	r15, r31
     c4a:	f0 2d       	mov	r31, r0
     c4c:	01 e0       	ldi	r16, 0x01	; 1
     c4e:	60 e1       	ldi	r22, 0x10	; 16
     c50:	70 e0       	ldi	r23, 0x00	; 0
     c52:	8e e1       	ldi	r24, 0x1E	; 30
     c54:	94 e0       	ldi	r25, 0x04	; 4
     c56:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <format_float>
            display_set("TANK CAPACITY", buffer);
     c5a:	6e e1       	ldi	r22, 0x1E	; 30
     c5c:	74 e0       	ldi	r23, 0x04	; 4
     c5e:	81 ee       	ldi	r24, 0xE1	; 225
     c60:	91 e0       	ldi	r25, 0x01	; 1
     c62:	0e 94 cb 03 	call	0x796	; 0x796 <display_set>
            break;
     c66:	3a c2       	rjmp	.+1140   	; 0x10dc <ui_show_display+0x4f4>
        case 1:
            display_set("REFILL RATE", "Loading...");
     c68:	66 ed       	ldi	r22, 0xD6	; 214
     c6a:	71 e0       	ldi	r23, 0x01	; 1
     c6c:	84 ef       	ldi	r24, 0xF4	; 244
     c6e:	91 e0       	ldi	r25, 0x01	; 1
     c70:	0e 94 cb 03 	call	0x796	; 0x796 <display_set>
            format_float(buffer, sizeof(buffer), get_refill_rate(), 1, "Ltrs per hour");
     c74:	0e 94 0b 05 	call	0xa16	; 0xa16 <get_refill_rate>
     c78:	9b 01       	movw	r18, r22
     c7a:	ac 01       	movw	r20, r24
     c7c:	0f 2e       	mov	r0, r31
     c7e:	f0 e0       	ldi	r31, 0x00	; 0
     c80:	ef 2e       	mov	r14, r31
     c82:	f2 e0       	ldi	r31, 0x02	; 2
     c84:	ff 2e       	mov	r15, r31
     c86:	f0 2d       	mov	r31, r0
     c88:	01 e0       	ldi	r16, 0x01	; 1
     c8a:	60 e1       	ldi	r22, 0x10	; 16
     c8c:	70 e0       	ldi	r23, 0x00	; 0
     c8e:	8e e1       	ldi	r24, 0x1E	; 30
     c90:	94 e0       	ldi	r25, 0x04	; 4
     c92:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <format_float>
            display_set("REFILL RATE", buffer);
     c96:	6e e1       	ldi	r22, 0x1E	; 30
     c98:	74 e0       	ldi	r23, 0x04	; 4
     c9a:	84 ef       	ldi	r24, 0xF4	; 244
     c9c:	91 e0       	ldi	r25, 0x01	; 1
     c9e:	0e 94 cb 03 	call	0x796	; 0x796 <display_set>
            break;
     ca2:	1c c2       	rjmp	.+1080   	; 0x10dc <ui_show_display+0x4f4>
        case 2:
            display_set("LEAKAGE RATE", "Loading...");
     ca4:	66 ed       	ldi	r22, 0xD6	; 214
     ca6:	71 e0       	ldi	r23, 0x01	; 1
     ca8:	8e e0       	ldi	r24, 0x0E	; 14
     caa:	92 e0       	ldi	r25, 0x02	; 2
     cac:	0e 94 cb 03 	call	0x796	; 0x796 <display_set>
            format_float(buffer, sizeof(buffer), get_leak_rate(), 1, "Ltrs per min");
     cb0:	0e 94 7e 05 	call	0xafc	; 0xafc <get_leak_rate>
     cb4:	9b 01       	movw	r18, r22
     cb6:	ac 01       	movw	r20, r24
     cb8:	0f 2e       	mov	r0, r31
     cba:	fb e1       	ldi	r31, 0x1B	; 27
     cbc:	ef 2e       	mov	r14, r31
     cbe:	f2 e0       	ldi	r31, 0x02	; 2
     cc0:	ff 2e       	mov	r15, r31
     cc2:	f0 2d       	mov	r31, r0
     cc4:	01 e0       	ldi	r16, 0x01	; 1
     cc6:	60 e1       	ldi	r22, 0x10	; 16
     cc8:	70 e0       	ldi	r23, 0x00	; 0
     cca:	8e e1       	ldi	r24, 0x1E	; 30
     ccc:	94 e0       	ldi	r25, 0x04	; 4
     cce:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <format_float>
            display_set("LEAKAGE RATE", buffer);
     cd2:	6e e1       	ldi	r22, 0x1E	; 30
     cd4:	74 e0       	ldi	r23, 0x04	; 4
     cd6:	8e e0       	ldi	r24, 0x0E	; 14
     cd8:	92 e0       	ldi	r25, 0x02	; 2
     cda:	0e 94 cb 03 	call	0x796	; 0x796 <display_set>
            break;
     cde:	fe c1       	rjmp	.+1020   	; 0x10dc <ui_show_display+0x4f4>
        case 3:
            display_set("SOIL TEMPERATURE", "Loading...");
     ce0:	66 ed       	ldi	r22, 0xD6	; 214
     ce2:	71 e0       	ldi	r23, 0x01	; 1
     ce4:	88 e2       	ldi	r24, 0x28	; 40
     ce6:	92 e0       	ldi	r25, 0x02	; 2
     ce8:	0e 94 cb 03 	call	0x796	; 0x796 <display_set>
            format_float(buffer, sizeof(buffer), get_soil_temperature(), 1, "degrees");
     cec:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <get_soil_temperature>
     cf0:	9b 01       	movw	r18, r22
     cf2:	ac 01       	movw	r20, r24
     cf4:	0f 2e       	mov	r0, r31
     cf6:	f9 e3       	ldi	r31, 0x39	; 57
     cf8:	ef 2e       	mov	r14, r31
     cfa:	f2 e0       	ldi	r31, 0x02	; 2
     cfc:	ff 2e       	mov	r15, r31
     cfe:	f0 2d       	mov	r31, r0
     d00:	01 e0       	ldi	r16, 0x01	; 1
     d02:	60 e1       	ldi	r22, 0x10	; 16
     d04:	70 e0       	ldi	r23, 0x00	; 0
     d06:	8e e1       	ldi	r24, 0x1E	; 30
     d08:	94 e0       	ldi	r25, 0x04	; 4
     d0a:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <format_float>
            display_set("SOIL TEMPERATURE", buffer);
     d0e:	6e e1       	ldi	r22, 0x1E	; 30
     d10:	74 e0       	ldi	r23, 0x04	; 4
     d12:	88 e2       	ldi	r24, 0x28	; 40
     d14:	92 e0       	ldi	r25, 0x02	; 2
     d16:	0e 94 cb 03 	call	0x796	; 0x796 <display_set>
            break;
     d1a:	e0 c1       	rjmp	.+960    	; 0x10dc <ui_show_display+0x4f4>
        case 4:
            if (active_live_view_index == -1)
     d1c:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <active_live_view_index>
     d20:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <active_live_view_index+0x1>
     d24:	01 96       	adiw	r24, 0x01	; 1
     d26:	79 f4       	brne	.+30     	; 0xd46 <ui_show_display+0x15e>
            {
                display_set("LIVE VIEW", LIVE_VIEW_BUFFER[live_view_hover_index]);
     d28:	e0 91 13 04 	lds	r30, 0x0413	; 0x800413 <live_view_hover_index>
     d2c:	f0 91 14 04 	lds	r31, 0x0414	; 0x800414 <live_view_hover_index+0x1>
     d30:	ee 0f       	add	r30, r30
     d32:	ff 1f       	adc	r31, r31
     d34:	e8 5c       	subi	r30, 0xC8	; 200
     d36:	fe 4f       	sbci	r31, 0xFE	; 254
     d38:	60 81       	ld	r22, Z
     d3a:	71 81       	ldd	r23, Z+1	; 0x01
     d3c:	81 e4       	ldi	r24, 0x41	; 65
     d3e:	92 e0       	ldi	r25, 0x02	; 2
     d40:	0e 94 cb 03 	call	0x796	; 0x796 <display_set>
     d44:	cb c1       	rjmp	.+918    	; 0x10dc <ui_show_display+0x4f4>
            }
            else
            {
                switch (live_view_hover_index)
     d46:	80 91 13 04 	lds	r24, 0x0413	; 0x800413 <live_view_hover_index>
     d4a:	90 91 14 04 	lds	r25, 0x0414	; 0x800414 <live_view_hover_index+0x1>
     d4e:	81 30       	cpi	r24, 0x01	; 1
     d50:	91 05       	cpc	r25, r1
     d52:	39 f1       	breq	.+78     	; 0xda2 <ui_show_display+0x1ba>
     d54:	1c f4       	brge	.+6      	; 0xd5c <ui_show_display+0x174>
     d56:	89 2b       	or	r24, r25
     d58:	41 f0       	breq	.+16     	; 0xd6a <ui_show_display+0x182>
     d5a:	77 c0       	rjmp	.+238    	; 0xe4a <ui_show_display+0x262>
     d5c:	82 30       	cpi	r24, 0x02	; 2
     d5e:	91 05       	cpc	r25, r1
     d60:	e1 f1       	breq	.+120    	; 0xdda <ui_show_display+0x1f2>
     d62:	03 97       	sbiw	r24, 0x03	; 3
     d64:	09 f4       	brne	.+2      	; 0xd68 <ui_show_display+0x180>
     d66:	55 c0       	rjmp	.+170    	; 0xe12 <ui_show_display+0x22a>
     d68:	70 c0       	rjmp	.+224    	; 0xe4a <ui_show_display+0x262>
                {
                case 0:
                    format_float(buffer, sizeof(buffer), current_tank_capacity, 1, "Ltrs");
     d6a:	20 91 0f 04 	lds	r18, 0x040F	; 0x80040f <current_tank_capacity>
     d6e:	30 91 10 04 	lds	r19, 0x0410	; 0x800410 <current_tank_capacity+0x1>
     d72:	40 91 11 04 	lds	r20, 0x0411	; 0x800411 <current_tank_capacity+0x2>
     d76:	50 91 12 04 	lds	r21, 0x0412	; 0x800412 <current_tank_capacity+0x3>
     d7a:	0f 2e       	mov	r0, r31
     d7c:	ff ee       	ldi	r31, 0xEF	; 239
     d7e:	ef 2e       	mov	r14, r31
     d80:	f1 e0       	ldi	r31, 0x01	; 1
     d82:	ff 2e       	mov	r15, r31
     d84:	f0 2d       	mov	r31, r0
     d86:	01 e0       	ldi	r16, 0x01	; 1
     d88:	60 e1       	ldi	r22, 0x10	; 16
     d8a:	70 e0       	ldi	r23, 0x00	; 0
     d8c:	8e e1       	ldi	r24, 0x1E	; 30
     d8e:	94 e0       	ldi	r25, 0x04	; 4
     d90:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <format_float>
                    display_set("CAPACITY", buffer);
     d94:	6e e1       	ldi	r22, 0x1E	; 30
     d96:	74 e0       	ldi	r23, 0x04	; 4
     d98:	86 ee       	ldi	r24, 0xE6	; 230
     d9a:	91 e0       	ldi	r25, 0x01	; 1
     d9c:	0e 94 cb 03 	call	0x796	; 0x796 <display_set>
                    break;
     da0:	9d c1       	rjmp	.+826    	; 0x10dc <ui_show_display+0x4f4>
                case 1:
                    format_float(buffer, sizeof(buffer), current_refill_rate, 1, "Ltrs per min");
     da2:	20 91 0b 04 	lds	r18, 0x040B	; 0x80040b <current_refill_rate>
     da6:	30 91 0c 04 	lds	r19, 0x040C	; 0x80040c <current_refill_rate+0x1>
     daa:	40 91 0d 04 	lds	r20, 0x040D	; 0x80040d <current_refill_rate+0x2>
     dae:	50 91 0e 04 	lds	r21, 0x040E	; 0x80040e <current_refill_rate+0x3>
     db2:	0f 2e       	mov	r0, r31
     db4:	fb e1       	ldi	r31, 0x1B	; 27
     db6:	ef 2e       	mov	r14, r31
     db8:	f2 e0       	ldi	r31, 0x02	; 2
     dba:	ff 2e       	mov	r15, r31
     dbc:	f0 2d       	mov	r31, r0
     dbe:	01 e0       	ldi	r16, 0x01	; 1
     dc0:	60 e1       	ldi	r22, 0x10	; 16
     dc2:	70 e0       	ldi	r23, 0x00	; 0
     dc4:	8e e1       	ldi	r24, 0x1E	; 30
     dc6:	94 e0       	ldi	r25, 0x04	; 4
     dc8:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <format_float>
                    display_set("REFILL RATE", buffer);
     dcc:	6e e1       	ldi	r22, 0x1E	; 30
     dce:	74 e0       	ldi	r23, 0x04	; 4
     dd0:	84 ef       	ldi	r24, 0xF4	; 244
     dd2:	91 e0       	ldi	r25, 0x01	; 1
     dd4:	0e 94 cb 03 	call	0x796	; 0x796 <display_set>
                    break;
     dd8:	81 c1       	rjmp	.+770    	; 0x10dc <ui_show_display+0x4f4>
                case 2:
                    format_float(buffer, sizeof(buffer), current_leak_rate, 1, "Ltrs per min");
     dda:	20 91 07 04 	lds	r18, 0x0407	; 0x800407 <current_leak_rate>
     dde:	30 91 08 04 	lds	r19, 0x0408	; 0x800408 <current_leak_rate+0x1>
     de2:	40 91 09 04 	lds	r20, 0x0409	; 0x800409 <current_leak_rate+0x2>
     de6:	50 91 0a 04 	lds	r21, 0x040A	; 0x80040a <current_leak_rate+0x3>
     dea:	0f 2e       	mov	r0, r31
     dec:	fb e1       	ldi	r31, 0x1B	; 27
     dee:	ef 2e       	mov	r14, r31
     df0:	f2 e0       	ldi	r31, 0x02	; 2
     df2:	ff 2e       	mov	r15, r31
     df4:	f0 2d       	mov	r31, r0
     df6:	01 e0       	ldi	r16, 0x01	; 1
     df8:	60 e1       	ldi	r22, 0x10	; 16
     dfa:	70 e0       	ldi	r23, 0x00	; 0
     dfc:	8e e1       	ldi	r24, 0x1E	; 30
     dfe:	94 e0       	ldi	r25, 0x04	; 4
     e00:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <format_float>
                    display_set("LEAK RATE", buffer);
     e04:	6e e1       	ldi	r22, 0x1E	; 30
     e06:	74 e0       	ldi	r23, 0x04	; 4
     e08:	8b e4       	ldi	r24, 0x4B	; 75
     e0a:	92 e0       	ldi	r25, 0x02	; 2
     e0c:	0e 94 cb 03 	call	0x796	; 0x796 <display_set>
                    break;
     e10:	65 c1       	rjmp	.+714    	; 0x10dc <ui_show_display+0x4f4>
                case 3:
                    format_float(buffer, sizeof(buffer), current_soil_temperature, 1, "degrees");
     e12:	20 91 03 04 	lds	r18, 0x0403	; 0x800403 <current_soil_temperature>
     e16:	30 91 04 04 	lds	r19, 0x0404	; 0x800404 <current_soil_temperature+0x1>
     e1a:	40 91 05 04 	lds	r20, 0x0405	; 0x800405 <current_soil_temperature+0x2>
     e1e:	50 91 06 04 	lds	r21, 0x0406	; 0x800406 <current_soil_temperature+0x3>
     e22:	0f 2e       	mov	r0, r31
     e24:	f9 e3       	ldi	r31, 0x39	; 57
     e26:	ef 2e       	mov	r14, r31
     e28:	f2 e0       	ldi	r31, 0x02	; 2
     e2a:	ff 2e       	mov	r15, r31
     e2c:	f0 2d       	mov	r31, r0
     e2e:	01 e0       	ldi	r16, 0x01	; 1
     e30:	60 e1       	ldi	r22, 0x10	; 16
     e32:	70 e0       	ldi	r23, 0x00	; 0
     e34:	8e e1       	ldi	r24, 0x1E	; 30
     e36:	94 e0       	ldi	r25, 0x04	; 4
     e38:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <format_float>
                    display_set("SOIL TEMP", buffer);
     e3c:	6e e1       	ldi	r22, 0x1E	; 30
     e3e:	74 e0       	ldi	r23, 0x04	; 4
     e40:	85 e5       	ldi	r24, 0x55	; 85
     e42:	92 e0       	ldi	r25, 0x02	; 2
     e44:	0e 94 cb 03 	call	0x796	; 0x796 <display_set>
                    break;
     e48:	49 c1       	rjmp	.+658    	; 0x10dc <ui_show_display+0x4f4>
                default:
                    display_set("ERROR", "Invalid live view");
     e4a:	6f e5       	ldi	r22, 0x5F	; 95
     e4c:	72 e0       	ldi	r23, 0x02	; 2
     e4e:	81 e7       	ldi	r24, 0x71	; 113
     e50:	92 e0       	ldi	r25, 0x02	; 2
     e52:	0e 94 cb 03 	call	0x796	; 0x796 <display_set>
                    break;
     e56:	42 c1       	rjmp	.+644    	; 0x10dc <ui_show_display+0x4f4>
                }
            }
            break;
        case 5:
            if (active_trigger_index == -1)
     e58:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <active_trigger_index>
     e5c:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <active_trigger_index+0x1>
     e60:	8f 3f       	cpi	r24, 0xFF	; 255
     e62:	2f ef       	ldi	r18, 0xFF	; 255
     e64:	92 07       	cpc	r25, r18
     e66:	79 f4       	brne	.+30     	; 0xe86 <ui_show_display+0x29e>
            {
                display_set("TRIGGERS", TRIGGERS_BUFFER[trigger_hover_index]);
     e68:	e0 91 19 04 	lds	r30, 0x0419	; 0x800419 <trigger_hover_index>
     e6c:	f0 91 1a 04 	lds	r31, 0x041A	; 0x80041a <trigger_hover_index+0x1>
     e70:	ee 0f       	add	r30, r30
     e72:	ff 1f       	adc	r31, r31
     e74:	ec 5c       	subi	r30, 0xCC	; 204
     e76:	fe 4f       	sbci	r31, 0xFE	; 254
     e78:	60 81       	ld	r22, Z
     e7a:	71 81       	ldd	r23, Z+1	; 0x01
     e7c:	83 ee       	ldi	r24, 0xE3	; 227
     e7e:	92 e0       	ldi	r25, 0x02	; 2
     e80:	0e 94 cb 03 	call	0x796	; 0x796 <display_set>
     e84:	2b c1       	rjmp	.+598    	; 0x10dc <ui_show_display+0x4f4>
            }
            else
            {
                switch (active_trigger_index)
     e86:	00 97       	sbiw	r24, 0x00	; 0
     e88:	19 f0       	breq	.+6      	; 0xe90 <ui_show_display+0x2a8>
     e8a:	01 97       	sbiw	r24, 0x01	; 1
     e8c:	e9 f0       	breq	.+58     	; 0xec8 <ui_show_display+0x2e0>
     e8e:	38 c0       	rjmp	.+112    	; 0xf00 <ui_show_display+0x318>
                {
                case 0:
                    format_float(buffer, sizeof(buffer), MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER, 1, "Ltrs");
     e90:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER>
     e94:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x1>
     e98:	40 91 18 01 	lds	r20, 0x0118	; 0x800118 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x2>
     e9c:	50 91 19 01 	lds	r21, 0x0119	; 0x800119 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x3>
     ea0:	0f 2e       	mov	r0, r31
     ea2:	ff ee       	ldi	r31, 0xEF	; 239
     ea4:	ef 2e       	mov	r14, r31
     ea6:	f1 e0       	ldi	r31, 0x01	; 1
     ea8:	ff 2e       	mov	r15, r31
     eaa:	f0 2d       	mov	r31, r0
     eac:	01 e0       	ldi	r16, 0x01	; 1
     eae:	60 e1       	ldi	r22, 0x10	; 16
     eb0:	70 e0       	ldi	r23, 0x00	; 0
     eb2:	8e e1       	ldi	r24, 0x1E	; 30
     eb4:	94 e0       	ldi	r25, 0x04	; 4
     eb6:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <format_float>
                    display_set("MIN CAPACITY", buffer);
     eba:	6e e1       	ldi	r22, 0x1E	; 30
     ebc:	74 e0       	ldi	r23, 0x04	; 4
     ebe:	87 e7       	ldi	r24, 0x77	; 119
     ec0:	92 e0       	ldi	r25, 0x02	; 2
     ec2:	0e 94 cb 03 	call	0x796	; 0x796 <display_set>
                    break;
     ec6:	0a c1       	rjmp	.+532    	; 0x10dc <ui_show_display+0x4f4>
                case 1:
                    format_float(buffer, sizeof(buffer), MAXIMUM_TEMPERATURE_BEFORE_PUMPING, 2, "degrees");
     ec8:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING>
     ecc:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x1>
     ed0:	40 91 14 01 	lds	r20, 0x0114	; 0x800114 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x2>
     ed4:	50 91 15 01 	lds	r21, 0x0115	; 0x800115 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x3>
     ed8:	0f 2e       	mov	r0, r31
     eda:	f9 e3       	ldi	r31, 0x39	; 57
     edc:	ef 2e       	mov	r14, r31
     ede:	f2 e0       	ldi	r31, 0x02	; 2
     ee0:	ff 2e       	mov	r15, r31
     ee2:	f0 2d       	mov	r31, r0
     ee4:	02 e0       	ldi	r16, 0x02	; 2
     ee6:	60 e1       	ldi	r22, 0x10	; 16
     ee8:	70 e0       	ldi	r23, 0x00	; 0
     eea:	8e e1       	ldi	r24, 0x1E	; 30
     eec:	94 e0       	ldi	r25, 0x04	; 4
     eee:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <format_float>
                    display_set("MAX TEMP", buffer);
     ef2:	6e e1       	ldi	r22, 0x1E	; 30
     ef4:	74 e0       	ldi	r23, 0x04	; 4
     ef6:	84 e8       	ldi	r24, 0x84	; 132
     ef8:	92 e0       	ldi	r25, 0x02	; 2
     efa:	0e 94 cb 03 	call	0x796	; 0x796 <display_set>
                    break;
     efe:	ee c0       	rjmp	.+476    	; 0x10dc <ui_show_display+0x4f4>
                default:
                    display_set("ERROR", "Invalid trigger");
     f00:	6d e8       	ldi	r22, 0x8D	; 141
     f02:	72 e0       	ldi	r23, 0x02	; 2
     f04:	81 e7       	ldi	r24, 0x71	; 113
     f06:	92 e0       	ldi	r25, 0x02	; 2
     f08:	0e 94 cb 03 	call	0x796	; 0x796 <display_set>
                    break;
     f0c:	e7 c0       	rjmp	.+462    	; 0x10dc <ui_show_display+0x4f4>
                }
            }
            break;

        case 6:
            display_set("MESSAGES", MESSAGES_BUFFER[message_hover_index]);
     f0e:	e0 91 15 04 	lds	r30, 0x0415	; 0x800415 <message_hover_index>
     f12:	f0 91 16 04 	lds	r31, 0x0416	; 0x800416 <message_hover_index+0x1>
     f16:	ee 0f       	add	r30, r30
     f18:	ff 1f       	adc	r31, r31
     f1a:	ee 5d       	subi	r30, 0xDE	; 222
     f1c:	fe 4f       	sbci	r31, 0xFE	; 254
     f1e:	60 81       	ld	r22, Z
     f20:	71 81       	ldd	r23, Z+1	; 0x01
     f22:	8d e9       	ldi	r24, 0x9D	; 157
     f24:	92 e0       	ldi	r25, 0x02	; 2
     f26:	0e 94 cb 03 	call	0x796	; 0x796 <display_set>
            break;
     f2a:	d8 c0       	rjmp	.+432    	; 0x10dc <ui_show_display+0x4f4>
        case 7:
            if (active_config_index == -1)
     f2c:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <active_config_index>
     f30:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <active_config_index+0x1>
     f34:	8f 3f       	cpi	r24, 0xFF	; 255
     f36:	2f ef       	ldi	r18, 0xFF	; 255
     f38:	92 07       	cpc	r25, r18
     f3a:	79 f4       	brne	.+30     	; 0xf5a <ui_show_display+0x372>
            {
                display_set("CONFIG", CONFIG_BUFFER[config_hover_index]);
     f3c:	e0 91 17 04 	lds	r30, 0x0417	; 0x800417 <config_hover_index>
     f40:	f0 91 18 04 	lds	r31, 0x0418	; 0x800418 <config_hover_index+0x1>
     f44:	ee 0f       	add	r30, r30
     f46:	ff 1f       	adc	r31, r31
     f48:	e6 5d       	subi	r30, 0xD6	; 214
     f4a:	fe 4f       	sbci	r31, 0xFE	; 254
     f4c:	60 81       	ld	r22, Z
     f4e:	71 81       	ldd	r23, Z+1	; 0x01
     f50:	86 ea       	ldi	r24, 0xA6	; 166
     f52:	92 e0       	ldi	r25, 0x02	; 2
     f54:	0e 94 cb 03 	call	0x796	; 0x796 <display_set>
     f58:	c1 c0       	rjmp	.+386    	; 0x10dc <ui_show_display+0x4f4>
            }
            else
            {
                switch (active_config_index)
     f5a:	82 30       	cpi	r24, 0x02	; 2
     f5c:	91 05       	cpc	r25, r1
     f5e:	09 f4       	brne	.+2      	; 0xf62 <ui_show_display+0x37a>
     f60:	46 c0       	rjmp	.+140    	; 0xfee <ui_show_display+0x406>
     f62:	2c f4       	brge	.+10     	; 0xf6e <ui_show_display+0x386>
     f64:	00 97       	sbiw	r24, 0x00	; 0
     f66:	59 f0       	breq	.+22     	; 0xf7e <ui_show_display+0x396>
     f68:	01 97       	sbiw	r24, 0x01	; 1
     f6a:	29 f1       	breq	.+74     	; 0xfb6 <ui_show_display+0x3ce>
     f6c:	aa c0       	rjmp	.+340    	; 0x10c2 <ui_show_display+0x4da>
     f6e:	83 30       	cpi	r24, 0x03	; 3
     f70:	91 05       	cpc	r25, r1
     f72:	09 f4       	brne	.+2      	; 0xf76 <ui_show_display+0x38e>
     f74:	58 c0       	rjmp	.+176    	; 0x1026 <ui_show_display+0x43e>
     f76:	04 97       	sbiw	r24, 0x04	; 4
     f78:	09 f4       	brne	.+2      	; 0xf7c <ui_show_display+0x394>
     f7a:	7c c0       	rjmp	.+248    	; 0x1074 <ui_show_display+0x48c>
     f7c:	a2 c0       	rjmp	.+324    	; 0x10c2 <ui_show_display+0x4da>
                {
                case 0:
                    format_float(buffer, sizeof(buffer), STEP_SIZE_FOR_INCREMENTS, 1, "Units");
     f7e:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <STEP_SIZE_FOR_INCREMENTS>
     f82:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <STEP_SIZE_FOR_INCREMENTS+0x1>
     f86:	40 91 10 01 	lds	r20, 0x0110	; 0x800110 <STEP_SIZE_FOR_INCREMENTS+0x2>
     f8a:	50 91 11 01 	lds	r21, 0x0111	; 0x800111 <STEP_SIZE_FOR_INCREMENTS+0x3>
     f8e:	0f 2e       	mov	r0, r31
     f90:	fd ea       	ldi	r31, 0xAD	; 173
     f92:	ef 2e       	mov	r14, r31
     f94:	f2 e0       	ldi	r31, 0x02	; 2
     f96:	ff 2e       	mov	r15, r31
     f98:	f0 2d       	mov	r31, r0
     f9a:	01 e0       	ldi	r16, 0x01	; 1
     f9c:	60 e1       	ldi	r22, 0x10	; 16
     f9e:	70 e0       	ldi	r23, 0x00	; 0
     fa0:	8e e1       	ldi	r24, 0x1E	; 30
     fa2:	94 e0       	ldi	r25, 0x04	; 4
     fa4:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <format_float>
                    display_set("STEP SIZE", buffer);
     fa8:	6e e1       	ldi	r22, 0x1E	; 30
     faa:	74 e0       	ldi	r23, 0x04	; 4
     fac:	83 eb       	ldi	r24, 0xB3	; 179
     fae:	92 e0       	ldi	r25, 0x02	; 2
     fb0:	0e 94 cb 03 	call	0x796	; 0x796 <display_set>
                    break;
     fb4:	93 c0       	rjmp	.+294    	; 0x10dc <ui_show_display+0x4f4>
                case 1:
                    format_float(buffer, sizeof(buffer), PUMP_THRESHOLD, 1, "Ltrs");
     fb6:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <PUMP_THRESHOLD>
     fba:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <PUMP_THRESHOLD+0x1>
     fbe:	40 91 08 01 	lds	r20, 0x0108	; 0x800108 <PUMP_THRESHOLD+0x2>
     fc2:	50 91 09 01 	lds	r21, 0x0109	; 0x800109 <PUMP_THRESHOLD+0x3>
     fc6:	0f 2e       	mov	r0, r31
     fc8:	ff ee       	ldi	r31, 0xEF	; 239
     fca:	ef 2e       	mov	r14, r31
     fcc:	f1 e0       	ldi	r31, 0x01	; 1
     fce:	ff 2e       	mov	r15, r31
     fd0:	f0 2d       	mov	r31, r0
     fd2:	01 e0       	ldi	r16, 0x01	; 1
     fd4:	60 e1       	ldi	r22, 0x10	; 16
     fd6:	70 e0       	ldi	r23, 0x00	; 0
     fd8:	8e e1       	ldi	r24, 0x1E	; 30
     fda:	94 e0       	ldi	r25, 0x04	; 4
     fdc:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <format_float>
                    display_set("PUMP THRESHOLD", buffer);
     fe0:	6e e1       	ldi	r22, 0x1E	; 30
     fe2:	74 e0       	ldi	r23, 0x04	; 4
     fe4:	8d eb       	ldi	r24, 0xBD	; 189
     fe6:	92 e0       	ldi	r25, 0x02	; 2
     fe8:	0e 94 cb 03 	call	0x796	; 0x796 <display_set>
                    break;
     fec:	77 c0       	rjmp	.+238    	; 0x10dc <ui_show_display+0x4f4>
                case 2:
                    format_float(buffer, sizeof(buffer), SPRAY_THRESHOLD, 1, "degrees");
     fee:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <SPRAY_THRESHOLD>
     ff2:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <SPRAY_THRESHOLD+0x1>
     ff6:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <SPRAY_THRESHOLD+0x2>
     ffa:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <SPRAY_THRESHOLD+0x3>
     ffe:	0f 2e       	mov	r0, r31
    1000:	f9 e3       	ldi	r31, 0x39	; 57
    1002:	ef 2e       	mov	r14, r31
    1004:	f2 e0       	ldi	r31, 0x02	; 2
    1006:	ff 2e       	mov	r15, r31
    1008:	f0 2d       	mov	r31, r0
    100a:	01 e0       	ldi	r16, 0x01	; 1
    100c:	60 e1       	ldi	r22, 0x10	; 16
    100e:	70 e0       	ldi	r23, 0x00	; 0
    1010:	8e e1       	ldi	r24, 0x1E	; 30
    1012:	94 e0       	ldi	r25, 0x04	; 4
    1014:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <format_float>
                    display_set("SPRAY THRESHOLD", buffer);
    1018:	6e e1       	ldi	r22, 0x1E	; 30
    101a:	74 e0       	ldi	r23, 0x04	; 4
    101c:	8c ec       	ldi	r24, 0xCC	; 204
    101e:	92 e0       	ldi	r25, 0x02	; 2
    1020:	0e 94 cb 03 	call	0x796	; 0x796 <display_set>
                    break;
    1024:	5b c0       	rjmp	.+182    	; 0x10dc <ui_show_display+0x4f4>
                case 3:
                    snprintf(buffer, sizeof(buffer), "%s", ENABLE_TRIGGER_VALUE ? "Enabled" : "Disabled");
    1026:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <ENABLE_TRIGGER_VALUE>
    102a:	88 23       	and	r24, r24
    102c:	19 f0       	breq	.+6      	; 0x1034 <ui_show_display+0x44c>
    102e:	8b eb       	ldi	r24, 0xBB	; 187
    1030:	91 e0       	ldi	r25, 0x01	; 1
    1032:	02 c0       	rjmp	.+4      	; 0x1038 <ui_show_display+0x450>
    1034:	83 ec       	ldi	r24, 0xC3	; 195
    1036:	91 e0       	ldi	r25, 0x01	; 1
    1038:	9f 93       	push	r25
    103a:	8f 93       	push	r24
    103c:	83 e7       	ldi	r24, 0x73	; 115
    103e:	91 e0       	ldi	r25, 0x01	; 1
    1040:	9f 93       	push	r25
    1042:	8f 93       	push	r24
    1044:	1f 92       	push	r1
    1046:	80 e1       	ldi	r24, 0x10	; 16
    1048:	8f 93       	push	r24
    104a:	8e e1       	ldi	r24, 0x1E	; 30
    104c:	94 e0       	ldi	r25, 0x04	; 4
    104e:	9f 93       	push	r25
    1050:	8f 93       	push	r24
    1052:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <snprintf>
                    display_set("ENABLE TRIGGERS", buffer);
    1056:	6e e1       	ldi	r22, 0x1E	; 30
    1058:	74 e0       	ldi	r23, 0x04	; 4
    105a:	8c ed       	ldi	r24, 0xDC	; 220
    105c:	92 e0       	ldi	r25, 0x02	; 2
    105e:	0e 94 cb 03 	call	0x796	; 0x796 <display_set>
                    break;
    1062:	8d b7       	in	r24, 0x3d	; 61
    1064:	9e b7       	in	r25, 0x3e	; 62
    1066:	08 96       	adiw	r24, 0x08	; 8
    1068:	0f b6       	in	r0, 0x3f	; 63
    106a:	f8 94       	cli
    106c:	9e bf       	out	0x3e, r25	; 62
    106e:	0f be       	out	0x3f, r0	; 63
    1070:	8d bf       	out	0x3d, r24	; 61
    1072:	34 c0       	rjmp	.+104    	; 0x10dc <ui_show_display+0x4f4>
                case 4:
                    snprintf(buffer, sizeof(buffer), "%s", ENABLE_ALERT_VALUE ? "Enabled" : "Disabled");
    1074:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1078:	88 23       	and	r24, r24
    107a:	19 f0       	breq	.+6      	; 0x1082 <ui_show_display+0x49a>
    107c:	8b eb       	ldi	r24, 0xBB	; 187
    107e:	91 e0       	ldi	r25, 0x01	; 1
    1080:	02 c0       	rjmp	.+4      	; 0x1086 <ui_show_display+0x49e>
    1082:	83 ec       	ldi	r24, 0xC3	; 195
    1084:	91 e0       	ldi	r25, 0x01	; 1
    1086:	9f 93       	push	r25
    1088:	8f 93       	push	r24
    108a:	83 e7       	ldi	r24, 0x73	; 115
    108c:	91 e0       	ldi	r25, 0x01	; 1
    108e:	9f 93       	push	r25
    1090:	8f 93       	push	r24
    1092:	1f 92       	push	r1
    1094:	80 e1       	ldi	r24, 0x10	; 16
    1096:	8f 93       	push	r24
    1098:	8e e1       	ldi	r24, 0x1E	; 30
    109a:	94 e0       	ldi	r25, 0x04	; 4
    109c:	9f 93       	push	r25
    109e:	8f 93       	push	r24
    10a0:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <snprintf>
                    display_set("ENABLE ALERTS", buffer);
    10a4:	6e e1       	ldi	r22, 0x1E	; 30
    10a6:	74 e0       	ldi	r23, 0x04	; 4
    10a8:	8c ee       	ldi	r24, 0xEC	; 236
    10aa:	92 e0       	ldi	r25, 0x02	; 2
    10ac:	0e 94 cb 03 	call	0x796	; 0x796 <display_set>
                    break;
    10b0:	8d b7       	in	r24, 0x3d	; 61
    10b2:	9e b7       	in	r25, 0x3e	; 62
    10b4:	08 96       	adiw	r24, 0x08	; 8
    10b6:	0f b6       	in	r0, 0x3f	; 63
    10b8:	f8 94       	cli
    10ba:	9e bf       	out	0x3e, r25	; 62
    10bc:	0f be       	out	0x3f, r0	; 63
    10be:	8d bf       	out	0x3d, r24	; 61
    10c0:	0d c0       	rjmp	.+26     	; 0x10dc <ui_show_display+0x4f4>
                default:
                    display_set("ERROR", "Invalid config");
    10c2:	6a ef       	ldi	r22, 0xFA	; 250
    10c4:	72 e0       	ldi	r23, 0x02	; 2
    10c6:	81 e7       	ldi	r24, 0x71	; 113
    10c8:	92 e0       	ldi	r25, 0x02	; 2
    10ca:	0e 94 cb 03 	call	0x796	; 0x796 <display_set>
                    break;
    10ce:	06 c0       	rjmp	.+12     	; 0x10dc <ui_show_display+0x4f4>
                }
            }
            break;

        default:
            display_set("ERROR", "Invalid menu");
    10d0:	69 e0       	ldi	r22, 0x09	; 9
    10d2:	73 e0       	ldi	r23, 0x03	; 3
    10d4:	81 e7       	ldi	r24, 0x71	; 113
    10d6:	92 e0       	ldi	r25, 0x02	; 2
    10d8:	0e 94 cb 03 	call	0x796	; 0x796 <display_set>
            break;
        }
    }
}
    10dc:	0f 91       	pop	r16
    10de:	ff 90       	pop	r15
    10e0:	ef 90       	pop	r14
    10e2:	08 95       	ret

000010e4 <ui_process_key_command>:
    process a key command from the keypad and update the UI state
    params: uint8_t key - the key number (1-4)
    returns: void
*/
void ui_process_key_command (uint8_t key) {
    if (key == 1)
    10e4:	81 30       	cpi	r24, 0x01	; 1
    10e6:	a9 f5       	brne	.+106    	; 0x1152 <ui_process_key_command+0x6e>
    {
        if (active_menu_index == -1)
    10e8:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <active_menu_index>
    10ec:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <active_menu_index+0x1>
    10f0:	01 96       	adiw	r24, 0x01	; 1
    10f2:	09 f4       	brne	.+2      	; 0x10f6 <ui_process_key_command+0x12>
    10f4:	9b c2       	rjmp	.+1334   	; 0x162c <ui_process_key_command+0x548>
        {
            return;
        }
        else
        {
            if (active_trigger_index != -1)
    10f6:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <active_trigger_index>
    10fa:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <active_trigger_index+0x1>
    10fe:	01 96       	adiw	r24, 0x01	; 1
    1100:	39 f0       	breq	.+14     	; 0x1110 <ui_process_key_command+0x2c>
            {
                active_trigger_index = -1;
    1102:	8f ef       	ldi	r24, 0xFF	; 255
    1104:	9f ef       	ldi	r25, 0xFF	; 255
    1106:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <active_trigger_index+0x1>
    110a:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <active_trigger_index>
    110e:	08 95       	ret
            }
            else if (active_config_index != -1)
    1110:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <active_config_index>
    1114:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <active_config_index+0x1>
    1118:	01 96       	adiw	r24, 0x01	; 1
    111a:	39 f0       	breq	.+14     	; 0x112a <ui_process_key_command+0x46>
            {
                active_config_index = -1;
    111c:	8f ef       	ldi	r24, 0xFF	; 255
    111e:	9f ef       	ldi	r25, 0xFF	; 255
    1120:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <active_config_index+0x1>
    1124:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <active_config_index>
    1128:	08 95       	ret
            }
            else if (active_live_view_index != -1)
    112a:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <active_live_view_index>
    112e:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <active_live_view_index+0x1>
    1132:	01 96       	adiw	r24, 0x01	; 1
    1134:	39 f0       	breq	.+14     	; 0x1144 <ui_process_key_command+0x60>
            {
                active_live_view_index = -1;
    1136:	8f ef       	ldi	r24, 0xFF	; 255
    1138:	9f ef       	ldi	r25, 0xFF	; 255
    113a:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <active_live_view_index+0x1>
    113e:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <active_live_view_index>
    1142:	08 95       	ret
            }
            else
            {
                active_menu_index = -1;
    1144:	8f ef       	ldi	r24, 0xFF	; 255
    1146:	9f ef       	ldi	r25, 0xFF	; 255
    1148:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <active_menu_index+0x1>
    114c:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <active_menu_index>
    1150:	08 95       	ret
            }
        }
    }
    else if (key == 2)
    1152:	82 30       	cpi	r24, 0x02	; 2
    1154:	09 f0       	breq	.+2      	; 0x1158 <ui_process_key_command+0x74>
    1156:	0e c1       	rjmp	.+540    	; 0x1374 <ui_process_key_command+0x290>
    {
        if (active_menu_index == -1)
    1158:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <active_menu_index>
    115c:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <active_menu_index+0x1>
    1160:	8f 3f       	cpi	r24, 0xFF	; 255
    1162:	2f ef       	ldi	r18, 0xFF	; 255
    1164:	92 07       	cpc	r25, r18
    1166:	71 f4       	brne	.+28     	; 0x1184 <ui_process_key_command+0xa0>
        {
            if (menu_hover_index < (sizeof(MENU_BUFFER)/sizeof(MENU_BUFFER[0]) - 1))
    1168:	80 91 1b 04 	lds	r24, 0x041B	; 0x80041b <menu_hover_index>
    116c:	90 91 1c 04 	lds	r25, 0x041C	; 0x80041c <menu_hover_index+0x1>
    1170:	87 30       	cpi	r24, 0x07	; 7
    1172:	91 05       	cpc	r25, r1
    1174:	08 f0       	brcs	.+2      	; 0x1178 <ui_process_key_command+0x94>
    1176:	5a c2       	rjmp	.+1204   	; 0x162c <ui_process_key_command+0x548>
                menu_hover_index++; // navigate downwards on the main menu
    1178:	01 96       	adiw	r24, 0x01	; 1
    117a:	90 93 1c 04 	sts	0x041C, r25	; 0x80041c <menu_hover_index+0x1>
    117e:	80 93 1b 04 	sts	0x041B, r24	; 0x80041b <menu_hover_index>
    1182:	08 95       	ret
        }
        else if (active_menu_index == 4)
    1184:	84 30       	cpi	r24, 0x04	; 4
    1186:	91 05       	cpc	r25, r1
    1188:	71 f4       	brne	.+28     	; 0x11a6 <ui_process_key_command+0xc2>
        {
            // user is in the live view menu
            if (live_view_hover_index < (sizeof(LIVE_VIEW_BUFFER)/sizeof(LIVE_VIEW_BUFFER[0]) - 1))
    118a:	80 91 13 04 	lds	r24, 0x0413	; 0x800413 <live_view_hover_index>
    118e:	90 91 14 04 	lds	r25, 0x0414	; 0x800414 <live_view_hover_index+0x1>
    1192:	83 30       	cpi	r24, 0x03	; 3
    1194:	91 05       	cpc	r25, r1
    1196:	08 f0       	brcs	.+2      	; 0x119a <ui_process_key_command+0xb6>
    1198:	49 c2       	rjmp	.+1170   	; 0x162c <ui_process_key_command+0x548>
                live_view_hover_index++; // navigate downwards on the live view menu
    119a:	01 96       	adiw	r24, 0x01	; 1
    119c:	90 93 14 04 	sts	0x0414, r25	; 0x800414 <live_view_hover_index+0x1>
    11a0:	80 93 13 04 	sts	0x0413, r24	; 0x800413 <live_view_hover_index>
    11a4:	08 95       	ret
        }
        else if (active_menu_index == 5) 
    11a6:	85 30       	cpi	r24, 0x05	; 5
    11a8:	91 05       	cpc	r25, r1
    11aa:	09 f0       	breq	.+2      	; 0x11ae <ui_process_key_command+0xca>
    11ac:	50 c0       	rjmp	.+160    	; 0x124e <ui_process_key_command+0x16a>
        {
            // user is in the triggers menu
            if (active_trigger_index == -1)
    11ae:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <active_trigger_index>
    11b2:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <active_trigger_index+0x1>
    11b6:	8f 3f       	cpi	r24, 0xFF	; 255
    11b8:	2f ef       	ldi	r18, 0xFF	; 255
    11ba:	92 07       	cpc	r25, r18
    11bc:	69 f4       	brne	.+26     	; 0x11d8 <ui_process_key_command+0xf4>
            {
                if (trigger_hover_index < (sizeof(TRIGGERS_BUFFER)/sizeof(TRIGGERS_BUFFER[0]) - 1))
    11be:	80 91 19 04 	lds	r24, 0x0419	; 0x800419 <trigger_hover_index>
    11c2:	90 91 1a 04 	lds	r25, 0x041A	; 0x80041a <trigger_hover_index+0x1>
    11c6:	00 97       	sbiw	r24, 0x00	; 0
    11c8:	09 f0       	breq	.+2      	; 0x11cc <ui_process_key_command+0xe8>
    11ca:	30 c2       	rjmp	.+1120   	; 0x162c <ui_process_key_command+0x548>
                    trigger_hover_index++; // navigate downwards on the triggers menu
    11cc:	01 96       	adiw	r24, 0x01	; 1
    11ce:	90 93 1a 04 	sts	0x041A, r25	; 0x80041a <trigger_hover_index+0x1>
    11d2:	80 93 19 04 	sts	0x0419, r24	; 0x800419 <trigger_hover_index>
    11d6:	08 95       	ret
            } else {
                switch (active_trigger_index) {
    11d8:	00 97       	sbiw	r24, 0x00	; 0
    11da:	19 f0       	breq	.+6      	; 0x11e2 <ui_process_key_command+0xfe>
    11dc:	01 97       	sbiw	r24, 0x01	; 1
    11de:	e1 f0       	breq	.+56     	; 0x1218 <ui_process_key_command+0x134>
    11e0:	08 95       	ret
                    case 0:
                        // adjust MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER - decrease
                        MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER -= STEP_SIZE_FOR_INCREMENTS;
    11e2:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <STEP_SIZE_FOR_INCREMENTS>
    11e6:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <STEP_SIZE_FOR_INCREMENTS+0x1>
    11ea:	40 91 10 01 	lds	r20, 0x0110	; 0x800110 <STEP_SIZE_FOR_INCREMENTS+0x2>
    11ee:	50 91 11 01 	lds	r21, 0x0111	; 0x800111 <STEP_SIZE_FOR_INCREMENTS+0x3>
    11f2:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER>
    11f6:	70 91 17 01 	lds	r23, 0x0117	; 0x800117 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x1>
    11fa:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x2>
    11fe:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x3>
    1202:	0e 94 33 0c 	call	0x1866	; 0x1866 <__subsf3>
    1206:	60 93 16 01 	sts	0x0116, r22	; 0x800116 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER>
    120a:	70 93 17 01 	sts	0x0117, r23	; 0x800117 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x1>
    120e:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x2>
    1212:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x3>
                        break;
    1216:	08 95       	ret
                    case 1:
                        // adjust MAXIMUM_TEMPERATURE_BEFORE_PUMPING - decrease
                        MAXIMUM_TEMPERATURE_BEFORE_PUMPING -= STEP_SIZE_FOR_INCREMENTS;
    1218:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <STEP_SIZE_FOR_INCREMENTS>
    121c:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <STEP_SIZE_FOR_INCREMENTS+0x1>
    1220:	40 91 10 01 	lds	r20, 0x0110	; 0x800110 <STEP_SIZE_FOR_INCREMENTS+0x2>
    1224:	50 91 11 01 	lds	r21, 0x0111	; 0x800111 <STEP_SIZE_FOR_INCREMENTS+0x3>
    1228:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING>
    122c:	70 91 13 01 	lds	r23, 0x0113	; 0x800113 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x1>
    1230:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x2>
    1234:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x3>
    1238:	0e 94 33 0c 	call	0x1866	; 0x1866 <__subsf3>
    123c:	60 93 12 01 	sts	0x0112, r22	; 0x800112 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING>
    1240:	70 93 13 01 	sts	0x0113, r23	; 0x800113 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x1>
    1244:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x2>
    1248:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x3>
                        break;
    124c:	08 95       	ret
                    default:
                        break;
                }
            }
        }
        else if (active_menu_index == 6) {
    124e:	86 30       	cpi	r24, 0x06	; 6
    1250:	91 05       	cpc	r25, r1
    1252:	71 f4       	brne	.+28     	; 0x1270 <ui_process_key_command+0x18c>
            if (message_hover_index < MSG_BUFFER_SIZE - 1)
    1254:	80 91 15 04 	lds	r24, 0x0415	; 0x800415 <message_hover_index>
    1258:	90 91 16 04 	lds	r25, 0x0416	; 0x800416 <message_hover_index+0x1>
    125c:	83 30       	cpi	r24, 0x03	; 3
    125e:	91 05       	cpc	r25, r1
    1260:	0c f0       	brlt	.+2      	; 0x1264 <ui_process_key_command+0x180>
    1262:	e4 c1       	rjmp	.+968    	; 0x162c <ui_process_key_command+0x548>
                message_hover_index++;
    1264:	01 96       	adiw	r24, 0x01	; 1
    1266:	90 93 16 04 	sts	0x0416, r25	; 0x800416 <message_hover_index+0x1>
    126a:	80 93 15 04 	sts	0x0415, r24	; 0x800415 <message_hover_index>
    126e:	08 95       	ret
        }
        else if (active_menu_index == 7)
    1270:	07 97       	sbiw	r24, 0x07	; 7
    1272:	09 f0       	breq	.+2      	; 0x1276 <ui_process_key_command+0x192>
    1274:	db c1       	rjmp	.+950    	; 0x162c <ui_process_key_command+0x548>
        {
            if (active_config_index == -1)
    1276:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <active_config_index>
    127a:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <active_config_index+0x1>
    127e:	8f 3f       	cpi	r24, 0xFF	; 255
    1280:	2f ef       	ldi	r18, 0xFF	; 255
    1282:	92 07       	cpc	r25, r18
    1284:	71 f4       	brne	.+28     	; 0x12a2 <ui_process_key_command+0x1be>
            {
                if (config_hover_index < (sizeof(CONFIG_BUFFER)/sizeof(CONFIG_BUFFER[0]) - 1))
    1286:	80 91 17 04 	lds	r24, 0x0417	; 0x800417 <config_hover_index>
    128a:	90 91 18 04 	lds	r25, 0x0418	; 0x800418 <config_hover_index+0x1>
    128e:	84 30       	cpi	r24, 0x04	; 4
    1290:	91 05       	cpc	r25, r1
    1292:	08 f0       	brcs	.+2      	; 0x1296 <ui_process_key_command+0x1b2>
    1294:	cb c1       	rjmp	.+918    	; 0x162c <ui_process_key_command+0x548>
                    config_hover_index++; // navigate downwards on the config menu
    1296:	01 96       	adiw	r24, 0x01	; 1
    1298:	90 93 18 04 	sts	0x0418, r25	; 0x800418 <config_hover_index+0x1>
    129c:	80 93 17 04 	sts	0x0417, r24	; 0x800417 <config_hover_index>
    12a0:	08 95       	ret
            } else {
                switch (active_config_index)
    12a2:	82 30       	cpi	r24, 0x02	; 2
    12a4:	91 05       	cpc	r25, r1
    12a6:	09 f4       	brne	.+2      	; 0x12aa <ui_process_key_command+0x1c6>
    12a8:	44 c0       	rjmp	.+136    	; 0x1332 <ui_process_key_command+0x24e>
    12aa:	2c f4       	brge	.+10     	; 0x12b6 <ui_process_key_command+0x1d2>
    12ac:	00 97       	sbiw	r24, 0x00	; 0
    12ae:	59 f0       	breq	.+22     	; 0x12c6 <ui_process_key_command+0x1e2>
    12b0:	01 97       	sbiw	r24, 0x01	; 1
    12b2:	21 f1       	breq	.+72     	; 0x12fc <ui_process_key_command+0x218>
    12b4:	08 95       	ret
    12b6:	83 30       	cpi	r24, 0x03	; 3
    12b8:	91 05       	cpc	r25, r1
    12ba:	09 f4       	brne	.+2      	; 0x12be <ui_process_key_command+0x1da>
    12bc:	55 c0       	rjmp	.+170    	; 0x1368 <ui_process_key_command+0x284>
    12be:	04 97       	sbiw	r24, 0x04	; 4
    12c0:	09 f4       	brne	.+2      	; 0x12c4 <ui_process_key_command+0x1e0>
    12c2:	55 c0       	rjmp	.+170    	; 0x136e <ui_process_key_command+0x28a>
    12c4:	08 95       	ret
                {
                case 0:
                    // adjust STEP_SIZE_FOR_INCREMENTS - decrease
                    STEP_SIZE_FOR_INCREMENTS -= STEP_INCREMENT;
    12c6:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <STEP_INCREMENT>
    12ca:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <STEP_INCREMENT+0x1>
    12ce:	40 91 0c 01 	lds	r20, 0x010C	; 0x80010c <STEP_INCREMENT+0x2>
    12d2:	50 91 0d 01 	lds	r21, 0x010D	; 0x80010d <STEP_INCREMENT+0x3>
    12d6:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <STEP_SIZE_FOR_INCREMENTS>
    12da:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <STEP_SIZE_FOR_INCREMENTS+0x1>
    12de:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <STEP_SIZE_FOR_INCREMENTS+0x2>
    12e2:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <STEP_SIZE_FOR_INCREMENTS+0x3>
    12e6:	0e 94 33 0c 	call	0x1866	; 0x1866 <__subsf3>
    12ea:	60 93 0e 01 	sts	0x010E, r22	; 0x80010e <STEP_SIZE_FOR_INCREMENTS>
    12ee:	70 93 0f 01 	sts	0x010F, r23	; 0x80010f <STEP_SIZE_FOR_INCREMENTS+0x1>
    12f2:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <STEP_SIZE_FOR_INCREMENTS+0x2>
    12f6:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <STEP_SIZE_FOR_INCREMENTS+0x3>
                    break;
    12fa:	08 95       	ret
                case 1:
                    // adjust PUMP_THRESHOLD - decrease
                    PUMP_THRESHOLD -= STEP_SIZE_FOR_INCREMENTS;
    12fc:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <STEP_SIZE_FOR_INCREMENTS>
    1300:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <STEP_SIZE_FOR_INCREMENTS+0x1>
    1304:	40 91 10 01 	lds	r20, 0x0110	; 0x800110 <STEP_SIZE_FOR_INCREMENTS+0x2>
    1308:	50 91 11 01 	lds	r21, 0x0111	; 0x800111 <STEP_SIZE_FOR_INCREMENTS+0x3>
    130c:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <PUMP_THRESHOLD>
    1310:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <PUMP_THRESHOLD+0x1>
    1314:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <PUMP_THRESHOLD+0x2>
    1318:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <PUMP_THRESHOLD+0x3>
    131c:	0e 94 33 0c 	call	0x1866	; 0x1866 <__subsf3>
    1320:	60 93 06 01 	sts	0x0106, r22	; 0x800106 <PUMP_THRESHOLD>
    1324:	70 93 07 01 	sts	0x0107, r23	; 0x800107 <PUMP_THRESHOLD+0x1>
    1328:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <PUMP_THRESHOLD+0x2>
    132c:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <PUMP_THRESHOLD+0x3>
                    break;
    1330:	08 95       	ret
                case 2:
                    // adjust SPRAY_THRESHOLD - decrease
                    SPRAY_THRESHOLD -= STEP_SIZE_FOR_INCREMENTS;
    1332:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <STEP_SIZE_FOR_INCREMENTS>
    1336:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <STEP_SIZE_FOR_INCREMENTS+0x1>
    133a:	40 91 10 01 	lds	r20, 0x0110	; 0x800110 <STEP_SIZE_FOR_INCREMENTS+0x2>
    133e:	50 91 11 01 	lds	r21, 0x0111	; 0x800111 <STEP_SIZE_FOR_INCREMENTS+0x3>
    1342:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <SPRAY_THRESHOLD>
    1346:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <SPRAY_THRESHOLD+0x1>
    134a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <SPRAY_THRESHOLD+0x2>
    134e:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <SPRAY_THRESHOLD+0x3>
    1352:	0e 94 33 0c 	call	0x1866	; 0x1866 <__subsf3>
    1356:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <SPRAY_THRESHOLD>
    135a:	70 93 03 01 	sts	0x0103, r23	; 0x800103 <SPRAY_THRESHOLD+0x1>
    135e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <SPRAY_THRESHOLD+0x2>
    1362:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <SPRAY_THRESHOLD+0x3>
                    break;
    1366:	08 95       	ret
                case 3:
                    // adjust ENABLE_TRIGGER_VALUE - toggle
                    ENABLE_TRIGGER_VALUE = 0;
    1368:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <ENABLE_TRIGGER_VALUE>
                    break;
    136c:	08 95       	ret
                case 4:
                    // adjust ENABLE_ALERT_VALUE - toggle
                    ENABLE_ALERT_VALUE = 0;
    136e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
                    break;
    1372:	08 95       	ret
                    break;
                }
            }
        }
    }
    else if (key == 3)
    1374:	83 30       	cpi	r24, 0x03	; 3
    1376:	09 f0       	breq	.+2      	; 0x137a <ui_process_key_command+0x296>
    1378:	11 c1       	rjmp	.+546    	; 0x159c <ui_process_key_command+0x4b8>
    {
        if (active_menu_index == -1)
    137a:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <active_menu_index>
    137e:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <active_menu_index+0x1>
    1382:	8f 3f       	cpi	r24, 0xFF	; 255
    1384:	2f ef       	ldi	r18, 0xFF	; 255
    1386:	92 07       	cpc	r25, r18
    1388:	71 f4       	brne	.+28     	; 0x13a6 <ui_process_key_command+0x2c2>
        {
            if (menu_hover_index > 0)
    138a:	80 91 1b 04 	lds	r24, 0x041B	; 0x80041b <menu_hover_index>
    138e:	90 91 1c 04 	lds	r25, 0x041C	; 0x80041c <menu_hover_index+0x1>
    1392:	18 16       	cp	r1, r24
    1394:	19 06       	cpc	r1, r25
    1396:	0c f0       	brlt	.+2      	; 0x139a <ui_process_key_command+0x2b6>
    1398:	49 c1       	rjmp	.+658    	; 0x162c <ui_process_key_command+0x548>
                menu_hover_index--;
    139a:	01 97       	sbiw	r24, 0x01	; 1
    139c:	90 93 1c 04 	sts	0x041C, r25	; 0x80041c <menu_hover_index+0x1>
    13a0:	80 93 1b 04 	sts	0x041B, r24	; 0x80041b <menu_hover_index>
    13a4:	08 95       	ret
        }
        else if (active_menu_index == 4)
    13a6:	84 30       	cpi	r24, 0x04	; 4
    13a8:	91 05       	cpc	r25, r1
    13aa:	71 f4       	brne	.+28     	; 0x13c8 <ui_process_key_command+0x2e4>
        {
            // user is in the live view menu
            if (live_view_hover_index > 0)
    13ac:	80 91 13 04 	lds	r24, 0x0413	; 0x800413 <live_view_hover_index>
    13b0:	90 91 14 04 	lds	r25, 0x0414	; 0x800414 <live_view_hover_index+0x1>
    13b4:	18 16       	cp	r1, r24
    13b6:	19 06       	cpc	r1, r25
    13b8:	0c f0       	brlt	.+2      	; 0x13bc <ui_process_key_command+0x2d8>
    13ba:	38 c1       	rjmp	.+624    	; 0x162c <ui_process_key_command+0x548>
                live_view_hover_index--;
    13bc:	01 97       	sbiw	r24, 0x01	; 1
    13be:	90 93 14 04 	sts	0x0414, r25	; 0x800414 <live_view_hover_index+0x1>
    13c2:	80 93 13 04 	sts	0x0413, r24	; 0x800413 <live_view_hover_index>
    13c6:	08 95       	ret
        }
        else if (active_menu_index == 5)
    13c8:	85 30       	cpi	r24, 0x05	; 5
    13ca:	91 05       	cpc	r25, r1
    13cc:	09 f0       	breq	.+2      	; 0x13d0 <ui_process_key_command+0x2ec>
    13ce:	51 c0       	rjmp	.+162    	; 0x1472 <ui_process_key_command+0x38e>
        {
            if (active_trigger_index == -1)
    13d0:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <active_trigger_index>
    13d4:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <active_trigger_index+0x1>
    13d8:	8f 3f       	cpi	r24, 0xFF	; 255
    13da:	2f ef       	ldi	r18, 0xFF	; 255
    13dc:	92 07       	cpc	r25, r18
    13de:	71 f4       	brne	.+28     	; 0x13fc <ui_process_key_command+0x318>
            {
                if (trigger_hover_index > 0)
    13e0:	80 91 19 04 	lds	r24, 0x0419	; 0x800419 <trigger_hover_index>
    13e4:	90 91 1a 04 	lds	r25, 0x041A	; 0x80041a <trigger_hover_index+0x1>
    13e8:	18 16       	cp	r1, r24
    13ea:	19 06       	cpc	r1, r25
    13ec:	0c f0       	brlt	.+2      	; 0x13f0 <ui_process_key_command+0x30c>
    13ee:	1e c1       	rjmp	.+572    	; 0x162c <ui_process_key_command+0x548>
                    trigger_hover_index--;
    13f0:	01 97       	sbiw	r24, 0x01	; 1
    13f2:	90 93 1a 04 	sts	0x041A, r25	; 0x80041a <trigger_hover_index+0x1>
    13f6:	80 93 19 04 	sts	0x0419, r24	; 0x800419 <trigger_hover_index>
    13fa:	08 95       	ret
            } else {
                switch (active_trigger_index) {
    13fc:	00 97       	sbiw	r24, 0x00	; 0
    13fe:	19 f0       	breq	.+6      	; 0x1406 <ui_process_key_command+0x322>
    1400:	01 97       	sbiw	r24, 0x01	; 1
    1402:	e1 f0       	breq	.+56     	; 0x143c <ui_process_key_command+0x358>
    1404:	08 95       	ret
                    case 0:
                        // adjust MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER - decrease
                        MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER += STEP_SIZE_FOR_INCREMENTS;
    1406:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <STEP_SIZE_FOR_INCREMENTS>
    140a:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <STEP_SIZE_FOR_INCREMENTS+0x1>
    140e:	40 91 10 01 	lds	r20, 0x0110	; 0x800110 <STEP_SIZE_FOR_INCREMENTS+0x2>
    1412:	50 91 11 01 	lds	r21, 0x0111	; 0x800111 <STEP_SIZE_FOR_INCREMENTS+0x3>
    1416:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER>
    141a:	70 91 17 01 	lds	r23, 0x0117	; 0x800117 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x1>
    141e:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x2>
    1422:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x3>
    1426:	0e 94 34 0c 	call	0x1868	; 0x1868 <__addsf3>
    142a:	60 93 16 01 	sts	0x0116, r22	; 0x800116 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER>
    142e:	70 93 17 01 	sts	0x0117, r23	; 0x800117 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x1>
    1432:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x2>
    1436:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x3>
                        break;
    143a:	08 95       	ret
                    case 1:
                        // adjust MAXIMUM_TEMPERATURE_BEFORE_PUMPING - decrease
                        MAXIMUM_TEMPERATURE_BEFORE_PUMPING += STEP_SIZE_FOR_INCREMENTS;
    143c:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <STEP_SIZE_FOR_INCREMENTS>
    1440:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <STEP_SIZE_FOR_INCREMENTS+0x1>
    1444:	40 91 10 01 	lds	r20, 0x0110	; 0x800110 <STEP_SIZE_FOR_INCREMENTS+0x2>
    1448:	50 91 11 01 	lds	r21, 0x0111	; 0x800111 <STEP_SIZE_FOR_INCREMENTS+0x3>
    144c:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING>
    1450:	70 91 13 01 	lds	r23, 0x0113	; 0x800113 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x1>
    1454:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x2>
    1458:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x3>
    145c:	0e 94 34 0c 	call	0x1868	; 0x1868 <__addsf3>
    1460:	60 93 12 01 	sts	0x0112, r22	; 0x800112 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING>
    1464:	70 93 13 01 	sts	0x0113, r23	; 0x800113 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x1>
    1468:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x2>
    146c:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x3>
                        break;
    1470:	08 95       	ret
                    default:
                        break;
                }
            }
        } 
        else if (active_menu_index == 6) {
    1472:	86 30       	cpi	r24, 0x06	; 6
    1474:	91 05       	cpc	r25, r1
    1476:	71 f4       	brne	.+28     	; 0x1494 <ui_process_key_command+0x3b0>
            if (message_hover_index > 0)
    1478:	80 91 15 04 	lds	r24, 0x0415	; 0x800415 <message_hover_index>
    147c:	90 91 16 04 	lds	r25, 0x0416	; 0x800416 <message_hover_index+0x1>
    1480:	18 16       	cp	r1, r24
    1482:	19 06       	cpc	r1, r25
    1484:	0c f0       	brlt	.+2      	; 0x1488 <ui_process_key_command+0x3a4>
    1486:	d2 c0       	rjmp	.+420    	; 0x162c <ui_process_key_command+0x548>
                message_hover_index--;
    1488:	01 97       	sbiw	r24, 0x01	; 1
    148a:	90 93 16 04 	sts	0x0416, r25	; 0x800416 <message_hover_index+0x1>
    148e:	80 93 15 04 	sts	0x0415, r24	; 0x800415 <message_hover_index>
    1492:	08 95       	ret
        }
        else if (active_menu_index == 7)
    1494:	07 97       	sbiw	r24, 0x07	; 7
    1496:	09 f0       	breq	.+2      	; 0x149a <ui_process_key_command+0x3b6>
    1498:	c9 c0       	rjmp	.+402    	; 0x162c <ui_process_key_command+0x548>
        {
            if (active_config_index == -1)
    149a:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <active_config_index>
    149e:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <active_config_index+0x1>
    14a2:	8f 3f       	cpi	r24, 0xFF	; 255
    14a4:	2f ef       	ldi	r18, 0xFF	; 255
    14a6:	92 07       	cpc	r25, r18
    14a8:	71 f4       	brne	.+28     	; 0x14c6 <ui_process_key_command+0x3e2>
            {
                if (config_hover_index > 0)
    14aa:	80 91 17 04 	lds	r24, 0x0417	; 0x800417 <config_hover_index>
    14ae:	90 91 18 04 	lds	r25, 0x0418	; 0x800418 <config_hover_index+0x1>
    14b2:	18 16       	cp	r1, r24
    14b4:	19 06       	cpc	r1, r25
    14b6:	0c f0       	brlt	.+2      	; 0x14ba <ui_process_key_command+0x3d6>
    14b8:	b9 c0       	rjmp	.+370    	; 0x162c <ui_process_key_command+0x548>
                    config_hover_index--;
    14ba:	01 97       	sbiw	r24, 0x01	; 1
    14bc:	90 93 18 04 	sts	0x0418, r25	; 0x800418 <config_hover_index+0x1>
    14c0:	80 93 17 04 	sts	0x0417, r24	; 0x800417 <config_hover_index>
    14c4:	08 95       	ret
            } else {
            switch (active_config_index)
    14c6:	82 30       	cpi	r24, 0x02	; 2
    14c8:	91 05       	cpc	r25, r1
    14ca:	09 f4       	brne	.+2      	; 0x14ce <ui_process_key_command+0x3ea>
    14cc:	44 c0       	rjmp	.+136    	; 0x1556 <ui_process_key_command+0x472>
    14ce:	2c f4       	brge	.+10     	; 0x14da <ui_process_key_command+0x3f6>
    14d0:	00 97       	sbiw	r24, 0x00	; 0
    14d2:	59 f0       	breq	.+22     	; 0x14ea <ui_process_key_command+0x406>
    14d4:	01 97       	sbiw	r24, 0x01	; 1
    14d6:	21 f1       	breq	.+72     	; 0x1520 <ui_process_key_command+0x43c>
    14d8:	08 95       	ret
    14da:	83 30       	cpi	r24, 0x03	; 3
    14dc:	91 05       	cpc	r25, r1
    14de:	09 f4       	brne	.+2      	; 0x14e2 <ui_process_key_command+0x3fe>
    14e0:	55 c0       	rjmp	.+170    	; 0x158c <ui_process_key_command+0x4a8>
    14e2:	04 97       	sbiw	r24, 0x04	; 4
    14e4:	09 f4       	brne	.+2      	; 0x14e8 <ui_process_key_command+0x404>
    14e6:	56 c0       	rjmp	.+172    	; 0x1594 <ui_process_key_command+0x4b0>
    14e8:	08 95       	ret
                {
                case 0:
                    // adjust STEP_SIZE_FOR_INCREMENTS - decrease
                    STEP_SIZE_FOR_INCREMENTS += STEP_INCREMENT;
    14ea:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <STEP_INCREMENT>
    14ee:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <STEP_INCREMENT+0x1>
    14f2:	40 91 0c 01 	lds	r20, 0x010C	; 0x80010c <STEP_INCREMENT+0x2>
    14f6:	50 91 0d 01 	lds	r21, 0x010D	; 0x80010d <STEP_INCREMENT+0x3>
    14fa:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <STEP_SIZE_FOR_INCREMENTS>
    14fe:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <STEP_SIZE_FOR_INCREMENTS+0x1>
    1502:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <STEP_SIZE_FOR_INCREMENTS+0x2>
    1506:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <STEP_SIZE_FOR_INCREMENTS+0x3>
    150a:	0e 94 34 0c 	call	0x1868	; 0x1868 <__addsf3>
    150e:	60 93 0e 01 	sts	0x010E, r22	; 0x80010e <STEP_SIZE_FOR_INCREMENTS>
    1512:	70 93 0f 01 	sts	0x010F, r23	; 0x80010f <STEP_SIZE_FOR_INCREMENTS+0x1>
    1516:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <STEP_SIZE_FOR_INCREMENTS+0x2>
    151a:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <STEP_SIZE_FOR_INCREMENTS+0x3>
                    break;
    151e:	08 95       	ret
                case 1:
                    // adjust PUMP_THRESHOLD - decrease
                    PUMP_THRESHOLD += STEP_SIZE_FOR_INCREMENTS;
    1520:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <STEP_SIZE_FOR_INCREMENTS>
    1524:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <STEP_SIZE_FOR_INCREMENTS+0x1>
    1528:	40 91 10 01 	lds	r20, 0x0110	; 0x800110 <STEP_SIZE_FOR_INCREMENTS+0x2>
    152c:	50 91 11 01 	lds	r21, 0x0111	; 0x800111 <STEP_SIZE_FOR_INCREMENTS+0x3>
    1530:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <PUMP_THRESHOLD>
    1534:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <PUMP_THRESHOLD+0x1>
    1538:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <PUMP_THRESHOLD+0x2>
    153c:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <PUMP_THRESHOLD+0x3>
    1540:	0e 94 34 0c 	call	0x1868	; 0x1868 <__addsf3>
    1544:	60 93 06 01 	sts	0x0106, r22	; 0x800106 <PUMP_THRESHOLD>
    1548:	70 93 07 01 	sts	0x0107, r23	; 0x800107 <PUMP_THRESHOLD+0x1>
    154c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <PUMP_THRESHOLD+0x2>
    1550:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <PUMP_THRESHOLD+0x3>
                    break;
    1554:	08 95       	ret
                case 2:
                    // adjust SPRAY_THRESHOLD - decrease
                    SPRAY_THRESHOLD += STEP_SIZE_FOR_INCREMENTS;
    1556:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <STEP_SIZE_FOR_INCREMENTS>
    155a:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <STEP_SIZE_FOR_INCREMENTS+0x1>
    155e:	40 91 10 01 	lds	r20, 0x0110	; 0x800110 <STEP_SIZE_FOR_INCREMENTS+0x2>
    1562:	50 91 11 01 	lds	r21, 0x0111	; 0x800111 <STEP_SIZE_FOR_INCREMENTS+0x3>
    1566:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <SPRAY_THRESHOLD>
    156a:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <SPRAY_THRESHOLD+0x1>
    156e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <SPRAY_THRESHOLD+0x2>
    1572:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <SPRAY_THRESHOLD+0x3>
    1576:	0e 94 34 0c 	call	0x1868	; 0x1868 <__addsf3>
    157a:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <SPRAY_THRESHOLD>
    157e:	70 93 03 01 	sts	0x0103, r23	; 0x800103 <SPRAY_THRESHOLD+0x1>
    1582:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <SPRAY_THRESHOLD+0x2>
    1586:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <SPRAY_THRESHOLD+0x3>
                    break;
    158a:	08 95       	ret
                case 3:
                    // adjust ENABLE_TRIGGER_VALUE - toggle
                    ENABLE_TRIGGER_VALUE = 1;
    158c:	81 e0       	ldi	r24, 0x01	; 1
    158e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <ENABLE_TRIGGER_VALUE>
                    break;
    1592:	08 95       	ret
                case 4:
                    // adjust ENABLE_ALERT_VALUE - toggle
                    ENABLE_ALERT_VALUE = 1;
    1594:	81 e0       	ldi	r24, 0x01	; 1
    1596:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
                    break;
    159a:	08 95       	ret
                    break;
                }
            }
        }
    }
    else if (key == 4)
    159c:	84 30       	cpi	r24, 0x04	; 4
    159e:	09 f0       	breq	.+2      	; 0x15a2 <ui_process_key_command+0x4be>
    15a0:	45 c0       	rjmp	.+138    	; 0x162c <ui_process_key_command+0x548>
    {
        if (active_menu_index == -1)
    15a2:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <active_menu_index>
    15a6:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <active_menu_index+0x1>
    15aa:	8f 3f       	cpi	r24, 0xFF	; 255
    15ac:	2f ef       	ldi	r18, 0xFF	; 255
    15ae:	92 07       	cpc	r25, r18
    15b0:	49 f4       	brne	.+18     	; 0x15c4 <ui_process_key_command+0x4e0>
        {
            active_menu_index = menu_hover_index;
    15b2:	80 91 1b 04 	lds	r24, 0x041B	; 0x80041b <menu_hover_index>
    15b6:	90 91 1c 04 	lds	r25, 0x041C	; 0x80041c <menu_hover_index+0x1>
    15ba:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <active_menu_index+0x1>
    15be:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <active_menu_index>
    15c2:	08 95       	ret
        }
        else if (active_menu_index == 4)
    15c4:	84 30       	cpi	r24, 0x04	; 4
    15c6:	91 05       	cpc	r25, r1
    15c8:	79 f4       	brne	.+30     	; 0x15e8 <ui_process_key_command+0x504>
        {
            if (active_live_view_index == -1)
    15ca:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <active_live_view_index>
    15ce:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <active_live_view_index+0x1>
    15d2:	01 96       	adiw	r24, 0x01	; 1
    15d4:	59 f5       	brne	.+86     	; 0x162c <ui_process_key_command+0x548>
            {
                active_live_view_index = live_view_hover_index;
    15d6:	80 91 13 04 	lds	r24, 0x0413	; 0x800413 <live_view_hover_index>
    15da:	90 91 14 04 	lds	r25, 0x0414	; 0x800414 <live_view_hover_index+0x1>
    15de:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <active_live_view_index+0x1>
    15e2:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <active_live_view_index>
    15e6:	08 95       	ret
            }
        }
        else if (active_menu_index == 5)
    15e8:	85 30       	cpi	r24, 0x05	; 5
    15ea:	91 05       	cpc	r25, r1
    15ec:	79 f4       	brne	.+30     	; 0x160c <ui_process_key_command+0x528>
        {
            if (active_trigger_index == -1)
    15ee:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <active_trigger_index>
    15f2:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <active_trigger_index+0x1>
    15f6:	01 96       	adiw	r24, 0x01	; 1
    15f8:	c9 f4       	brne	.+50     	; 0x162c <ui_process_key_command+0x548>
            {
                active_trigger_index = trigger_hover_index;
    15fa:	80 91 19 04 	lds	r24, 0x0419	; 0x800419 <trigger_hover_index>
    15fe:	90 91 1a 04 	lds	r25, 0x041A	; 0x80041a <trigger_hover_index+0x1>
    1602:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <active_trigger_index+0x1>
    1606:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <active_trigger_index>
    160a:	08 95       	ret
            }
        }
        else if (active_menu_index == 7)
    160c:	07 97       	sbiw	r24, 0x07	; 7
    160e:	71 f4       	brne	.+28     	; 0x162c <ui_process_key_command+0x548>
        {
            if (active_config_index == -1)
    1610:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <active_config_index>
    1614:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <active_config_index+0x1>
    1618:	01 96       	adiw	r24, 0x01	; 1
    161a:	41 f4       	brne	.+16     	; 0x162c <ui_process_key_command+0x548>
            {
                active_config_index = config_hover_index;
    161c:	80 91 17 04 	lds	r24, 0x0417	; 0x800417 <config_hover_index>
    1620:	90 91 18 04 	lds	r25, 0x0418	; 0x800418 <config_hover_index+0x1>
    1624:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <active_config_index+0x1>
    1628:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <active_config_index>
    162c:	08 95       	ret

0000162e <__vector_9>:
        }
    }
}

ISR(TIMER2_OVF_vect)
{
    162e:	1f 92       	push	r1
    1630:	0f 92       	push	r0
    1632:	0f b6       	in	r0, 0x3f	; 63
    1634:	0f 92       	push	r0
    1636:	11 24       	eor	r1, r1
    1638:	2f 93       	push	r18
    163a:	3f 93       	push	r19
    163c:	4f 93       	push	r20
    163e:	5f 93       	push	r21
    1640:	6f 93       	push	r22
    1642:	7f 93       	push	r23
    1644:	8f 93       	push	r24
    1646:	9f 93       	push	r25
    1648:	af 93       	push	r26
    164a:	bf 93       	push	r27
    164c:	ef 93       	push	r30
    164e:	ff 93       	push	r31
    tick++;
    1650:	80 91 1d 04 	lds	r24, 0x041D	; 0x80041d <tick>
    1654:	8f 5f       	subi	r24, 0xFF	; 255
    1656:	80 93 1d 04 	sts	0x041D, r24	; 0x80041d <tick>
   
    if (tick >= 62) {
    165a:	80 91 1d 04 	lds	r24, 0x041D	; 0x80041d <tick>
    165e:	8e 33       	cpi	r24, 0x3E	; 62
    1660:	68 f0       	brcs	.+26     	; 0x167c <__vector_9+0x4e>
        tick = 0;
    1662:	10 92 1d 04 	sts	0x041D, r1	; 0x80041d <tick>
        enqueue(&height_per_second, HCSR04_get_distance());
    1666:	0e 94 ad 03 	call	0x75a	; 0x75a <HCSR04_get_distance>
    166a:	bc 01       	movw	r22, r24
    166c:	8e e2       	ldi	r24, 0x2E	; 46
    166e:	94 e0       	ldi	r25, 0x04	; 4
    1670:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <enqueue>
        PORTC ^= (1 << PC2); // toggle PC2 every second    
    1674:	98 b1       	in	r25, 0x08	; 8
    1676:	84 e0       	ldi	r24, 0x04	; 4
    1678:	89 27       	eor	r24, r25
    167a:	88 b9       	out	0x08, r24	; 8
    }
    
}
    167c:	ff 91       	pop	r31
    167e:	ef 91       	pop	r30
    1680:	bf 91       	pop	r27
    1682:	af 91       	pop	r26
    1684:	9f 91       	pop	r25
    1686:	8f 91       	pop	r24
    1688:	7f 91       	pop	r23
    168a:	6f 91       	pop	r22
    168c:	5f 91       	pop	r21
    168e:	4f 91       	pop	r20
    1690:	3f 91       	pop	r19
    1692:	2f 91       	pop	r18
    1694:	0f 90       	pop	r0
    1696:	0f be       	out	0x3f, r0	; 63
    1698:	0f 90       	pop	r0
    169a:	1f 90       	pop	r1
    169c:	18 95       	reti

0000169e <main>:

int main(void)
{
    initQueue(&height_per_second);
    169e:	8e e2       	ldi	r24, 0x2E	; 46
    16a0:	94 e0       	ldi	r25, 0x04	; 4
    16a2:	0e 94 36 01 	call	0x26c	; 0x26c <initQueue>
    LCD_1602A_init();
    16a6:	0e 94 87 02 	call	0x50e	; 0x50e <LCD_1602A_init>
    HCSR04_init();
    16aa:	0e 94 6e 03 	call	0x6dc	; 0x6dc <HCSR04_init>
    KEYPAD_init();
    16ae:	0e 94 b2 03 	call	0x764	; 0x764 <KEYPAD_init>

    LED_SYSTEM_ACTIVE_INIT();
    16b2:	0e 94 0c 02 	call	0x418	; 0x418 <LED_SYSTEM_ACTIVE_INIT>
    TIMER0_INIT();
    16b6:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <TIMER0_INIT>

    uint8_t pressed_key;

    while (1)
    {
        if (TIFR2 & (1<<TOV2)) {  // overflow flag set?
    16ba:	b8 9b       	sbis	0x17, 0	; 23
    16bc:	07 c0       	rjmp	.+14     	; 0x16cc <main+0x2e>
            TIFR2 |= (1<<TOV2);   // clear it
    16be:	87 b3       	in	r24, 0x17	; 23
    16c0:	81 60       	ori	r24, 0x01	; 1
    16c2:	87 bb       	out	0x17, r24	; 23
            PORTB ^= (1<<PB0);    // toggle LED
    16c4:	95 b1       	in	r25, 0x05	; 5
    16c6:	81 e0       	ldi	r24, 0x01	; 1
    16c8:	89 27       	eor	r24, r25
    16ca:	85 b9       	out	0x05, r24	; 5
    }
    
}

int main(void)
{
    16cc:	c5 e0       	ldi	r28, 0x05	; 5
    16ce:	97 c0       	rjmp	.+302    	; 0x17fe <main+0x160>
        }

        while (active_menu_index == 4 && active_live_view_index != -1)
        {
            // in live view, continuously update values
            LED_system_active_on();
    16d0:	0e 94 17 02 	call	0x42e	; 0x42e <LED_system_active_on>
            switch (live_view_hover_index)
    16d4:	80 91 13 04 	lds	r24, 0x0413	; 0x800413 <live_view_hover_index>
    16d8:	90 91 14 04 	lds	r25, 0x0414	; 0x800414 <live_view_hover_index+0x1>
    16dc:	81 30       	cpi	r24, 0x01	; 1
    16de:	91 05       	cpc	r25, r1
    16e0:	19 f1       	breq	.+70     	; 0x1728 <main+0x8a>
    16e2:	1c f4       	brge	.+6      	; 0x16ea <main+0x4c>
    16e4:	89 2b       	or	r24, r25
    16e6:	41 f0       	breq	.+16     	; 0x16f8 <main+0x5a>
    16e8:	66 c0       	rjmp	.+204    	; 0x17b6 <main+0x118>
    16ea:	82 30       	cpi	r24, 0x02	; 2
    16ec:	91 05       	cpc	r25, r1
    16ee:	a1 f1       	breq	.+104    	; 0x1758 <main+0xba>
    16f0:	03 97       	sbiw	r24, 0x03	; 3
    16f2:	09 f4       	brne	.+2      	; 0x16f6 <main+0x58>
    16f4:	49 c0       	rjmp	.+146    	; 0x1788 <main+0xea>
    16f6:	5f c0       	rjmp	.+190    	; 0x17b6 <main+0x118>
            {
                case 0:
                    if (!(SHOW_LOADING_WIDGET)) {
    16f8:	80 91 02 04 	lds	r24, 0x0402	; 0x800402 <__data_end>
    16fc:	81 11       	cpse	r24, r1
    16fe:	09 c0       	rjmp	.+18     	; 0x1712 <main+0x74>
                        display_set("CAPACITY", "Updating...");
    1700:	66 e1       	ldi	r22, 0x16	; 22
    1702:	73 e0       	ldi	r23, 0x03	; 3
    1704:	86 ee       	ldi	r24, 0xE6	; 230
    1706:	91 e0       	ldi	r25, 0x01	; 1
    1708:	0e 94 cb 03 	call	0x796	; 0x796 <display_set>
                        SHOW_LOADING_WIDGET = 1;
    170c:	81 e0       	ldi	r24, 0x01	; 1
    170e:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <__data_end>
                    }
                    
                    current_tank_capacity = get_tank_capacity();
    1712:	0e 94 cd 04 	call	0x99a	; 0x99a <get_tank_capacity>
    1716:	60 93 0f 04 	sts	0x040F, r22	; 0x80040f <current_tank_capacity>
    171a:	70 93 10 04 	sts	0x0410, r23	; 0x800410 <current_tank_capacity+0x1>
    171e:	80 93 11 04 	sts	0x0411, r24	; 0x800411 <current_tank_capacity+0x2>
    1722:	90 93 12 04 	sts	0x0412, r25	; 0x800412 <current_tank_capacity+0x3>
                    break;
    1726:	47 c0       	rjmp	.+142    	; 0x17b6 <main+0x118>
                case 1:
                    if (!(SHOW_LOADING_WIDGET))
    1728:	80 91 02 04 	lds	r24, 0x0402	; 0x800402 <__data_end>
    172c:	81 11       	cpse	r24, r1
    172e:	09 c0       	rjmp	.+18     	; 0x1742 <main+0xa4>
                    {
                        display_set("REFILL RATE", "Updating...");
    1730:	66 e1       	ldi	r22, 0x16	; 22
    1732:	73 e0       	ldi	r23, 0x03	; 3
    1734:	84 ef       	ldi	r24, 0xF4	; 244
    1736:	91 e0       	ldi	r25, 0x01	; 1
    1738:	0e 94 cb 03 	call	0x796	; 0x796 <display_set>
                        SHOW_LOADING_WIDGET = 1;
    173c:	81 e0       	ldi	r24, 0x01	; 1
    173e:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <__data_end>
                    }
                    
                    current_refill_rate = get_refill_rate();
    1742:	0e 94 0b 05 	call	0xa16	; 0xa16 <get_refill_rate>
    1746:	60 93 0b 04 	sts	0x040B, r22	; 0x80040b <current_refill_rate>
    174a:	70 93 0c 04 	sts	0x040C, r23	; 0x80040c <current_refill_rate+0x1>
    174e:	80 93 0d 04 	sts	0x040D, r24	; 0x80040d <current_refill_rate+0x2>
    1752:	90 93 0e 04 	sts	0x040E, r25	; 0x80040e <current_refill_rate+0x3>
                    break;
    1756:	2f c0       	rjmp	.+94     	; 0x17b6 <main+0x118>
                case 2:
                    if (!(SHOW_LOADING_WIDGET))
    1758:	80 91 02 04 	lds	r24, 0x0402	; 0x800402 <__data_end>
    175c:	81 11       	cpse	r24, r1
    175e:	09 c0       	rjmp	.+18     	; 0x1772 <main+0xd4>
                    {
                        display_set("LEAK RATE", "Updating...");
    1760:	66 e1       	ldi	r22, 0x16	; 22
    1762:	73 e0       	ldi	r23, 0x03	; 3
    1764:	8b e4       	ldi	r24, 0x4B	; 75
    1766:	92 e0       	ldi	r25, 0x02	; 2
    1768:	0e 94 cb 03 	call	0x796	; 0x796 <display_set>
                        SHOW_LOADING_WIDGET = 1;
    176c:	81 e0       	ldi	r24, 0x01	; 1
    176e:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <__data_end>
                    }
                    
                    current_leak_rate = get_leak_rate();
    1772:	0e 94 7e 05 	call	0xafc	; 0xafc <get_leak_rate>
    1776:	60 93 07 04 	sts	0x0407, r22	; 0x800407 <current_leak_rate>
    177a:	70 93 08 04 	sts	0x0408, r23	; 0x800408 <current_leak_rate+0x1>
    177e:	80 93 09 04 	sts	0x0409, r24	; 0x800409 <current_leak_rate+0x2>
    1782:	90 93 0a 04 	sts	0x040A, r25	; 0x80040a <current_leak_rate+0x3>
                    break;
    1786:	17 c0       	rjmp	.+46     	; 0x17b6 <main+0x118>

                case 3:
                    if (!(SHOW_LOADING_WIDGET))
    1788:	80 91 02 04 	lds	r24, 0x0402	; 0x800402 <__data_end>
    178c:	81 11       	cpse	r24, r1
    178e:	09 c0       	rjmp	.+18     	; 0x17a2 <main+0x104>
                    {
                        display_set("SOIL TEMP", "Updating...");
    1790:	66 e1       	ldi	r22, 0x16	; 22
    1792:	73 e0       	ldi	r23, 0x03	; 3
    1794:	85 e5       	ldi	r24, 0x55	; 85
    1796:	92 e0       	ldi	r25, 0x02	; 2
    1798:	0e 94 cb 03 	call	0x796	; 0x796 <display_set>
                        SHOW_LOADING_WIDGET = 1;
    179c:	81 e0       	ldi	r24, 0x01	; 1
    179e:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <__data_end>
                    }
                    
                    current_soil_temperature = get_soil_temperature();
    17a2:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <get_soil_temperature>
    17a6:	60 93 03 04 	sts	0x0403, r22	; 0x800403 <current_soil_temperature>
    17aa:	70 93 04 04 	sts	0x0404, r23	; 0x800404 <current_soil_temperature+0x1>
    17ae:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <current_soil_temperature+0x2>
    17b2:	90 93 06 04 	sts	0x0406, r25	; 0x800406 <current_soil_temperature+0x3>
                    break;
            }
            LED_system_active_off();
    17b6:	0e 94 13 02 	call	0x426	; 0x426 <LED_system_active_off>

            ui_show_display();
    17ba:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <ui_show_display>
    17be:	2f ef       	ldi	r18, 0xFF	; 255
    17c0:	83 ed       	ldi	r24, 0xD3	; 211
    17c2:	90 e3       	ldi	r25, 0x30	; 48
    17c4:	21 50       	subi	r18, 0x01	; 1
    17c6:	80 40       	sbci	r24, 0x00	; 0
    17c8:	90 40       	sbci	r25, 0x00	; 0
    17ca:	e1 f7       	brne	.-8      	; 0x17c4 <main+0x126>
    17cc:	00 c0       	rjmp	.+0      	; 0x17ce <main+0x130>
    17ce:	00 00       	nop
            _delay_ms(1000);

            if ((pressed_key = KEYPAD_read()) != KEYPAD_NO_KEY)
    17d0:	0e 94 b9 03 	call	0x772	; 0x772 <KEYPAD_read>
    17d4:	c8 2f       	mov	r28, r24
    17d6:	85 30       	cpi	r24, 0x05	; 5
    17d8:	91 f0       	breq	.+36     	; 0x17fe <main+0x160>
            {
                if (pressed_key == 1)
    17da:	81 30       	cpi	r24, 0x01	; 1
    17dc:	51 f4       	brne	.+20     	; 0x17f2 <main+0x154>
                {
                    // exit live view on key 1 press
                    active_menu_index = -1;
    17de:	8f ef       	ldi	r24, 0xFF	; 255
    17e0:	9f ef       	ldi	r25, 0xFF	; 255
    17e2:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <active_menu_index+0x1>
    17e6:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <active_menu_index>
                    pressed_key = KEYPAD_NO_KEY;
                    SHOW_LOADING_WIDGET = 0;
    17ea:	10 92 02 04 	sts	0x0402, r1	; 0x800402 <__data_end>
            {
                if (pressed_key == 1)
                {
                    // exit live view on key 1 press
                    active_menu_index = -1;
                    pressed_key = KEYPAD_NO_KEY;
    17ee:	c5 e0       	ldi	r28, 0x05	; 5
                    SHOW_LOADING_WIDGET = 0;
                    break;
    17f0:	13 c0       	rjmp	.+38     	; 0x1818 <main+0x17a>
                }
                ui_process_key_command(pressed_key);
    17f2:	0e 94 72 08 	call	0x10e4	; 0x10e4 <ui_process_key_command>
                while (KEYPAD_read() != KEYPAD_NO_KEY); // wait until the key is released
    17f6:	0e 94 b9 03 	call	0x772	; 0x772 <KEYPAD_read>
    17fa:	85 30       	cpi	r24, 0x05	; 5
    17fc:	e1 f7       	brne	.-8      	; 0x17f6 <main+0x158>
        if (TIFR2 & (1<<TOV2)) {  // overflow flag set?
            TIFR2 |= (1<<TOV2);   // clear it
            PORTB ^= (1<<PB0);    // toggle LED
        }

        while (active_menu_index == 4 && active_live_view_index != -1)
    17fe:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <active_menu_index>
    1802:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <active_menu_index+0x1>
    1806:	04 97       	sbiw	r24, 0x04	; 4
    1808:	39 f4       	brne	.+14     	; 0x1818 <main+0x17a>
    180a:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <active_live_view_index>
    180e:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <active_live_view_index+0x1>
    1812:	01 96       	adiw	r24, 0x01	; 1
    1814:	09 f0       	breq	.+2      	; 0x1818 <main+0x17a>
    1816:	5c cf       	rjmp	.-328    	; 0x16d0 <main+0x32>
                while (KEYPAD_read() != KEYPAD_NO_KEY); // wait until the key is released
            }
        }
        

        ui_show_display();
    1818:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <ui_show_display>
    181c:	8f ef       	ldi	r24, 0xFF	; 255
    181e:	99 ef       	ldi	r25, 0xF9	; 249
    1820:	20 e0       	ldi	r18, 0x00	; 0
    1822:	81 50       	subi	r24, 0x01	; 1
    1824:	90 40       	sbci	r25, 0x00	; 0
    1826:	20 40       	sbci	r18, 0x00	; 0
    1828:	e1 f7       	brne	.-8      	; 0x1822 <main+0x184>
    182a:	00 c0       	rjmp	.+0      	; 0x182c <main+0x18e>
    182c:	00 00       	nop
        _delay_ms(20);

        if (pressed_key == KEYPAD_NO_KEY) {
    182e:	c5 30       	cpi	r28, 0x05	; 5
    1830:	29 f4       	brne	.+10     	; 0x183c <main+0x19e>
            while ((pressed_key = KEYPAD_read()) == KEYPAD_NO_KEY);
    1832:	0e 94 b9 03 	call	0x772	; 0x772 <KEYPAD_read>
    1836:	c8 2f       	mov	r28, r24
    1838:	85 30       	cpi	r24, 0x05	; 5
    183a:	d9 f3       	breq	.-10     	; 0x1832 <main+0x194>
    183c:	8f ef       	ldi	r24, 0xFF	; 255
    183e:	99 ef       	ldi	r25, 0xF9	; 249
    1840:	20 e0       	ldi	r18, 0x00	; 0
    1842:	81 50       	subi	r24, 0x01	; 1
    1844:	90 40       	sbci	r25, 0x00	; 0
    1846:	20 40       	sbci	r18, 0x00	; 0
    1848:	e1 f7       	brne	.-8      	; 0x1842 <main+0x1a4>
    184a:	00 c0       	rjmp	.+0      	; 0x184c <main+0x1ae>
    184c:	00 00       	nop
        }
        
        _delay_ms(20);
        if (KEYPAD_read() == pressed_key)
    184e:	0e 94 b9 03 	call	0x772	; 0x772 <KEYPAD_read>
    1852:	c8 13       	cpse	r28, r24
    1854:	32 cf       	rjmp	.-412    	; 0x16ba <main+0x1c>
        {
            ui_process_key_command(pressed_key);
    1856:	8c 2f       	mov	r24, r28
    1858:	0e 94 72 08 	call	0x10e4	; 0x10e4 <ui_process_key_command>
            while (KEYPAD_read() != KEYPAD_NO_KEY); // wait until the key is released
    185c:	0e 94 b9 03 	call	0x772	; 0x772 <KEYPAD_read>
    1860:	85 30       	cpi	r24, 0x05	; 5
    1862:	e1 f7       	brne	.-8      	; 0x185c <main+0x1be>
    1864:	2a cf       	rjmp	.-428    	; 0x16ba <main+0x1c>

00001866 <__subsf3>:
    1866:	50 58       	subi	r21, 0x80	; 128

00001868 <__addsf3>:
    1868:	bb 27       	eor	r27, r27
    186a:	aa 27       	eor	r26, r26
    186c:	0e 94 4b 0c 	call	0x1896	; 0x1896 <__addsf3x>
    1870:	0c 94 c5 0d 	jmp	0x1b8a	; 0x1b8a <__fp_round>
    1874:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <__fp_pscA>
    1878:	38 f0       	brcs	.+14     	; 0x1888 <__addsf3+0x20>
    187a:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <__fp_pscB>
    187e:	20 f0       	brcs	.+8      	; 0x1888 <__addsf3+0x20>
    1880:	39 f4       	brne	.+14     	; 0x1890 <__addsf3+0x28>
    1882:	9f 3f       	cpi	r25, 0xFF	; 255
    1884:	19 f4       	brne	.+6      	; 0x188c <__addsf3+0x24>
    1886:	26 f4       	brtc	.+8      	; 0x1890 <__addsf3+0x28>
    1888:	0c 94 b4 0d 	jmp	0x1b68	; 0x1b68 <__fp_nan>
    188c:	0e f4       	brtc	.+2      	; 0x1890 <__addsf3+0x28>
    188e:	e0 95       	com	r30
    1890:	e7 fb       	bst	r30, 7
    1892:	0c 94 ae 0d 	jmp	0x1b5c	; 0x1b5c <__fp_inf>

00001896 <__addsf3x>:
    1896:	e9 2f       	mov	r30, r25
    1898:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <__fp_split3>
    189c:	58 f3       	brcs	.-42     	; 0x1874 <__addsf3+0xc>
    189e:	ba 17       	cp	r27, r26
    18a0:	62 07       	cpc	r22, r18
    18a2:	73 07       	cpc	r23, r19
    18a4:	84 07       	cpc	r24, r20
    18a6:	95 07       	cpc	r25, r21
    18a8:	20 f0       	brcs	.+8      	; 0x18b2 <__addsf3x+0x1c>
    18aa:	79 f4       	brne	.+30     	; 0x18ca <__addsf3x+0x34>
    18ac:	a6 f5       	brtc	.+104    	; 0x1916 <__addsf3x+0x80>
    18ae:	0c 94 f8 0d 	jmp	0x1bf0	; 0x1bf0 <__fp_zero>
    18b2:	0e f4       	brtc	.+2      	; 0x18b6 <__addsf3x+0x20>
    18b4:	e0 95       	com	r30
    18b6:	0b 2e       	mov	r0, r27
    18b8:	ba 2f       	mov	r27, r26
    18ba:	a0 2d       	mov	r26, r0
    18bc:	0b 01       	movw	r0, r22
    18be:	b9 01       	movw	r22, r18
    18c0:	90 01       	movw	r18, r0
    18c2:	0c 01       	movw	r0, r24
    18c4:	ca 01       	movw	r24, r20
    18c6:	a0 01       	movw	r20, r0
    18c8:	11 24       	eor	r1, r1
    18ca:	ff 27       	eor	r31, r31
    18cc:	59 1b       	sub	r21, r25
    18ce:	99 f0       	breq	.+38     	; 0x18f6 <__addsf3x+0x60>
    18d0:	59 3f       	cpi	r21, 0xF9	; 249
    18d2:	50 f4       	brcc	.+20     	; 0x18e8 <__addsf3x+0x52>
    18d4:	50 3e       	cpi	r21, 0xE0	; 224
    18d6:	68 f1       	brcs	.+90     	; 0x1932 <__addsf3x+0x9c>
    18d8:	1a 16       	cp	r1, r26
    18da:	f0 40       	sbci	r31, 0x00	; 0
    18dc:	a2 2f       	mov	r26, r18
    18de:	23 2f       	mov	r18, r19
    18e0:	34 2f       	mov	r19, r20
    18e2:	44 27       	eor	r20, r20
    18e4:	58 5f       	subi	r21, 0xF8	; 248
    18e6:	f3 cf       	rjmp	.-26     	; 0x18ce <__addsf3x+0x38>
    18e8:	46 95       	lsr	r20
    18ea:	37 95       	ror	r19
    18ec:	27 95       	ror	r18
    18ee:	a7 95       	ror	r26
    18f0:	f0 40       	sbci	r31, 0x00	; 0
    18f2:	53 95       	inc	r21
    18f4:	c9 f7       	brne	.-14     	; 0x18e8 <__addsf3x+0x52>
    18f6:	7e f4       	brtc	.+30     	; 0x1916 <__addsf3x+0x80>
    18f8:	1f 16       	cp	r1, r31
    18fa:	ba 0b       	sbc	r27, r26
    18fc:	62 0b       	sbc	r22, r18
    18fe:	73 0b       	sbc	r23, r19
    1900:	84 0b       	sbc	r24, r20
    1902:	ba f0       	brmi	.+46     	; 0x1932 <__addsf3x+0x9c>
    1904:	91 50       	subi	r25, 0x01	; 1
    1906:	a1 f0       	breq	.+40     	; 0x1930 <__addsf3x+0x9a>
    1908:	ff 0f       	add	r31, r31
    190a:	bb 1f       	adc	r27, r27
    190c:	66 1f       	adc	r22, r22
    190e:	77 1f       	adc	r23, r23
    1910:	88 1f       	adc	r24, r24
    1912:	c2 f7       	brpl	.-16     	; 0x1904 <__addsf3x+0x6e>
    1914:	0e c0       	rjmp	.+28     	; 0x1932 <__addsf3x+0x9c>
    1916:	ba 0f       	add	r27, r26
    1918:	62 1f       	adc	r22, r18
    191a:	73 1f       	adc	r23, r19
    191c:	84 1f       	adc	r24, r20
    191e:	48 f4       	brcc	.+18     	; 0x1932 <__addsf3x+0x9c>
    1920:	87 95       	ror	r24
    1922:	77 95       	ror	r23
    1924:	67 95       	ror	r22
    1926:	b7 95       	ror	r27
    1928:	f7 95       	ror	r31
    192a:	9e 3f       	cpi	r25, 0xFE	; 254
    192c:	08 f0       	brcs	.+2      	; 0x1930 <__addsf3x+0x9a>
    192e:	b0 cf       	rjmp	.-160    	; 0x1890 <__addsf3+0x28>
    1930:	93 95       	inc	r25
    1932:	88 0f       	add	r24, r24
    1934:	08 f0       	brcs	.+2      	; 0x1938 <__addsf3x+0xa2>
    1936:	99 27       	eor	r25, r25
    1938:	ee 0f       	add	r30, r30
    193a:	97 95       	ror	r25
    193c:	87 95       	ror	r24
    193e:	08 95       	ret

00001940 <__cmpsf2>:
    1940:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <__fp_cmp>
    1944:	08 f4       	brcc	.+2      	; 0x1948 <__cmpsf2+0x8>
    1946:	81 e0       	ldi	r24, 0x01	; 1
    1948:	08 95       	ret

0000194a <__divsf3>:
    194a:	0e 94 b9 0c 	call	0x1972	; 0x1972 <__divsf3x>
    194e:	0c 94 c5 0d 	jmp	0x1b8a	; 0x1b8a <__fp_round>
    1952:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <__fp_pscB>
    1956:	58 f0       	brcs	.+22     	; 0x196e <__divsf3+0x24>
    1958:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <__fp_pscA>
    195c:	40 f0       	brcs	.+16     	; 0x196e <__divsf3+0x24>
    195e:	29 f4       	brne	.+10     	; 0x196a <__divsf3+0x20>
    1960:	5f 3f       	cpi	r21, 0xFF	; 255
    1962:	29 f0       	breq	.+10     	; 0x196e <__divsf3+0x24>
    1964:	0c 94 ae 0d 	jmp	0x1b5c	; 0x1b5c <__fp_inf>
    1968:	51 11       	cpse	r21, r1
    196a:	0c 94 f9 0d 	jmp	0x1bf2	; 0x1bf2 <__fp_szero>
    196e:	0c 94 b4 0d 	jmp	0x1b68	; 0x1b68 <__fp_nan>

00001972 <__divsf3x>:
    1972:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <__fp_split3>
    1976:	68 f3       	brcs	.-38     	; 0x1952 <__divsf3+0x8>

00001978 <__divsf3_pse>:
    1978:	99 23       	and	r25, r25
    197a:	b1 f3       	breq	.-20     	; 0x1968 <__divsf3+0x1e>
    197c:	55 23       	and	r21, r21
    197e:	91 f3       	breq	.-28     	; 0x1964 <__divsf3+0x1a>
    1980:	95 1b       	sub	r25, r21
    1982:	55 0b       	sbc	r21, r21
    1984:	bb 27       	eor	r27, r27
    1986:	aa 27       	eor	r26, r26
    1988:	62 17       	cp	r22, r18
    198a:	73 07       	cpc	r23, r19
    198c:	84 07       	cpc	r24, r20
    198e:	38 f0       	brcs	.+14     	; 0x199e <__divsf3_pse+0x26>
    1990:	9f 5f       	subi	r25, 0xFF	; 255
    1992:	5f 4f       	sbci	r21, 0xFF	; 255
    1994:	22 0f       	add	r18, r18
    1996:	33 1f       	adc	r19, r19
    1998:	44 1f       	adc	r20, r20
    199a:	aa 1f       	adc	r26, r26
    199c:	a9 f3       	breq	.-22     	; 0x1988 <__divsf3_pse+0x10>
    199e:	35 d0       	rcall	.+106    	; 0x1a0a <__divsf3_pse+0x92>
    19a0:	0e 2e       	mov	r0, r30
    19a2:	3a f0       	brmi	.+14     	; 0x19b2 <__divsf3_pse+0x3a>
    19a4:	e0 e8       	ldi	r30, 0x80	; 128
    19a6:	32 d0       	rcall	.+100    	; 0x1a0c <__divsf3_pse+0x94>
    19a8:	91 50       	subi	r25, 0x01	; 1
    19aa:	50 40       	sbci	r21, 0x00	; 0
    19ac:	e6 95       	lsr	r30
    19ae:	00 1c       	adc	r0, r0
    19b0:	ca f7       	brpl	.-14     	; 0x19a4 <__divsf3_pse+0x2c>
    19b2:	2b d0       	rcall	.+86     	; 0x1a0a <__divsf3_pse+0x92>
    19b4:	fe 2f       	mov	r31, r30
    19b6:	29 d0       	rcall	.+82     	; 0x1a0a <__divsf3_pse+0x92>
    19b8:	66 0f       	add	r22, r22
    19ba:	77 1f       	adc	r23, r23
    19bc:	88 1f       	adc	r24, r24
    19be:	bb 1f       	adc	r27, r27
    19c0:	26 17       	cp	r18, r22
    19c2:	37 07       	cpc	r19, r23
    19c4:	48 07       	cpc	r20, r24
    19c6:	ab 07       	cpc	r26, r27
    19c8:	b0 e8       	ldi	r27, 0x80	; 128
    19ca:	09 f0       	breq	.+2      	; 0x19ce <__divsf3_pse+0x56>
    19cc:	bb 0b       	sbc	r27, r27
    19ce:	80 2d       	mov	r24, r0
    19d0:	bf 01       	movw	r22, r30
    19d2:	ff 27       	eor	r31, r31
    19d4:	93 58       	subi	r25, 0x83	; 131
    19d6:	5f 4f       	sbci	r21, 0xFF	; 255
    19d8:	3a f0       	brmi	.+14     	; 0x19e8 <__divsf3_pse+0x70>
    19da:	9e 3f       	cpi	r25, 0xFE	; 254
    19dc:	51 05       	cpc	r21, r1
    19de:	78 f0       	brcs	.+30     	; 0x19fe <__divsf3_pse+0x86>
    19e0:	0c 94 ae 0d 	jmp	0x1b5c	; 0x1b5c <__fp_inf>
    19e4:	0c 94 f9 0d 	jmp	0x1bf2	; 0x1bf2 <__fp_szero>
    19e8:	5f 3f       	cpi	r21, 0xFF	; 255
    19ea:	e4 f3       	brlt	.-8      	; 0x19e4 <__divsf3_pse+0x6c>
    19ec:	98 3e       	cpi	r25, 0xE8	; 232
    19ee:	d4 f3       	brlt	.-12     	; 0x19e4 <__divsf3_pse+0x6c>
    19f0:	86 95       	lsr	r24
    19f2:	77 95       	ror	r23
    19f4:	67 95       	ror	r22
    19f6:	b7 95       	ror	r27
    19f8:	f7 95       	ror	r31
    19fa:	9f 5f       	subi	r25, 0xFF	; 255
    19fc:	c9 f7       	brne	.-14     	; 0x19f0 <__divsf3_pse+0x78>
    19fe:	88 0f       	add	r24, r24
    1a00:	91 1d       	adc	r25, r1
    1a02:	96 95       	lsr	r25
    1a04:	87 95       	ror	r24
    1a06:	97 f9       	bld	r25, 7
    1a08:	08 95       	ret
    1a0a:	e1 e0       	ldi	r30, 0x01	; 1
    1a0c:	66 0f       	add	r22, r22
    1a0e:	77 1f       	adc	r23, r23
    1a10:	88 1f       	adc	r24, r24
    1a12:	bb 1f       	adc	r27, r27
    1a14:	62 17       	cp	r22, r18
    1a16:	73 07       	cpc	r23, r19
    1a18:	84 07       	cpc	r24, r20
    1a1a:	ba 07       	cpc	r27, r26
    1a1c:	20 f0       	brcs	.+8      	; 0x1a26 <__divsf3_pse+0xae>
    1a1e:	62 1b       	sub	r22, r18
    1a20:	73 0b       	sbc	r23, r19
    1a22:	84 0b       	sbc	r24, r20
    1a24:	ba 0b       	sbc	r27, r26
    1a26:	ee 1f       	adc	r30, r30
    1a28:	88 f7       	brcc	.-30     	; 0x1a0c <__divsf3_pse+0x94>
    1a2a:	e0 95       	com	r30
    1a2c:	08 95       	ret

00001a2e <__fixsfsi>:
    1a2e:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <__fixunssfsi>
    1a32:	68 94       	set
    1a34:	b1 11       	cpse	r27, r1
    1a36:	0c 94 f9 0d 	jmp	0x1bf2	; 0x1bf2 <__fp_szero>
    1a3a:	08 95       	ret

00001a3c <__fixunssfsi>:
    1a3c:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <__fp_splitA>
    1a40:	88 f0       	brcs	.+34     	; 0x1a64 <__fixunssfsi+0x28>
    1a42:	9f 57       	subi	r25, 0x7F	; 127
    1a44:	98 f0       	brcs	.+38     	; 0x1a6c <__fixunssfsi+0x30>
    1a46:	b9 2f       	mov	r27, r25
    1a48:	99 27       	eor	r25, r25
    1a4a:	b7 51       	subi	r27, 0x17	; 23
    1a4c:	b0 f0       	brcs	.+44     	; 0x1a7a <__fixunssfsi+0x3e>
    1a4e:	e1 f0       	breq	.+56     	; 0x1a88 <__fixunssfsi+0x4c>
    1a50:	66 0f       	add	r22, r22
    1a52:	77 1f       	adc	r23, r23
    1a54:	88 1f       	adc	r24, r24
    1a56:	99 1f       	adc	r25, r25
    1a58:	1a f0       	brmi	.+6      	; 0x1a60 <__fixunssfsi+0x24>
    1a5a:	ba 95       	dec	r27
    1a5c:	c9 f7       	brne	.-14     	; 0x1a50 <__fixunssfsi+0x14>
    1a5e:	14 c0       	rjmp	.+40     	; 0x1a88 <__fixunssfsi+0x4c>
    1a60:	b1 30       	cpi	r27, 0x01	; 1
    1a62:	91 f0       	breq	.+36     	; 0x1a88 <__fixunssfsi+0x4c>
    1a64:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <__fp_zero>
    1a68:	b1 e0       	ldi	r27, 0x01	; 1
    1a6a:	08 95       	ret
    1a6c:	0c 94 f8 0d 	jmp	0x1bf0	; 0x1bf0 <__fp_zero>
    1a70:	67 2f       	mov	r22, r23
    1a72:	78 2f       	mov	r23, r24
    1a74:	88 27       	eor	r24, r24
    1a76:	b8 5f       	subi	r27, 0xF8	; 248
    1a78:	39 f0       	breq	.+14     	; 0x1a88 <__fixunssfsi+0x4c>
    1a7a:	b9 3f       	cpi	r27, 0xF9	; 249
    1a7c:	cc f3       	brlt	.-14     	; 0x1a70 <__fixunssfsi+0x34>
    1a7e:	86 95       	lsr	r24
    1a80:	77 95       	ror	r23
    1a82:	67 95       	ror	r22
    1a84:	b3 95       	inc	r27
    1a86:	d9 f7       	brne	.-10     	; 0x1a7e <__fixunssfsi+0x42>
    1a88:	3e f4       	brtc	.+14     	; 0x1a98 <__fixunssfsi+0x5c>
    1a8a:	90 95       	com	r25
    1a8c:	80 95       	com	r24
    1a8e:	70 95       	com	r23
    1a90:	61 95       	neg	r22
    1a92:	7f 4f       	sbci	r23, 0xFF	; 255
    1a94:	8f 4f       	sbci	r24, 0xFF	; 255
    1a96:	9f 4f       	sbci	r25, 0xFF	; 255
    1a98:	08 95       	ret

00001a9a <__floatunsisf>:
    1a9a:	e8 94       	clt
    1a9c:	09 c0       	rjmp	.+18     	; 0x1ab0 <__floatsisf+0x12>

00001a9e <__floatsisf>:
    1a9e:	97 fb       	bst	r25, 7
    1aa0:	3e f4       	brtc	.+14     	; 0x1ab0 <__floatsisf+0x12>
    1aa2:	90 95       	com	r25
    1aa4:	80 95       	com	r24
    1aa6:	70 95       	com	r23
    1aa8:	61 95       	neg	r22
    1aaa:	7f 4f       	sbci	r23, 0xFF	; 255
    1aac:	8f 4f       	sbci	r24, 0xFF	; 255
    1aae:	9f 4f       	sbci	r25, 0xFF	; 255
    1ab0:	99 23       	and	r25, r25
    1ab2:	a9 f0       	breq	.+42     	; 0x1ade <__floatsisf+0x40>
    1ab4:	f9 2f       	mov	r31, r25
    1ab6:	96 e9       	ldi	r25, 0x96	; 150
    1ab8:	bb 27       	eor	r27, r27
    1aba:	93 95       	inc	r25
    1abc:	f6 95       	lsr	r31
    1abe:	87 95       	ror	r24
    1ac0:	77 95       	ror	r23
    1ac2:	67 95       	ror	r22
    1ac4:	b7 95       	ror	r27
    1ac6:	f1 11       	cpse	r31, r1
    1ac8:	f8 cf       	rjmp	.-16     	; 0x1aba <__floatsisf+0x1c>
    1aca:	fa f4       	brpl	.+62     	; 0x1b0a <__floatsisf+0x6c>
    1acc:	bb 0f       	add	r27, r27
    1ace:	11 f4       	brne	.+4      	; 0x1ad4 <__floatsisf+0x36>
    1ad0:	60 ff       	sbrs	r22, 0
    1ad2:	1b c0       	rjmp	.+54     	; 0x1b0a <__floatsisf+0x6c>
    1ad4:	6f 5f       	subi	r22, 0xFF	; 255
    1ad6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ad8:	8f 4f       	sbci	r24, 0xFF	; 255
    1ada:	9f 4f       	sbci	r25, 0xFF	; 255
    1adc:	16 c0       	rjmp	.+44     	; 0x1b0a <__floatsisf+0x6c>
    1ade:	88 23       	and	r24, r24
    1ae0:	11 f0       	breq	.+4      	; 0x1ae6 <__floatsisf+0x48>
    1ae2:	96 e9       	ldi	r25, 0x96	; 150
    1ae4:	11 c0       	rjmp	.+34     	; 0x1b08 <__floatsisf+0x6a>
    1ae6:	77 23       	and	r23, r23
    1ae8:	21 f0       	breq	.+8      	; 0x1af2 <__floatsisf+0x54>
    1aea:	9e e8       	ldi	r25, 0x8E	; 142
    1aec:	87 2f       	mov	r24, r23
    1aee:	76 2f       	mov	r23, r22
    1af0:	05 c0       	rjmp	.+10     	; 0x1afc <__floatsisf+0x5e>
    1af2:	66 23       	and	r22, r22
    1af4:	71 f0       	breq	.+28     	; 0x1b12 <__floatsisf+0x74>
    1af6:	96 e8       	ldi	r25, 0x86	; 134
    1af8:	86 2f       	mov	r24, r22
    1afa:	70 e0       	ldi	r23, 0x00	; 0
    1afc:	60 e0       	ldi	r22, 0x00	; 0
    1afe:	2a f0       	brmi	.+10     	; 0x1b0a <__floatsisf+0x6c>
    1b00:	9a 95       	dec	r25
    1b02:	66 0f       	add	r22, r22
    1b04:	77 1f       	adc	r23, r23
    1b06:	88 1f       	adc	r24, r24
    1b08:	da f7       	brpl	.-10     	; 0x1b00 <__floatsisf+0x62>
    1b0a:	88 0f       	add	r24, r24
    1b0c:	96 95       	lsr	r25
    1b0e:	87 95       	ror	r24
    1b10:	97 f9       	bld	r25, 7
    1b12:	08 95       	ret

00001b14 <__fp_cmp>:
    1b14:	99 0f       	add	r25, r25
    1b16:	00 08       	sbc	r0, r0
    1b18:	55 0f       	add	r21, r21
    1b1a:	aa 0b       	sbc	r26, r26
    1b1c:	e0 e8       	ldi	r30, 0x80	; 128
    1b1e:	fe ef       	ldi	r31, 0xFE	; 254
    1b20:	16 16       	cp	r1, r22
    1b22:	17 06       	cpc	r1, r23
    1b24:	e8 07       	cpc	r30, r24
    1b26:	f9 07       	cpc	r31, r25
    1b28:	c0 f0       	brcs	.+48     	; 0x1b5a <__fp_cmp+0x46>
    1b2a:	12 16       	cp	r1, r18
    1b2c:	13 06       	cpc	r1, r19
    1b2e:	e4 07       	cpc	r30, r20
    1b30:	f5 07       	cpc	r31, r21
    1b32:	98 f0       	brcs	.+38     	; 0x1b5a <__fp_cmp+0x46>
    1b34:	62 1b       	sub	r22, r18
    1b36:	73 0b       	sbc	r23, r19
    1b38:	84 0b       	sbc	r24, r20
    1b3a:	95 0b       	sbc	r25, r21
    1b3c:	39 f4       	brne	.+14     	; 0x1b4c <__fp_cmp+0x38>
    1b3e:	0a 26       	eor	r0, r26
    1b40:	61 f0       	breq	.+24     	; 0x1b5a <__fp_cmp+0x46>
    1b42:	23 2b       	or	r18, r19
    1b44:	24 2b       	or	r18, r20
    1b46:	25 2b       	or	r18, r21
    1b48:	21 f4       	brne	.+8      	; 0x1b52 <__fp_cmp+0x3e>
    1b4a:	08 95       	ret
    1b4c:	0a 26       	eor	r0, r26
    1b4e:	09 f4       	brne	.+2      	; 0x1b52 <__fp_cmp+0x3e>
    1b50:	a1 40       	sbci	r26, 0x01	; 1
    1b52:	a6 95       	lsr	r26
    1b54:	8f ef       	ldi	r24, 0xFF	; 255
    1b56:	81 1d       	adc	r24, r1
    1b58:	81 1d       	adc	r24, r1
    1b5a:	08 95       	ret

00001b5c <__fp_inf>:
    1b5c:	97 f9       	bld	r25, 7
    1b5e:	9f 67       	ori	r25, 0x7F	; 127
    1b60:	80 e8       	ldi	r24, 0x80	; 128
    1b62:	70 e0       	ldi	r23, 0x00	; 0
    1b64:	60 e0       	ldi	r22, 0x00	; 0
    1b66:	08 95       	ret

00001b68 <__fp_nan>:
    1b68:	9f ef       	ldi	r25, 0xFF	; 255
    1b6a:	80 ec       	ldi	r24, 0xC0	; 192
    1b6c:	08 95       	ret

00001b6e <__fp_pscA>:
    1b6e:	00 24       	eor	r0, r0
    1b70:	0a 94       	dec	r0
    1b72:	16 16       	cp	r1, r22
    1b74:	17 06       	cpc	r1, r23
    1b76:	18 06       	cpc	r1, r24
    1b78:	09 06       	cpc	r0, r25
    1b7a:	08 95       	ret

00001b7c <__fp_pscB>:
    1b7c:	00 24       	eor	r0, r0
    1b7e:	0a 94       	dec	r0
    1b80:	12 16       	cp	r1, r18
    1b82:	13 06       	cpc	r1, r19
    1b84:	14 06       	cpc	r1, r20
    1b86:	05 06       	cpc	r0, r21
    1b88:	08 95       	ret

00001b8a <__fp_round>:
    1b8a:	09 2e       	mov	r0, r25
    1b8c:	03 94       	inc	r0
    1b8e:	00 0c       	add	r0, r0
    1b90:	11 f4       	brne	.+4      	; 0x1b96 <__fp_round+0xc>
    1b92:	88 23       	and	r24, r24
    1b94:	52 f0       	brmi	.+20     	; 0x1baa <__fp_round+0x20>
    1b96:	bb 0f       	add	r27, r27
    1b98:	40 f4       	brcc	.+16     	; 0x1baa <__fp_round+0x20>
    1b9a:	bf 2b       	or	r27, r31
    1b9c:	11 f4       	brne	.+4      	; 0x1ba2 <__fp_round+0x18>
    1b9e:	60 ff       	sbrs	r22, 0
    1ba0:	04 c0       	rjmp	.+8      	; 0x1baa <__fp_round+0x20>
    1ba2:	6f 5f       	subi	r22, 0xFF	; 255
    1ba4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ba6:	8f 4f       	sbci	r24, 0xFF	; 255
    1ba8:	9f 4f       	sbci	r25, 0xFF	; 255
    1baa:	08 95       	ret

00001bac <__fp_split3>:
    1bac:	57 fd       	sbrc	r21, 7
    1bae:	90 58       	subi	r25, 0x80	; 128
    1bb0:	44 0f       	add	r20, r20
    1bb2:	55 1f       	adc	r21, r21
    1bb4:	59 f0       	breq	.+22     	; 0x1bcc <__fp_splitA+0x10>
    1bb6:	5f 3f       	cpi	r21, 0xFF	; 255
    1bb8:	71 f0       	breq	.+28     	; 0x1bd6 <__fp_splitA+0x1a>
    1bba:	47 95       	ror	r20

00001bbc <__fp_splitA>:
    1bbc:	88 0f       	add	r24, r24
    1bbe:	97 fb       	bst	r25, 7
    1bc0:	99 1f       	adc	r25, r25
    1bc2:	61 f0       	breq	.+24     	; 0x1bdc <__fp_splitA+0x20>
    1bc4:	9f 3f       	cpi	r25, 0xFF	; 255
    1bc6:	79 f0       	breq	.+30     	; 0x1be6 <__fp_splitA+0x2a>
    1bc8:	87 95       	ror	r24
    1bca:	08 95       	ret
    1bcc:	12 16       	cp	r1, r18
    1bce:	13 06       	cpc	r1, r19
    1bd0:	14 06       	cpc	r1, r20
    1bd2:	55 1f       	adc	r21, r21
    1bd4:	f2 cf       	rjmp	.-28     	; 0x1bba <__fp_split3+0xe>
    1bd6:	46 95       	lsr	r20
    1bd8:	f1 df       	rcall	.-30     	; 0x1bbc <__fp_splitA>
    1bda:	08 c0       	rjmp	.+16     	; 0x1bec <__fp_splitA+0x30>
    1bdc:	16 16       	cp	r1, r22
    1bde:	17 06       	cpc	r1, r23
    1be0:	18 06       	cpc	r1, r24
    1be2:	99 1f       	adc	r25, r25
    1be4:	f1 cf       	rjmp	.-30     	; 0x1bc8 <__fp_splitA+0xc>
    1be6:	86 95       	lsr	r24
    1be8:	71 05       	cpc	r23, r1
    1bea:	61 05       	cpc	r22, r1
    1bec:	08 94       	sec
    1bee:	08 95       	ret

00001bf0 <__fp_zero>:
    1bf0:	e8 94       	clt

00001bf2 <__fp_szero>:
    1bf2:	bb 27       	eor	r27, r27
    1bf4:	66 27       	eor	r22, r22
    1bf6:	77 27       	eor	r23, r23
    1bf8:	cb 01       	movw	r24, r22
    1bfa:	97 f9       	bld	r25, 7
    1bfc:	08 95       	ret

00001bfe <__gesf2>:
    1bfe:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <__fp_cmp>
    1c02:	08 f4       	brcc	.+2      	; 0x1c06 <__gesf2+0x8>
    1c04:	8f ef       	ldi	r24, 0xFF	; 255
    1c06:	08 95       	ret

00001c08 <__mulsf3>:
    1c08:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <__mulsf3x>
    1c0c:	0c 94 c5 0d 	jmp	0x1b8a	; 0x1b8a <__fp_round>
    1c10:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <__fp_pscA>
    1c14:	38 f0       	brcs	.+14     	; 0x1c24 <__mulsf3+0x1c>
    1c16:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <__fp_pscB>
    1c1a:	20 f0       	brcs	.+8      	; 0x1c24 <__mulsf3+0x1c>
    1c1c:	95 23       	and	r25, r21
    1c1e:	11 f0       	breq	.+4      	; 0x1c24 <__mulsf3+0x1c>
    1c20:	0c 94 ae 0d 	jmp	0x1b5c	; 0x1b5c <__fp_inf>
    1c24:	0c 94 b4 0d 	jmp	0x1b68	; 0x1b68 <__fp_nan>
    1c28:	11 24       	eor	r1, r1
    1c2a:	0c 94 f9 0d 	jmp	0x1bf2	; 0x1bf2 <__fp_szero>

00001c2e <__mulsf3x>:
    1c2e:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <__fp_split3>
    1c32:	70 f3       	brcs	.-36     	; 0x1c10 <__mulsf3+0x8>

00001c34 <__mulsf3_pse>:
    1c34:	95 9f       	mul	r25, r21
    1c36:	c1 f3       	breq	.-16     	; 0x1c28 <__mulsf3+0x20>
    1c38:	95 0f       	add	r25, r21
    1c3a:	50 e0       	ldi	r21, 0x00	; 0
    1c3c:	55 1f       	adc	r21, r21
    1c3e:	62 9f       	mul	r22, r18
    1c40:	f0 01       	movw	r30, r0
    1c42:	72 9f       	mul	r23, r18
    1c44:	bb 27       	eor	r27, r27
    1c46:	f0 0d       	add	r31, r0
    1c48:	b1 1d       	adc	r27, r1
    1c4a:	63 9f       	mul	r22, r19
    1c4c:	aa 27       	eor	r26, r26
    1c4e:	f0 0d       	add	r31, r0
    1c50:	b1 1d       	adc	r27, r1
    1c52:	aa 1f       	adc	r26, r26
    1c54:	64 9f       	mul	r22, r20
    1c56:	66 27       	eor	r22, r22
    1c58:	b0 0d       	add	r27, r0
    1c5a:	a1 1d       	adc	r26, r1
    1c5c:	66 1f       	adc	r22, r22
    1c5e:	82 9f       	mul	r24, r18
    1c60:	22 27       	eor	r18, r18
    1c62:	b0 0d       	add	r27, r0
    1c64:	a1 1d       	adc	r26, r1
    1c66:	62 1f       	adc	r22, r18
    1c68:	73 9f       	mul	r23, r19
    1c6a:	b0 0d       	add	r27, r0
    1c6c:	a1 1d       	adc	r26, r1
    1c6e:	62 1f       	adc	r22, r18
    1c70:	83 9f       	mul	r24, r19
    1c72:	a0 0d       	add	r26, r0
    1c74:	61 1d       	adc	r22, r1
    1c76:	22 1f       	adc	r18, r18
    1c78:	74 9f       	mul	r23, r20
    1c7a:	33 27       	eor	r19, r19
    1c7c:	a0 0d       	add	r26, r0
    1c7e:	61 1d       	adc	r22, r1
    1c80:	23 1f       	adc	r18, r19
    1c82:	84 9f       	mul	r24, r20
    1c84:	60 0d       	add	r22, r0
    1c86:	21 1d       	adc	r18, r1
    1c88:	82 2f       	mov	r24, r18
    1c8a:	76 2f       	mov	r23, r22
    1c8c:	6a 2f       	mov	r22, r26
    1c8e:	11 24       	eor	r1, r1
    1c90:	9f 57       	subi	r25, 0x7F	; 127
    1c92:	50 40       	sbci	r21, 0x00	; 0
    1c94:	9a f0       	brmi	.+38     	; 0x1cbc <__mulsf3_pse+0x88>
    1c96:	f1 f0       	breq	.+60     	; 0x1cd4 <__mulsf3_pse+0xa0>
    1c98:	88 23       	and	r24, r24
    1c9a:	4a f0       	brmi	.+18     	; 0x1cae <__mulsf3_pse+0x7a>
    1c9c:	ee 0f       	add	r30, r30
    1c9e:	ff 1f       	adc	r31, r31
    1ca0:	bb 1f       	adc	r27, r27
    1ca2:	66 1f       	adc	r22, r22
    1ca4:	77 1f       	adc	r23, r23
    1ca6:	88 1f       	adc	r24, r24
    1ca8:	91 50       	subi	r25, 0x01	; 1
    1caa:	50 40       	sbci	r21, 0x00	; 0
    1cac:	a9 f7       	brne	.-22     	; 0x1c98 <__mulsf3_pse+0x64>
    1cae:	9e 3f       	cpi	r25, 0xFE	; 254
    1cb0:	51 05       	cpc	r21, r1
    1cb2:	80 f0       	brcs	.+32     	; 0x1cd4 <__mulsf3_pse+0xa0>
    1cb4:	0c 94 ae 0d 	jmp	0x1b5c	; 0x1b5c <__fp_inf>
    1cb8:	0c 94 f9 0d 	jmp	0x1bf2	; 0x1bf2 <__fp_szero>
    1cbc:	5f 3f       	cpi	r21, 0xFF	; 255
    1cbe:	e4 f3       	brlt	.-8      	; 0x1cb8 <__mulsf3_pse+0x84>
    1cc0:	98 3e       	cpi	r25, 0xE8	; 232
    1cc2:	d4 f3       	brlt	.-12     	; 0x1cb8 <__mulsf3_pse+0x84>
    1cc4:	86 95       	lsr	r24
    1cc6:	77 95       	ror	r23
    1cc8:	67 95       	ror	r22
    1cca:	b7 95       	ror	r27
    1ccc:	f7 95       	ror	r31
    1cce:	e7 95       	ror	r30
    1cd0:	9f 5f       	subi	r25, 0xFF	; 255
    1cd2:	c1 f7       	brne	.-16     	; 0x1cc4 <__mulsf3_pse+0x90>
    1cd4:	fe 2b       	or	r31, r30
    1cd6:	88 0f       	add	r24, r24
    1cd8:	91 1d       	adc	r25, r1
    1cda:	96 95       	lsr	r25
    1cdc:	87 95       	ror	r24
    1cde:	97 f9       	bld	r25, 7
    1ce0:	08 95       	ret

00001ce2 <__divmodhi4>:
    1ce2:	97 fb       	bst	r25, 7
    1ce4:	07 2e       	mov	r0, r23
    1ce6:	16 f4       	brtc	.+4      	; 0x1cec <__divmodhi4+0xa>
    1ce8:	00 94       	com	r0
    1cea:	07 d0       	rcall	.+14     	; 0x1cfa <__divmodhi4_neg1>
    1cec:	77 fd       	sbrc	r23, 7
    1cee:	09 d0       	rcall	.+18     	; 0x1d02 <__divmodhi4_neg2>
    1cf0:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <__udivmodhi4>
    1cf4:	07 fc       	sbrc	r0, 7
    1cf6:	05 d0       	rcall	.+10     	; 0x1d02 <__divmodhi4_neg2>
    1cf8:	3e f4       	brtc	.+14     	; 0x1d08 <__divmodhi4_exit>

00001cfa <__divmodhi4_neg1>:
    1cfa:	90 95       	com	r25
    1cfc:	81 95       	neg	r24
    1cfe:	9f 4f       	sbci	r25, 0xFF	; 255
    1d00:	08 95       	ret

00001d02 <__divmodhi4_neg2>:
    1d02:	70 95       	com	r23
    1d04:	61 95       	neg	r22
    1d06:	7f 4f       	sbci	r23, 0xFF	; 255

00001d08 <__divmodhi4_exit>:
    1d08:	08 95       	ret

00001d0a <__tablejump2__>:
    1d0a:	ee 0f       	add	r30, r30
    1d0c:	ff 1f       	adc	r31, r31
    1d0e:	05 90       	lpm	r0, Z+
    1d10:	f4 91       	lpm	r31, Z
    1d12:	e0 2d       	mov	r30, r0
    1d14:	09 94       	ijmp

00001d16 <__udivmodhi4>:
    1d16:	aa 1b       	sub	r26, r26
    1d18:	bb 1b       	sub	r27, r27
    1d1a:	51 e1       	ldi	r21, 0x11	; 17
    1d1c:	07 c0       	rjmp	.+14     	; 0x1d2c <__udivmodhi4_ep>

00001d1e <__udivmodhi4_loop>:
    1d1e:	aa 1f       	adc	r26, r26
    1d20:	bb 1f       	adc	r27, r27
    1d22:	a6 17       	cp	r26, r22
    1d24:	b7 07       	cpc	r27, r23
    1d26:	10 f0       	brcs	.+4      	; 0x1d2c <__udivmodhi4_ep>
    1d28:	a6 1b       	sub	r26, r22
    1d2a:	b7 0b       	sbc	r27, r23

00001d2c <__udivmodhi4_ep>:
    1d2c:	88 1f       	adc	r24, r24
    1d2e:	99 1f       	adc	r25, r25
    1d30:	5a 95       	dec	r21
    1d32:	a9 f7       	brne	.-22     	; 0x1d1e <__udivmodhi4_loop>
    1d34:	80 95       	com	r24
    1d36:	90 95       	com	r25
    1d38:	bc 01       	movw	r22, r24
    1d3a:	cd 01       	movw	r24, r26
    1d3c:	08 95       	ret

00001d3e <dtostrf>:
    1d3e:	ef 92       	push	r14
    1d40:	0f 93       	push	r16
    1d42:	1f 93       	push	r17
    1d44:	cf 93       	push	r28
    1d46:	df 93       	push	r29
    1d48:	e8 01       	movw	r28, r16
    1d4a:	47 fd       	sbrc	r20, 7
    1d4c:	02 c0       	rjmp	.+4      	; 0x1d52 <dtostrf+0x14>
    1d4e:	34 e0       	ldi	r19, 0x04	; 4
    1d50:	01 c0       	rjmp	.+2      	; 0x1d54 <dtostrf+0x16>
    1d52:	34 e1       	ldi	r19, 0x14	; 20
    1d54:	04 2e       	mov	r0, r20
    1d56:	00 0c       	add	r0, r0
    1d58:	55 0b       	sbc	r21, r21
    1d5a:	57 ff       	sbrs	r21, 7
    1d5c:	03 c0       	rjmp	.+6      	; 0x1d64 <dtostrf+0x26>
    1d5e:	51 95       	neg	r21
    1d60:	41 95       	neg	r20
    1d62:	51 09       	sbc	r21, r1
    1d64:	e3 2e       	mov	r14, r19
    1d66:	02 2f       	mov	r16, r18
    1d68:	24 2f       	mov	r18, r20
    1d6a:	ae 01       	movw	r20, r28
    1d6c:	0e 94 e6 10 	call	0x21cc	; 0x21cc <dtoa_prf>
    1d70:	ce 01       	movw	r24, r28
    1d72:	df 91       	pop	r29
    1d74:	cf 91       	pop	r28
    1d76:	1f 91       	pop	r17
    1d78:	0f 91       	pop	r16
    1d7a:	ef 90       	pop	r14
    1d7c:	08 95       	ret

00001d7e <printf>:
    1d7e:	a0 e0       	ldi	r26, 0x00	; 0
    1d80:	b0 e0       	ldi	r27, 0x00	; 0
    1d82:	e5 ec       	ldi	r30, 0xC5	; 197
    1d84:	fe e0       	ldi	r31, 0x0E	; 14
    1d86:	0c 94 d8 13 	jmp	0x27b0	; 0x27b0 <__prologue_saves__+0x20>
    1d8a:	ae 01       	movw	r20, r28
    1d8c:	4b 5f       	subi	r20, 0xFB	; 251
    1d8e:	5f 4f       	sbci	r21, 0xFF	; 255
    1d90:	fa 01       	movw	r30, r20
    1d92:	61 91       	ld	r22, Z+
    1d94:	71 91       	ld	r23, Z+
    1d96:	af 01       	movw	r20, r30
    1d98:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__iob+0x2>
    1d9c:	90 91 49 04 	lds	r25, 0x0449	; 0x800449 <__iob+0x3>
    1da0:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <vfprintf>
    1da4:	e2 e0       	ldi	r30, 0x02	; 2
    1da6:	0c 94 f4 13 	jmp	0x27e8	; 0x27e8 <__epilogue_restores__+0x20>

00001daa <snprintf>:
    1daa:	ae e0       	ldi	r26, 0x0E	; 14
    1dac:	b0 e0       	ldi	r27, 0x00	; 0
    1dae:	eb ed       	ldi	r30, 0xDB	; 219
    1db0:	fe e0       	ldi	r31, 0x0E	; 14
    1db2:	0c 94 d6 13 	jmp	0x27ac	; 0x27ac <__prologue_saves__+0x1c>
    1db6:	0d 89       	ldd	r16, Y+21	; 0x15
    1db8:	1e 89       	ldd	r17, Y+22	; 0x16
    1dba:	8f 89       	ldd	r24, Y+23	; 0x17
    1dbc:	98 8d       	ldd	r25, Y+24	; 0x18
    1dbe:	26 e0       	ldi	r18, 0x06	; 6
    1dc0:	2c 83       	std	Y+4, r18	; 0x04
    1dc2:	1a 83       	std	Y+2, r17	; 0x02
    1dc4:	09 83       	std	Y+1, r16	; 0x01
    1dc6:	97 ff       	sbrs	r25, 7
    1dc8:	02 c0       	rjmp	.+4      	; 0x1dce <snprintf+0x24>
    1dca:	80 e0       	ldi	r24, 0x00	; 0
    1dcc:	90 e8       	ldi	r25, 0x80	; 128
    1dce:	01 97       	sbiw	r24, 0x01	; 1
    1dd0:	9e 83       	std	Y+6, r25	; 0x06
    1dd2:	8d 83       	std	Y+5, r24	; 0x05
    1dd4:	ae 01       	movw	r20, r28
    1dd6:	45 5e       	subi	r20, 0xE5	; 229
    1dd8:	5f 4f       	sbci	r21, 0xFF	; 255
    1dda:	69 8d       	ldd	r22, Y+25	; 0x19
    1ddc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1dde:	ce 01       	movw	r24, r28
    1de0:	01 96       	adiw	r24, 0x01	; 1
    1de2:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <vfprintf>
    1de6:	4d 81       	ldd	r20, Y+5	; 0x05
    1de8:	5e 81       	ldd	r21, Y+6	; 0x06
    1dea:	57 fd       	sbrc	r21, 7
    1dec:	0a c0       	rjmp	.+20     	; 0x1e02 <snprintf+0x58>
    1dee:	2f 81       	ldd	r18, Y+7	; 0x07
    1df0:	38 85       	ldd	r19, Y+8	; 0x08
    1df2:	42 17       	cp	r20, r18
    1df4:	53 07       	cpc	r21, r19
    1df6:	0c f4       	brge	.+2      	; 0x1dfa <snprintf+0x50>
    1df8:	9a 01       	movw	r18, r20
    1dfa:	f8 01       	movw	r30, r16
    1dfc:	e2 0f       	add	r30, r18
    1dfe:	f3 1f       	adc	r31, r19
    1e00:	10 82       	st	Z, r1
    1e02:	2e 96       	adiw	r28, 0x0e	; 14
    1e04:	e4 e0       	ldi	r30, 0x04	; 4
    1e06:	0c 94 f2 13 	jmp	0x27e4	; 0x27e4 <__epilogue_restores__+0x1c>

00001e0a <vfprintf>:
    1e0a:	ab e0       	ldi	r26, 0x0B	; 11
    1e0c:	b0 e0       	ldi	r27, 0x00	; 0
    1e0e:	eb e0       	ldi	r30, 0x0B	; 11
    1e10:	ff e0       	ldi	r31, 0x0F	; 15
    1e12:	0c 94 c8 13 	jmp	0x2790	; 0x2790 <__prologue_saves__>
    1e16:	6c 01       	movw	r12, r24
    1e18:	7b 01       	movw	r14, r22
    1e1a:	8a 01       	movw	r16, r20
    1e1c:	fc 01       	movw	r30, r24
    1e1e:	17 82       	std	Z+7, r1	; 0x07
    1e20:	16 82       	std	Z+6, r1	; 0x06
    1e22:	83 81       	ldd	r24, Z+3	; 0x03
    1e24:	81 ff       	sbrs	r24, 1
    1e26:	cc c1       	rjmp	.+920    	; 0x21c0 <vfprintf+0x3b6>
    1e28:	ce 01       	movw	r24, r28
    1e2a:	01 96       	adiw	r24, 0x01	; 1
    1e2c:	3c 01       	movw	r6, r24
    1e2e:	f6 01       	movw	r30, r12
    1e30:	93 81       	ldd	r25, Z+3	; 0x03
    1e32:	f7 01       	movw	r30, r14
    1e34:	93 fd       	sbrc	r25, 3
    1e36:	85 91       	lpm	r24, Z+
    1e38:	93 ff       	sbrs	r25, 3
    1e3a:	81 91       	ld	r24, Z+
    1e3c:	7f 01       	movw	r14, r30
    1e3e:	88 23       	and	r24, r24
    1e40:	09 f4       	brne	.+2      	; 0x1e44 <vfprintf+0x3a>
    1e42:	ba c1       	rjmp	.+884    	; 0x21b8 <vfprintf+0x3ae>
    1e44:	85 32       	cpi	r24, 0x25	; 37
    1e46:	39 f4       	brne	.+14     	; 0x1e56 <vfprintf+0x4c>
    1e48:	93 fd       	sbrc	r25, 3
    1e4a:	85 91       	lpm	r24, Z+
    1e4c:	93 ff       	sbrs	r25, 3
    1e4e:	81 91       	ld	r24, Z+
    1e50:	7f 01       	movw	r14, r30
    1e52:	85 32       	cpi	r24, 0x25	; 37
    1e54:	29 f4       	brne	.+10     	; 0x1e60 <vfprintf+0x56>
    1e56:	b6 01       	movw	r22, r12
    1e58:	90 e0       	ldi	r25, 0x00	; 0
    1e5a:	0e 94 2e 13 	call	0x265c	; 0x265c <fputc>
    1e5e:	e7 cf       	rjmp	.-50     	; 0x1e2e <vfprintf+0x24>
    1e60:	91 2c       	mov	r9, r1
    1e62:	21 2c       	mov	r2, r1
    1e64:	31 2c       	mov	r3, r1
    1e66:	ff e1       	ldi	r31, 0x1F	; 31
    1e68:	f3 15       	cp	r31, r3
    1e6a:	d8 f0       	brcs	.+54     	; 0x1ea2 <vfprintf+0x98>
    1e6c:	8b 32       	cpi	r24, 0x2B	; 43
    1e6e:	79 f0       	breq	.+30     	; 0x1e8e <vfprintf+0x84>
    1e70:	38 f4       	brcc	.+14     	; 0x1e80 <vfprintf+0x76>
    1e72:	80 32       	cpi	r24, 0x20	; 32
    1e74:	79 f0       	breq	.+30     	; 0x1e94 <vfprintf+0x8a>
    1e76:	83 32       	cpi	r24, 0x23	; 35
    1e78:	a1 f4       	brne	.+40     	; 0x1ea2 <vfprintf+0x98>
    1e7a:	23 2d       	mov	r18, r3
    1e7c:	20 61       	ori	r18, 0x10	; 16
    1e7e:	1d c0       	rjmp	.+58     	; 0x1eba <vfprintf+0xb0>
    1e80:	8d 32       	cpi	r24, 0x2D	; 45
    1e82:	61 f0       	breq	.+24     	; 0x1e9c <vfprintf+0x92>
    1e84:	80 33       	cpi	r24, 0x30	; 48
    1e86:	69 f4       	brne	.+26     	; 0x1ea2 <vfprintf+0x98>
    1e88:	23 2d       	mov	r18, r3
    1e8a:	21 60       	ori	r18, 0x01	; 1
    1e8c:	16 c0       	rjmp	.+44     	; 0x1eba <vfprintf+0xb0>
    1e8e:	83 2d       	mov	r24, r3
    1e90:	82 60       	ori	r24, 0x02	; 2
    1e92:	38 2e       	mov	r3, r24
    1e94:	e3 2d       	mov	r30, r3
    1e96:	e4 60       	ori	r30, 0x04	; 4
    1e98:	3e 2e       	mov	r3, r30
    1e9a:	2a c0       	rjmp	.+84     	; 0x1ef0 <vfprintf+0xe6>
    1e9c:	f3 2d       	mov	r31, r3
    1e9e:	f8 60       	ori	r31, 0x08	; 8
    1ea0:	1d c0       	rjmp	.+58     	; 0x1edc <vfprintf+0xd2>
    1ea2:	37 fc       	sbrc	r3, 7
    1ea4:	2d c0       	rjmp	.+90     	; 0x1f00 <vfprintf+0xf6>
    1ea6:	20 ed       	ldi	r18, 0xD0	; 208
    1ea8:	28 0f       	add	r18, r24
    1eaa:	2a 30       	cpi	r18, 0x0A	; 10
    1eac:	40 f0       	brcs	.+16     	; 0x1ebe <vfprintf+0xb4>
    1eae:	8e 32       	cpi	r24, 0x2E	; 46
    1eb0:	b9 f4       	brne	.+46     	; 0x1ee0 <vfprintf+0xd6>
    1eb2:	36 fc       	sbrc	r3, 6
    1eb4:	81 c1       	rjmp	.+770    	; 0x21b8 <vfprintf+0x3ae>
    1eb6:	23 2d       	mov	r18, r3
    1eb8:	20 64       	ori	r18, 0x40	; 64
    1eba:	32 2e       	mov	r3, r18
    1ebc:	19 c0       	rjmp	.+50     	; 0x1ef0 <vfprintf+0xe6>
    1ebe:	36 fe       	sbrs	r3, 6
    1ec0:	06 c0       	rjmp	.+12     	; 0x1ece <vfprintf+0xc4>
    1ec2:	8a e0       	ldi	r24, 0x0A	; 10
    1ec4:	98 9e       	mul	r9, r24
    1ec6:	20 0d       	add	r18, r0
    1ec8:	11 24       	eor	r1, r1
    1eca:	92 2e       	mov	r9, r18
    1ecc:	11 c0       	rjmp	.+34     	; 0x1ef0 <vfprintf+0xe6>
    1ece:	ea e0       	ldi	r30, 0x0A	; 10
    1ed0:	2e 9e       	mul	r2, r30
    1ed2:	20 0d       	add	r18, r0
    1ed4:	11 24       	eor	r1, r1
    1ed6:	22 2e       	mov	r2, r18
    1ed8:	f3 2d       	mov	r31, r3
    1eda:	f0 62       	ori	r31, 0x20	; 32
    1edc:	3f 2e       	mov	r3, r31
    1ede:	08 c0       	rjmp	.+16     	; 0x1ef0 <vfprintf+0xe6>
    1ee0:	8c 36       	cpi	r24, 0x6C	; 108
    1ee2:	21 f4       	brne	.+8      	; 0x1eec <vfprintf+0xe2>
    1ee4:	83 2d       	mov	r24, r3
    1ee6:	80 68       	ori	r24, 0x80	; 128
    1ee8:	38 2e       	mov	r3, r24
    1eea:	02 c0       	rjmp	.+4      	; 0x1ef0 <vfprintf+0xe6>
    1eec:	88 36       	cpi	r24, 0x68	; 104
    1eee:	41 f4       	brne	.+16     	; 0x1f00 <vfprintf+0xf6>
    1ef0:	f7 01       	movw	r30, r14
    1ef2:	93 fd       	sbrc	r25, 3
    1ef4:	85 91       	lpm	r24, Z+
    1ef6:	93 ff       	sbrs	r25, 3
    1ef8:	81 91       	ld	r24, Z+
    1efa:	7f 01       	movw	r14, r30
    1efc:	81 11       	cpse	r24, r1
    1efe:	b3 cf       	rjmp	.-154    	; 0x1e66 <vfprintf+0x5c>
    1f00:	98 2f       	mov	r25, r24
    1f02:	9f 7d       	andi	r25, 0xDF	; 223
    1f04:	95 54       	subi	r25, 0x45	; 69
    1f06:	93 30       	cpi	r25, 0x03	; 3
    1f08:	28 f4       	brcc	.+10     	; 0x1f14 <vfprintf+0x10a>
    1f0a:	0c 5f       	subi	r16, 0xFC	; 252
    1f0c:	1f 4f       	sbci	r17, 0xFF	; 255
    1f0e:	9f e3       	ldi	r25, 0x3F	; 63
    1f10:	99 83       	std	Y+1, r25	; 0x01
    1f12:	0d c0       	rjmp	.+26     	; 0x1f2e <vfprintf+0x124>
    1f14:	83 36       	cpi	r24, 0x63	; 99
    1f16:	31 f0       	breq	.+12     	; 0x1f24 <vfprintf+0x11a>
    1f18:	83 37       	cpi	r24, 0x73	; 115
    1f1a:	71 f0       	breq	.+28     	; 0x1f38 <vfprintf+0x12e>
    1f1c:	83 35       	cpi	r24, 0x53	; 83
    1f1e:	09 f0       	breq	.+2      	; 0x1f22 <vfprintf+0x118>
    1f20:	59 c0       	rjmp	.+178    	; 0x1fd4 <vfprintf+0x1ca>
    1f22:	21 c0       	rjmp	.+66     	; 0x1f66 <vfprintf+0x15c>
    1f24:	f8 01       	movw	r30, r16
    1f26:	80 81       	ld	r24, Z
    1f28:	89 83       	std	Y+1, r24	; 0x01
    1f2a:	0e 5f       	subi	r16, 0xFE	; 254
    1f2c:	1f 4f       	sbci	r17, 0xFF	; 255
    1f2e:	88 24       	eor	r8, r8
    1f30:	83 94       	inc	r8
    1f32:	91 2c       	mov	r9, r1
    1f34:	53 01       	movw	r10, r6
    1f36:	13 c0       	rjmp	.+38     	; 0x1f5e <vfprintf+0x154>
    1f38:	28 01       	movw	r4, r16
    1f3a:	f2 e0       	ldi	r31, 0x02	; 2
    1f3c:	4f 0e       	add	r4, r31
    1f3e:	51 1c       	adc	r5, r1
    1f40:	f8 01       	movw	r30, r16
    1f42:	a0 80       	ld	r10, Z
    1f44:	b1 80       	ldd	r11, Z+1	; 0x01
    1f46:	36 fe       	sbrs	r3, 6
    1f48:	03 c0       	rjmp	.+6      	; 0x1f50 <vfprintf+0x146>
    1f4a:	69 2d       	mov	r22, r9
    1f4c:	70 e0       	ldi	r23, 0x00	; 0
    1f4e:	02 c0       	rjmp	.+4      	; 0x1f54 <vfprintf+0x14a>
    1f50:	6f ef       	ldi	r22, 0xFF	; 255
    1f52:	7f ef       	ldi	r23, 0xFF	; 255
    1f54:	c5 01       	movw	r24, r10
    1f56:	0e 94 23 13 	call	0x2646	; 0x2646 <strnlen>
    1f5a:	4c 01       	movw	r8, r24
    1f5c:	82 01       	movw	r16, r4
    1f5e:	f3 2d       	mov	r31, r3
    1f60:	ff 77       	andi	r31, 0x7F	; 127
    1f62:	3f 2e       	mov	r3, r31
    1f64:	16 c0       	rjmp	.+44     	; 0x1f92 <vfprintf+0x188>
    1f66:	28 01       	movw	r4, r16
    1f68:	22 e0       	ldi	r18, 0x02	; 2
    1f6a:	42 0e       	add	r4, r18
    1f6c:	51 1c       	adc	r5, r1
    1f6e:	f8 01       	movw	r30, r16
    1f70:	a0 80       	ld	r10, Z
    1f72:	b1 80       	ldd	r11, Z+1	; 0x01
    1f74:	36 fe       	sbrs	r3, 6
    1f76:	03 c0       	rjmp	.+6      	; 0x1f7e <vfprintf+0x174>
    1f78:	69 2d       	mov	r22, r9
    1f7a:	70 e0       	ldi	r23, 0x00	; 0
    1f7c:	02 c0       	rjmp	.+4      	; 0x1f82 <vfprintf+0x178>
    1f7e:	6f ef       	ldi	r22, 0xFF	; 255
    1f80:	7f ef       	ldi	r23, 0xFF	; 255
    1f82:	c5 01       	movw	r24, r10
    1f84:	0e 94 18 13 	call	0x2630	; 0x2630 <strnlen_P>
    1f88:	4c 01       	movw	r8, r24
    1f8a:	f3 2d       	mov	r31, r3
    1f8c:	f0 68       	ori	r31, 0x80	; 128
    1f8e:	3f 2e       	mov	r3, r31
    1f90:	82 01       	movw	r16, r4
    1f92:	33 fc       	sbrc	r3, 3
    1f94:	1b c0       	rjmp	.+54     	; 0x1fcc <vfprintf+0x1c2>
    1f96:	82 2d       	mov	r24, r2
    1f98:	90 e0       	ldi	r25, 0x00	; 0
    1f9a:	88 16       	cp	r8, r24
    1f9c:	99 06       	cpc	r9, r25
    1f9e:	b0 f4       	brcc	.+44     	; 0x1fcc <vfprintf+0x1c2>
    1fa0:	b6 01       	movw	r22, r12
    1fa2:	80 e2       	ldi	r24, 0x20	; 32
    1fa4:	90 e0       	ldi	r25, 0x00	; 0
    1fa6:	0e 94 2e 13 	call	0x265c	; 0x265c <fputc>
    1faa:	2a 94       	dec	r2
    1fac:	f4 cf       	rjmp	.-24     	; 0x1f96 <vfprintf+0x18c>
    1fae:	f5 01       	movw	r30, r10
    1fb0:	37 fc       	sbrc	r3, 7
    1fb2:	85 91       	lpm	r24, Z+
    1fb4:	37 fe       	sbrs	r3, 7
    1fb6:	81 91       	ld	r24, Z+
    1fb8:	5f 01       	movw	r10, r30
    1fba:	b6 01       	movw	r22, r12
    1fbc:	90 e0       	ldi	r25, 0x00	; 0
    1fbe:	0e 94 2e 13 	call	0x265c	; 0x265c <fputc>
    1fc2:	21 10       	cpse	r2, r1
    1fc4:	2a 94       	dec	r2
    1fc6:	21 e0       	ldi	r18, 0x01	; 1
    1fc8:	82 1a       	sub	r8, r18
    1fca:	91 08       	sbc	r9, r1
    1fcc:	81 14       	cp	r8, r1
    1fce:	91 04       	cpc	r9, r1
    1fd0:	71 f7       	brne	.-36     	; 0x1fae <vfprintf+0x1a4>
    1fd2:	e8 c0       	rjmp	.+464    	; 0x21a4 <vfprintf+0x39a>
    1fd4:	84 36       	cpi	r24, 0x64	; 100
    1fd6:	11 f0       	breq	.+4      	; 0x1fdc <vfprintf+0x1d2>
    1fd8:	89 36       	cpi	r24, 0x69	; 105
    1fda:	41 f5       	brne	.+80     	; 0x202c <vfprintf+0x222>
    1fdc:	f8 01       	movw	r30, r16
    1fde:	37 fe       	sbrs	r3, 7
    1fe0:	07 c0       	rjmp	.+14     	; 0x1ff0 <vfprintf+0x1e6>
    1fe2:	60 81       	ld	r22, Z
    1fe4:	71 81       	ldd	r23, Z+1	; 0x01
    1fe6:	82 81       	ldd	r24, Z+2	; 0x02
    1fe8:	93 81       	ldd	r25, Z+3	; 0x03
    1fea:	0c 5f       	subi	r16, 0xFC	; 252
    1fec:	1f 4f       	sbci	r17, 0xFF	; 255
    1fee:	08 c0       	rjmp	.+16     	; 0x2000 <vfprintf+0x1f6>
    1ff0:	60 81       	ld	r22, Z
    1ff2:	71 81       	ldd	r23, Z+1	; 0x01
    1ff4:	07 2e       	mov	r0, r23
    1ff6:	00 0c       	add	r0, r0
    1ff8:	88 0b       	sbc	r24, r24
    1ffa:	99 0b       	sbc	r25, r25
    1ffc:	0e 5f       	subi	r16, 0xFE	; 254
    1ffe:	1f 4f       	sbci	r17, 0xFF	; 255
    2000:	f3 2d       	mov	r31, r3
    2002:	ff 76       	andi	r31, 0x6F	; 111
    2004:	3f 2e       	mov	r3, r31
    2006:	97 ff       	sbrs	r25, 7
    2008:	09 c0       	rjmp	.+18     	; 0x201c <vfprintf+0x212>
    200a:	90 95       	com	r25
    200c:	80 95       	com	r24
    200e:	70 95       	com	r23
    2010:	61 95       	neg	r22
    2012:	7f 4f       	sbci	r23, 0xFF	; 255
    2014:	8f 4f       	sbci	r24, 0xFF	; 255
    2016:	9f 4f       	sbci	r25, 0xFF	; 255
    2018:	f0 68       	ori	r31, 0x80	; 128
    201a:	3f 2e       	mov	r3, r31
    201c:	2a e0       	ldi	r18, 0x0A	; 10
    201e:	30 e0       	ldi	r19, 0x00	; 0
    2020:	a3 01       	movw	r20, r6
    2022:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <__ultoa_invert>
    2026:	88 2e       	mov	r8, r24
    2028:	86 18       	sub	r8, r6
    202a:	45 c0       	rjmp	.+138    	; 0x20b6 <vfprintf+0x2ac>
    202c:	85 37       	cpi	r24, 0x75	; 117
    202e:	31 f4       	brne	.+12     	; 0x203c <vfprintf+0x232>
    2030:	23 2d       	mov	r18, r3
    2032:	2f 7e       	andi	r18, 0xEF	; 239
    2034:	b2 2e       	mov	r11, r18
    2036:	2a e0       	ldi	r18, 0x0A	; 10
    2038:	30 e0       	ldi	r19, 0x00	; 0
    203a:	25 c0       	rjmp	.+74     	; 0x2086 <vfprintf+0x27c>
    203c:	93 2d       	mov	r25, r3
    203e:	99 7f       	andi	r25, 0xF9	; 249
    2040:	b9 2e       	mov	r11, r25
    2042:	8f 36       	cpi	r24, 0x6F	; 111
    2044:	c1 f0       	breq	.+48     	; 0x2076 <vfprintf+0x26c>
    2046:	18 f4       	brcc	.+6      	; 0x204e <vfprintf+0x244>
    2048:	88 35       	cpi	r24, 0x58	; 88
    204a:	79 f0       	breq	.+30     	; 0x206a <vfprintf+0x260>
    204c:	b5 c0       	rjmp	.+362    	; 0x21b8 <vfprintf+0x3ae>
    204e:	80 37       	cpi	r24, 0x70	; 112
    2050:	19 f0       	breq	.+6      	; 0x2058 <vfprintf+0x24e>
    2052:	88 37       	cpi	r24, 0x78	; 120
    2054:	21 f0       	breq	.+8      	; 0x205e <vfprintf+0x254>
    2056:	b0 c0       	rjmp	.+352    	; 0x21b8 <vfprintf+0x3ae>
    2058:	e9 2f       	mov	r30, r25
    205a:	e0 61       	ori	r30, 0x10	; 16
    205c:	be 2e       	mov	r11, r30
    205e:	b4 fe       	sbrs	r11, 4
    2060:	0d c0       	rjmp	.+26     	; 0x207c <vfprintf+0x272>
    2062:	fb 2d       	mov	r31, r11
    2064:	f4 60       	ori	r31, 0x04	; 4
    2066:	bf 2e       	mov	r11, r31
    2068:	09 c0       	rjmp	.+18     	; 0x207c <vfprintf+0x272>
    206a:	34 fe       	sbrs	r3, 4
    206c:	0a c0       	rjmp	.+20     	; 0x2082 <vfprintf+0x278>
    206e:	29 2f       	mov	r18, r25
    2070:	26 60       	ori	r18, 0x06	; 6
    2072:	b2 2e       	mov	r11, r18
    2074:	06 c0       	rjmp	.+12     	; 0x2082 <vfprintf+0x278>
    2076:	28 e0       	ldi	r18, 0x08	; 8
    2078:	30 e0       	ldi	r19, 0x00	; 0
    207a:	05 c0       	rjmp	.+10     	; 0x2086 <vfprintf+0x27c>
    207c:	20 e1       	ldi	r18, 0x10	; 16
    207e:	30 e0       	ldi	r19, 0x00	; 0
    2080:	02 c0       	rjmp	.+4      	; 0x2086 <vfprintf+0x27c>
    2082:	20 e1       	ldi	r18, 0x10	; 16
    2084:	32 e0       	ldi	r19, 0x02	; 2
    2086:	f8 01       	movw	r30, r16
    2088:	b7 fe       	sbrs	r11, 7
    208a:	07 c0       	rjmp	.+14     	; 0x209a <vfprintf+0x290>
    208c:	60 81       	ld	r22, Z
    208e:	71 81       	ldd	r23, Z+1	; 0x01
    2090:	82 81       	ldd	r24, Z+2	; 0x02
    2092:	93 81       	ldd	r25, Z+3	; 0x03
    2094:	0c 5f       	subi	r16, 0xFC	; 252
    2096:	1f 4f       	sbci	r17, 0xFF	; 255
    2098:	06 c0       	rjmp	.+12     	; 0x20a6 <vfprintf+0x29c>
    209a:	60 81       	ld	r22, Z
    209c:	71 81       	ldd	r23, Z+1	; 0x01
    209e:	80 e0       	ldi	r24, 0x00	; 0
    20a0:	90 e0       	ldi	r25, 0x00	; 0
    20a2:	0e 5f       	subi	r16, 0xFE	; 254
    20a4:	1f 4f       	sbci	r17, 0xFF	; 255
    20a6:	a3 01       	movw	r20, r6
    20a8:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <__ultoa_invert>
    20ac:	88 2e       	mov	r8, r24
    20ae:	86 18       	sub	r8, r6
    20b0:	fb 2d       	mov	r31, r11
    20b2:	ff 77       	andi	r31, 0x7F	; 127
    20b4:	3f 2e       	mov	r3, r31
    20b6:	36 fe       	sbrs	r3, 6
    20b8:	0d c0       	rjmp	.+26     	; 0x20d4 <vfprintf+0x2ca>
    20ba:	23 2d       	mov	r18, r3
    20bc:	2e 7f       	andi	r18, 0xFE	; 254
    20be:	a2 2e       	mov	r10, r18
    20c0:	89 14       	cp	r8, r9
    20c2:	58 f4       	brcc	.+22     	; 0x20da <vfprintf+0x2d0>
    20c4:	34 fe       	sbrs	r3, 4
    20c6:	0b c0       	rjmp	.+22     	; 0x20de <vfprintf+0x2d4>
    20c8:	32 fc       	sbrc	r3, 2
    20ca:	09 c0       	rjmp	.+18     	; 0x20de <vfprintf+0x2d4>
    20cc:	83 2d       	mov	r24, r3
    20ce:	8e 7e       	andi	r24, 0xEE	; 238
    20d0:	a8 2e       	mov	r10, r24
    20d2:	05 c0       	rjmp	.+10     	; 0x20de <vfprintf+0x2d4>
    20d4:	b8 2c       	mov	r11, r8
    20d6:	a3 2c       	mov	r10, r3
    20d8:	03 c0       	rjmp	.+6      	; 0x20e0 <vfprintf+0x2d6>
    20da:	b8 2c       	mov	r11, r8
    20dc:	01 c0       	rjmp	.+2      	; 0x20e0 <vfprintf+0x2d6>
    20de:	b9 2c       	mov	r11, r9
    20e0:	a4 fe       	sbrs	r10, 4
    20e2:	0f c0       	rjmp	.+30     	; 0x2102 <vfprintf+0x2f8>
    20e4:	fe 01       	movw	r30, r28
    20e6:	e8 0d       	add	r30, r8
    20e8:	f1 1d       	adc	r31, r1
    20ea:	80 81       	ld	r24, Z
    20ec:	80 33       	cpi	r24, 0x30	; 48
    20ee:	21 f4       	brne	.+8      	; 0x20f8 <vfprintf+0x2ee>
    20f0:	9a 2d       	mov	r25, r10
    20f2:	99 7e       	andi	r25, 0xE9	; 233
    20f4:	a9 2e       	mov	r10, r25
    20f6:	09 c0       	rjmp	.+18     	; 0x210a <vfprintf+0x300>
    20f8:	a2 fe       	sbrs	r10, 2
    20fa:	06 c0       	rjmp	.+12     	; 0x2108 <vfprintf+0x2fe>
    20fc:	b3 94       	inc	r11
    20fe:	b3 94       	inc	r11
    2100:	04 c0       	rjmp	.+8      	; 0x210a <vfprintf+0x300>
    2102:	8a 2d       	mov	r24, r10
    2104:	86 78       	andi	r24, 0x86	; 134
    2106:	09 f0       	breq	.+2      	; 0x210a <vfprintf+0x300>
    2108:	b3 94       	inc	r11
    210a:	a3 fc       	sbrc	r10, 3
    210c:	11 c0       	rjmp	.+34     	; 0x2130 <vfprintf+0x326>
    210e:	a0 fe       	sbrs	r10, 0
    2110:	06 c0       	rjmp	.+12     	; 0x211e <vfprintf+0x314>
    2112:	b2 14       	cp	r11, r2
    2114:	88 f4       	brcc	.+34     	; 0x2138 <vfprintf+0x32e>
    2116:	28 0c       	add	r2, r8
    2118:	92 2c       	mov	r9, r2
    211a:	9b 18       	sub	r9, r11
    211c:	0e c0       	rjmp	.+28     	; 0x213a <vfprintf+0x330>
    211e:	b2 14       	cp	r11, r2
    2120:	60 f4       	brcc	.+24     	; 0x213a <vfprintf+0x330>
    2122:	b6 01       	movw	r22, r12
    2124:	80 e2       	ldi	r24, 0x20	; 32
    2126:	90 e0       	ldi	r25, 0x00	; 0
    2128:	0e 94 2e 13 	call	0x265c	; 0x265c <fputc>
    212c:	b3 94       	inc	r11
    212e:	f7 cf       	rjmp	.-18     	; 0x211e <vfprintf+0x314>
    2130:	b2 14       	cp	r11, r2
    2132:	18 f4       	brcc	.+6      	; 0x213a <vfprintf+0x330>
    2134:	2b 18       	sub	r2, r11
    2136:	02 c0       	rjmp	.+4      	; 0x213c <vfprintf+0x332>
    2138:	98 2c       	mov	r9, r8
    213a:	21 2c       	mov	r2, r1
    213c:	a4 fe       	sbrs	r10, 4
    213e:	10 c0       	rjmp	.+32     	; 0x2160 <vfprintf+0x356>
    2140:	b6 01       	movw	r22, r12
    2142:	80 e3       	ldi	r24, 0x30	; 48
    2144:	90 e0       	ldi	r25, 0x00	; 0
    2146:	0e 94 2e 13 	call	0x265c	; 0x265c <fputc>
    214a:	a2 fe       	sbrs	r10, 2
    214c:	17 c0       	rjmp	.+46     	; 0x217c <vfprintf+0x372>
    214e:	a1 fc       	sbrc	r10, 1
    2150:	03 c0       	rjmp	.+6      	; 0x2158 <vfprintf+0x34e>
    2152:	88 e7       	ldi	r24, 0x78	; 120
    2154:	90 e0       	ldi	r25, 0x00	; 0
    2156:	02 c0       	rjmp	.+4      	; 0x215c <vfprintf+0x352>
    2158:	88 e5       	ldi	r24, 0x58	; 88
    215a:	90 e0       	ldi	r25, 0x00	; 0
    215c:	b6 01       	movw	r22, r12
    215e:	0c c0       	rjmp	.+24     	; 0x2178 <vfprintf+0x36e>
    2160:	8a 2d       	mov	r24, r10
    2162:	86 78       	andi	r24, 0x86	; 134
    2164:	59 f0       	breq	.+22     	; 0x217c <vfprintf+0x372>
    2166:	a1 fe       	sbrs	r10, 1
    2168:	02 c0       	rjmp	.+4      	; 0x216e <vfprintf+0x364>
    216a:	8b e2       	ldi	r24, 0x2B	; 43
    216c:	01 c0       	rjmp	.+2      	; 0x2170 <vfprintf+0x366>
    216e:	80 e2       	ldi	r24, 0x20	; 32
    2170:	a7 fc       	sbrc	r10, 7
    2172:	8d e2       	ldi	r24, 0x2D	; 45
    2174:	b6 01       	movw	r22, r12
    2176:	90 e0       	ldi	r25, 0x00	; 0
    2178:	0e 94 2e 13 	call	0x265c	; 0x265c <fputc>
    217c:	89 14       	cp	r8, r9
    217e:	38 f4       	brcc	.+14     	; 0x218e <vfprintf+0x384>
    2180:	b6 01       	movw	r22, r12
    2182:	80 e3       	ldi	r24, 0x30	; 48
    2184:	90 e0       	ldi	r25, 0x00	; 0
    2186:	0e 94 2e 13 	call	0x265c	; 0x265c <fputc>
    218a:	9a 94       	dec	r9
    218c:	f7 cf       	rjmp	.-18     	; 0x217c <vfprintf+0x372>
    218e:	8a 94       	dec	r8
    2190:	f3 01       	movw	r30, r6
    2192:	e8 0d       	add	r30, r8
    2194:	f1 1d       	adc	r31, r1
    2196:	80 81       	ld	r24, Z
    2198:	b6 01       	movw	r22, r12
    219a:	90 e0       	ldi	r25, 0x00	; 0
    219c:	0e 94 2e 13 	call	0x265c	; 0x265c <fputc>
    21a0:	81 10       	cpse	r8, r1
    21a2:	f5 cf       	rjmp	.-22     	; 0x218e <vfprintf+0x384>
    21a4:	22 20       	and	r2, r2
    21a6:	09 f4       	brne	.+2      	; 0x21aa <vfprintf+0x3a0>
    21a8:	42 ce       	rjmp	.-892    	; 0x1e2e <vfprintf+0x24>
    21aa:	b6 01       	movw	r22, r12
    21ac:	80 e2       	ldi	r24, 0x20	; 32
    21ae:	90 e0       	ldi	r25, 0x00	; 0
    21b0:	0e 94 2e 13 	call	0x265c	; 0x265c <fputc>
    21b4:	2a 94       	dec	r2
    21b6:	f6 cf       	rjmp	.-20     	; 0x21a4 <vfprintf+0x39a>
    21b8:	f6 01       	movw	r30, r12
    21ba:	86 81       	ldd	r24, Z+6	; 0x06
    21bc:	97 81       	ldd	r25, Z+7	; 0x07
    21be:	02 c0       	rjmp	.+4      	; 0x21c4 <vfprintf+0x3ba>
    21c0:	8f ef       	ldi	r24, 0xFF	; 255
    21c2:	9f ef       	ldi	r25, 0xFF	; 255
    21c4:	2b 96       	adiw	r28, 0x0b	; 11
    21c6:	e2 e1       	ldi	r30, 0x12	; 18
    21c8:	0c 94 e4 13 	jmp	0x27c8	; 0x27c8 <__epilogue_restores__>

000021cc <dtoa_prf>:
    21cc:	a9 e0       	ldi	r26, 0x09	; 9
    21ce:	b0 e0       	ldi	r27, 0x00	; 0
    21d0:	ec ee       	ldi	r30, 0xEC	; 236
    21d2:	f0 e1       	ldi	r31, 0x10	; 16
    21d4:	0c 94 ce 13 	jmp	0x279c	; 0x279c <__prologue_saves__+0xc>
    21d8:	6a 01       	movw	r12, r20
    21da:	12 2f       	mov	r17, r18
    21dc:	b0 2e       	mov	r11, r16
    21de:	2b e3       	ldi	r18, 0x3B	; 59
    21e0:	20 17       	cp	r18, r16
    21e2:	20 f0       	brcs	.+8      	; 0x21ec <dtoa_prf+0x20>
    21e4:	ff 24       	eor	r15, r15
    21e6:	f3 94       	inc	r15
    21e8:	f0 0e       	add	r15, r16
    21ea:	02 c0       	rjmp	.+4      	; 0x21f0 <dtoa_prf+0x24>
    21ec:	2c e3       	ldi	r18, 0x3C	; 60
    21ee:	f2 2e       	mov	r15, r18
    21f0:	0f 2d       	mov	r16, r15
    21f2:	27 e0       	ldi	r18, 0x07	; 7
    21f4:	ae 01       	movw	r20, r28
    21f6:	4f 5f       	subi	r20, 0xFF	; 255
    21f8:	5f 4f       	sbci	r21, 0xFF	; 255
    21fa:	0e 94 40 12 	call	0x2480	; 0x2480 <__ftoa_engine>
    21fe:	bc 01       	movw	r22, r24
    2200:	49 81       	ldd	r20, Y+1	; 0x01
    2202:	84 2f       	mov	r24, r20
    2204:	89 70       	andi	r24, 0x09	; 9
    2206:	81 30       	cpi	r24, 0x01	; 1
    2208:	31 f0       	breq	.+12     	; 0x2216 <dtoa_prf+0x4a>
    220a:	e1 fc       	sbrc	r14, 1
    220c:	06 c0       	rjmp	.+12     	; 0x221a <dtoa_prf+0x4e>
    220e:	e0 fe       	sbrs	r14, 0
    2210:	06 c0       	rjmp	.+12     	; 0x221e <dtoa_prf+0x52>
    2212:	90 e2       	ldi	r25, 0x20	; 32
    2214:	05 c0       	rjmp	.+10     	; 0x2220 <dtoa_prf+0x54>
    2216:	9d e2       	ldi	r25, 0x2D	; 45
    2218:	03 c0       	rjmp	.+6      	; 0x2220 <dtoa_prf+0x54>
    221a:	9b e2       	ldi	r25, 0x2B	; 43
    221c:	01 c0       	rjmp	.+2      	; 0x2220 <dtoa_prf+0x54>
    221e:	90 e0       	ldi	r25, 0x00	; 0
    2220:	5e 2d       	mov	r21, r14
    2222:	50 71       	andi	r21, 0x10	; 16
    2224:	43 ff       	sbrs	r20, 3
    2226:	3c c0       	rjmp	.+120    	; 0x22a0 <dtoa_prf+0xd4>
    2228:	91 11       	cpse	r25, r1
    222a:	02 c0       	rjmp	.+4      	; 0x2230 <dtoa_prf+0x64>
    222c:	83 e0       	ldi	r24, 0x03	; 3
    222e:	01 c0       	rjmp	.+2      	; 0x2232 <dtoa_prf+0x66>
    2230:	84 e0       	ldi	r24, 0x04	; 4
    2232:	81 17       	cp	r24, r17
    2234:	18 f4       	brcc	.+6      	; 0x223c <dtoa_prf+0x70>
    2236:	21 2f       	mov	r18, r17
    2238:	28 1b       	sub	r18, r24
    223a:	01 c0       	rjmp	.+2      	; 0x223e <dtoa_prf+0x72>
    223c:	20 e0       	ldi	r18, 0x00	; 0
    223e:	51 11       	cpse	r21, r1
    2240:	0b c0       	rjmp	.+22     	; 0x2258 <dtoa_prf+0x8c>
    2242:	f6 01       	movw	r30, r12
    2244:	82 2f       	mov	r24, r18
    2246:	30 e2       	ldi	r19, 0x20	; 32
    2248:	88 23       	and	r24, r24
    224a:	19 f0       	breq	.+6      	; 0x2252 <dtoa_prf+0x86>
    224c:	31 93       	st	Z+, r19
    224e:	81 50       	subi	r24, 0x01	; 1
    2250:	fb cf       	rjmp	.-10     	; 0x2248 <dtoa_prf+0x7c>
    2252:	c2 0e       	add	r12, r18
    2254:	d1 1c       	adc	r13, r1
    2256:	20 e0       	ldi	r18, 0x00	; 0
    2258:	99 23       	and	r25, r25
    225a:	29 f0       	breq	.+10     	; 0x2266 <dtoa_prf+0x9a>
    225c:	d6 01       	movw	r26, r12
    225e:	9c 93       	st	X, r25
    2260:	f6 01       	movw	r30, r12
    2262:	31 96       	adiw	r30, 0x01	; 1
    2264:	6f 01       	movw	r12, r30
    2266:	c6 01       	movw	r24, r12
    2268:	03 96       	adiw	r24, 0x03	; 3
    226a:	e2 fe       	sbrs	r14, 2
    226c:	0a c0       	rjmp	.+20     	; 0x2282 <dtoa_prf+0xb6>
    226e:	3e e4       	ldi	r19, 0x4E	; 78
    2270:	d6 01       	movw	r26, r12
    2272:	3c 93       	st	X, r19
    2274:	41 e4       	ldi	r20, 0x41	; 65
    2276:	11 96       	adiw	r26, 0x01	; 1
    2278:	4c 93       	st	X, r20
    227a:	11 97       	sbiw	r26, 0x01	; 1
    227c:	12 96       	adiw	r26, 0x02	; 2
    227e:	3c 93       	st	X, r19
    2280:	06 c0       	rjmp	.+12     	; 0x228e <dtoa_prf+0xc2>
    2282:	3e e6       	ldi	r19, 0x6E	; 110
    2284:	f6 01       	movw	r30, r12
    2286:	30 83       	st	Z, r19
    2288:	41 e6       	ldi	r20, 0x61	; 97
    228a:	41 83       	std	Z+1, r20	; 0x01
    228c:	32 83       	std	Z+2, r19	; 0x02
    228e:	fc 01       	movw	r30, r24
    2290:	32 2f       	mov	r19, r18
    2292:	40 e2       	ldi	r20, 0x20	; 32
    2294:	33 23       	and	r19, r19
    2296:	09 f4       	brne	.+2      	; 0x229a <dtoa_prf+0xce>
    2298:	42 c0       	rjmp	.+132    	; 0x231e <dtoa_prf+0x152>
    229a:	41 93       	st	Z+, r20
    229c:	31 50       	subi	r19, 0x01	; 1
    229e:	fa cf       	rjmp	.-12     	; 0x2294 <dtoa_prf+0xc8>
    22a0:	42 ff       	sbrs	r20, 2
    22a2:	44 c0       	rjmp	.+136    	; 0x232c <dtoa_prf+0x160>
    22a4:	91 11       	cpse	r25, r1
    22a6:	02 c0       	rjmp	.+4      	; 0x22ac <dtoa_prf+0xe0>
    22a8:	83 e0       	ldi	r24, 0x03	; 3
    22aa:	01 c0       	rjmp	.+2      	; 0x22ae <dtoa_prf+0xe2>
    22ac:	84 e0       	ldi	r24, 0x04	; 4
    22ae:	81 17       	cp	r24, r17
    22b0:	18 f4       	brcc	.+6      	; 0x22b8 <dtoa_prf+0xec>
    22b2:	21 2f       	mov	r18, r17
    22b4:	28 1b       	sub	r18, r24
    22b6:	01 c0       	rjmp	.+2      	; 0x22ba <dtoa_prf+0xee>
    22b8:	20 e0       	ldi	r18, 0x00	; 0
    22ba:	51 11       	cpse	r21, r1
    22bc:	0b c0       	rjmp	.+22     	; 0x22d4 <dtoa_prf+0x108>
    22be:	f6 01       	movw	r30, r12
    22c0:	82 2f       	mov	r24, r18
    22c2:	30 e2       	ldi	r19, 0x20	; 32
    22c4:	88 23       	and	r24, r24
    22c6:	19 f0       	breq	.+6      	; 0x22ce <dtoa_prf+0x102>
    22c8:	31 93       	st	Z+, r19
    22ca:	81 50       	subi	r24, 0x01	; 1
    22cc:	fb cf       	rjmp	.-10     	; 0x22c4 <dtoa_prf+0xf8>
    22ce:	c2 0e       	add	r12, r18
    22d0:	d1 1c       	adc	r13, r1
    22d2:	20 e0       	ldi	r18, 0x00	; 0
    22d4:	99 23       	and	r25, r25
    22d6:	29 f0       	breq	.+10     	; 0x22e2 <dtoa_prf+0x116>
    22d8:	d6 01       	movw	r26, r12
    22da:	9c 93       	st	X, r25
    22dc:	f6 01       	movw	r30, r12
    22de:	31 96       	adiw	r30, 0x01	; 1
    22e0:	6f 01       	movw	r12, r30
    22e2:	c6 01       	movw	r24, r12
    22e4:	03 96       	adiw	r24, 0x03	; 3
    22e6:	e2 fe       	sbrs	r14, 2
    22e8:	0b c0       	rjmp	.+22     	; 0x2300 <dtoa_prf+0x134>
    22ea:	39 e4       	ldi	r19, 0x49	; 73
    22ec:	d6 01       	movw	r26, r12
    22ee:	3c 93       	st	X, r19
    22f0:	3e e4       	ldi	r19, 0x4E	; 78
    22f2:	11 96       	adiw	r26, 0x01	; 1
    22f4:	3c 93       	st	X, r19
    22f6:	11 97       	sbiw	r26, 0x01	; 1
    22f8:	36 e4       	ldi	r19, 0x46	; 70
    22fa:	12 96       	adiw	r26, 0x02	; 2
    22fc:	3c 93       	st	X, r19
    22fe:	07 c0       	rjmp	.+14     	; 0x230e <dtoa_prf+0x142>
    2300:	39 e6       	ldi	r19, 0x69	; 105
    2302:	f6 01       	movw	r30, r12
    2304:	30 83       	st	Z, r19
    2306:	3e e6       	ldi	r19, 0x6E	; 110
    2308:	31 83       	std	Z+1, r19	; 0x01
    230a:	36 e6       	ldi	r19, 0x66	; 102
    230c:	32 83       	std	Z+2, r19	; 0x02
    230e:	fc 01       	movw	r30, r24
    2310:	32 2f       	mov	r19, r18
    2312:	40 e2       	ldi	r20, 0x20	; 32
    2314:	33 23       	and	r19, r19
    2316:	19 f0       	breq	.+6      	; 0x231e <dtoa_prf+0x152>
    2318:	41 93       	st	Z+, r20
    231a:	31 50       	subi	r19, 0x01	; 1
    231c:	fb cf       	rjmp	.-10     	; 0x2314 <dtoa_prf+0x148>
    231e:	fc 01       	movw	r30, r24
    2320:	e2 0f       	add	r30, r18
    2322:	f1 1d       	adc	r31, r1
    2324:	10 82       	st	Z, r1
    2326:	8e ef       	ldi	r24, 0xFE	; 254
    2328:	9f ef       	ldi	r25, 0xFF	; 255
    232a:	a6 c0       	rjmp	.+332    	; 0x2478 <dtoa_prf+0x2ac>
    232c:	21 e0       	ldi	r18, 0x01	; 1
    232e:	30 e0       	ldi	r19, 0x00	; 0
    2330:	91 11       	cpse	r25, r1
    2332:	02 c0       	rjmp	.+4      	; 0x2338 <dtoa_prf+0x16c>
    2334:	20 e0       	ldi	r18, 0x00	; 0
    2336:	30 e0       	ldi	r19, 0x00	; 0
    2338:	16 16       	cp	r1, r22
    233a:	17 06       	cpc	r1, r23
    233c:	1c f4       	brge	.+6      	; 0x2344 <dtoa_prf+0x178>
    233e:	fb 01       	movw	r30, r22
    2340:	31 96       	adiw	r30, 0x01	; 1
    2342:	02 c0       	rjmp	.+4      	; 0x2348 <dtoa_prf+0x17c>
    2344:	e1 e0       	ldi	r30, 0x01	; 1
    2346:	f0 e0       	ldi	r31, 0x00	; 0
    2348:	2e 0f       	add	r18, r30
    234a:	3f 1f       	adc	r19, r31
    234c:	bb 20       	and	r11, r11
    234e:	21 f0       	breq	.+8      	; 0x2358 <dtoa_prf+0x18c>
    2350:	eb 2d       	mov	r30, r11
    2352:	f0 e0       	ldi	r31, 0x00	; 0
    2354:	31 96       	adiw	r30, 0x01	; 1
    2356:	02 c0       	rjmp	.+4      	; 0x235c <dtoa_prf+0x190>
    2358:	e0 e0       	ldi	r30, 0x00	; 0
    235a:	f0 e0       	ldi	r31, 0x00	; 0
    235c:	2e 0f       	add	r18, r30
    235e:	3f 1f       	adc	r19, r31
    2360:	e1 2f       	mov	r30, r17
    2362:	f0 e0       	ldi	r31, 0x00	; 0
    2364:	2e 17       	cp	r18, r30
    2366:	3f 07       	cpc	r19, r31
    2368:	1c f4       	brge	.+6      	; 0x2370 <dtoa_prf+0x1a4>
    236a:	12 1b       	sub	r17, r18
    236c:	21 2f       	mov	r18, r17
    236e:	01 c0       	rjmp	.+2      	; 0x2372 <dtoa_prf+0x1a6>
    2370:	20 e0       	ldi	r18, 0x00	; 0
    2372:	8e 2d       	mov	r24, r14
    2374:	88 71       	andi	r24, 0x18	; 24
    2376:	59 f4       	brne	.+22     	; 0x238e <dtoa_prf+0x1c2>
    2378:	f6 01       	movw	r30, r12
    237a:	82 2f       	mov	r24, r18
    237c:	30 e2       	ldi	r19, 0x20	; 32
    237e:	88 23       	and	r24, r24
    2380:	19 f0       	breq	.+6      	; 0x2388 <dtoa_prf+0x1bc>
    2382:	31 93       	st	Z+, r19
    2384:	81 50       	subi	r24, 0x01	; 1
    2386:	fb cf       	rjmp	.-10     	; 0x237e <dtoa_prf+0x1b2>
    2388:	c2 0e       	add	r12, r18
    238a:	d1 1c       	adc	r13, r1
    238c:	20 e0       	ldi	r18, 0x00	; 0
    238e:	99 23       	and	r25, r25
    2390:	29 f0       	breq	.+10     	; 0x239c <dtoa_prf+0x1d0>
    2392:	d6 01       	movw	r26, r12
    2394:	9c 93       	st	X, r25
    2396:	f6 01       	movw	r30, r12
    2398:	31 96       	adiw	r30, 0x01	; 1
    239a:	6f 01       	movw	r12, r30
    239c:	51 11       	cpse	r21, r1
    239e:	0b c0       	rjmp	.+22     	; 0x23b6 <dtoa_prf+0x1ea>
    23a0:	f6 01       	movw	r30, r12
    23a2:	82 2f       	mov	r24, r18
    23a4:	90 e3       	ldi	r25, 0x30	; 48
    23a6:	88 23       	and	r24, r24
    23a8:	19 f0       	breq	.+6      	; 0x23b0 <dtoa_prf+0x1e4>
    23aa:	91 93       	st	Z+, r25
    23ac:	81 50       	subi	r24, 0x01	; 1
    23ae:	fb cf       	rjmp	.-10     	; 0x23a6 <dtoa_prf+0x1da>
    23b0:	c2 0e       	add	r12, r18
    23b2:	d1 1c       	adc	r13, r1
    23b4:	20 e0       	ldi	r18, 0x00	; 0
    23b6:	0f 2d       	mov	r16, r15
    23b8:	06 0f       	add	r16, r22
    23ba:	9a 81       	ldd	r25, Y+2	; 0x02
    23bc:	34 2f       	mov	r19, r20
    23be:	30 71       	andi	r19, 0x10	; 16
    23c0:	44 ff       	sbrs	r20, 4
    23c2:	03 c0       	rjmp	.+6      	; 0x23ca <dtoa_prf+0x1fe>
    23c4:	91 33       	cpi	r25, 0x31	; 49
    23c6:	09 f4       	brne	.+2      	; 0x23ca <dtoa_prf+0x1fe>
    23c8:	01 50       	subi	r16, 0x01	; 1
    23ca:	10 16       	cp	r1, r16
    23cc:	24 f4       	brge	.+8      	; 0x23d6 <dtoa_prf+0x20a>
    23ce:	09 30       	cpi	r16, 0x09	; 9
    23d0:	18 f0       	brcs	.+6      	; 0x23d8 <dtoa_prf+0x20c>
    23d2:	08 e0       	ldi	r16, 0x08	; 8
    23d4:	01 c0       	rjmp	.+2      	; 0x23d8 <dtoa_prf+0x20c>
    23d6:	01 e0       	ldi	r16, 0x01	; 1
    23d8:	ab 01       	movw	r20, r22
    23da:	77 ff       	sbrs	r23, 7
    23dc:	02 c0       	rjmp	.+4      	; 0x23e2 <dtoa_prf+0x216>
    23de:	40 e0       	ldi	r20, 0x00	; 0
    23e0:	50 e0       	ldi	r21, 0x00	; 0
    23e2:	fb 01       	movw	r30, r22
    23e4:	e4 1b       	sub	r30, r20
    23e6:	f5 0b       	sbc	r31, r21
    23e8:	a1 e0       	ldi	r26, 0x01	; 1
    23ea:	b0 e0       	ldi	r27, 0x00	; 0
    23ec:	ac 0f       	add	r26, r28
    23ee:	bd 1f       	adc	r27, r29
    23f0:	ea 0f       	add	r30, r26
    23f2:	fb 1f       	adc	r31, r27
    23f4:	8e e2       	ldi	r24, 0x2E	; 46
    23f6:	a8 2e       	mov	r10, r24
    23f8:	4b 01       	movw	r8, r22
    23fa:	80 1a       	sub	r8, r16
    23fc:	91 08       	sbc	r9, r1
    23fe:	0b 2d       	mov	r16, r11
    2400:	10 e0       	ldi	r17, 0x00	; 0
    2402:	11 95       	neg	r17
    2404:	01 95       	neg	r16
    2406:	11 09       	sbc	r17, r1
    2408:	4f 3f       	cpi	r20, 0xFF	; 255
    240a:	bf ef       	ldi	r27, 0xFF	; 255
    240c:	5b 07       	cpc	r21, r27
    240e:	21 f4       	brne	.+8      	; 0x2418 <dtoa_prf+0x24c>
    2410:	d6 01       	movw	r26, r12
    2412:	ac 92       	st	X, r10
    2414:	11 96       	adiw	r26, 0x01	; 1
    2416:	6d 01       	movw	r12, r26
    2418:	64 17       	cp	r22, r20
    241a:	75 07       	cpc	r23, r21
    241c:	2c f0       	brlt	.+10     	; 0x2428 <dtoa_prf+0x25c>
    241e:	84 16       	cp	r8, r20
    2420:	95 06       	cpc	r9, r21
    2422:	14 f4       	brge	.+4      	; 0x2428 <dtoa_prf+0x25c>
    2424:	81 81       	ldd	r24, Z+1	; 0x01
    2426:	01 c0       	rjmp	.+2      	; 0x242a <dtoa_prf+0x25e>
    2428:	80 e3       	ldi	r24, 0x30	; 48
    242a:	41 50       	subi	r20, 0x01	; 1
    242c:	51 09       	sbc	r21, r1
    242e:	31 96       	adiw	r30, 0x01	; 1
    2430:	d6 01       	movw	r26, r12
    2432:	11 96       	adiw	r26, 0x01	; 1
    2434:	7d 01       	movw	r14, r26
    2436:	40 17       	cp	r20, r16
    2438:	51 07       	cpc	r21, r17
    243a:	24 f0       	brlt	.+8      	; 0x2444 <dtoa_prf+0x278>
    243c:	d6 01       	movw	r26, r12
    243e:	8c 93       	st	X, r24
    2440:	67 01       	movw	r12, r14
    2442:	e2 cf       	rjmp	.-60     	; 0x2408 <dtoa_prf+0x23c>
    2444:	64 17       	cp	r22, r20
    2446:	75 07       	cpc	r23, r21
    2448:	39 f4       	brne	.+14     	; 0x2458 <dtoa_prf+0x28c>
    244a:	96 33       	cpi	r25, 0x36	; 54
    244c:	20 f4       	brcc	.+8      	; 0x2456 <dtoa_prf+0x28a>
    244e:	95 33       	cpi	r25, 0x35	; 53
    2450:	19 f4       	brne	.+6      	; 0x2458 <dtoa_prf+0x28c>
    2452:	31 11       	cpse	r19, r1
    2454:	01 c0       	rjmp	.+2      	; 0x2458 <dtoa_prf+0x28c>
    2456:	81 e3       	ldi	r24, 0x31	; 49
    2458:	f6 01       	movw	r30, r12
    245a:	80 83       	st	Z, r24
    245c:	f7 01       	movw	r30, r14
    245e:	82 2f       	mov	r24, r18
    2460:	90 e2       	ldi	r25, 0x20	; 32
    2462:	88 23       	and	r24, r24
    2464:	19 f0       	breq	.+6      	; 0x246c <dtoa_prf+0x2a0>
    2466:	91 93       	st	Z+, r25
    2468:	81 50       	subi	r24, 0x01	; 1
    246a:	fb cf       	rjmp	.-10     	; 0x2462 <dtoa_prf+0x296>
    246c:	f7 01       	movw	r30, r14
    246e:	e2 0f       	add	r30, r18
    2470:	f1 1d       	adc	r31, r1
    2472:	10 82       	st	Z, r1
    2474:	80 e0       	ldi	r24, 0x00	; 0
    2476:	90 e0       	ldi	r25, 0x00	; 0
    2478:	29 96       	adiw	r28, 0x09	; 9
    247a:	ec e0       	ldi	r30, 0x0C	; 12
    247c:	0c 94 ea 13 	jmp	0x27d4	; 0x27d4 <__epilogue_restores__+0xc>

00002480 <__ftoa_engine>:
    2480:	28 30       	cpi	r18, 0x08	; 8
    2482:	08 f0       	brcs	.+2      	; 0x2486 <__ftoa_engine+0x6>
    2484:	27 e0       	ldi	r18, 0x07	; 7
    2486:	33 27       	eor	r19, r19
    2488:	da 01       	movw	r26, r20
    248a:	99 0f       	add	r25, r25
    248c:	31 1d       	adc	r19, r1
    248e:	87 fd       	sbrc	r24, 7
    2490:	91 60       	ori	r25, 0x01	; 1
    2492:	00 96       	adiw	r24, 0x00	; 0
    2494:	61 05       	cpc	r22, r1
    2496:	71 05       	cpc	r23, r1
    2498:	39 f4       	brne	.+14     	; 0x24a8 <__ftoa_engine+0x28>
    249a:	32 60       	ori	r19, 0x02	; 2
    249c:	2e 5f       	subi	r18, 0xFE	; 254
    249e:	3d 93       	st	X+, r19
    24a0:	30 e3       	ldi	r19, 0x30	; 48
    24a2:	2a 95       	dec	r18
    24a4:	e1 f7       	brne	.-8      	; 0x249e <__ftoa_engine+0x1e>
    24a6:	08 95       	ret
    24a8:	9f 3f       	cpi	r25, 0xFF	; 255
    24aa:	30 f0       	brcs	.+12     	; 0x24b8 <__ftoa_engine+0x38>
    24ac:	80 38       	cpi	r24, 0x80	; 128
    24ae:	71 05       	cpc	r23, r1
    24b0:	61 05       	cpc	r22, r1
    24b2:	09 f0       	breq	.+2      	; 0x24b6 <__ftoa_engine+0x36>
    24b4:	3c 5f       	subi	r19, 0xFC	; 252
    24b6:	3c 5f       	subi	r19, 0xFC	; 252
    24b8:	3d 93       	st	X+, r19
    24ba:	91 30       	cpi	r25, 0x01	; 1
    24bc:	08 f0       	brcs	.+2      	; 0x24c0 <__ftoa_engine+0x40>
    24be:	80 68       	ori	r24, 0x80	; 128
    24c0:	91 1d       	adc	r25, r1
    24c2:	df 93       	push	r29
    24c4:	cf 93       	push	r28
    24c6:	1f 93       	push	r17
    24c8:	0f 93       	push	r16
    24ca:	ff 92       	push	r15
    24cc:	ef 92       	push	r14
    24ce:	19 2f       	mov	r17, r25
    24d0:	98 7f       	andi	r25, 0xF8	; 248
    24d2:	96 95       	lsr	r25
    24d4:	e9 2f       	mov	r30, r25
    24d6:	96 95       	lsr	r25
    24d8:	96 95       	lsr	r25
    24da:	e9 0f       	add	r30, r25
    24dc:	ff 27       	eor	r31, r31
    24de:	ee 52       	subi	r30, 0x2E	; 46
    24e0:	ff 4f       	sbci	r31, 0xFF	; 255
    24e2:	99 27       	eor	r25, r25
    24e4:	33 27       	eor	r19, r19
    24e6:	ee 24       	eor	r14, r14
    24e8:	ff 24       	eor	r15, r15
    24ea:	a7 01       	movw	r20, r14
    24ec:	e7 01       	movw	r28, r14
    24ee:	05 90       	lpm	r0, Z+
    24f0:	08 94       	sec
    24f2:	07 94       	ror	r0
    24f4:	28 f4       	brcc	.+10     	; 0x2500 <__ftoa_engine+0x80>
    24f6:	36 0f       	add	r19, r22
    24f8:	e7 1e       	adc	r14, r23
    24fa:	f8 1e       	adc	r15, r24
    24fc:	49 1f       	adc	r20, r25
    24fe:	51 1d       	adc	r21, r1
    2500:	66 0f       	add	r22, r22
    2502:	77 1f       	adc	r23, r23
    2504:	88 1f       	adc	r24, r24
    2506:	99 1f       	adc	r25, r25
    2508:	06 94       	lsr	r0
    250a:	a1 f7       	brne	.-24     	; 0x24f4 <__ftoa_engine+0x74>
    250c:	05 90       	lpm	r0, Z+
    250e:	07 94       	ror	r0
    2510:	28 f4       	brcc	.+10     	; 0x251c <__ftoa_engine+0x9c>
    2512:	e7 0e       	add	r14, r23
    2514:	f8 1e       	adc	r15, r24
    2516:	49 1f       	adc	r20, r25
    2518:	56 1f       	adc	r21, r22
    251a:	c1 1d       	adc	r28, r1
    251c:	77 0f       	add	r23, r23
    251e:	88 1f       	adc	r24, r24
    2520:	99 1f       	adc	r25, r25
    2522:	66 1f       	adc	r22, r22
    2524:	06 94       	lsr	r0
    2526:	a1 f7       	brne	.-24     	; 0x2510 <__ftoa_engine+0x90>
    2528:	05 90       	lpm	r0, Z+
    252a:	07 94       	ror	r0
    252c:	28 f4       	brcc	.+10     	; 0x2538 <__ftoa_engine+0xb8>
    252e:	f8 0e       	add	r15, r24
    2530:	49 1f       	adc	r20, r25
    2532:	56 1f       	adc	r21, r22
    2534:	c7 1f       	adc	r28, r23
    2536:	d1 1d       	adc	r29, r1
    2538:	88 0f       	add	r24, r24
    253a:	99 1f       	adc	r25, r25
    253c:	66 1f       	adc	r22, r22
    253e:	77 1f       	adc	r23, r23
    2540:	06 94       	lsr	r0
    2542:	a1 f7       	brne	.-24     	; 0x252c <__ftoa_engine+0xac>
    2544:	05 90       	lpm	r0, Z+
    2546:	07 94       	ror	r0
    2548:	20 f4       	brcc	.+8      	; 0x2552 <__ftoa_engine+0xd2>
    254a:	49 0f       	add	r20, r25
    254c:	56 1f       	adc	r21, r22
    254e:	c7 1f       	adc	r28, r23
    2550:	d8 1f       	adc	r29, r24
    2552:	99 0f       	add	r25, r25
    2554:	66 1f       	adc	r22, r22
    2556:	77 1f       	adc	r23, r23
    2558:	88 1f       	adc	r24, r24
    255a:	06 94       	lsr	r0
    255c:	a9 f7       	brne	.-22     	; 0x2548 <__ftoa_engine+0xc8>
    255e:	84 91       	lpm	r24, Z
    2560:	10 95       	com	r17
    2562:	17 70       	andi	r17, 0x07	; 7
    2564:	41 f0       	breq	.+16     	; 0x2576 <__ftoa_engine+0xf6>
    2566:	d6 95       	lsr	r29
    2568:	c7 95       	ror	r28
    256a:	57 95       	ror	r21
    256c:	47 95       	ror	r20
    256e:	f7 94       	ror	r15
    2570:	e7 94       	ror	r14
    2572:	1a 95       	dec	r17
    2574:	c1 f7       	brne	.-16     	; 0x2566 <__ftoa_engine+0xe6>
    2576:	e8 e7       	ldi	r30, 0x78	; 120
    2578:	f0 e0       	ldi	r31, 0x00	; 0
    257a:	68 94       	set
    257c:	15 90       	lpm	r1, Z+
    257e:	15 91       	lpm	r17, Z+
    2580:	35 91       	lpm	r19, Z+
    2582:	65 91       	lpm	r22, Z+
    2584:	95 91       	lpm	r25, Z+
    2586:	05 90       	lpm	r0, Z+
    2588:	7f e2       	ldi	r23, 0x2F	; 47
    258a:	73 95       	inc	r23
    258c:	e1 18       	sub	r14, r1
    258e:	f1 0a       	sbc	r15, r17
    2590:	43 0b       	sbc	r20, r19
    2592:	56 0b       	sbc	r21, r22
    2594:	c9 0b       	sbc	r28, r25
    2596:	d0 09       	sbc	r29, r0
    2598:	c0 f7       	brcc	.-16     	; 0x258a <__ftoa_engine+0x10a>
    259a:	e1 0c       	add	r14, r1
    259c:	f1 1e       	adc	r15, r17
    259e:	43 1f       	adc	r20, r19
    25a0:	56 1f       	adc	r21, r22
    25a2:	c9 1f       	adc	r28, r25
    25a4:	d0 1d       	adc	r29, r0
    25a6:	7e f4       	brtc	.+30     	; 0x25c6 <__ftoa_engine+0x146>
    25a8:	70 33       	cpi	r23, 0x30	; 48
    25aa:	11 f4       	brne	.+4      	; 0x25b0 <__ftoa_engine+0x130>
    25ac:	8a 95       	dec	r24
    25ae:	e6 cf       	rjmp	.-52     	; 0x257c <__ftoa_engine+0xfc>
    25b0:	e8 94       	clt
    25b2:	01 50       	subi	r16, 0x01	; 1
    25b4:	30 f0       	brcs	.+12     	; 0x25c2 <__ftoa_engine+0x142>
    25b6:	08 0f       	add	r16, r24
    25b8:	0a f4       	brpl	.+2      	; 0x25bc <__ftoa_engine+0x13c>
    25ba:	00 27       	eor	r16, r16
    25bc:	02 17       	cp	r16, r18
    25be:	08 f4       	brcc	.+2      	; 0x25c2 <__ftoa_engine+0x142>
    25c0:	20 2f       	mov	r18, r16
    25c2:	23 95       	inc	r18
    25c4:	02 2f       	mov	r16, r18
    25c6:	7a 33       	cpi	r23, 0x3A	; 58
    25c8:	28 f0       	brcs	.+10     	; 0x25d4 <__ftoa_engine+0x154>
    25ca:	79 e3       	ldi	r23, 0x39	; 57
    25cc:	7d 93       	st	X+, r23
    25ce:	2a 95       	dec	r18
    25d0:	e9 f7       	brne	.-6      	; 0x25cc <__ftoa_engine+0x14c>
    25d2:	10 c0       	rjmp	.+32     	; 0x25f4 <__ftoa_engine+0x174>
    25d4:	7d 93       	st	X+, r23
    25d6:	2a 95       	dec	r18
    25d8:	89 f6       	brne	.-94     	; 0x257c <__ftoa_engine+0xfc>
    25da:	06 94       	lsr	r0
    25dc:	97 95       	ror	r25
    25de:	67 95       	ror	r22
    25e0:	37 95       	ror	r19
    25e2:	17 95       	ror	r17
    25e4:	17 94       	ror	r1
    25e6:	e1 18       	sub	r14, r1
    25e8:	f1 0a       	sbc	r15, r17
    25ea:	43 0b       	sbc	r20, r19
    25ec:	56 0b       	sbc	r21, r22
    25ee:	c9 0b       	sbc	r28, r25
    25f0:	d0 09       	sbc	r29, r0
    25f2:	98 f0       	brcs	.+38     	; 0x261a <__ftoa_engine+0x19a>
    25f4:	23 95       	inc	r18
    25f6:	7e 91       	ld	r23, -X
    25f8:	73 95       	inc	r23
    25fa:	7a 33       	cpi	r23, 0x3A	; 58
    25fc:	08 f0       	brcs	.+2      	; 0x2600 <__ftoa_engine+0x180>
    25fe:	70 e3       	ldi	r23, 0x30	; 48
    2600:	7c 93       	st	X, r23
    2602:	20 13       	cpse	r18, r16
    2604:	b8 f7       	brcc	.-18     	; 0x25f4 <__ftoa_engine+0x174>
    2606:	7e 91       	ld	r23, -X
    2608:	70 61       	ori	r23, 0x10	; 16
    260a:	7d 93       	st	X+, r23
    260c:	30 f0       	brcs	.+12     	; 0x261a <__ftoa_engine+0x19a>
    260e:	83 95       	inc	r24
    2610:	71 e3       	ldi	r23, 0x31	; 49
    2612:	7d 93       	st	X+, r23
    2614:	70 e3       	ldi	r23, 0x30	; 48
    2616:	2a 95       	dec	r18
    2618:	e1 f7       	brne	.-8      	; 0x2612 <__ftoa_engine+0x192>
    261a:	11 24       	eor	r1, r1
    261c:	ef 90       	pop	r14
    261e:	ff 90       	pop	r15
    2620:	0f 91       	pop	r16
    2622:	1f 91       	pop	r17
    2624:	cf 91       	pop	r28
    2626:	df 91       	pop	r29
    2628:	99 27       	eor	r25, r25
    262a:	87 fd       	sbrc	r24, 7
    262c:	90 95       	com	r25
    262e:	08 95       	ret

00002630 <strnlen_P>:
    2630:	fc 01       	movw	r30, r24
    2632:	05 90       	lpm	r0, Z+
    2634:	61 50       	subi	r22, 0x01	; 1
    2636:	70 40       	sbci	r23, 0x00	; 0
    2638:	01 10       	cpse	r0, r1
    263a:	d8 f7       	brcc	.-10     	; 0x2632 <strnlen_P+0x2>
    263c:	80 95       	com	r24
    263e:	90 95       	com	r25
    2640:	8e 0f       	add	r24, r30
    2642:	9f 1f       	adc	r25, r31
    2644:	08 95       	ret

00002646 <strnlen>:
    2646:	fc 01       	movw	r30, r24
    2648:	61 50       	subi	r22, 0x01	; 1
    264a:	70 40       	sbci	r23, 0x00	; 0
    264c:	01 90       	ld	r0, Z+
    264e:	01 10       	cpse	r0, r1
    2650:	d8 f7       	brcc	.-10     	; 0x2648 <strnlen+0x2>
    2652:	80 95       	com	r24
    2654:	90 95       	com	r25
    2656:	8e 0f       	add	r24, r30
    2658:	9f 1f       	adc	r25, r31
    265a:	08 95       	ret

0000265c <fputc>:
    265c:	0f 93       	push	r16
    265e:	1f 93       	push	r17
    2660:	cf 93       	push	r28
    2662:	df 93       	push	r29
    2664:	fb 01       	movw	r30, r22
    2666:	23 81       	ldd	r18, Z+3	; 0x03
    2668:	21 fd       	sbrc	r18, 1
    266a:	03 c0       	rjmp	.+6      	; 0x2672 <fputc+0x16>
    266c:	8f ef       	ldi	r24, 0xFF	; 255
    266e:	9f ef       	ldi	r25, 0xFF	; 255
    2670:	2c c0       	rjmp	.+88     	; 0x26ca <fputc+0x6e>
    2672:	22 ff       	sbrs	r18, 2
    2674:	16 c0       	rjmp	.+44     	; 0x26a2 <fputc+0x46>
    2676:	46 81       	ldd	r20, Z+6	; 0x06
    2678:	57 81       	ldd	r21, Z+7	; 0x07
    267a:	24 81       	ldd	r18, Z+4	; 0x04
    267c:	35 81       	ldd	r19, Z+5	; 0x05
    267e:	42 17       	cp	r20, r18
    2680:	53 07       	cpc	r21, r19
    2682:	44 f4       	brge	.+16     	; 0x2694 <fputc+0x38>
    2684:	a0 81       	ld	r26, Z
    2686:	b1 81       	ldd	r27, Z+1	; 0x01
    2688:	9d 01       	movw	r18, r26
    268a:	2f 5f       	subi	r18, 0xFF	; 255
    268c:	3f 4f       	sbci	r19, 0xFF	; 255
    268e:	31 83       	std	Z+1, r19	; 0x01
    2690:	20 83       	st	Z, r18
    2692:	8c 93       	st	X, r24
    2694:	26 81       	ldd	r18, Z+6	; 0x06
    2696:	37 81       	ldd	r19, Z+7	; 0x07
    2698:	2f 5f       	subi	r18, 0xFF	; 255
    269a:	3f 4f       	sbci	r19, 0xFF	; 255
    269c:	37 83       	std	Z+7, r19	; 0x07
    269e:	26 83       	std	Z+6, r18	; 0x06
    26a0:	14 c0       	rjmp	.+40     	; 0x26ca <fputc+0x6e>
    26a2:	8b 01       	movw	r16, r22
    26a4:	ec 01       	movw	r28, r24
    26a6:	fb 01       	movw	r30, r22
    26a8:	00 84       	ldd	r0, Z+8	; 0x08
    26aa:	f1 85       	ldd	r31, Z+9	; 0x09
    26ac:	e0 2d       	mov	r30, r0
    26ae:	09 95       	icall
    26b0:	89 2b       	or	r24, r25
    26b2:	e1 f6       	brne	.-72     	; 0x266c <fputc+0x10>
    26b4:	d8 01       	movw	r26, r16
    26b6:	16 96       	adiw	r26, 0x06	; 6
    26b8:	8d 91       	ld	r24, X+
    26ba:	9c 91       	ld	r25, X
    26bc:	17 97       	sbiw	r26, 0x07	; 7
    26be:	01 96       	adiw	r24, 0x01	; 1
    26c0:	17 96       	adiw	r26, 0x07	; 7
    26c2:	9c 93       	st	X, r25
    26c4:	8e 93       	st	-X, r24
    26c6:	16 97       	sbiw	r26, 0x06	; 6
    26c8:	ce 01       	movw	r24, r28
    26ca:	df 91       	pop	r29
    26cc:	cf 91       	pop	r28
    26ce:	1f 91       	pop	r17
    26d0:	0f 91       	pop	r16
    26d2:	08 95       	ret

000026d4 <__ultoa_invert>:
    26d4:	fa 01       	movw	r30, r20
    26d6:	aa 27       	eor	r26, r26
    26d8:	28 30       	cpi	r18, 0x08	; 8
    26da:	51 f1       	breq	.+84     	; 0x2730 <__ultoa_invert+0x5c>
    26dc:	20 31       	cpi	r18, 0x10	; 16
    26de:	81 f1       	breq	.+96     	; 0x2740 <__ultoa_invert+0x6c>
    26e0:	e8 94       	clt
    26e2:	6f 93       	push	r22
    26e4:	6e 7f       	andi	r22, 0xFE	; 254
    26e6:	6e 5f       	subi	r22, 0xFE	; 254
    26e8:	7f 4f       	sbci	r23, 0xFF	; 255
    26ea:	8f 4f       	sbci	r24, 0xFF	; 255
    26ec:	9f 4f       	sbci	r25, 0xFF	; 255
    26ee:	af 4f       	sbci	r26, 0xFF	; 255
    26f0:	b1 e0       	ldi	r27, 0x01	; 1
    26f2:	3e d0       	rcall	.+124    	; 0x2770 <__ultoa_invert+0x9c>
    26f4:	b4 e0       	ldi	r27, 0x04	; 4
    26f6:	3c d0       	rcall	.+120    	; 0x2770 <__ultoa_invert+0x9c>
    26f8:	67 0f       	add	r22, r23
    26fa:	78 1f       	adc	r23, r24
    26fc:	89 1f       	adc	r24, r25
    26fe:	9a 1f       	adc	r25, r26
    2700:	a1 1d       	adc	r26, r1
    2702:	68 0f       	add	r22, r24
    2704:	79 1f       	adc	r23, r25
    2706:	8a 1f       	adc	r24, r26
    2708:	91 1d       	adc	r25, r1
    270a:	a1 1d       	adc	r26, r1
    270c:	6a 0f       	add	r22, r26
    270e:	71 1d       	adc	r23, r1
    2710:	81 1d       	adc	r24, r1
    2712:	91 1d       	adc	r25, r1
    2714:	a1 1d       	adc	r26, r1
    2716:	20 d0       	rcall	.+64     	; 0x2758 <__ultoa_invert+0x84>
    2718:	09 f4       	brne	.+2      	; 0x271c <__ultoa_invert+0x48>
    271a:	68 94       	set
    271c:	3f 91       	pop	r19
    271e:	2a e0       	ldi	r18, 0x0A	; 10
    2720:	26 9f       	mul	r18, r22
    2722:	11 24       	eor	r1, r1
    2724:	30 19       	sub	r19, r0
    2726:	30 5d       	subi	r19, 0xD0	; 208
    2728:	31 93       	st	Z+, r19
    272a:	de f6       	brtc	.-74     	; 0x26e2 <__ultoa_invert+0xe>
    272c:	cf 01       	movw	r24, r30
    272e:	08 95       	ret
    2730:	46 2f       	mov	r20, r22
    2732:	47 70       	andi	r20, 0x07	; 7
    2734:	40 5d       	subi	r20, 0xD0	; 208
    2736:	41 93       	st	Z+, r20
    2738:	b3 e0       	ldi	r27, 0x03	; 3
    273a:	0f d0       	rcall	.+30     	; 0x275a <__ultoa_invert+0x86>
    273c:	c9 f7       	brne	.-14     	; 0x2730 <__ultoa_invert+0x5c>
    273e:	f6 cf       	rjmp	.-20     	; 0x272c <__ultoa_invert+0x58>
    2740:	46 2f       	mov	r20, r22
    2742:	4f 70       	andi	r20, 0x0F	; 15
    2744:	40 5d       	subi	r20, 0xD0	; 208
    2746:	4a 33       	cpi	r20, 0x3A	; 58
    2748:	18 f0       	brcs	.+6      	; 0x2750 <__ultoa_invert+0x7c>
    274a:	49 5d       	subi	r20, 0xD9	; 217
    274c:	31 fd       	sbrc	r19, 1
    274e:	40 52       	subi	r20, 0x20	; 32
    2750:	41 93       	st	Z+, r20
    2752:	02 d0       	rcall	.+4      	; 0x2758 <__ultoa_invert+0x84>
    2754:	a9 f7       	brne	.-22     	; 0x2740 <__ultoa_invert+0x6c>
    2756:	ea cf       	rjmp	.-44     	; 0x272c <__ultoa_invert+0x58>
    2758:	b4 e0       	ldi	r27, 0x04	; 4
    275a:	a6 95       	lsr	r26
    275c:	97 95       	ror	r25
    275e:	87 95       	ror	r24
    2760:	77 95       	ror	r23
    2762:	67 95       	ror	r22
    2764:	ba 95       	dec	r27
    2766:	c9 f7       	brne	.-14     	; 0x275a <__ultoa_invert+0x86>
    2768:	00 97       	sbiw	r24, 0x00	; 0
    276a:	61 05       	cpc	r22, r1
    276c:	71 05       	cpc	r23, r1
    276e:	08 95       	ret
    2770:	9b 01       	movw	r18, r22
    2772:	ac 01       	movw	r20, r24
    2774:	0a 2e       	mov	r0, r26
    2776:	06 94       	lsr	r0
    2778:	57 95       	ror	r21
    277a:	47 95       	ror	r20
    277c:	37 95       	ror	r19
    277e:	27 95       	ror	r18
    2780:	ba 95       	dec	r27
    2782:	c9 f7       	brne	.-14     	; 0x2776 <__ultoa_invert+0xa2>
    2784:	62 0f       	add	r22, r18
    2786:	73 1f       	adc	r23, r19
    2788:	84 1f       	adc	r24, r20
    278a:	95 1f       	adc	r25, r21
    278c:	a0 1d       	adc	r26, r0
    278e:	08 95       	ret

00002790 <__prologue_saves__>:
    2790:	2f 92       	push	r2
    2792:	3f 92       	push	r3
    2794:	4f 92       	push	r4
    2796:	5f 92       	push	r5
    2798:	6f 92       	push	r6
    279a:	7f 92       	push	r7
    279c:	8f 92       	push	r8
    279e:	9f 92       	push	r9
    27a0:	af 92       	push	r10
    27a2:	bf 92       	push	r11
    27a4:	cf 92       	push	r12
    27a6:	df 92       	push	r13
    27a8:	ef 92       	push	r14
    27aa:	ff 92       	push	r15
    27ac:	0f 93       	push	r16
    27ae:	1f 93       	push	r17
    27b0:	cf 93       	push	r28
    27b2:	df 93       	push	r29
    27b4:	cd b7       	in	r28, 0x3d	; 61
    27b6:	de b7       	in	r29, 0x3e	; 62
    27b8:	ca 1b       	sub	r28, r26
    27ba:	db 0b       	sbc	r29, r27
    27bc:	0f b6       	in	r0, 0x3f	; 63
    27be:	f8 94       	cli
    27c0:	de bf       	out	0x3e, r29	; 62
    27c2:	0f be       	out	0x3f, r0	; 63
    27c4:	cd bf       	out	0x3d, r28	; 61
    27c6:	09 94       	ijmp

000027c8 <__epilogue_restores__>:
    27c8:	2a 88       	ldd	r2, Y+18	; 0x12
    27ca:	39 88       	ldd	r3, Y+17	; 0x11
    27cc:	48 88       	ldd	r4, Y+16	; 0x10
    27ce:	5f 84       	ldd	r5, Y+15	; 0x0f
    27d0:	6e 84       	ldd	r6, Y+14	; 0x0e
    27d2:	7d 84       	ldd	r7, Y+13	; 0x0d
    27d4:	8c 84       	ldd	r8, Y+12	; 0x0c
    27d6:	9b 84       	ldd	r9, Y+11	; 0x0b
    27d8:	aa 84       	ldd	r10, Y+10	; 0x0a
    27da:	b9 84       	ldd	r11, Y+9	; 0x09
    27dc:	c8 84       	ldd	r12, Y+8	; 0x08
    27de:	df 80       	ldd	r13, Y+7	; 0x07
    27e0:	ee 80       	ldd	r14, Y+6	; 0x06
    27e2:	fd 80       	ldd	r15, Y+5	; 0x05
    27e4:	0c 81       	ldd	r16, Y+4	; 0x04
    27e6:	1b 81       	ldd	r17, Y+3	; 0x03
    27e8:	aa 81       	ldd	r26, Y+2	; 0x02
    27ea:	b9 81       	ldd	r27, Y+1	; 0x01
    27ec:	ce 0f       	add	r28, r30
    27ee:	d1 1d       	adc	r29, r1
    27f0:	0f b6       	in	r0, 0x3f	; 63
    27f2:	f8 94       	cli
    27f4:	de bf       	out	0x3e, r29	; 62
    27f6:	0f be       	out	0x3f, r0	; 63
    27f8:	cd bf       	out	0x3d, r28	; 61
    27fa:	ed 01       	movw	r28, r26
    27fc:	08 95       	ret

000027fe <_exit>:
    27fe:	f8 94       	cli

00002800 <__stop_program>:
    2800:	ff cf       	rjmp	.-2      	; 0x2800 <__stop_program>
