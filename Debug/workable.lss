
workable.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000036a  00800100  00002e2e  00002ec2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002e2e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000068  0080046a  0080046a  0000322c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000322c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003288  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a8  00000000  00000000  000032c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002cae  00000000  00000000  00003470  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a0f  00000000  00000000  0000611e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000014bd  00000000  00000000  00006b2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000570  00000000  00000000  00007fec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a5e  00000000  00000000  0000855c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000196d  00000000  00000000  00008fba  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c8  00000000  00000000  0000a927  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b9 00 	jmp	0x172	; 0x172 <__ctors_end>
       4:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
       8:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
       c:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
      10:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
      14:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
      18:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
      1c:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
      20:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
      24:	0c 94 d9 0b 	jmp	0x17b2	; 0x17b2 <__vector_9>
      28:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
      2c:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
      30:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
      34:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
      38:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
      3c:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
      40:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
      44:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
      48:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
      4c:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
      50:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
      54:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
      58:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
      5c:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
      60:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
      64:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__bad_interrupt>
      68:	c5 06       	cpc	r12, r21
      6a:	e3 06       	cpc	r14, r19
      6c:	01 07       	cpc	r16, r17
      6e:	1f 07       	cpc	r17, r31
      70:	3d 07       	cpc	r19, r29
      72:	db 07       	cpc	r29, r27
      74:	36 08       	sbc	r3, r6
      76:	5a 08       	sbc	r5, r10

00000078 <__trampolines_end>:
      78:	00 40       	sbci	r16, 0x00	; 0
      7a:	7a 10       	cpse	r7, r10
      7c:	f3 5a       	subi	r31, 0xA3	; 163
      7e:	00 a0       	ldd	r0, Z+32	; 0x20
      80:	72 4e       	sbci	r23, 0xE2	; 226
      82:	18 09       	sbc	r17, r8
      84:	00 10       	cpse	r0, r0
      86:	a5 d4       	rcall	.+2378   	; 0x9d2 <display_set+0x2e>
      88:	e8 00       	.word	0x00e8	; ????
      8a:	00 e8       	ldi	r16, 0x80	; 128
      8c:	76 48       	sbci	r23, 0x86	; 134
      8e:	17 00       	.word	0x0017	; ????
      90:	00 e4       	ldi	r16, 0x40	; 64
      92:	0b 54       	subi	r16, 0x4B	; 75
      94:	02 00       	.word	0x0002	; ????
      96:	00 ca       	rjmp	.-3072   	; 0xfffff498 <__eeprom_end+0xff7ef498>
      98:	9a 3b       	cpi	r25, 0xBA	; 186
      9a:	00 00       	nop
      9c:	00 e1       	ldi	r16, 0x10	; 16
      9e:	f5 05       	cpc	r31, r5
      a0:	00 00       	nop
      a2:	80 96       	adiw	r24, 0x20	; 32
      a4:	98 00       	.word	0x0098	; ????
      a6:	00 00       	nop
      a8:	40 42       	sbci	r20, 0x20	; 32
      aa:	0f 00       	.word	0x000f	; ????
      ac:	00 00       	nop
      ae:	a0 86       	std	Z+8, r10	; 0x08
      b0:	01 00       	.word	0x0001	; ????
      b2:	00 00       	nop
      b4:	10 27       	eor	r17, r16
      b6:	00 00       	nop
      b8:	00 00       	nop
      ba:	e8 03       	fmulsu	r22, r16
      bc:	00 00       	nop
      be:	00 00       	nop
      c0:	64 00       	.word	0x0064	; ????
      c2:	00 00       	nop
      c4:	00 00       	nop
      c6:	0a 00       	.word	0x000a	; ????
      c8:	00 00       	nop
      ca:	00 00       	nop
      cc:	01 00       	.word	0x0001	; ????
      ce:	00 00       	nop
      d0:	00 00       	nop
      d2:	2c 76       	andi	r18, 0x6C	; 108
      d4:	d8 88       	ldd	r13, Y+16	; 0x10
      d6:	dc 67       	ori	r29, 0x7C	; 124
      d8:	4f 08       	sbc	r4, r15
      da:	23 df       	rcall	.-442    	; 0xffffff22 <__eeprom_end+0xff7eff22>
      dc:	c1 df       	rcall	.-126    	; 0x60 <__SREG__+0x21>
      de:	ae 59       	subi	r26, 0x9E	; 158
      e0:	e1 b1       	in	r30, 0x01	; 1
      e2:	b7 96       	adiw	r30, 0x27	; 39
      e4:	e5 e3       	ldi	r30, 0x35	; 53
      e6:	e4 53       	subi	r30, 0x34	; 52
      e8:	c6 3a       	cpi	r28, 0xA6	; 166
      ea:	e6 51       	subi	r30, 0x16	; 22
      ec:	99 76       	andi	r25, 0x69	; 105
      ee:	96 e8       	ldi	r25, 0x86	; 134
      f0:	e6 c2       	rjmp	.+1484   	; 0x6be <LCD_1602A_init+0x2a>
      f2:	84 26       	eor	r8, r20
      f4:	eb 89       	ldd	r30, Y+19	; 0x13
      f6:	8c 9b       	sbis	0x11, 4	; 17
      f8:	62 ed       	ldi	r22, 0xD2	; 210
      fa:	40 7c       	andi	r20, 0xC0	; 192
      fc:	6f fc       	.word	0xfc6f	; ????
      fe:	ef bc       	out	0x2f, r14	; 47
     100:	9c 9f       	mul	r25, r28
     102:	40 f2       	brcs	.-112    	; 0x94 <__trampolines_end+0x1c>
     104:	ba a5       	ldd	r27, Y+42	; 0x2a
     106:	6f a5       	ldd	r22, Y+47	; 0x2f
     108:	f4 90       	lpm	r15, Z
     10a:	05 5a       	subi	r16, 0xA5	; 165
     10c:	2a f7       	brpl	.-54     	; 0xd8 <__trampolines_end+0x60>
     10e:	5c 93       	st	X, r21
     110:	6b 6c       	ori	r22, 0xCB	; 203
     112:	f9 67       	ori	r31, 0x79	; 121
     114:	6d c1       	rjmp	.+730    	; 0x3f0 <queueSize+0x28>
     116:	1b fc       	.word	0xfc1b	; ????
     118:	e0 e4       	ldi	r30, 0x40	; 64
     11a:	0d 47       	sbci	r16, 0x7D	; 125
     11c:	fe f5       	brtc	.+126    	; 0x19c <.do_clear_bss_loop>
     11e:	20 e6       	ldi	r18, 0x60	; 96
     120:	b5 00       	.word	0x00b5	; ????
     122:	d0 ed       	ldi	r29, 0xD0	; 208
     124:	90 2e       	mov	r9, r16
     126:	03 00       	.word	0x0003	; ????
     128:	94 35       	cpi	r25, 0x54	; 84
     12a:	77 05       	cpc	r23, r7
     12c:	00 80       	ld	r0, Z
     12e:	84 1e       	adc	r8, r20
     130:	08 00       	.word	0x0008	; ????
     132:	00 20       	and	r0, r0
     134:	4e 0a       	sbc	r4, r30
     136:	00 00       	nop
     138:	00 c8       	rjmp	.-4096   	; 0xfffff13a <__eeprom_end+0xff7ef13a>
     13a:	0c 33       	cpi	r16, 0x3C	; 60
     13c:	33 33       	cpi	r19, 0x33	; 51
     13e:	33 0f       	add	r19, r19
     140:	98 6e       	ori	r25, 0xE8	; 232
     142:	12 83       	std	Z+2, r17	; 0x02
     144:	11 41       	sbci	r17, 0x11	; 17
     146:	ef 8d       	ldd	r30, Y+31	; 0x1f
     148:	21 14       	cp	r2, r1
     14a:	89 3b       	cpi	r24, 0xB9	; 185
     14c:	e6 55       	subi	r30, 0x56	; 86
     14e:	16 cf       	rjmp	.-468    	; 0xffffff7c <__eeprom_end+0xff7eff7c>
     150:	fe e6       	ldi	r31, 0x6E	; 110
     152:	db 18       	sub	r13, r11
     154:	d1 84       	ldd	r13, Z+9	; 0x09
     156:	4b 38       	cpi	r20, 0x8B	; 139
     158:	1b f7       	brvc	.-58     	; 0x120 <__trampolines_end+0xa8>
     15a:	7c 1d       	adc	r23, r12
     15c:	90 1d       	adc	r25, r0
     15e:	a4 bb       	out	0x14, r26	; 20
     160:	e4 24       	eor	r14, r4
     162:	20 32       	cpi	r18, 0x20	; 32
     164:	84 72       	andi	r24, 0x24	; 36
     166:	5e 22       	and	r5, r30
     168:	81 00       	.word	0x0081	; ????
     16a:	c9 f1       	breq	.+114    	; 0x1de <format_float+0x2e>
     16c:	24 ec       	ldi	r18, 0xC4	; 196
     16e:	a1 e5       	ldi	r26, 0x51	; 81
     170:	3d 27       	eor	r19, r29

00000172 <__ctors_end>:
     172:	11 24       	eor	r1, r1
     174:	1f be       	out	0x3f, r1	; 63
     176:	cf ef       	ldi	r28, 0xFF	; 255
     178:	d8 e0       	ldi	r29, 0x08	; 8
     17a:	de bf       	out	0x3e, r29	; 62
     17c:	cd bf       	out	0x3d, r28	; 61

0000017e <__do_copy_data>:
     17e:	14 e0       	ldi	r17, 0x04	; 4
     180:	a0 e0       	ldi	r26, 0x00	; 0
     182:	b1 e0       	ldi	r27, 0x01	; 1
     184:	ee e2       	ldi	r30, 0x2E	; 46
     186:	fe e2       	ldi	r31, 0x2E	; 46
     188:	02 c0       	rjmp	.+4      	; 0x18e <__do_copy_data+0x10>
     18a:	05 90       	lpm	r0, Z+
     18c:	0d 92       	st	X+, r0
     18e:	aa 36       	cpi	r26, 0x6A	; 106
     190:	b1 07       	cpc	r27, r17
     192:	d9 f7       	brne	.-10     	; 0x18a <__do_copy_data+0xc>

00000194 <__do_clear_bss>:
     194:	24 e0       	ldi	r18, 0x04	; 4
     196:	aa e6       	ldi	r26, 0x6A	; 106
     198:	b4 e0       	ldi	r27, 0x04	; 4
     19a:	01 c0       	rjmp	.+2      	; 0x19e <.do_clear_bss_start>

0000019c <.do_clear_bss_loop>:
     19c:	1d 92       	st	X+, r1

0000019e <.do_clear_bss_start>:
     19e:	a2 3d       	cpi	r26, 0xD2	; 210
     1a0:	b2 07       	cpc	r27, r18
     1a2:	e1 f7       	brne	.-8      	; 0x19c <.do_clear_bss_loop>
     1a4:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <main>
     1a8:	0c 94 15 17 	jmp	0x2e2a	; 0x2e2a <_exit>

000001ac <__bad_interrupt>:
     1ac:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001b0 <format_float>:
{
    while (*str)
    {
        LCD_1602A_load_data(*str++);
    }
}
     1b0:	af 92       	push	r10
     1b2:	bf 92       	push	r11
     1b4:	cf 92       	push	r12
     1b6:	df 92       	push	r13
     1b8:	ef 92       	push	r14
     1ba:	ff 92       	push	r15
     1bc:	0f 93       	push	r16
     1be:	1f 93       	push	r17
     1c0:	cf 93       	push	r28
     1c2:	df 93       	push	r29
     1c4:	cd b7       	in	r28, 0x3d	; 61
     1c6:	de b7       	in	r29, 0x3e	; 62
     1c8:	68 97       	sbiw	r28, 0x18	; 24
     1ca:	0f b6       	in	r0, 0x3f	; 63
     1cc:	f8 94       	cli
     1ce:	de bf       	out	0x3e, r29	; 62
     1d0:	0f be       	out	0x3f, r0	; 63
     1d2:	cd bf       	out	0x3d, r28	; 61
     1d4:	d8 2e       	mov	r13, r24
     1d6:	c9 2e       	mov	r12, r25
     1d8:	b6 2e       	mov	r11, r22
     1da:	a7 2e       	mov	r10, r23
     1dc:	ca 01       	movw	r24, r20
     1de:	b9 01       	movw	r22, r18
     1e0:	20 2f       	mov	r18, r16
     1e2:	8e 01       	movw	r16, r28
     1e4:	0f 5f       	subi	r16, 0xFF	; 255
     1e6:	1f 4f       	sbci	r17, 0xFF	; 255
     1e8:	40 e0       	ldi	r20, 0x00	; 0
     1ea:	0e 94 5d 10 	call	0x20ba	; 0x20ba <dtostrf>
     1ee:	e1 14       	cp	r14, r1
     1f0:	f1 04       	cpc	r15, r1
     1f2:	c1 f0       	breq	.+48     	; 0x224 <format_float+0x74>
     1f4:	f7 01       	movw	r30, r14
     1f6:	80 81       	ld	r24, Z
     1f8:	88 23       	and	r24, r24
     1fa:	a1 f0       	breq	.+40     	; 0x224 <format_float+0x74>
     1fc:	ff 92       	push	r15
     1fe:	ef 92       	push	r14
     200:	1f 93       	push	r17
     202:	0f 93       	push	r16
     204:	8e e6       	ldi	r24, 0x6E	; 110
     206:	91 e0       	ldi	r25, 0x01	; 1
     208:	9f 93       	push	r25
     20a:	8f 93       	push	r24
     20c:	af 92       	push	r10
     20e:	bf 92       	push	r11
     210:	cf 92       	push	r12
     212:	df 92       	push	r13
     214:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <snprintf>
     218:	0f b6       	in	r0, 0x3f	; 63
     21a:	f8 94       	cli
     21c:	de bf       	out	0x3e, r29	; 62
     21e:	0f be       	out	0x3f, r0	; 63
     220:	cd bf       	out	0x3d, r28	; 61
     222:	13 c0       	rjmp	.+38     	; 0x24a <format_float+0x9a>
     224:	ce 01       	movw	r24, r28
     226:	01 96       	adiw	r24, 0x01	; 1
     228:	9f 93       	push	r25
     22a:	8f 93       	push	r24
     22c:	81 e7       	ldi	r24, 0x71	; 113
     22e:	91 e0       	ldi	r25, 0x01	; 1
     230:	9f 93       	push	r25
     232:	8f 93       	push	r24
     234:	af 92       	push	r10
     236:	bf 92       	push	r11
     238:	cf 92       	push	r12
     23a:	df 92       	push	r13
     23c:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <snprintf>
     240:	0f b6       	in	r0, 0x3f	; 63
     242:	f8 94       	cli
     244:	de bf       	out	0x3e, r29	; 62
     246:	0f be       	out	0x3f, r0	; 63
     248:	cd bf       	out	0x3d, r28	; 61
     24a:	68 96       	adiw	r28, 0x18	; 24
     24c:	0f b6       	in	r0, 0x3f	; 63
     24e:	f8 94       	cli
     250:	de bf       	out	0x3e, r29	; 62
     252:	0f be       	out	0x3f, r0	; 63
     254:	cd bf       	out	0x3d, r28	; 61
     256:	df 91       	pop	r29
     258:	cf 91       	pop	r28
     25a:	1f 91       	pop	r17
     25c:	0f 91       	pop	r16
     25e:	ff 90       	pop	r15
     260:	ef 90       	pop	r14
     262:	df 90       	pop	r13
     264:	cf 90       	pop	r12
     266:	bf 90       	pop	r11
     268:	af 90       	pop	r10
     26a:	08 95       	ret

0000026c <initQueue>:
     26c:	2f ef       	ldi	r18, 0xFF	; 255
     26e:	3f ef       	ldi	r19, 0xFF	; 255
     270:	fc 01       	movw	r30, r24
     272:	35 8b       	std	Z+21, r19	; 0x15
     274:	24 8b       	std	Z+20, r18	; 0x14
     276:	37 8b       	std	Z+23, r19	; 0x17
     278:	26 8b       	std	Z+22, r18	; 0x16
     27a:	08 95       	ret

0000027c <isEmpty>:
     27c:	fc 01       	movw	r30, r24
     27e:	24 89       	ldd	r18, Z+20	; 0x14
     280:	35 89       	ldd	r19, Z+21	; 0x15
     282:	81 e0       	ldi	r24, 0x01	; 1
     284:	2f 3f       	cpi	r18, 0xFF	; 255
     286:	3f 4f       	sbci	r19, 0xFF	; 255
     288:	09 f0       	breq	.+2      	; 0x28c <isEmpty+0x10>
     28a:	80 e0       	ldi	r24, 0x00	; 0
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	08 95       	ret

00000290 <isFull>:
     290:	fc 01       	movw	r30, r24
     292:	86 89       	ldd	r24, Z+22	; 0x16
     294:	97 89       	ldd	r25, Z+23	; 0x17
     296:	01 96       	adiw	r24, 0x01	; 1
     298:	6a e0       	ldi	r22, 0x0A	; 10
     29a:	70 e0       	ldi	r23, 0x00	; 0
     29c:	0e 94 2f 10 	call	0x205e	; 0x205e <__divmodhi4>
     2a0:	ac 01       	movw	r20, r24
     2a2:	24 89       	ldd	r18, Z+20	; 0x14
     2a4:	35 89       	ldd	r19, Z+21	; 0x15
     2a6:	81 e0       	ldi	r24, 0x01	; 1
     2a8:	42 17       	cp	r20, r18
     2aa:	53 07       	cpc	r21, r19
     2ac:	09 f0       	breq	.+2      	; 0x2b0 <isFull+0x20>
     2ae:	80 e0       	ldi	r24, 0x00	; 0
     2b0:	90 e0       	ldi	r25, 0x00	; 0
     2b2:	08 95       	ret

000002b4 <enqueue>:
     2b4:	0f 93       	push	r16
     2b6:	1f 93       	push	r17
     2b8:	cf 93       	push	r28
     2ba:	df 93       	push	r29
     2bc:	ec 01       	movw	r28, r24
     2be:	06 2f       	mov	r16, r22
     2c0:	17 2f       	mov	r17, r23
     2c2:	0e 94 48 01 	call	0x290	; 0x290 <isFull>
     2c6:	89 2b       	or	r24, r25
     2c8:	29 f1       	breq	.+74     	; 0x314 <enqueue+0x60>
     2ca:	8c 89       	ldd	r24, Y+20	; 0x14
     2cc:	9d 89       	ldd	r25, Y+21	; 0x15
     2ce:	01 96       	adiw	r24, 0x01	; 1
     2d0:	2a e0       	ldi	r18, 0x0A	; 10
     2d2:	30 e0       	ldi	r19, 0x00	; 0
     2d4:	b9 01       	movw	r22, r18
     2d6:	0e 94 2f 10 	call	0x205e	; 0x205e <__divmodhi4>
     2da:	9d 8b       	std	Y+21, r25	; 0x15
     2dc:	8c 8b       	std	Y+20, r24	; 0x14
     2de:	8e 89       	ldd	r24, Y+22	; 0x16
     2e0:	9f 89       	ldd	r25, Y+23	; 0x17
     2e2:	01 96       	adiw	r24, 0x01	; 1
     2e4:	b9 01       	movw	r22, r18
     2e6:	0e 94 2f 10 	call	0x205e	; 0x205e <__divmodhi4>
     2ea:	9f 8b       	std	Y+23, r25	; 0x17
     2ec:	8e 8b       	std	Y+22, r24	; 0x16
     2ee:	88 0f       	add	r24, r24
     2f0:	99 1f       	adc	r25, r25
     2f2:	c8 0f       	add	r28, r24
     2f4:	d9 1f       	adc	r29, r25
     2f6:	08 83       	st	Y, r16
     2f8:	19 83       	std	Y+1, r17	; 0x01
     2fa:	1f 93       	push	r17
     2fc:	0f 93       	push	r16
     2fe:	84 e8       	ldi	r24, 0x84	; 132
     300:	91 e0       	ldi	r25, 0x01	; 1
     302:	9f 93       	push	r25
     304:	8f 93       	push	r24
     306:	0e 94 a5 11 	call	0x234a	; 0x234a <printf>
     30a:	0f 90       	pop	r0
     30c:	0f 90       	pop	r0
     30e:	0f 90       	pop	r0
     310:	0f 90       	pop	r0
     312:	1b c0       	rjmp	.+54     	; 0x34a <enqueue+0x96>
     314:	ce 01       	movw	r24, r28
     316:	0e 94 3e 01 	call	0x27c	; 0x27c <isEmpty>
     31a:	89 2b       	or	r24, r25
     31c:	39 f0       	breq	.+14     	; 0x32c <enqueue+0x78>
     31e:	1d 8a       	std	Y+21, r1	; 0x15
     320:	1c 8a       	std	Y+20, r1	; 0x14
     322:	1f 8a       	std	Y+23, r1	; 0x17
     324:	1e 8a       	std	Y+22, r1	; 0x16
     326:	08 83       	st	Y, r16
     328:	19 83       	std	Y+1, r17	; 0x01
     32a:	0f c0       	rjmp	.+30     	; 0x34a <enqueue+0x96>
     32c:	8e 89       	ldd	r24, Y+22	; 0x16
     32e:	9f 89       	ldd	r25, Y+23	; 0x17
     330:	01 96       	adiw	r24, 0x01	; 1
     332:	6a e0       	ldi	r22, 0x0A	; 10
     334:	70 e0       	ldi	r23, 0x00	; 0
     336:	0e 94 2f 10 	call	0x205e	; 0x205e <__divmodhi4>
     33a:	9f 8b       	std	Y+23, r25	; 0x17
     33c:	8e 8b       	std	Y+22, r24	; 0x16
     33e:	88 0f       	add	r24, r24
     340:	99 1f       	adc	r25, r25
     342:	c8 0f       	add	r28, r24
     344:	d9 1f       	adc	r29, r25
     346:	08 83       	st	Y, r16
     348:	19 83       	std	Y+1, r17	; 0x01
     34a:	df 91       	pop	r29
     34c:	cf 91       	pop	r28
     34e:	1f 91       	pop	r17
     350:	0f 91       	pop	r16
     352:	08 95       	ret

00000354 <peekFront>:
     354:	0f 93       	push	r16
     356:	1f 93       	push	r17
     358:	cf 93       	push	r28
     35a:	df 93       	push	r29
     35c:	ec 01       	movw	r28, r24
     35e:	8b 01       	movw	r16, r22
     360:	0e 94 3e 01 	call	0x27c	; 0x27c <isEmpty>
     364:	00 97       	sbiw	r24, 0x00	; 0
     366:	61 f4       	brne	.+24     	; 0x380 <peekFront+0x2c>
     368:	ec 89       	ldd	r30, Y+20	; 0x14
     36a:	fd 89       	ldd	r31, Y+21	; 0x15
     36c:	ee 0f       	add	r30, r30
     36e:	ff 1f       	adc	r31, r31
     370:	ec 0f       	add	r30, r28
     372:	fd 1f       	adc	r31, r29
     374:	20 81       	ld	r18, Z
     376:	31 81       	ldd	r19, Z+1	; 0x01
     378:	f8 01       	movw	r30, r16
     37a:	31 83       	std	Z+1, r19	; 0x01
     37c:	20 83       	st	Z, r18
     37e:	02 c0       	rjmp	.+4      	; 0x384 <peekFront+0x30>
     380:	8f ef       	ldi	r24, 0xFF	; 255
     382:	9f ef       	ldi	r25, 0xFF	; 255
     384:	df 91       	pop	r29
     386:	cf 91       	pop	r28
     388:	1f 91       	pop	r17
     38a:	0f 91       	pop	r16
     38c:	08 95       	ret

0000038e <peekRear>:
     38e:	0f 93       	push	r16
     390:	1f 93       	push	r17
     392:	cf 93       	push	r28
     394:	df 93       	push	r29
     396:	ec 01       	movw	r28, r24
     398:	8b 01       	movw	r16, r22
     39a:	0e 94 3e 01 	call	0x27c	; 0x27c <isEmpty>
     39e:	00 97       	sbiw	r24, 0x00	; 0
     3a0:	61 f4       	brne	.+24     	; 0x3ba <peekRear+0x2c>
     3a2:	ee 89       	ldd	r30, Y+22	; 0x16
     3a4:	ff 89       	ldd	r31, Y+23	; 0x17
     3a6:	ee 0f       	add	r30, r30
     3a8:	ff 1f       	adc	r31, r31
     3aa:	ec 0f       	add	r30, r28
     3ac:	fd 1f       	adc	r31, r29
     3ae:	20 81       	ld	r18, Z
     3b0:	31 81       	ldd	r19, Z+1	; 0x01
     3b2:	f8 01       	movw	r30, r16
     3b4:	31 83       	std	Z+1, r19	; 0x01
     3b6:	20 83       	st	Z, r18
     3b8:	02 c0       	rjmp	.+4      	; 0x3be <peekRear+0x30>
     3ba:	8f ef       	ldi	r24, 0xFF	; 255
     3bc:	9f ef       	ldi	r25, 0xFF	; 255
     3be:	df 91       	pop	r29
     3c0:	cf 91       	pop	r28
     3c2:	1f 91       	pop	r17
     3c4:	0f 91       	pop	r16
     3c6:	08 95       	ret

000003c8 <queueSize>:
     3c8:	cf 93       	push	r28
     3ca:	df 93       	push	r29
     3cc:	ec 01       	movw	r28, r24
     3ce:	0e 94 3e 01 	call	0x27c	; 0x27c <isEmpty>
     3d2:	89 2b       	or	r24, r25
     3d4:	99 f4       	brne	.+38     	; 0x3fc <queueSize+0x34>
     3d6:	8e 89       	ldd	r24, Y+22	; 0x16
     3d8:	9f 89       	ldd	r25, Y+23	; 0x17
     3da:	4c 89       	ldd	r20, Y+20	; 0x14
     3dc:	5d 89       	ldd	r21, Y+21	; 0x15
     3de:	84 17       	cp	r24, r20
     3e0:	95 07       	cpc	r25, r21
     3e2:	24 f0       	brlt	.+8      	; 0x3ec <queueSize+0x24>
     3e4:	84 1b       	sub	r24, r20
     3e6:	95 0b       	sbc	r25, r21
     3e8:	01 96       	adiw	r24, 0x01	; 1
     3ea:	0a c0       	rjmp	.+20     	; 0x400 <__EEPROM_REGION_LENGTH__>
     3ec:	2a e0       	ldi	r18, 0x0A	; 10
     3ee:	30 e0       	ldi	r19, 0x00	; 0
     3f0:	24 1b       	sub	r18, r20
     3f2:	35 0b       	sbc	r19, r21
     3f4:	82 0f       	add	r24, r18
     3f6:	93 1f       	adc	r25, r19
     3f8:	01 96       	adiw	r24, 0x01	; 1
     3fa:	02 c0       	rjmp	.+4      	; 0x400 <__EEPROM_REGION_LENGTH__>
     3fc:	80 e0       	ldi	r24, 0x00	; 0
     3fe:	90 e0       	ldi	r25, 0x00	; 0
     400:	df 91       	pop	r29
     402:	cf 91       	pop	r28
     404:	08 95       	ret

00000406 <initStrQueue>:
     406:	2f ef       	ldi	r18, 0xFF	; 255
     408:	3f ef       	ldi	r19, 0xFF	; 255
     40a:	fc 01       	movw	r30, r24
     40c:	35 8b       	std	Z+21, r19	; 0x15
     40e:	24 8b       	std	Z+20, r18	; 0x14
     410:	37 8b       	std	Z+23, r19	; 0x17
     412:	26 8b       	std	Z+22, r18	; 0x16
     414:	20 e0       	ldi	r18, 0x00	; 0
     416:	30 e0       	ldi	r19, 0x00	; 0
     418:	09 c0       	rjmp	.+18     	; 0x42c <initStrQueue+0x26>
     41a:	f9 01       	movw	r30, r18
     41c:	ee 0f       	add	r30, r30
     41e:	ff 1f       	adc	r31, r31
     420:	e8 0f       	add	r30, r24
     422:	f9 1f       	adc	r31, r25
     424:	11 82       	std	Z+1, r1	; 0x01
     426:	10 82       	st	Z, r1
     428:	2f 5f       	subi	r18, 0xFF	; 255
     42a:	3f 4f       	sbci	r19, 0xFF	; 255
     42c:	2a 30       	cpi	r18, 0x0A	; 10
     42e:	31 05       	cpc	r19, r1
     430:	a4 f3       	brlt	.-24     	; 0x41a <initStrQueue+0x14>
     432:	08 95       	ret

00000434 <isStrQueueEmpty>:
     434:	fc 01       	movw	r30, r24
     436:	24 89       	ldd	r18, Z+20	; 0x14
     438:	35 89       	ldd	r19, Z+21	; 0x15
     43a:	81 e0       	ldi	r24, 0x01	; 1
     43c:	2f 3f       	cpi	r18, 0xFF	; 255
     43e:	3f 4f       	sbci	r19, 0xFF	; 255
     440:	09 f0       	breq	.+2      	; 0x444 <isStrQueueEmpty+0x10>
     442:	80 e0       	ldi	r24, 0x00	; 0
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	08 95       	ret

00000448 <isStrQueueFull>:
     448:	fc 01       	movw	r30, r24
     44a:	86 89       	ldd	r24, Z+22	; 0x16
     44c:	97 89       	ldd	r25, Z+23	; 0x17
     44e:	01 96       	adiw	r24, 0x01	; 1
     450:	6a e0       	ldi	r22, 0x0A	; 10
     452:	70 e0       	ldi	r23, 0x00	; 0
     454:	0e 94 2f 10 	call	0x205e	; 0x205e <__divmodhi4>
     458:	ac 01       	movw	r20, r24
     45a:	24 89       	ldd	r18, Z+20	; 0x14
     45c:	35 89       	ldd	r19, Z+21	; 0x15
     45e:	81 e0       	ldi	r24, 0x01	; 1
     460:	42 17       	cp	r20, r18
     462:	53 07       	cpc	r21, r19
     464:	09 f0       	breq	.+2      	; 0x468 <isStrQueueFull+0x20>
     466:	80 e0       	ldi	r24, 0x00	; 0
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	08 95       	ret

0000046c <enqueueStr>:
     46c:	ef 92       	push	r14
     46e:	ff 92       	push	r15
     470:	0f 93       	push	r16
     472:	1f 93       	push	r17
     474:	cf 93       	push	r28
     476:	df 93       	push	r29
     478:	61 15       	cp	r22, r1
     47a:	71 05       	cpc	r23, r1
     47c:	09 f4       	brne	.+2      	; 0x480 <enqueueStr+0x14>
     47e:	5b c0       	rjmp	.+182    	; 0x536 <enqueueStr+0xca>
     480:	8b 01       	movw	r16, r22
     482:	ec 01       	movw	r28, r24
     484:	fb 01       	movw	r30, r22
     486:	01 90       	ld	r0, Z+
     488:	00 20       	and	r0, r0
     48a:	e9 f7       	brne	.-6      	; 0x486 <enqueueStr+0x1a>
     48c:	31 97       	sbiw	r30, 0x01	; 1
     48e:	cf 01       	movw	r24, r30
     490:	86 1b       	sub	r24, r22
     492:	97 0b       	sbc	r25, r23
     494:	01 96       	adiw	r24, 0x01	; 1
     496:	0e 94 7d 10 	call	0x20fa	; 0x20fa <malloc>
     49a:	7c 01       	movw	r14, r24
     49c:	00 97       	sbiw	r24, 0x00	; 0
     49e:	29 f4       	brne	.+10     	; 0x4aa <enqueueStr+0x3e>
     4a0:	82 ec       	ldi	r24, 0xC2	; 194
     4a2:	91 e0       	ldi	r25, 0x01	; 1
     4a4:	0e 94 bb 11 	call	0x2376	; 0x2376 <puts>
     4a8:	46 c0       	rjmp	.+140    	; 0x536 <enqueueStr+0xca>
     4aa:	b8 01       	movw	r22, r16
     4ac:	0e 94 9e 11 	call	0x233c	; 0x233c <strcpy>
     4b0:	ce 01       	movw	r24, r28
     4b2:	0e 94 24 02 	call	0x448	; 0x448 <isStrQueueFull>
     4b6:	89 2b       	or	r24, r25
     4b8:	19 f1       	breq	.+70     	; 0x500 <enqueueStr+0x94>
     4ba:	ec 89       	ldd	r30, Y+20	; 0x14
     4bc:	fd 89       	ldd	r31, Y+21	; 0x15
     4be:	ee 0f       	add	r30, r30
     4c0:	ff 1f       	adc	r31, r31
     4c2:	ec 0f       	add	r30, r28
     4c4:	fd 1f       	adc	r31, r29
     4c6:	80 81       	ld	r24, Z
     4c8:	91 81       	ldd	r25, Z+1	; 0x01
     4ca:	0e 94 15 11 	call	0x222a	; 0x222a <free>
     4ce:	8c 89       	ldd	r24, Y+20	; 0x14
     4d0:	9d 89       	ldd	r25, Y+21	; 0x15
     4d2:	01 96       	adiw	r24, 0x01	; 1
     4d4:	2a e0       	ldi	r18, 0x0A	; 10
     4d6:	30 e0       	ldi	r19, 0x00	; 0
     4d8:	b9 01       	movw	r22, r18
     4da:	0e 94 2f 10 	call	0x205e	; 0x205e <__divmodhi4>
     4de:	9d 8b       	std	Y+21, r25	; 0x15
     4e0:	8c 8b       	std	Y+20, r24	; 0x14
     4e2:	8e 89       	ldd	r24, Y+22	; 0x16
     4e4:	9f 89       	ldd	r25, Y+23	; 0x17
     4e6:	01 96       	adiw	r24, 0x01	; 1
     4e8:	b9 01       	movw	r22, r18
     4ea:	0e 94 2f 10 	call	0x205e	; 0x205e <__divmodhi4>
     4ee:	9f 8b       	std	Y+23, r25	; 0x17
     4f0:	8e 8b       	std	Y+22, r24	; 0x16
     4f2:	88 0f       	add	r24, r24
     4f4:	99 1f       	adc	r25, r25
     4f6:	c8 0f       	add	r28, r24
     4f8:	d9 1f       	adc	r29, r25
     4fa:	f9 82       	std	Y+1, r15	; 0x01
     4fc:	e8 82       	st	Y, r14
     4fe:	1b c0       	rjmp	.+54     	; 0x536 <enqueueStr+0xca>
     500:	ce 01       	movw	r24, r28
     502:	0e 94 1a 02 	call	0x434	; 0x434 <isStrQueueEmpty>
     506:	89 2b       	or	r24, r25
     508:	39 f0       	breq	.+14     	; 0x518 <enqueueStr+0xac>
     50a:	1d 8a       	std	Y+21, r1	; 0x15
     50c:	1c 8a       	std	Y+20, r1	; 0x14
     50e:	1f 8a       	std	Y+23, r1	; 0x17
     510:	1e 8a       	std	Y+22, r1	; 0x16
     512:	f9 82       	std	Y+1, r15	; 0x01
     514:	e8 82       	st	Y, r14
     516:	0f c0       	rjmp	.+30     	; 0x536 <enqueueStr+0xca>
     518:	8e 89       	ldd	r24, Y+22	; 0x16
     51a:	9f 89       	ldd	r25, Y+23	; 0x17
     51c:	01 96       	adiw	r24, 0x01	; 1
     51e:	6a e0       	ldi	r22, 0x0A	; 10
     520:	70 e0       	ldi	r23, 0x00	; 0
     522:	0e 94 2f 10 	call	0x205e	; 0x205e <__divmodhi4>
     526:	9f 8b       	std	Y+23, r25	; 0x17
     528:	8e 8b       	std	Y+22, r24	; 0x16
     52a:	88 0f       	add	r24, r24
     52c:	99 1f       	adc	r25, r25
     52e:	c8 0f       	add	r28, r24
     530:	d9 1f       	adc	r29, r25
     532:	f9 82       	std	Y+1, r15	; 0x01
     534:	e8 82       	st	Y, r14
     536:	df 91       	pop	r29
     538:	cf 91       	pop	r28
     53a:	1f 91       	pop	r17
     53c:	0f 91       	pop	r16
     53e:	ff 90       	pop	r15
     540:	ef 90       	pop	r14
     542:	08 95       	ret

00000544 <peekFrontStr>:
     544:	0f 93       	push	r16
     546:	1f 93       	push	r17
     548:	cf 93       	push	r28
     54a:	df 93       	push	r29
     54c:	ec 01       	movw	r28, r24
     54e:	8b 01       	movw	r16, r22
     550:	0e 94 1a 02 	call	0x434	; 0x434 <isStrQueueEmpty>
     554:	00 97       	sbiw	r24, 0x00	; 0
     556:	61 f4       	brne	.+24     	; 0x570 <peekFrontStr+0x2c>
     558:	ec 89       	ldd	r30, Y+20	; 0x14
     55a:	fd 89       	ldd	r31, Y+21	; 0x15
     55c:	ee 0f       	add	r30, r30
     55e:	ff 1f       	adc	r31, r31
     560:	ec 0f       	add	r30, r28
     562:	fd 1f       	adc	r31, r29
     564:	20 81       	ld	r18, Z
     566:	31 81       	ldd	r19, Z+1	; 0x01
     568:	f8 01       	movw	r30, r16
     56a:	31 83       	std	Z+1, r19	; 0x01
     56c:	20 83       	st	Z, r18
     56e:	02 c0       	rjmp	.+4      	; 0x574 <peekFrontStr+0x30>
     570:	8f ef       	ldi	r24, 0xFF	; 255
     572:	9f ef       	ldi	r25, 0xFF	; 255
     574:	df 91       	pop	r29
     576:	cf 91       	pop	r28
     578:	1f 91       	pop	r17
     57a:	0f 91       	pop	r16
     57c:	08 95       	ret

0000057e <TIMER2_INIT>:
     57e:	87 b1       	in	r24, 0x07	; 7
     580:	84 60       	ori	r24, 0x04	; 4
     582:	87 b9       	out	0x07, r24	; 7
     584:	88 b1       	in	r24, 0x08	; 8
     586:	8b 7f       	andi	r24, 0xFB	; 251
     588:	88 b9       	out	0x08, r24	; 8
     58a:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     58e:	87 e0       	ldi	r24, 0x07	; 7
     590:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
     594:	81 e0       	ldi	r24, 0x01	; 1
     596:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
     59a:	78 94       	sei
     59c:	08 95       	ret

0000059e <LED_SYSTEM_ACTIVE_INIT>:
     59e:	87 b1       	in	r24, 0x07	; 7
     5a0:	82 60       	ori	r24, 0x02	; 2
     5a2:	87 b9       	out	0x07, r24	; 7
     5a4:	88 b1       	in	r24, 0x08	; 8
     5a6:	8d 7f       	andi	r24, 0xFD	; 253
     5a8:	88 b9       	out	0x08, r24	; 8
     5aa:	08 95       	ret

000005ac <LED_system_active_off>:
     5ac:	88 b1       	in	r24, 0x08	; 8
     5ae:	8d 7f       	andi	r24, 0xFD	; 253
     5b0:	88 b9       	out	0x08, r24	; 8
     5b2:	08 95       	ret

000005b4 <LED_system_active_on>:
     5b4:	88 b1       	in	r24, 0x08	; 8
     5b6:	82 60       	ori	r24, 0x02	; 2
     5b8:	88 b9       	out	0x08, r24	; 8
     5ba:	08 95       	ret

000005bc <LCD_1602A_latch>:
     5bc:	85 b1       	in	r24, 0x05	; 5
     5be:	82 60       	ori	r24, 0x02	; 2
     5c0:	85 b9       	out	0x05, r24	; 5
     5c2:	85 e0       	ldi	r24, 0x05	; 5
     5c4:	8a 95       	dec	r24
     5c6:	f1 f7       	brne	.-4      	; 0x5c4 <LCD_1602A_latch+0x8>
     5c8:	00 00       	nop
     5ca:	85 b1       	in	r24, 0x05	; 5
     5cc:	8d 7f       	andi	r24, 0xFD	; 253
     5ce:	85 b9       	out	0x05, r24	; 5
     5d0:	8f e8       	ldi	r24, 0x8F	; 143
     5d2:	91 e0       	ldi	r25, 0x01	; 1
     5d4:	01 97       	sbiw	r24, 0x01	; 1
     5d6:	f1 f7       	brne	.-4      	; 0x5d4 <LCD_1602A_latch+0x18>
     5d8:	00 c0       	rjmp	.+0      	; 0x5da <LCD_1602A_latch+0x1e>
     5da:	00 00       	nop
     5dc:	08 95       	ret

000005de <LCD_1602A_send_nibble>:
     5de:	9b b1       	in	r25, 0x0b	; 11
     5e0:	9f 70       	andi	r25, 0x0F	; 15
     5e2:	9b b9       	out	0x0b, r25	; 11
     5e4:	80 ff       	sbrs	r24, 0
     5e6:	03 c0       	rjmp	.+6      	; 0x5ee <LCD_1602A_send_nibble+0x10>
     5e8:	9b b1       	in	r25, 0x0b	; 11
     5ea:	90 61       	ori	r25, 0x10	; 16
     5ec:	9b b9       	out	0x0b, r25	; 11
     5ee:	81 ff       	sbrs	r24, 1
     5f0:	03 c0       	rjmp	.+6      	; 0x5f8 <LCD_1602A_send_nibble+0x1a>
     5f2:	9b b1       	in	r25, 0x0b	; 11
     5f4:	90 62       	ori	r25, 0x20	; 32
     5f6:	9b b9       	out	0x0b, r25	; 11
     5f8:	82 ff       	sbrs	r24, 2
     5fa:	03 c0       	rjmp	.+6      	; 0x602 <LCD_1602A_send_nibble+0x24>
     5fc:	9b b1       	in	r25, 0x0b	; 11
     5fe:	90 64       	ori	r25, 0x40	; 64
     600:	9b b9       	out	0x0b, r25	; 11
     602:	83 ff       	sbrs	r24, 3
     604:	03 c0       	rjmp	.+6      	; 0x60c <LCD_1602A_send_nibble+0x2e>
     606:	8b b1       	in	r24, 0x0b	; 11
     608:	80 68       	ori	r24, 0x80	; 128
     60a:	8b b9       	out	0x0b, r24	; 11
     60c:	0e 94 de 02 	call	0x5bc	; 0x5bc <LCD_1602A_latch>
     610:	08 95       	ret

00000612 <LCD_1602A_load_command>:
     612:	cf 93       	push	r28
     614:	c8 2f       	mov	r28, r24
     616:	85 b1       	in	r24, 0x05	; 5
     618:	8e 7f       	andi	r24, 0xFE	; 254
     61a:	85 b9       	out	0x05, r24	; 5
     61c:	8c 2f       	mov	r24, r28
     61e:	82 95       	swap	r24
     620:	8f 70       	andi	r24, 0x0F	; 15
     622:	0e 94 ef 02 	call	0x5de	; 0x5de <LCD_1602A_send_nibble>
     626:	8c 2f       	mov	r24, r28
     628:	8f 70       	andi	r24, 0x0F	; 15
     62a:	0e 94 ef 02 	call	0x5de	; 0x5de <LCD_1602A_send_nibble>
     62e:	cf 91       	pop	r28
     630:	08 95       	ret

00000632 <LCD_1602A_load_data>:
     632:	cf 93       	push	r28
     634:	c8 2f       	mov	r28, r24
     636:	85 b1       	in	r24, 0x05	; 5
     638:	81 60       	ori	r24, 0x01	; 1
     63a:	85 b9       	out	0x05, r24	; 5
     63c:	8c 2f       	mov	r24, r28
     63e:	82 95       	swap	r24
     640:	8f 70       	andi	r24, 0x0F	; 15
     642:	0e 94 ef 02 	call	0x5de	; 0x5de <LCD_1602A_send_nibble>
     646:	8c 2f       	mov	r24, r28
     648:	8f 70       	andi	r24, 0x0F	; 15
     64a:	0e 94 ef 02 	call	0x5de	; 0x5de <LCD_1602A_send_nibble>
     64e:	cf 91       	pop	r28
     650:	08 95       	ret

00000652 <LCD_1602A_create_char>:

void LCD_1602A_create_char(uint8_t location, uint8_t charmap[])
{
     652:	0f 93       	push	r16
     654:	1f 93       	push	r17
     656:	cf 93       	push	r28
     658:	8b 01       	movw	r16, r22
    location &= 0x07;                               // only 0–7 valid
     65a:	87 70       	andi	r24, 0x07	; 7
    LCD_1602A_load_command(0x40 | (location << 3)); // Set CGRAM address
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	88 0f       	add	r24, r24
     660:	99 1f       	adc	r25, r25
     662:	88 0f       	add	r24, r24
     664:	99 1f       	adc	r25, r25
     666:	88 0f       	add	r24, r24
     668:	99 1f       	adc	r25, r25
     66a:	80 64       	ori	r24, 0x40	; 64
     66c:	0e 94 09 03 	call	0x612	; 0x612 <LCD_1602A_load_command>

    for (uint8_t i = 0; i < 8; i++)
     670:	c0 e0       	ldi	r28, 0x00	; 0
     672:	07 c0       	rjmp	.+14     	; 0x682 <LCD_1602A_create_char+0x30>
    {
        LCD_1602A_load_data(charmap[i]); // write pixel pattern
     674:	f8 01       	movw	r30, r16
     676:	ec 0f       	add	r30, r28
     678:	f1 1d       	adc	r31, r1
     67a:	80 81       	ld	r24, Z
     67c:	0e 94 19 03 	call	0x632	; 0x632 <LCD_1602A_load_data>
void LCD_1602A_create_char(uint8_t location, uint8_t charmap[])
{
    location &= 0x07;                               // only 0–7 valid
    LCD_1602A_load_command(0x40 | (location << 3)); // Set CGRAM address

    for (uint8_t i = 0; i < 8; i++)
     680:	cf 5f       	subi	r28, 0xFF	; 255
     682:	c8 30       	cpi	r28, 0x08	; 8
     684:	b8 f3       	brcs	.-18     	; 0x674 <LCD_1602A_create_char+0x22>
    {
        LCD_1602A_load_data(charmap[i]); // write pixel pattern
    }

    // Return to DDRAM (display memory)
    LCD_1602A_load_command(0x80);
     686:	80 e8       	ldi	r24, 0x80	; 128
     688:	0e 94 09 03 	call	0x612	; 0x612 <LCD_1602A_load_command>
}
     68c:	cf 91       	pop	r28
     68e:	1f 91       	pop	r17
     690:	0f 91       	pop	r16
     692:	08 95       	ret

00000694 <LCD_1602A_init>:
    initialize the lcd in 4-bit mode
    params: void
    returns: void
*/
void LCD_1602A_init(void)
{
     694:	cf 93       	push	r28
     696:	df 93       	push	r29
     698:	cd b7       	in	r28, 0x3d	; 61
     69a:	de b7       	in	r29, 0x3e	; 62
     69c:	a0 97       	sbiw	r28, 0x20	; 32
     69e:	0f b6       	in	r0, 0x3f	; 63
     6a0:	f8 94       	cli
     6a2:	de bf       	out	0x3e, r29	; 62
     6a4:	0f be       	out	0x3f, r0	; 63
     6a6:	cd bf       	out	0x3d, r28	; 61
    LCD_1602A_CTRL_DDR |= (1 << LCD_1602A_RS) | (1 << LCD_1602A_EN);
     6a8:	84 b1       	in	r24, 0x04	; 4
     6aa:	83 60       	ori	r24, 0x03	; 3
     6ac:	84 b9       	out	0x04, r24	; 4
    LCD_1602A_DATA_DDR |= (1 << LCD_1602A_D4) | (1 << LCD_1602A_D5) | (1 << LCD_1602A_D6) | (1 << LCD_1602A_D7);
     6ae:	8a b1       	in	r24, 0x0a	; 10
     6b0:	80 6f       	ori	r24, 0xF0	; 240
     6b2:	8a b9       	out	0x0a, r24	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6b4:	2f ef       	ldi	r18, 0xFF	; 255
     6b6:	89 ef       	ldi	r24, 0xF9	; 249
     6b8:	90 e0       	ldi	r25, 0x00	; 0
     6ba:	21 50       	subi	r18, 0x01	; 1
     6bc:	80 40       	sbci	r24, 0x00	; 0
     6be:	90 40       	sbci	r25, 0x00	; 0
     6c0:	e1 f7       	brne	.-8      	; 0x6ba <LCD_1602A_init+0x26>
     6c2:	00 c0       	rjmp	.+0      	; 0x6c4 <LCD_1602A_init+0x30>
     6c4:	00 00       	nop

    _delay_ms(20); // Wait for LCD power up
    LCD_1602A_send_nibble(DISPLAY_WAIT_POWER_UP);
     6c6:	83 e0       	ldi	r24, 0x03	; 3
     6c8:	0e 94 ef 02 	call	0x5de	; 0x5de <LCD_1602A_send_nibble>
     6cc:	8f e1       	ldi	r24, 0x1F	; 31
     6ce:	9e e4       	ldi	r25, 0x4E	; 78
     6d0:	01 97       	sbiw	r24, 0x01	; 1
     6d2:	f1 f7       	brne	.-4      	; 0x6d0 <LCD_1602A_init+0x3c>
     6d4:	00 c0       	rjmp	.+0      	; 0x6d6 <LCD_1602A_init+0x42>
     6d6:	00 00       	nop
    _delay_ms(5);
    LCD_1602A_send_nibble(DISPLAY_WAIT_POWER_UP);
     6d8:	83 e0       	ldi	r24, 0x03	; 3
     6da:	0e 94 ef 02 	call	0x5de	; 0x5de <LCD_1602A_send_nibble>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6de:	87 e5       	ldi	r24, 0x57	; 87
     6e0:	92 e0       	ldi	r25, 0x02	; 2
     6e2:	01 97       	sbiw	r24, 0x01	; 1
     6e4:	f1 f7       	brne	.-4      	; 0x6e2 <LCD_1602A_init+0x4e>
     6e6:	00 c0       	rjmp	.+0      	; 0x6e8 <LCD_1602A_init+0x54>
     6e8:	00 00       	nop
    _delay_us(150);
    LCD_1602A_send_nibble(DISPLAY_WAIT_POWER_UP);
     6ea:	83 e0       	ldi	r24, 0x03	; 3
     6ec:	0e 94 ef 02 	call	0x5de	; 0x5de <LCD_1602A_send_nibble>

    LCD_1602A_send_nibble(DISPLAY_4_BIT_MODE); // Switch to 4-bit mode
     6f0:	82 e0       	ldi	r24, 0x02	; 2
     6f2:	0e 94 ef 02 	call	0x5de	; 0x5de <LCD_1602A_send_nibble>

    LCD_1602A_load_command(DISPLAY_FUNCTION_SET_4BIT_2LINE);
     6f6:	88 e2       	ldi	r24, 0x28	; 40
     6f8:	0e 94 09 03 	call	0x612	; 0x612 <LCD_1602A_load_command>
    LCD_1602A_load_command(DISPLAY_DISPLAY_ON_CURSOR_OFF);
     6fc:	8c e0       	ldi	r24, 0x0C	; 12
     6fe:	0e 94 09 03 	call	0x612	; 0x612 <LCD_1602A_load_command>
    LCD_1602A_load_command(DISPLAY_ENTRY_MODE_SET);
     702:	86 e0       	ldi	r24, 0x06	; 6
     704:	0e 94 09 03 	call	0x612	; 0x612 <LCD_1602A_load_command>
    LCD_1602A_load_command(DISPLAY_CLEAR_SCREEN);
     708:	81 e0       	ldi	r24, 0x01	; 1
     70a:	0e 94 09 03 	call	0x612	; 0x612 <LCD_1602A_load_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     70e:	8f e3       	ldi	r24, 0x3F	; 63
     710:	9f e1       	ldi	r25, 0x1F	; 31
     712:	01 97       	sbiw	r24, 0x01	; 1
     714:	f1 f7       	brne	.-4      	; 0x712 <LCD_1602A_init+0x7e>
     716:	00 c0       	rjmp	.+0      	; 0x718 <LCD_1602A_init+0x84>
     718:	00 00       	nop
    _delay_ms(2);

    /* create arrow glyphs once during init (used by display_set)
       location 0..3 reserved for arrows */
    uint8_t arrow_down[8] = {
     71a:	88 e0       	ldi	r24, 0x08	; 8
     71c:	ee e4       	ldi	r30, 0x4E	; 78
     71e:	f1 e0       	ldi	r31, 0x01	; 1
     720:	de 01       	movw	r26, r28
     722:	11 96       	adiw	r26, 0x01	; 1
     724:	01 90       	ld	r0, Z+
     726:	0d 92       	st	X+, r0
     728:	8a 95       	dec	r24
     72a:	e1 f7       	brne	.-8      	; 0x724 <LCD_1602A_init+0x90>
        0x0E,
        0x04,
        0x00
    };

    uint8_t arrow_up[8] = {
     72c:	88 e0       	ldi	r24, 0x08	; 8
     72e:	e6 e5       	ldi	r30, 0x56	; 86
     730:	f1 e0       	ldi	r31, 0x01	; 1
     732:	de 01       	movw	r26, r28
     734:	19 96       	adiw	r26, 0x09	; 9
     736:	01 90       	ld	r0, Z+
     738:	0d 92       	st	X+, r0
     73a:	8a 95       	dec	r24
     73c:	e1 f7       	brne	.-8      	; 0x736 <LCD_1602A_init+0xa2>
        0x04,
        0x04,
        0x00
    };

    uint8_t arrow_right[8] = {
     73e:	88 e0       	ldi	r24, 0x08	; 8
     740:	ee e5       	ldi	r30, 0x5E	; 94
     742:	f1 e0       	ldi	r31, 0x01	; 1
     744:	de 01       	movw	r26, r28
     746:	51 96       	adiw	r26, 0x11	; 17
     748:	01 90       	ld	r0, Z+
     74a:	0d 92       	st	X+, r0
     74c:	8a 95       	dec	r24
     74e:	e1 f7       	brne	.-8      	; 0x748 <LCD_1602A_init+0xb4>
        0x04,
        0x00,
        0x00
    };

    uint8_t arrow_left[8] = {
     750:	88 e0       	ldi	r24, 0x08	; 8
     752:	e6 e6       	ldi	r30, 0x66	; 102
     754:	f1 e0       	ldi	r31, 0x01	; 1
     756:	de 01       	movw	r26, r28
     758:	59 96       	adiw	r26, 0x19	; 25
     75a:	01 90       	ld	r0, Z+
     75c:	0d 92       	st	X+, r0
     75e:	8a 95       	dec	r24
     760:	e1 f7       	brne	.-8      	; 0x75a <LCD_1602A_init+0xc6>
        0x04,
        0x00,
        0x00
    };

    LCD_1602A_create_char(0, arrow_down); // store at location 0
     762:	be 01       	movw	r22, r28
     764:	6f 5f       	subi	r22, 0xFF	; 255
     766:	7f 4f       	sbci	r23, 0xFF	; 255
     768:	80 e0       	ldi	r24, 0x00	; 0
     76a:	0e 94 29 03 	call	0x652	; 0x652 <LCD_1602A_create_char>
    LCD_1602A_create_char(1, arrow_up);   // store at location 1
     76e:	be 01       	movw	r22, r28
     770:	67 5f       	subi	r22, 0xF7	; 247
     772:	7f 4f       	sbci	r23, 0xFF	; 255
     774:	81 e0       	ldi	r24, 0x01	; 1
     776:	0e 94 29 03 	call	0x652	; 0x652 <LCD_1602A_create_char>
    LCD_1602A_create_char(2, arrow_left);   // store at location 2
     77a:	be 01       	movw	r22, r28
     77c:	67 5e       	subi	r22, 0xE7	; 231
     77e:	7f 4f       	sbci	r23, 0xFF	; 255
     780:	82 e0       	ldi	r24, 0x02	; 2
     782:	0e 94 29 03 	call	0x652	; 0x652 <LCD_1602A_create_char>
    LCD_1602A_create_char(3, arrow_right);   // store at location 3
     786:	be 01       	movw	r22, r28
     788:	6f 5e       	subi	r22, 0xEF	; 239
     78a:	7f 4f       	sbci	r23, 0xFF	; 255
     78c:	83 e0       	ldi	r24, 0x03	; 3
     78e:	0e 94 29 03 	call	0x652	; 0x652 <LCD_1602A_create_char>
}
     792:	a0 96       	adiw	r28, 0x20	; 32
     794:	0f b6       	in	r0, 0x3f	; 63
     796:	f8 94       	cli
     798:	de bf       	out	0x3e, r29	; 62
     79a:	0f be       	out	0x3f, r0	; 63
     79c:	cd bf       	out	0x3d, r28	; 61
     79e:	df 91       	pop	r29
     7a0:	cf 91       	pop	r28
     7a2:	08 95       	ret

000007a4 <DS18B20_reset>:
    params: void
    returns: uint8_t - 1 if presence pulse detected, 0 otherwise
*/
uint8_t DS18B20_reset(void)
{
    DS18B20_OUTPUT();
     7a4:	87 b1       	in	r24, 0x07	; 7
     7a6:	81 60       	ori	r24, 0x01	; 1
     7a8:	87 b9       	out	0x07, r24	; 7
    DS18B20_LOW();
     7aa:	88 b1       	in	r24, 0x08	; 8
     7ac:	8e 7f       	andi	r24, 0xFE	; 254
     7ae:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7b0:	8f e7       	ldi	r24, 0x7F	; 127
     7b2:	97 e0       	ldi	r25, 0x07	; 7
     7b4:	01 97       	sbiw	r24, 0x01	; 1
     7b6:	f1 f7       	brne	.-4      	; 0x7b4 <DS18B20_reset+0x10>
     7b8:	00 c0       	rjmp	.+0      	; 0x7ba <DS18B20_reset+0x16>
     7ba:	00 00       	nop
    _delay_us(480);
    DS18B20_INPUT();
     7bc:	87 b1       	in	r24, 0x07	; 7
     7be:	8e 7f       	andi	r24, 0xFE	; 254
     7c0:	87 b9       	out	0x07, r24	; 7
     7c2:	ef ee       	ldi	r30, 0xEF	; 239
     7c4:	f0 e0       	ldi	r31, 0x00	; 0
     7c6:	31 97       	sbiw	r30, 0x01	; 1
     7c8:	f1 f7       	brne	.-4      	; 0x7c6 <DS18B20_reset+0x22>
     7ca:	00 c0       	rjmp	.+0      	; 0x7cc <DS18B20_reset+0x28>
     7cc:	00 00       	nop
    _delay_us(60);

    uint8_t presence = !(DS18B20_PIN & (1 << DS18B20_DQ));
     7ce:	96 b1       	in	r25, 0x06	; 6
     7d0:	81 e0       	ldi	r24, 0x01	; 1
     7d2:	89 27       	eor	r24, r25
     7d4:	81 70       	andi	r24, 0x01	; 1
     7d6:	ef e8       	ldi	r30, 0x8F	; 143
     7d8:	f6 e0       	ldi	r31, 0x06	; 6
     7da:	31 97       	sbiw	r30, 0x01	; 1
     7dc:	f1 f7       	brne	.-4      	; 0x7da <DS18B20_reset+0x36>
     7de:	00 c0       	rjmp	.+0      	; 0x7e0 <DS18B20_reset+0x3c>
     7e0:	00 00       	nop
    _delay_us(420);
    return presence;
}
     7e2:	08 95       	ret

000007e4 <DS18B20_write_bit>:
    params: uint8_t bit - the bit to write (0 or 1)
    returns: void
*/
void DS18B20_write_bit(uint8_t bit)
{
    DS18B20_OUTPUT();
     7e4:	97 b1       	in	r25, 0x07	; 7
     7e6:	91 60       	ori	r25, 0x01	; 1
     7e8:	97 b9       	out	0x07, r25	; 7
    DS18B20_LOW();
     7ea:	98 b1       	in	r25, 0x08	; 8
     7ec:	9e 7f       	andi	r25, 0xFE	; 254
     7ee:	98 b9       	out	0x08, r25	; 8
    if (bit)
     7f0:	88 23       	and	r24, r24
     7f2:	71 f0       	breq	.+28     	; 0x810 <__DATA_REGION_LENGTH__+0x10>
     7f4:	85 e0       	ldi	r24, 0x05	; 5
     7f6:	8a 95       	dec	r24
     7f8:	f1 f7       	brne	.-4      	; 0x7f6 <DS18B20_write_bit+0x12>
     7fa:	00 00       	nop
    {
        _delay_us(1);
        DS18B20_INPUT();
     7fc:	87 b1       	in	r24, 0x07	; 7
     7fe:	8e 7f       	andi	r24, 0xFE	; 254
     800:	87 b9       	out	0x07, r24	; 7
     802:	8f ee       	ldi	r24, 0xEF	; 239
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	01 97       	sbiw	r24, 0x01	; 1
     808:	f1 f7       	brne	.-4      	; 0x806 <__DATA_REGION_LENGTH__+0x6>
     80a:	00 c0       	rjmp	.+0      	; 0x80c <__DATA_REGION_LENGTH__+0xc>
     80c:	00 00       	nop
     80e:	08 95       	ret
     810:	8f ee       	ldi	r24, 0xEF	; 239
     812:	90 e0       	ldi	r25, 0x00	; 0
     814:	01 97       	sbiw	r24, 0x01	; 1
     816:	f1 f7       	brne	.-4      	; 0x814 <__DATA_REGION_LENGTH__+0x14>
     818:	00 c0       	rjmp	.+0      	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
     81a:	00 00       	nop
        _delay_us(60);
    }
    else
    {
        _delay_us(60);
        DS18B20_INPUT();
     81c:	87 b1       	in	r24, 0x07	; 7
     81e:	8e 7f       	andi	r24, 0xFE	; 254
     820:	87 b9       	out	0x07, r24	; 7
     822:	08 95       	ret

00000824 <DS18B20_write_byte>:
    write a byte to the DS18B20 sensor
    params: uint8_t data - the byte to write
    returns: void
*/
void DS18B20_write_byte(uint8_t data)
{
     824:	cf 93       	push	r28
     826:	df 93       	push	r29
     828:	d8 2f       	mov	r29, r24
    for (uint8_t i = 0; i < 8; i++)
     82a:	c0 e0       	ldi	r28, 0x00	; 0
     82c:	06 c0       	rjmp	.+12     	; 0x83a <DS18B20_write_byte+0x16>
    {
        DS18B20_write_bit(data & 0x01);
     82e:	8d 2f       	mov	r24, r29
     830:	81 70       	andi	r24, 0x01	; 1
     832:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <DS18B20_write_bit>
        data >>= 1;
     836:	d6 95       	lsr	r29
    params: uint8_t data - the byte to write
    returns: void
*/
void DS18B20_write_byte(uint8_t data)
{
    for (uint8_t i = 0; i < 8; i++)
     838:	cf 5f       	subi	r28, 0xFF	; 255
     83a:	c8 30       	cpi	r28, 0x08	; 8
     83c:	c0 f3       	brcs	.-16     	; 0x82e <DS18B20_write_byte+0xa>
    {
        DS18B20_write_bit(data & 0x01);
        data >>= 1;
    }
}
     83e:	df 91       	pop	r29
     840:	cf 91       	pop	r28
     842:	08 95       	ret

00000844 <DS18B20_read_bit>:
    returns: uint8_t - the bit read (0 or 1)
*/
uint8_t DS18B20_read_bit(void)
{
    uint8_t bit;
    DS18B20_OUTPUT();
     844:	87 b1       	in	r24, 0x07	; 7
     846:	81 60       	ori	r24, 0x01	; 1
     848:	87 b9       	out	0x07, r24	; 7
    DS18B20_LOW();
     84a:	88 b1       	in	r24, 0x08	; 8
     84c:	8e 7f       	andi	r24, 0xFE	; 254
     84e:	88 b9       	out	0x08, r24	; 8
     850:	8a e0       	ldi	r24, 0x0A	; 10
     852:	8a 95       	dec	r24
     854:	f1 f7       	brne	.-4      	; 0x852 <DS18B20_read_bit+0xe>
     856:	00 c0       	rjmp	.+0      	; 0x858 <DS18B20_read_bit+0x14>
    _delay_us(2);
    DS18B20_INPUT();
     858:	87 b1       	in	r24, 0x07	; 7
     85a:	8e 7f       	andi	r24, 0xFE	; 254
     85c:	87 b9       	out	0x07, r24	; 7
     85e:	e5 e3       	ldi	r30, 0x35	; 53
     860:	ea 95       	dec	r30
     862:	f1 f7       	brne	.-4      	; 0x860 <DS18B20_read_bit+0x1c>
     864:	00 00       	nop
    _delay_us(10);
    bit = (DS18B20_PIN & (1 << DS18B20_DQ)) ? 1 : 0;
     866:	86 b1       	in	r24, 0x06	; 6
     868:	81 70       	andi	r24, 0x01	; 1
     86a:	e7 ec       	ldi	r30, 0xC7	; 199
     86c:	f0 e0       	ldi	r31, 0x00	; 0
     86e:	31 97       	sbiw	r30, 0x01	; 1
     870:	f1 f7       	brne	.-4      	; 0x86e <DS18B20_read_bit+0x2a>
     872:	00 c0       	rjmp	.+0      	; 0x874 <DS18B20_read_bit+0x30>
     874:	00 00       	nop
    _delay_us(50);
    return bit;
}
     876:	08 95       	ret

00000878 <DS18B20_read_byte>:
    read a byte from the DS18B20 sensor
    params: void
    returns: uint8_t - the byte read
*/
uint8_t DS18B20_read_byte(void)
{
     878:	cf 93       	push	r28
     87a:	df 93       	push	r29
    uint8_t data = 0;
    for (uint8_t i = 0; i < 8; i++)
     87c:	c0 e0       	ldi	r28, 0x00	; 0
    params: void
    returns: uint8_t - the byte read
*/
uint8_t DS18B20_read_byte(void)
{
    uint8_t data = 0;
     87e:	d0 e0       	ldi	r29, 0x00	; 0
    for (uint8_t i = 0; i < 8; i++)
     880:	06 c0       	rjmp	.+12     	; 0x88e <DS18B20_read_byte+0x16>
    {
        data >>= 1;
     882:	d6 95       	lsr	r29
        if (DS18B20_read_bit())
     884:	0e 94 22 04 	call	0x844	; 0x844 <DS18B20_read_bit>
     888:	81 11       	cpse	r24, r1
            data |= 0x80;
     88a:	d0 68       	ori	r29, 0x80	; 128
    returns: uint8_t - the byte read
*/
uint8_t DS18B20_read_byte(void)
{
    uint8_t data = 0;
    for (uint8_t i = 0; i < 8; i++)
     88c:	cf 5f       	subi	r28, 0xFF	; 255
     88e:	c8 30       	cpi	r28, 0x08	; 8
     890:	c0 f3       	brcs	.-16     	; 0x882 <DS18B20_read_byte+0xa>
        data >>= 1;
        if (DS18B20_read_bit())
            data |= 0x80;
    }
    return data;
}
     892:	8d 2f       	mov	r24, r29
     894:	df 91       	pop	r29
     896:	cf 91       	pop	r28
     898:	08 95       	ret

0000089a <DS18B20_read_temperature>:
    read temperature from the DS18B20 sensor
    params: void
    returns: float - the temperature in degrees Celsius
*/
float DS18B20_read_temperature(void)
{
     89a:	cf 93       	push	r28
    uint8_t temp_l, temp_h;
    int16_t temp;

    DS18B20_reset();
     89c:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <DS18B20_reset>
    DS18B20_write_byte(0xCC);
     8a0:	8c ec       	ldi	r24, 0xCC	; 204
     8a2:	0e 94 12 04 	call	0x824	; 0x824 <DS18B20_write_byte>
    DS18B20_write_byte(0x44);
     8a6:	84 e4       	ldi	r24, 0x44	; 68
     8a8:	0e 94 12 04 	call	0x824	; 0x824 <DS18B20_write_byte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8ac:	2f ef       	ldi	r18, 0xFF	; 255
     8ae:	8e e9       	ldi	r24, 0x9E	; 158
     8b0:	94 e2       	ldi	r25, 0x24	; 36
     8b2:	21 50       	subi	r18, 0x01	; 1
     8b4:	80 40       	sbci	r24, 0x00	; 0
     8b6:	90 40       	sbci	r25, 0x00	; 0
     8b8:	e1 f7       	brne	.-8      	; 0x8b2 <DS18B20_read_temperature+0x18>
     8ba:	00 c0       	rjmp	.+0      	; 0x8bc <DS18B20_read_temperature+0x22>
     8bc:	00 00       	nop
    _delay_ms(750);

    DS18B20_reset();
     8be:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <DS18B20_reset>
    DS18B20_write_byte(0xCC);
     8c2:	8c ec       	ldi	r24, 0xCC	; 204
     8c4:	0e 94 12 04 	call	0x824	; 0x824 <DS18B20_write_byte>
    DS18B20_write_byte(0xBE);
     8c8:	8e eb       	ldi	r24, 0xBE	; 190
     8ca:	0e 94 12 04 	call	0x824	; 0x824 <DS18B20_write_byte>

    temp_l = DS18B20_read_byte();
     8ce:	0e 94 3c 04 	call	0x878	; 0x878 <DS18B20_read_byte>
     8d2:	c8 2f       	mov	r28, r24
    temp_h = DS18B20_read_byte();
     8d4:	0e 94 3c 04 	call	0x878	; 0x878 <DS18B20_read_byte>

    temp = (temp_h << 8) | temp_l;
     8d8:	68 2f       	mov	r22, r24
     8da:	70 e0       	ldi	r23, 0x00	; 0
     8dc:	76 2f       	mov	r23, r22
     8de:	66 27       	eor	r22, r22
     8e0:	6c 2b       	or	r22, r28

    return (float)temp / 16.0;
     8e2:	07 2e       	mov	r0, r23
     8e4:	00 0c       	add	r0, r0
     8e6:	88 0b       	sbc	r24, r24
     8e8:	99 0b       	sbc	r25, r25
     8ea:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <__floatsisf>
     8ee:	20 e0       	ldi	r18, 0x00	; 0
     8f0:	30 e0       	ldi	r19, 0x00	; 0
     8f2:	40 e8       	ldi	r20, 0x80	; 128
     8f4:	5d e3       	ldi	r21, 0x3D	; 61
     8f6:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <__mulsf3>
}
     8fa:	cf 91       	pop	r28
     8fc:	08 95       	ret

000008fe <HCSR04_init>:
    params: void
    returns: void
*/
void HCSR04_init(void)
{
    HCSR04_TRIG_DDR |= (1 << HCSR04_TRIG_PIN);
     8fe:	8a b1       	in	r24, 0x0a	; 10
     900:	84 60       	ori	r24, 0x04	; 4
     902:	8a b9       	out	0x0a, r24	; 10
    HCSR04_ECHO_DDR &= ~(1 << HCSR04_ECHO_PIN);
     904:	8a b1       	in	r24, 0x0a	; 10
     906:	87 7f       	andi	r24, 0xF7	; 247
     908:	8a b9       	out	0x0a, r24	; 10
     90a:	08 95       	ret

0000090c <HCSR04_trigger>:
    returns: void
*/
void HCSR04_trigger(void)
{
    /* Proper trigger: low for a short time, then high for 10us pulse */
    HCSR04_TRIG_PORT &= ~(1 << HCSR04_TRIG_PIN);
     90c:	8b b1       	in	r24, 0x0b	; 11
     90e:	8b 7f       	andi	r24, 0xFB	; 251
     910:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     912:	8a e0       	ldi	r24, 0x0A	; 10
     914:	8a 95       	dec	r24
     916:	f1 f7       	brne	.-4      	; 0x914 <HCSR04_trigger+0x8>
     918:	00 c0       	rjmp	.+0      	; 0x91a <HCSR04_trigger+0xe>
    _delay_us(2);
    HCSR04_TRIG_PORT |= (1 << HCSR04_TRIG_PIN);
     91a:	8b b1       	in	r24, 0x0b	; 11
     91c:	84 60       	ori	r24, 0x04	; 4
     91e:	8b b9       	out	0x0b, r24	; 11
     920:	85 e3       	ldi	r24, 0x35	; 53
     922:	8a 95       	dec	r24
     924:	f1 f7       	brne	.-4      	; 0x922 <HCSR04_trigger+0x16>
     926:	00 00       	nop
    _delay_us(10);
    HCSR04_TRIG_PORT &= ~(1 << HCSR04_TRIG_PIN);
     928:	8b b1       	in	r24, 0x0b	; 11
     92a:	8b 7f       	andi	r24, 0xFB	; 251
     92c:	8b b9       	out	0x0b, r24	; 11
     92e:	08 95       	ret

00000930 <HCSR04_read>:
*/
uint16_t HCSR04_read(void)
{
    uint32_t count = 0;

    while (!(HCSR04_ECHO_DEF_PIN & (1 << HCSR04_ECHO_PIN)));
     930:	4b 9b       	sbis	0x09, 3	; 9
     932:	fe cf       	rjmp	.-4      	; 0x930 <HCSR04_read>
     934:	60 e0       	ldi	r22, 0x00	; 0
     936:	70 e0       	ldi	r23, 0x00	; 0
     938:	cb 01       	movw	r24, r22
     93a:	08 c0       	rjmp	.+16     	; 0x94c <HCSR04_read+0x1c>
     93c:	25 e0       	ldi	r18, 0x05	; 5
     93e:	2a 95       	dec	r18
     940:	f1 f7       	brne	.-4      	; 0x93e <HCSR04_read+0xe>
     942:	00 00       	nop

    while (HCSR04_ECHO_DEF_PIN & (1 << HCSR04_ECHO_PIN))
    {
        _delay_us(1);
        count++;
     944:	6f 5f       	subi	r22, 0xFF	; 255
     946:	7f 4f       	sbci	r23, 0xFF	; 255
     948:	8f 4f       	sbci	r24, 0xFF	; 255
     94a:	9f 4f       	sbci	r25, 0xFF	; 255
{
    uint32_t count = 0;

    while (!(HCSR04_ECHO_DEF_PIN & (1 << HCSR04_ECHO_PIN)));

    while (HCSR04_ECHO_DEF_PIN & (1 << HCSR04_ECHO_PIN))
     94c:	4b 99       	sbic	0x09, 3	; 9
     94e:	f6 cf       	rjmp	.-20     	; 0x93c <HCSR04_read+0xc>
    {
        _delay_us(1);
        count++;
    }

    return (uint16_t)(count / 58.0);
     950:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <__floatunsisf>
     954:	20 e0       	ldi	r18, 0x00	; 0
     956:	30 e0       	ldi	r19, 0x00	; 0
     958:	48 e6       	ldi	r20, 0x68	; 104
     95a:	52 e4       	ldi	r21, 0x42	; 66
     95c:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <__divsf3>
     960:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <__fixunssfsi>
}
     964:	cb 01       	movw	r24, r22
     966:	08 95       	ret

00000968 <HCSR04_get_distance>:
    params: void
    returns: uint16_t - the distance in centimeters
*/
uint16_t HCSR04_get_distance(void)
{
    HCSR04_trigger();
     968:	0e 94 86 04 	call	0x90c	; 0x90c <HCSR04_trigger>
    return HCSR04_read();
     96c:	0e 94 98 04 	call	0x930	; 0x930 <HCSR04_read>
}
     970:	08 95       	ret

00000972 <KEYPAD_init>:
    params: void
    returns: void
*/
void KEYPAD_init(void)
{
    KEYPAD_DDR &= ~((1 << KEYPAD_KEY_1) | (1 << KEYPAD_KEY_2) | (1 << KEYPAD_KEY_3) | (1 << KEYPAD_KEY_4));
     972:	84 b1       	in	r24, 0x04	; 4
     974:	83 7c       	andi	r24, 0xC3	; 195
     976:	84 b9       	out	0x04, r24	; 4
    KEYPAD_PORT |= (1 << KEYPAD_KEY_1) | (1 << KEYPAD_KEY_2) | (1 << KEYPAD_KEY_3) | (1 << KEYPAD_KEY_4);
     978:	85 b1       	in	r24, 0x05	; 5
     97a:	8c 63       	ori	r24, 0x3C	; 60
     97c:	85 b9       	out	0x05, r24	; 5
     97e:	08 95       	ret

00000980 <KEYPAD_read>:
    params: void
    returns: uint8_t - the key number (1-4) or KEYPAD_NO_KEY if no key is pressed
*/
uint8_t KEYPAD_read(void)
{
    if (!(KEYPAD_PIN & (1 << KEYPAD_KEY_1))) return 1;
     980:	1a 9b       	sbis	0x03, 2	; 3
     982:	08 c0       	rjmp	.+16     	; 0x994 <KEYPAD_read+0x14>
    if (!(KEYPAD_PIN & (1 << KEYPAD_KEY_2))) return 2;
     984:	1b 9b       	sbis	0x03, 3	; 3
     986:	08 c0       	rjmp	.+16     	; 0x998 <KEYPAD_read+0x18>
    if (!(KEYPAD_PIN & (1 << KEYPAD_KEY_3))) return 3;
     988:	1c 9b       	sbis	0x03, 4	; 3
     98a:	08 c0       	rjmp	.+16     	; 0x99c <KEYPAD_read+0x1c>
    if (!(KEYPAD_PIN & (1 << KEYPAD_KEY_4))) return 4;
     98c:	1d 99       	sbic	0x03, 5	; 3
     98e:	08 c0       	rjmp	.+16     	; 0x9a0 <KEYPAD_read+0x20>
     990:	84 e0       	ldi	r24, 0x04	; 4
     992:	08 95       	ret
    params: void
    returns: uint8_t - the key number (1-4) or KEYPAD_NO_KEY if no key is pressed
*/
uint8_t KEYPAD_read(void)
{
    if (!(KEYPAD_PIN & (1 << KEYPAD_KEY_1))) return 1;
     994:	81 e0       	ldi	r24, 0x01	; 1
     996:	08 95       	ret
    if (!(KEYPAD_PIN & (1 << KEYPAD_KEY_2))) return 2;
     998:	82 e0       	ldi	r24, 0x02	; 2
     99a:	08 95       	ret
    if (!(KEYPAD_PIN & (1 << KEYPAD_KEY_3))) return 3;
     99c:	83 e0       	ldi	r24, 0x03	; 3
     99e:	08 95       	ret
    if (!(KEYPAD_PIN & (1 << KEYPAD_KEY_4))) return 4;
    return KEYPAD_NO_KEY;
     9a0:	85 e0       	ldi	r24, 0x05	; 5
}
     9a2:	08 95       	ret

000009a4 <display_set>:
    params: const unsigned char* title - title string (max 12 chars)
            const unsigned char* data - data string (max 16 chars)
    returns: void
*/
void display_set(const unsigned char *title, const unsigned char *data)
{
     9a4:	0f 93       	push	r16
     9a6:	1f 93       	push	r17
     9a8:	cf 93       	push	r28
     9aa:	df 93       	push	r29
     9ac:	cd b7       	in	r28, 0x3d	; 61
     9ae:	de b7       	in	r29, 0x3e	; 62
     9b0:	6c 97       	sbiw	r28, 0x1c	; 28
     9b2:	0f b6       	in	r0, 0x3f	; 63
     9b4:	f8 94       	cli
     9b6:	de bf       	out	0x3e, r29	; 62
     9b8:	0f be       	out	0x3f, r0	; 63
     9ba:	cd bf       	out	0x3d, r28	; 61
     9bc:	db 01       	movw	r26, r22
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9be:	ef e3       	ldi	r30, 0x3F	; 63
     9c0:	ff e1       	ldi	r31, 0x1F	; 31
     9c2:	31 97       	sbiw	r30, 0x01	; 1
     9c4:	f1 f7       	brne	.-4      	; 0x9c2 <display_set+0x1e>
     9c6:	00 c0       	rjmp	.+0      	; 0x9c8 <display_set+0x24>
     9c8:	00 00       	nop

    unsigned char line1[12];
    unsigned char line2[16];

    // prepare line1: copy up to 12 chars from title, pad with spaces
    int i = 0;
     9ca:	20 e0       	ldi	r18, 0x00	; 0
     9cc:	30 e0       	ldi	r19, 0x00	; 0
    for (; i < 12 && *title; ++i)
     9ce:	0a c0       	rjmp	.+20     	; 0x9e4 <display_set+0x40>
        line1[i] = *title++;
     9d0:	01 96       	adiw	r24, 0x01	; 1
     9d2:	e1 e0       	ldi	r30, 0x01	; 1
     9d4:	f0 e0       	ldi	r31, 0x00	; 0
     9d6:	ec 0f       	add	r30, r28
     9d8:	fd 1f       	adc	r31, r29
     9da:	e2 0f       	add	r30, r18
     9dc:	f3 1f       	adc	r31, r19
     9de:	40 83       	st	Z, r20
    unsigned char line1[12];
    unsigned char line2[16];

    // prepare line1: copy up to 12 chars from title, pad with spaces
    int i = 0;
    for (; i < 12 && *title; ++i)
     9e0:	2f 5f       	subi	r18, 0xFF	; 255
     9e2:	3f 4f       	sbci	r19, 0xFF	; 255
     9e4:	2c 30       	cpi	r18, 0x0C	; 12
     9e6:	31 05       	cpc	r19, r1
     9e8:	7c f4       	brge	.+30     	; 0xa08 <display_set+0x64>
     9ea:	fc 01       	movw	r30, r24
     9ec:	40 81       	ld	r20, Z
     9ee:	41 11       	cpse	r20, r1
     9f0:	ef cf       	rjmp	.-34     	; 0x9d0 <display_set+0x2c>
     9f2:	0a c0       	rjmp	.+20     	; 0xa08 <display_set+0x64>
        line1[i] = *title++;

    for (; i < 12; ++i)
        line1[i] = ' ';
     9f4:	e1 e0       	ldi	r30, 0x01	; 1
     9f6:	f0 e0       	ldi	r31, 0x00	; 0
     9f8:	ec 0f       	add	r30, r28
     9fa:	fd 1f       	adc	r31, r29
     9fc:	e2 0f       	add	r30, r18
     9fe:	f3 1f       	adc	r31, r19
     a00:	80 e2       	ldi	r24, 0x20	; 32
     a02:	80 83       	st	Z, r24
    // prepare line1: copy up to 12 chars from title, pad with spaces
    int i = 0;
    for (; i < 12 && *title; ++i)
        line1[i] = *title++;

    for (; i < 12; ++i)
     a04:	2f 5f       	subi	r18, 0xFF	; 255
     a06:	3f 4f       	sbci	r19, 0xFF	; 255
     a08:	2c 30       	cpi	r18, 0x0C	; 12
     a0a:	31 05       	cpc	r19, r1
     a0c:	9c f3       	brlt	.-26     	; 0x9f4 <display_set+0x50>
     a0e:	80 e0       	ldi	r24, 0x00	; 0
     a10:	90 e0       	ldi	r25, 0x00	; 0
     a12:	09 c0       	rjmp	.+18     	; 0xa26 <display_set+0x82>
    /* custom characters created at init; just write the codes */

    // prepare line2: copy up to 16 chars from data, pad with spaces
    i = 0;
    for (; i < 16 && *data; ++i)
        line2[i] = *data++;
     a14:	11 96       	adiw	r26, 0x01	; 1
     a16:	ed e0       	ldi	r30, 0x0D	; 13
     a18:	f0 e0       	ldi	r31, 0x00	; 0
     a1a:	ec 0f       	add	r30, r28
     a1c:	fd 1f       	adc	r31, r29
     a1e:	e8 0f       	add	r30, r24
     a20:	f9 1f       	adc	r31, r25
     a22:	20 83       	st	Z, r18

    /* custom characters created at init; just write the codes */

    // prepare line2: copy up to 16 chars from data, pad with spaces
    i = 0;
    for (; i < 16 && *data; ++i)
     a24:	01 96       	adiw	r24, 0x01	; 1
     a26:	80 31       	cpi	r24, 0x10	; 16
     a28:	91 05       	cpc	r25, r1
     a2a:	6c f4       	brge	.+26     	; 0xa46 <display_set+0xa2>
     a2c:	2c 91       	ld	r18, X
     a2e:	21 11       	cpse	r18, r1
     a30:	f1 cf       	rjmp	.-30     	; 0xa14 <display_set+0x70>
     a32:	09 c0       	rjmp	.+18     	; 0xa46 <display_set+0xa2>
        line2[i] = *data++;

    // LCD_1602A_load_data(0);

    for (; i < 16; ++i)
        line2[i] = ' ';
     a34:	ed e0       	ldi	r30, 0x0D	; 13
     a36:	f0 e0       	ldi	r31, 0x00	; 0
     a38:	ec 0f       	add	r30, r28
     a3a:	fd 1f       	adc	r31, r29
     a3c:	e8 0f       	add	r30, r24
     a3e:	f9 1f       	adc	r31, r25
     a40:	20 e2       	ldi	r18, 0x20	; 32
     a42:	20 83       	st	Z, r18
    for (; i < 16 && *data; ++i)
        line2[i] = *data++;

    // LCD_1602A_load_data(0);

    for (; i < 16; ++i)
     a44:	01 96       	adiw	r24, 0x01	; 1
     a46:	80 31       	cpi	r24, 0x10	; 16
     a48:	91 05       	cpc	r25, r1
     a4a:	a4 f3       	brlt	.-24     	; 0xa34 <display_set+0x90>
        line2[i] = ' ';

    // reset cursor to first line and write 12 chars
    LCD_1602A_load_command(DISPLAY_SET_CURSOR_LINE_1);
     a4c:	80 e8       	ldi	r24, 0x80	; 128
     a4e:	0e 94 09 03 	call	0x612	; 0x612 <LCD_1602A_load_command>
    for (i = 0; i < 12; ++i)
     a52:	00 e0       	ldi	r16, 0x00	; 0
     a54:	10 e0       	ldi	r17, 0x00	; 0
     a56:	0b c0       	rjmp	.+22     	; 0xa6e <display_set+0xca>
    {
        LCD_1602A_load_data(line1[i]);
     a58:	e1 e0       	ldi	r30, 0x01	; 1
     a5a:	f0 e0       	ldi	r31, 0x00	; 0
     a5c:	ec 0f       	add	r30, r28
     a5e:	fd 1f       	adc	r31, r29
     a60:	e0 0f       	add	r30, r16
     a62:	f1 1f       	adc	r31, r17
     a64:	80 81       	ld	r24, Z
     a66:	0e 94 19 03 	call	0x632	; 0x632 <LCD_1602A_load_data>
    for (; i < 16; ++i)
        line2[i] = ' ';

    // reset cursor to first line and write 12 chars
    LCD_1602A_load_command(DISPLAY_SET_CURSOR_LINE_1);
    for (i = 0; i < 12; ++i)
     a6a:	0f 5f       	subi	r16, 0xFF	; 255
     a6c:	1f 4f       	sbci	r17, 0xFF	; 255
     a6e:	0c 30       	cpi	r16, 0x0C	; 12
     a70:	11 05       	cpc	r17, r1
     a72:	94 f3       	brlt	.-28     	; 0xa58 <display_set+0xb4>
    {
        LCD_1602A_load_data(line1[i]);
    }

    LCD_1602A_load_data(2);
     a74:	82 e0       	ldi	r24, 0x02	; 2
     a76:	0e 94 19 03 	call	0x632	; 0x632 <LCD_1602A_load_data>
    LCD_1602A_load_data(0);
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	0e 94 19 03 	call	0x632	; 0x632 <LCD_1602A_load_data>
    LCD_1602A_load_data(1);
     a80:	81 e0       	ldi	r24, 0x01	; 1
     a82:	0e 94 19 03 	call	0x632	; 0x632 <LCD_1602A_load_data>
    LCD_1602A_load_data(3);
     a86:	83 e0       	ldi	r24, 0x03	; 3
     a88:	0e 94 19 03 	call	0x632	; 0x632 <LCD_1602A_load_data>

    // reset cursor to second line and write 16 chars
    LCD_1602A_load_command(DISPLAY_SET_CURSOR_LINE_2);
     a8c:	80 ec       	ldi	r24, 0xC0	; 192
     a8e:	0e 94 09 03 	call	0x612	; 0x612 <LCD_1602A_load_command>
    for (i = 0; i < 16; ++i)
     a92:	00 e0       	ldi	r16, 0x00	; 0
     a94:	10 e0       	ldi	r17, 0x00	; 0
     a96:	0b c0       	rjmp	.+22     	; 0xaae <display_set+0x10a>
    {
        LCD_1602A_load_data(line2[i]);
     a98:	ed e0       	ldi	r30, 0x0D	; 13
     a9a:	f0 e0       	ldi	r31, 0x00	; 0
     a9c:	ec 0f       	add	r30, r28
     a9e:	fd 1f       	adc	r31, r29
     aa0:	e0 0f       	add	r30, r16
     aa2:	f1 1f       	adc	r31, r17
     aa4:	80 81       	ld	r24, Z
     aa6:	0e 94 19 03 	call	0x632	; 0x632 <LCD_1602A_load_data>
    LCD_1602A_load_data(1);
    LCD_1602A_load_data(3);

    // reset cursor to second line and write 16 chars
    LCD_1602A_load_command(DISPLAY_SET_CURSOR_LINE_2);
    for (i = 0; i < 16; ++i)
     aaa:	0f 5f       	subi	r16, 0xFF	; 255
     aac:	1f 4f       	sbci	r17, 0xFF	; 255
     aae:	00 31       	cpi	r16, 0x10	; 16
     ab0:	11 05       	cpc	r17, r1
     ab2:	94 f3       	brlt	.-28     	; 0xa98 <display_set+0xf4>
    {
        LCD_1602A_load_data(line2[i]);
    }
}
     ab4:	6c 96       	adiw	r28, 0x1c	; 28
     ab6:	0f b6       	in	r0, 0x3f	; 63
     ab8:	f8 94       	cli
     aba:	de bf       	out	0x3e, r29	; 62
     abc:	0f be       	out	0x3f, r0	; 63
     abe:	cd bf       	out	0x3d, r28	; 61
     ac0:	df 91       	pop	r29
     ac2:	cf 91       	pop	r28
     ac4:	1f 91       	pop	r17
     ac6:	0f 91       	pop	r16
     ac8:	08 95       	ret

00000aca <get_tank_capacity_at_height>:


float get_tank_capacity_at_height(int water_depth)
{
     aca:	cf 92       	push	r12
     acc:	df 92       	push	r13
     ace:	ef 92       	push	r14
     ad0:	ff 92       	push	r15
    float water_height = (float)TANK_HEIGHT_IN_CM - (float)water_depth;
     ad2:	bc 01       	movw	r22, r24
     ad4:	99 0f       	add	r25, r25
     ad6:	88 0b       	sbc	r24, r24
     ad8:	99 0b       	sbc	r25, r25
     ada:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <__floatsisf>
     ade:	9b 01       	movw	r18, r22
     ae0:	ac 01       	movw	r20, r24
     ae2:	6a e9       	ldi	r22, 0x9A	; 154
     ae4:	79 e9       	ldi	r23, 0x99	; 153
     ae6:	89 e7       	ldi	r24, 0x79	; 121
     ae8:	91 e4       	ldi	r25, 0x41	; 65
     aea:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <__subsf3>

    // // The following formula assumes the tank is a perfect cylinder: V = π * r^2 * h
    float volume = (PI * ((float)TANK_RADIUS_IN_CM * (float)TANK_RADIUS_IN_CM) * water_height) / 1000.0; // convert cm^3 to liters
     aee:	20 ed       	ldi	r18, 0xD0	; 208
     af0:	3f e0       	ldi	r19, 0x0F	; 15
     af2:	49 e4       	ldi	r20, 0x49	; 73
     af4:	53 e4       	ldi	r21, 0x43	; 67
     af6:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <__mulsf3>
     afa:	20 e0       	ldi	r18, 0x00	; 0
     afc:	30 e0       	ldi	r19, 0x00	; 0
     afe:	4a e7       	ldi	r20, 0x7A	; 122
     b00:	54 e4       	ldi	r21, 0x44	; 68
     b02:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <__divsf3>
     b06:	6b 01       	movw	r12, r22
     b08:	7c 01       	movw	r14, r24

    if (volume < 0.0)
     b0a:	20 e0       	ldi	r18, 0x00	; 0
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	a9 01       	movw	r20, r18
     b10:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <__cmpsf2>
     b14:	88 23       	and	r24, r24
     b16:	1c f4       	brge	.+6      	; 0xb1e <get_tank_capacity_at_height+0x54>
    {
        volume = 0.0;
     b18:	c1 2c       	mov	r12, r1
     b1a:	d1 2c       	mov	r13, r1
     b1c:	76 01       	movw	r14, r12
    }

    return volume;
}
     b1e:	c7 01       	movw	r24, r14
     b20:	b6 01       	movw	r22, r12
     b22:	ff 90       	pop	r15
     b24:	ef 90       	pop	r14
     b26:	df 90       	pop	r13
     b28:	cf 90       	pop	r12
     b2a:	08 95       	ret

00000b2c <get_tank_capacity>:
    returns: float - the tank capacity in liters
*/
float get_tank_capacity()
{

    uint16_t water_depth = HCSR04_get_distance();
     b2c:	0e 94 b4 04 	call	0x968	; 0x968 <HCSR04_get_distance>
    water_depth *= 1.5; // convert to float
     b30:	bc 01       	movw	r22, r24
     b32:	80 e0       	ldi	r24, 0x00	; 0
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <__floatunsisf>
     b3a:	20 e0       	ldi	r18, 0x00	; 0
     b3c:	30 e0       	ldi	r19, 0x00	; 0
     b3e:	40 ec       	ldi	r20, 0xC0	; 192
     b40:	5f e3       	ldi	r21, 0x3F	; 63
     b42:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <__mulsf3>
     b46:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <__fixunssfsi>

    return get_tank_capacity_at_height(water_depth);
     b4a:	cb 01       	movw	r24, r22
     b4c:	0e 94 65 05 	call	0xaca	; 0xaca <get_tank_capacity_at_height>
}
     b50:	08 95       	ret

00000b52 <get_refill_rate>:
    get the refill rate based on tank capacity change over time
    params: void
    returns: float - the refill rate in liters per minute
*/
float get_refill_rate()
{
     b52:	8f 92       	push	r8
     b54:	9f 92       	push	r9
     b56:	af 92       	push	r10
     b58:	bf 92       	push	r11
     b5a:	cf 92       	push	r12
     b5c:	df 92       	push	r13
     b5e:	ef 92       	push	r14
     b60:	ff 92       	push	r15
     b62:	cf 93       	push	r28
     b64:	df 93       	push	r29
     b66:	00 d0       	rcall	.+0      	; 0xb68 <get_refill_rate+0x16>
     b68:	00 d0       	rcall	.+0      	; 0xb6a <get_refill_rate+0x18>
     b6a:	cd b7       	in	r28, 0x3d	; 61
     b6c:	de b7       	in	r29, 0x3e	; 62
    int height_1;
    peekRear(&height_per_second, &height_1);
     b6e:	be 01       	movw	r22, r28
     b70:	6f 5f       	subi	r22, 0xFF	; 255
     b72:	7f 4f       	sbci	r23, 0xFF	; 255
     b74:	88 e9       	ldi	r24, 0x98	; 152
     b76:	94 e0       	ldi	r25, 0x04	; 4
     b78:	0e 94 c7 01 	call	0x38e	; 0x38e <peekRear>

    int height_2;
    peekFront(&height_per_second, &height_2);
     b7c:	be 01       	movw	r22, r28
     b7e:	6d 5f       	subi	r22, 0xFD	; 253
     b80:	7f 4f       	sbci	r23, 0xFF	; 255
     b82:	88 e9       	ldi	r24, 0x98	; 152
     b84:	94 e0       	ldi	r25, 0x04	; 4
     b86:	0e 94 aa 01 	call	0x354	; 0x354 <peekFront>

    float capacity_at_1 = get_tank_capacity_at_height(height_1 * 1.5);
     b8a:	69 81       	ldd	r22, Y+1	; 0x01
     b8c:	7a 81       	ldd	r23, Y+2	; 0x02
     b8e:	07 2e       	mov	r0, r23
     b90:	00 0c       	add	r0, r0
     b92:	88 0b       	sbc	r24, r24
     b94:	99 0b       	sbc	r25, r25
     b96:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <__floatsisf>
     b9a:	20 e0       	ldi	r18, 0x00	; 0
     b9c:	30 e0       	ldi	r19, 0x00	; 0
     b9e:	40 ec       	ldi	r20, 0xC0	; 192
     ba0:	5f e3       	ldi	r21, 0x3F	; 63
     ba2:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <__mulsf3>
     ba6:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <__fixsfsi>
     baa:	cb 01       	movw	r24, r22
     bac:	0e 94 65 05 	call	0xaca	; 0xaca <get_tank_capacity_at_height>
     bb0:	4b 01       	movw	r8, r22
     bb2:	5c 01       	movw	r10, r24
    float capacity_at_2 = get_tank_capacity_at_height(height_2 * 1.5);
     bb4:	6b 81       	ldd	r22, Y+3	; 0x03
     bb6:	7c 81       	ldd	r23, Y+4	; 0x04
     bb8:	07 2e       	mov	r0, r23
     bba:	00 0c       	add	r0, r0
     bbc:	88 0b       	sbc	r24, r24
     bbe:	99 0b       	sbc	r25, r25
     bc0:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <__floatsisf>
     bc4:	20 e0       	ldi	r18, 0x00	; 0
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	40 ec       	ldi	r20, 0xC0	; 192
     bca:	5f e3       	ldi	r21, 0x3F	; 63
     bcc:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <__mulsf3>
     bd0:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <__fixsfsi>
     bd4:	cb 01       	movw	r24, r22
     bd6:	0e 94 65 05 	call	0xaca	; 0xaca <get_tank_capacity_at_height>
     bda:	6b 01       	movw	r12, r22
     bdc:	7c 01       	movw	r14, r24

    if (capacity_at_1 > capacity_at_2)
     bde:	9b 01       	movw	r18, r22
     be0:	ac 01       	movw	r20, r24
     be2:	c5 01       	movw	r24, r10
     be4:	b4 01       	movw	r22, r8
     be6:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <__gesf2>
     bea:	18 16       	cp	r1, r24
     bec:	9c f0       	brlt	.+38     	; 0xc14 <get_refill_rate+0xc2>
    {
        return 0.0; // no leak detected
    }

    float leak_rate_per_second = (capacity_at_2 - capacity_at_1) / 2.0;
     bee:	a5 01       	movw	r20, r10
     bf0:	94 01       	movw	r18, r8
     bf2:	c7 01       	movw	r24, r14
     bf4:	b6 01       	movw	r22, r12
     bf6:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <__subsf3>
     bfa:	20 e0       	ldi	r18, 0x00	; 0
     bfc:	30 e0       	ldi	r19, 0x00	; 0
     bfe:	40 e0       	ldi	r20, 0x00	; 0
     c00:	5f e3       	ldi	r21, 0x3F	; 63
     c02:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <__mulsf3>

    return leak_rate_per_second * 60.0; // convert to liters per minute
     c06:	20 e0       	ldi	r18, 0x00	; 0
     c08:	30 e0       	ldi	r19, 0x00	; 0
     c0a:	40 e7       	ldi	r20, 0x70	; 112
     c0c:	52 e4       	ldi	r21, 0x42	; 66
     c0e:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <__mulsf3>
     c12:	03 c0       	rjmp	.+6      	; 0xc1a <get_refill_rate+0xc8>
    float capacity_at_1 = get_tank_capacity_at_height(height_1 * 1.5);
    float capacity_at_2 = get_tank_capacity_at_height(height_2 * 1.5);

    if (capacity_at_1 > capacity_at_2)
    {
        return 0.0; // no leak detected
     c14:	60 e0       	ldi	r22, 0x00	; 0
     c16:	70 e0       	ldi	r23, 0x00	; 0
     c18:	cb 01       	movw	r24, r22
    }

    float leak_rate_per_second = (capacity_at_2 - capacity_at_1) / 2.0;

    return leak_rate_per_second * 60.0; // convert to liters per minute
}
     c1a:	0f 90       	pop	r0
     c1c:	0f 90       	pop	r0
     c1e:	0f 90       	pop	r0
     c20:	0f 90       	pop	r0
     c22:	df 91       	pop	r29
     c24:	cf 91       	pop	r28
     c26:	ff 90       	pop	r15
     c28:	ef 90       	pop	r14
     c2a:	df 90       	pop	r13
     c2c:	cf 90       	pop	r12
     c2e:	bf 90       	pop	r11
     c30:	af 90       	pop	r10
     c32:	9f 90       	pop	r9
     c34:	8f 90       	pop	r8
     c36:	08 95       	ret

00000c38 <get_leak_rate>:
    get the leak rate based on tank capacity change over time
    params: void
    returns: float - the leak rate in liters per minute
*/
float get_leak_rate()
{
     c38:	8f 92       	push	r8
     c3a:	9f 92       	push	r9
     c3c:	af 92       	push	r10
     c3e:	bf 92       	push	r11
     c40:	cf 92       	push	r12
     c42:	df 92       	push	r13
     c44:	ef 92       	push	r14
     c46:	ff 92       	push	r15
     c48:	cf 93       	push	r28
     c4a:	df 93       	push	r29
     c4c:	00 d0       	rcall	.+0      	; 0xc4e <get_leak_rate+0x16>
     c4e:	00 d0       	rcall	.+0      	; 0xc50 <get_leak_rate+0x18>
     c50:	cd b7       	in	r28, 0x3d	; 61
     c52:	de b7       	in	r29, 0x3e	; 62
    int height_1;
    peekRear(&height_per_second, &height_1);
     c54:	be 01       	movw	r22, r28
     c56:	6f 5f       	subi	r22, 0xFF	; 255
     c58:	7f 4f       	sbci	r23, 0xFF	; 255
     c5a:	88 e9       	ldi	r24, 0x98	; 152
     c5c:	94 e0       	ldi	r25, 0x04	; 4
     c5e:	0e 94 c7 01 	call	0x38e	; 0x38e <peekRear>

    int height_2;
    peekFront(&height_per_second, &height_2);
     c62:	be 01       	movw	r22, r28
     c64:	6d 5f       	subi	r22, 0xFD	; 253
     c66:	7f 4f       	sbci	r23, 0xFF	; 255
     c68:	88 e9       	ldi	r24, 0x98	; 152
     c6a:	94 e0       	ldi	r25, 0x04	; 4
     c6c:	0e 94 aa 01 	call	0x354	; 0x354 <peekFront>

    float capacity_at_1 = get_tank_capacity_at_height(height_1 * 1.5);
     c70:	69 81       	ldd	r22, Y+1	; 0x01
     c72:	7a 81       	ldd	r23, Y+2	; 0x02
     c74:	07 2e       	mov	r0, r23
     c76:	00 0c       	add	r0, r0
     c78:	88 0b       	sbc	r24, r24
     c7a:	99 0b       	sbc	r25, r25
     c7c:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <__floatsisf>
     c80:	20 e0       	ldi	r18, 0x00	; 0
     c82:	30 e0       	ldi	r19, 0x00	; 0
     c84:	40 ec       	ldi	r20, 0xC0	; 192
     c86:	5f e3       	ldi	r21, 0x3F	; 63
     c88:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <__mulsf3>
     c8c:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <__fixsfsi>
     c90:	cb 01       	movw	r24, r22
     c92:	0e 94 65 05 	call	0xaca	; 0xaca <get_tank_capacity_at_height>
     c96:	6b 01       	movw	r12, r22
     c98:	7c 01       	movw	r14, r24
    float capacity_at_2 = get_tank_capacity_at_height(height_2 * 1.5);
     c9a:	6b 81       	ldd	r22, Y+3	; 0x03
     c9c:	7c 81       	ldd	r23, Y+4	; 0x04
     c9e:	07 2e       	mov	r0, r23
     ca0:	00 0c       	add	r0, r0
     ca2:	88 0b       	sbc	r24, r24
     ca4:	99 0b       	sbc	r25, r25
     ca6:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <__floatsisf>
     caa:	20 e0       	ldi	r18, 0x00	; 0
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	40 ec       	ldi	r20, 0xC0	; 192
     cb0:	5f e3       	ldi	r21, 0x3F	; 63
     cb2:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <__mulsf3>
     cb6:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <__fixsfsi>
     cba:	cb 01       	movw	r24, r22
     cbc:	0e 94 65 05 	call	0xaca	; 0xaca <get_tank_capacity_at_height>
     cc0:	4b 01       	movw	r8, r22
     cc2:	5c 01       	movw	r10, r24

    if (capacity_at_1 < capacity_at_2) {
     cc4:	9b 01       	movw	r18, r22
     cc6:	ac 01       	movw	r20, r24
     cc8:	c7 01       	movw	r24, r14
     cca:	b6 01       	movw	r22, r12
     ccc:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <__cmpsf2>
     cd0:	88 23       	and	r24, r24
     cd2:	fc f0       	brlt	.+62     	; 0xd12 <get_leak_rate+0xda>
        return 0.0; // no leak detected
    }
    float leak_rate_per_second = (capacity_at_1 - capacity_at_2) / queueSize(&height_per_second);
     cd4:	a5 01       	movw	r20, r10
     cd6:	94 01       	movw	r18, r8
     cd8:	c7 01       	movw	r24, r14
     cda:	b6 01       	movw	r22, r12
     cdc:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <__subsf3>
     ce0:	6b 01       	movw	r12, r22
     ce2:	7c 01       	movw	r14, r24
     ce4:	88 e9       	ldi	r24, 0x98	; 152
     ce6:	94 e0       	ldi	r25, 0x04	; 4
     ce8:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <queueSize>
     cec:	bc 01       	movw	r22, r24
     cee:	99 0f       	add	r25, r25
     cf0:	88 0b       	sbc	r24, r24
     cf2:	99 0b       	sbc	r25, r25
     cf4:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <__floatsisf>
     cf8:	9b 01       	movw	r18, r22
     cfa:	ac 01       	movw	r20, r24
     cfc:	c7 01       	movw	r24, r14
     cfe:	b6 01       	movw	r22, r12
     d00:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <__divsf3>

    return leak_rate_per_second * 60.0; // convert to liters per minute
     d04:	20 e0       	ldi	r18, 0x00	; 0
     d06:	30 e0       	ldi	r19, 0x00	; 0
     d08:	40 e7       	ldi	r20, 0x70	; 112
     d0a:	52 e4       	ldi	r21, 0x42	; 66
     d0c:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <__mulsf3>
     d10:	03 c0       	rjmp	.+6      	; 0xd18 <get_leak_rate+0xe0>

    float capacity_at_1 = get_tank_capacity_at_height(height_1 * 1.5);
    float capacity_at_2 = get_tank_capacity_at_height(height_2 * 1.5);

    if (capacity_at_1 < capacity_at_2) {
        return 0.0; // no leak detected
     d12:	60 e0       	ldi	r22, 0x00	; 0
     d14:	70 e0       	ldi	r23, 0x00	; 0
     d16:	cb 01       	movw	r24, r22
    }
    float leak_rate_per_second = (capacity_at_1 - capacity_at_2) / queueSize(&height_per_second);

    return leak_rate_per_second * 60.0; // convert to liters per minute
}
     d18:	0f 90       	pop	r0
     d1a:	0f 90       	pop	r0
     d1c:	0f 90       	pop	r0
     d1e:	0f 90       	pop	r0
     d20:	df 91       	pop	r29
     d22:	cf 91       	pop	r28
     d24:	ff 90       	pop	r15
     d26:	ef 90       	pop	r14
     d28:	df 90       	pop	r13
     d2a:	cf 90       	pop	r12
     d2c:	bf 90       	pop	r11
     d2e:	af 90       	pop	r10
     d30:	9f 90       	pop	r9
     d32:	8f 90       	pop	r8
     d34:	08 95       	ret

00000d36 <get_soil_temperature>:

float get_soil_temperature()
{
    return DS18B20_read_temperature();
     d36:	0e 94 4d 04 	call	0x89a	; 0x89a <DS18B20_read_temperature>
}
     d3a:	08 95       	ret

00000d3c <ui_show_display>:
    update the display based on the current active menu and hover indices
    params: void
    returns: void
*/
void ui_show_display(void)
{
     d3c:	ef 92       	push	r14
     d3e:	ff 92       	push	r15
     d40:	0f 93       	push	r16
     d42:	cf 93       	push	r28
     d44:	df 93       	push	r29
     d46:	00 d0       	rcall	.+0      	; 0xd48 <ui_show_display+0xc>
     d48:	cd b7       	in	r28, 0x3d	; 61
     d4a:	de b7       	in	r29, 0x3e	; 62
    if (active_menu_index == -1)
     d4c:	e0 91 26 01 	lds	r30, 0x0126	; 0x800126 <active_menu_index>
     d50:	f0 91 27 01 	lds	r31, 0x0127	; 0x800127 <active_menu_index+0x1>
     d54:	ef 3f       	cpi	r30, 0xFF	; 255
     d56:	2f ef       	ldi	r18, 0xFF	; 255
     d58:	f2 07       	cpc	r31, r18
     d5a:	79 f4       	brne	.+30     	; 0xd7a <ui_show_display+0x3e>
    {
        display_set("MAIN MENU", MENU_BUFFER[menu_hover_index]);
     d5c:	e0 91 84 04 	lds	r30, 0x0484	; 0x800484 <menu_hover_index>
     d60:	f0 91 85 04 	lds	r31, 0x0485	; 0x800485 <menu_hover_index+0x1>
     d64:	ee 0f       	add	r30, r30
     d66:	ff 1f       	adc	r31, r31
     d68:	e2 5c       	subi	r30, 0xC2	; 194
     d6a:	fe 4f       	sbci	r31, 0xFE	; 254
     d6c:	60 81       	ld	r22, Z
     d6e:	71 81       	ldd	r23, Z+1	; 0x01
     d70:	8d ee       	ldi	r24, 0xED	; 237
     d72:	91 e0       	ldi	r25, 0x01	; 1
     d74:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <display_set>
     d78:	6f c2       	rjmp	.+1246   	; 0x1258 <ui_show_display+0x51c>
    }
    else
    {
        switch (active_menu_index)
     d7a:	e8 30       	cpi	r30, 0x08	; 8
     d7c:	f1 05       	cpc	r31, r1
     d7e:	08 f0       	brcs	.+2      	; 0xd82 <ui_show_display+0x46>
     d80:	65 c2       	rjmp	.+1226   	; 0x124c <ui_show_display+0x510>
     d82:	ec 5c       	subi	r30, 0xCC	; 204
     d84:	ff 4f       	sbci	r31, 0xFF	; 255
     d86:	0c 94 43 10 	jmp	0x2086	; 0x2086 <__tablejump2__>
        {
        case 0:
            display_set("TANK CAPACITY", "Loading...");
     d8a:	67 ef       	ldi	r22, 0xF7	; 247
     d8c:	71 e0       	ldi	r23, 0x01	; 1
     d8e:	82 e0       	ldi	r24, 0x02	; 2
     d90:	92 e0       	ldi	r25, 0x02	; 2
     d92:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <display_set>
            format_float(buffer, sizeof(buffer), get_tank_capacity(), 1, "Ltrs");
     d96:	0e 94 96 05 	call	0xb2c	; 0xb2c <get_tank_capacity>
     d9a:	9b 01       	movw	r18, r22
     d9c:	ac 01       	movw	r20, r24
     d9e:	0f 2e       	mov	r0, r31
     da0:	f2 e6       	ldi	r31, 0x62	; 98
     da2:	ef 2e       	mov	r14, r31
     da4:	f3 e0       	ldi	r31, 0x03	; 3
     da6:	ff 2e       	mov	r15, r31
     da8:	f0 2d       	mov	r31, r0
     daa:	01 e0       	ldi	r16, 0x01	; 1
     dac:	60 e1       	ldi	r22, 0x10	; 16
     dae:	70 e0       	ldi	r23, 0x00	; 0
     db0:	88 e8       	ldi	r24, 0x88	; 136
     db2:	94 e0       	ldi	r25, 0x04	; 4
     db4:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <format_float>
            display_set("TANK CAPACITY", buffer);
     db8:	68 e8       	ldi	r22, 0x88	; 136
     dba:	74 e0       	ldi	r23, 0x04	; 4
     dbc:	82 e0       	ldi	r24, 0x02	; 2
     dbe:	92 e0       	ldi	r25, 0x02	; 2
     dc0:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <display_set>
            break;
     dc4:	49 c2       	rjmp	.+1170   	; 0x1258 <ui_show_display+0x51c>
        case 1:
            display_set("REFILL RATE", "Loading...");
     dc6:	67 ef       	ldi	r22, 0xF7	; 247
     dc8:	71 e0       	ldi	r23, 0x01	; 1
     dca:	80 e1       	ldi	r24, 0x10	; 16
     dcc:	92 e0       	ldi	r25, 0x02	; 2
     dce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <display_set>
            format_float(buffer, sizeof(buffer), get_refill_rate(), 1, "Ltrs per hour");
     dd2:	0e 94 a9 05 	call	0xb52	; 0xb52 <get_refill_rate>
     dd6:	9b 01       	movw	r18, r22
     dd8:	ac 01       	movw	r20, r24
     dda:	0f 2e       	mov	r0, r31
     ddc:	fc e1       	ldi	r31, 0x1C	; 28
     dde:	ef 2e       	mov	r14, r31
     de0:	f2 e0       	ldi	r31, 0x02	; 2
     de2:	ff 2e       	mov	r15, r31
     de4:	f0 2d       	mov	r31, r0
     de6:	01 e0       	ldi	r16, 0x01	; 1
     de8:	60 e1       	ldi	r22, 0x10	; 16
     dea:	70 e0       	ldi	r23, 0x00	; 0
     dec:	88 e8       	ldi	r24, 0x88	; 136
     dee:	94 e0       	ldi	r25, 0x04	; 4
     df0:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <format_float>
            display_set("REFILL RATE", buffer);
     df4:	68 e8       	ldi	r22, 0x88	; 136
     df6:	74 e0       	ldi	r23, 0x04	; 4
     df8:	80 e1       	ldi	r24, 0x10	; 16
     dfa:	92 e0       	ldi	r25, 0x02	; 2
     dfc:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <display_set>
            break;
     e00:	2b c2       	rjmp	.+1110   	; 0x1258 <ui_show_display+0x51c>
        case 2:
            display_set("LEAKAGE RATE", "Loading...");
     e02:	67 ef       	ldi	r22, 0xF7	; 247
     e04:	71 e0       	ldi	r23, 0x01	; 1
     e06:	8a e2       	ldi	r24, 0x2A	; 42
     e08:	92 e0       	ldi	r25, 0x02	; 2
     e0a:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <display_set>
            format_float(buffer, sizeof(buffer), get_leak_rate(), 1, "Ltrs per min");
     e0e:	0e 94 1c 06 	call	0xc38	; 0xc38 <get_leak_rate>
     e12:	9b 01       	movw	r18, r22
     e14:	ac 01       	movw	r20, r24
     e16:	0f 2e       	mov	r0, r31
     e18:	f7 e3       	ldi	r31, 0x37	; 55
     e1a:	ef 2e       	mov	r14, r31
     e1c:	f2 e0       	ldi	r31, 0x02	; 2
     e1e:	ff 2e       	mov	r15, r31
     e20:	f0 2d       	mov	r31, r0
     e22:	01 e0       	ldi	r16, 0x01	; 1
     e24:	60 e1       	ldi	r22, 0x10	; 16
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	88 e8       	ldi	r24, 0x88	; 136
     e2a:	94 e0       	ldi	r25, 0x04	; 4
     e2c:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <format_float>
            display_set("LEAKAGE RATE", buffer);
     e30:	68 e8       	ldi	r22, 0x88	; 136
     e32:	74 e0       	ldi	r23, 0x04	; 4
     e34:	8a e2       	ldi	r24, 0x2A	; 42
     e36:	92 e0       	ldi	r25, 0x02	; 2
     e38:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <display_set>
            break;
     e3c:	0d c2       	rjmp	.+1050   	; 0x1258 <ui_show_display+0x51c>
        case 3:
            display_set("SOIL TEMPERATURE", "Loading...");
     e3e:	67 ef       	ldi	r22, 0xF7	; 247
     e40:	71 e0       	ldi	r23, 0x01	; 1
     e42:	84 e4       	ldi	r24, 0x44	; 68
     e44:	92 e0       	ldi	r25, 0x02	; 2
     e46:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <display_set>
            format_float(buffer, sizeof(buffer), get_soil_temperature(), 1, "degrees");
     e4a:	0e 94 9b 06 	call	0xd36	; 0xd36 <get_soil_temperature>
     e4e:	9b 01       	movw	r18, r22
     e50:	ac 01       	movw	r20, r24
     e52:	0f 2e       	mov	r0, r31
     e54:	f1 e8       	ldi	r31, 0x81	; 129
     e56:	ef 2e       	mov	r14, r31
     e58:	f3 e0       	ldi	r31, 0x03	; 3
     e5a:	ff 2e       	mov	r15, r31
     e5c:	f0 2d       	mov	r31, r0
     e5e:	01 e0       	ldi	r16, 0x01	; 1
     e60:	60 e1       	ldi	r22, 0x10	; 16
     e62:	70 e0       	ldi	r23, 0x00	; 0
     e64:	88 e8       	ldi	r24, 0x88	; 136
     e66:	94 e0       	ldi	r25, 0x04	; 4
     e68:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <format_float>
            display_set("SOIL TEMPERATURE", buffer);
     e6c:	68 e8       	ldi	r22, 0x88	; 136
     e6e:	74 e0       	ldi	r23, 0x04	; 4
     e70:	84 e4       	ldi	r24, 0x44	; 68
     e72:	92 e0       	ldi	r25, 0x02	; 2
     e74:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <display_set>
            break;
     e78:	ef c1       	rjmp	.+990    	; 0x1258 <ui_show_display+0x51c>
        case 4:
            if (active_live_view_index == -1)
     e7a:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <active_live_view_index>
     e7e:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <active_live_view_index+0x1>
     e82:	01 96       	adiw	r24, 0x01	; 1
     e84:	79 f4       	brne	.+30     	; 0xea4 <ui_show_display+0x168>
            {
                display_set("LIVE VIEW", LIVE_VIEW_BUFFER[live_view_hover_index]);
     e86:	e0 91 7c 04 	lds	r30, 0x047C	; 0x80047c <live_view_hover_index>
     e8a:	f0 91 7d 04 	lds	r31, 0x047D	; 0x80047d <live_view_hover_index+0x1>
     e8e:	ee 0f       	add	r30, r30
     e90:	ff 1f       	adc	r31, r31
     e92:	ea 5c       	subi	r30, 0xCA	; 202
     e94:	fe 4f       	sbci	r31, 0xFE	; 254
     e96:	60 81       	ld	r22, Z
     e98:	71 81       	ldd	r23, Z+1	; 0x01
     e9a:	85 e5       	ldi	r24, 0x55	; 85
     e9c:	92 e0       	ldi	r25, 0x02	; 2
     e9e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <display_set>
     ea2:	da c1       	rjmp	.+948    	; 0x1258 <ui_show_display+0x51c>
            }
            else
            {
                switch (live_view_hover_index)
     ea4:	80 91 7c 04 	lds	r24, 0x047C	; 0x80047c <live_view_hover_index>
     ea8:	90 91 7d 04 	lds	r25, 0x047D	; 0x80047d <live_view_hover_index+0x1>
     eac:	81 30       	cpi	r24, 0x01	; 1
     eae:	91 05       	cpc	r25, r1
     eb0:	39 f1       	breq	.+78     	; 0xf00 <ui_show_display+0x1c4>
     eb2:	1c f4       	brge	.+6      	; 0xeba <ui_show_display+0x17e>
     eb4:	89 2b       	or	r24, r25
     eb6:	41 f0       	breq	.+16     	; 0xec8 <ui_show_display+0x18c>
     eb8:	77 c0       	rjmp	.+238    	; 0xfa8 <ui_show_display+0x26c>
     eba:	82 30       	cpi	r24, 0x02	; 2
     ebc:	91 05       	cpc	r25, r1
     ebe:	e1 f1       	breq	.+120    	; 0xf38 <ui_show_display+0x1fc>
     ec0:	03 97       	sbiw	r24, 0x03	; 3
     ec2:	09 f4       	brne	.+2      	; 0xec6 <ui_show_display+0x18a>
     ec4:	55 c0       	rjmp	.+170    	; 0xf70 <ui_show_display+0x234>
     ec6:	70 c0       	rjmp	.+224    	; 0xfa8 <ui_show_display+0x26c>
                {
                case 0:
                    format_float(buffer, sizeof(buffer), current_tank_capacity, 1, "Ltrs");
     ec8:	20 91 78 04 	lds	r18, 0x0478	; 0x800478 <current_tank_capacity>
     ecc:	30 91 79 04 	lds	r19, 0x0479	; 0x800479 <current_tank_capacity+0x1>
     ed0:	40 91 7a 04 	lds	r20, 0x047A	; 0x80047a <current_tank_capacity+0x2>
     ed4:	50 91 7b 04 	lds	r21, 0x047B	; 0x80047b <current_tank_capacity+0x3>
     ed8:	0f 2e       	mov	r0, r31
     eda:	f2 e6       	ldi	r31, 0x62	; 98
     edc:	ef 2e       	mov	r14, r31
     ede:	f3 e0       	ldi	r31, 0x03	; 3
     ee0:	ff 2e       	mov	r15, r31
     ee2:	f0 2d       	mov	r31, r0
     ee4:	01 e0       	ldi	r16, 0x01	; 1
     ee6:	60 e1       	ldi	r22, 0x10	; 16
     ee8:	70 e0       	ldi	r23, 0x00	; 0
     eea:	88 e8       	ldi	r24, 0x88	; 136
     eec:	94 e0       	ldi	r25, 0x04	; 4
     eee:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <format_float>
                    display_set("CAPACITY", buffer);
     ef2:	68 e8       	ldi	r22, 0x88	; 136
     ef4:	74 e0       	ldi	r23, 0x04	; 4
     ef6:	87 e0       	ldi	r24, 0x07	; 7
     ef8:	92 e0       	ldi	r25, 0x02	; 2
     efa:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <display_set>
                    break;
     efe:	ac c1       	rjmp	.+856    	; 0x1258 <ui_show_display+0x51c>
                case 1:
                    format_float(buffer, sizeof(buffer), current_refill_rate, 1, "Ltrs per min");
     f00:	20 91 74 04 	lds	r18, 0x0474	; 0x800474 <current_refill_rate>
     f04:	30 91 75 04 	lds	r19, 0x0475	; 0x800475 <current_refill_rate+0x1>
     f08:	40 91 76 04 	lds	r20, 0x0476	; 0x800476 <current_refill_rate+0x2>
     f0c:	50 91 77 04 	lds	r21, 0x0477	; 0x800477 <current_refill_rate+0x3>
     f10:	0f 2e       	mov	r0, r31
     f12:	f7 e3       	ldi	r31, 0x37	; 55
     f14:	ef 2e       	mov	r14, r31
     f16:	f2 e0       	ldi	r31, 0x02	; 2
     f18:	ff 2e       	mov	r15, r31
     f1a:	f0 2d       	mov	r31, r0
     f1c:	01 e0       	ldi	r16, 0x01	; 1
     f1e:	60 e1       	ldi	r22, 0x10	; 16
     f20:	70 e0       	ldi	r23, 0x00	; 0
     f22:	88 e8       	ldi	r24, 0x88	; 136
     f24:	94 e0       	ldi	r25, 0x04	; 4
     f26:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <format_float>
                    display_set("REFILL RATE", buffer);
     f2a:	68 e8       	ldi	r22, 0x88	; 136
     f2c:	74 e0       	ldi	r23, 0x04	; 4
     f2e:	80 e1       	ldi	r24, 0x10	; 16
     f30:	92 e0       	ldi	r25, 0x02	; 2
     f32:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <display_set>
                    break;
     f36:	90 c1       	rjmp	.+800    	; 0x1258 <ui_show_display+0x51c>
                case 2:
                    format_float(buffer, sizeof(buffer), current_leak_rate, 1, "Ltrs per min");
     f38:	20 91 70 04 	lds	r18, 0x0470	; 0x800470 <current_leak_rate>
     f3c:	30 91 71 04 	lds	r19, 0x0471	; 0x800471 <current_leak_rate+0x1>
     f40:	40 91 72 04 	lds	r20, 0x0472	; 0x800472 <current_leak_rate+0x2>
     f44:	50 91 73 04 	lds	r21, 0x0473	; 0x800473 <current_leak_rate+0x3>
     f48:	0f 2e       	mov	r0, r31
     f4a:	f7 e3       	ldi	r31, 0x37	; 55
     f4c:	ef 2e       	mov	r14, r31
     f4e:	f2 e0       	ldi	r31, 0x02	; 2
     f50:	ff 2e       	mov	r15, r31
     f52:	f0 2d       	mov	r31, r0
     f54:	01 e0       	ldi	r16, 0x01	; 1
     f56:	60 e1       	ldi	r22, 0x10	; 16
     f58:	70 e0       	ldi	r23, 0x00	; 0
     f5a:	88 e8       	ldi	r24, 0x88	; 136
     f5c:	94 e0       	ldi	r25, 0x04	; 4
     f5e:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <format_float>
                    display_set("LEAK RATE", buffer);
     f62:	68 e8       	ldi	r22, 0x88	; 136
     f64:	74 e0       	ldi	r23, 0x04	; 4
     f66:	8f e5       	ldi	r24, 0x5F	; 95
     f68:	92 e0       	ldi	r25, 0x02	; 2
     f6a:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <display_set>
                    break;
     f6e:	74 c1       	rjmp	.+744    	; 0x1258 <ui_show_display+0x51c>
                case 3:
                    format_float(buffer, sizeof(buffer), current_soil_temperature, 1, "degrees");
     f70:	20 91 6c 04 	lds	r18, 0x046C	; 0x80046c <current_soil_temperature>
     f74:	30 91 6d 04 	lds	r19, 0x046D	; 0x80046d <current_soil_temperature+0x1>
     f78:	40 91 6e 04 	lds	r20, 0x046E	; 0x80046e <current_soil_temperature+0x2>
     f7c:	50 91 6f 04 	lds	r21, 0x046F	; 0x80046f <current_soil_temperature+0x3>
     f80:	0f 2e       	mov	r0, r31
     f82:	f1 e8       	ldi	r31, 0x81	; 129
     f84:	ef 2e       	mov	r14, r31
     f86:	f3 e0       	ldi	r31, 0x03	; 3
     f88:	ff 2e       	mov	r15, r31
     f8a:	f0 2d       	mov	r31, r0
     f8c:	01 e0       	ldi	r16, 0x01	; 1
     f8e:	60 e1       	ldi	r22, 0x10	; 16
     f90:	70 e0       	ldi	r23, 0x00	; 0
     f92:	88 e8       	ldi	r24, 0x88	; 136
     f94:	94 e0       	ldi	r25, 0x04	; 4
     f96:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <format_float>
                    display_set("SOIL TEMP", buffer);
     f9a:	68 e8       	ldi	r22, 0x88	; 136
     f9c:	74 e0       	ldi	r23, 0x04	; 4
     f9e:	89 e6       	ldi	r24, 0x69	; 105
     fa0:	92 e0       	ldi	r25, 0x02	; 2
     fa2:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <display_set>
                    break;
     fa6:	58 c1       	rjmp	.+688    	; 0x1258 <ui_show_display+0x51c>
                default:
                    display_set("ERROR", "Invalid live view");
     fa8:	63 e7       	ldi	r22, 0x73	; 115
     faa:	72 e0       	ldi	r23, 0x02	; 2
     fac:	85 e8       	ldi	r24, 0x85	; 133
     fae:	92 e0       	ldi	r25, 0x02	; 2
     fb0:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <display_set>
                    break;
     fb4:	51 c1       	rjmp	.+674    	; 0x1258 <ui_show_display+0x51c>
                }
            }
            break;
        case 5:
            if (active_trigger_index == -1)
     fb6:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <active_trigger_index>
     fba:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <active_trigger_index+0x1>
     fbe:	8f 3f       	cpi	r24, 0xFF	; 255
     fc0:	2f ef       	ldi	r18, 0xFF	; 255
     fc2:	92 07       	cpc	r25, r18
     fc4:	79 f4       	brne	.+30     	; 0xfe4 <ui_show_display+0x2a8>
            {
                display_set("TRIGGERS", TRIGGERS_BUFFER[trigger_hover_index]);
     fc6:	e0 91 82 04 	lds	r30, 0x0482	; 0x800482 <trigger_hover_index>
     fca:	f0 91 83 04 	lds	r31, 0x0483	; 0x800483 <trigger_hover_index+0x1>
     fce:	ee 0f       	add	r30, r30
     fd0:	ff 1f       	adc	r31, r31
     fd2:	ee 5c       	subi	r30, 0xCE	; 206
     fd4:	fe 4f       	sbci	r31, 0xFE	; 254
     fd6:	60 81       	ld	r22, Z
     fd8:	71 81       	ldd	r23, Z+1	; 0x01
     fda:	83 e0       	ldi	r24, 0x03	; 3
     fdc:	93 e0       	ldi	r25, 0x03	; 3
     fde:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <display_set>
     fe2:	3a c1       	rjmp	.+628    	; 0x1258 <ui_show_display+0x51c>
            }
            else
            {
                switch (active_trigger_index)
     fe4:	00 97       	sbiw	r24, 0x00	; 0
     fe6:	19 f0       	breq	.+6      	; 0xfee <ui_show_display+0x2b2>
     fe8:	01 97       	sbiw	r24, 0x01	; 1
     fea:	e9 f0       	breq	.+58     	; 0x1026 <ui_show_display+0x2ea>
     fec:	38 c0       	rjmp	.+112    	; 0x105e <ui_show_display+0x322>
                {
                case 0:
                    format_float(buffer, sizeof(buffer), MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER, 1, "Ltrs");
     fee:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER>
     ff2:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x1>
     ff6:	40 91 1e 01 	lds	r20, 0x011E	; 0x80011e <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x2>
     ffa:	50 91 1f 01 	lds	r21, 0x011F	; 0x80011f <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x3>
     ffe:	0f 2e       	mov	r0, r31
    1000:	f2 e6       	ldi	r31, 0x62	; 98
    1002:	ef 2e       	mov	r14, r31
    1004:	f3 e0       	ldi	r31, 0x03	; 3
    1006:	ff 2e       	mov	r15, r31
    1008:	f0 2d       	mov	r31, r0
    100a:	01 e0       	ldi	r16, 0x01	; 1
    100c:	60 e1       	ldi	r22, 0x10	; 16
    100e:	70 e0       	ldi	r23, 0x00	; 0
    1010:	88 e8       	ldi	r24, 0x88	; 136
    1012:	94 e0       	ldi	r25, 0x04	; 4
    1014:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <format_float>
                    display_set("MIN CAPACITY", buffer);
    1018:	68 e8       	ldi	r22, 0x88	; 136
    101a:	74 e0       	ldi	r23, 0x04	; 4
    101c:	8b e8       	ldi	r24, 0x8B	; 139
    101e:	92 e0       	ldi	r25, 0x02	; 2
    1020:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <display_set>
                    break;
    1024:	19 c1       	rjmp	.+562    	; 0x1258 <ui_show_display+0x51c>
                case 1:
                    format_float(buffer, sizeof(buffer), MAXIMUM_TEMPERATURE_BEFORE_PUMPING, 2, "degrees");
    1026:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING>
    102a:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x1>
    102e:	40 91 1a 01 	lds	r20, 0x011A	; 0x80011a <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x2>
    1032:	50 91 1b 01 	lds	r21, 0x011B	; 0x80011b <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x3>
    1036:	0f 2e       	mov	r0, r31
    1038:	f1 e8       	ldi	r31, 0x81	; 129
    103a:	ef 2e       	mov	r14, r31
    103c:	f3 e0       	ldi	r31, 0x03	; 3
    103e:	ff 2e       	mov	r15, r31
    1040:	f0 2d       	mov	r31, r0
    1042:	02 e0       	ldi	r16, 0x02	; 2
    1044:	60 e1       	ldi	r22, 0x10	; 16
    1046:	70 e0       	ldi	r23, 0x00	; 0
    1048:	88 e8       	ldi	r24, 0x88	; 136
    104a:	94 e0       	ldi	r25, 0x04	; 4
    104c:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <format_float>
                    display_set("MAX TEMP", buffer);
    1050:	68 e8       	ldi	r22, 0x88	; 136
    1052:	74 e0       	ldi	r23, 0x04	; 4
    1054:	88 e9       	ldi	r24, 0x98	; 152
    1056:	92 e0       	ldi	r25, 0x02	; 2
    1058:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <display_set>
                    break;
    105c:	fd c0       	rjmp	.+506    	; 0x1258 <ui_show_display+0x51c>
                default:
                    display_set("ERROR", "Invalid trigger");
    105e:	61 ea       	ldi	r22, 0xA1	; 161
    1060:	72 e0       	ldi	r23, 0x02	; 2
    1062:	85 e8       	ldi	r24, 0x85	; 133
    1064:	92 e0       	ldi	r25, 0x02	; 2
    1066:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <display_set>
                    break;
    106a:	f6 c0       	rjmp	.+492    	; 0x1258 <ui_show_display+0x51c>
            break;

        case 6:
            // if the messages queue is not empty, show the first (oldest) message
			{
                char *msgptr = NULL;
    106c:	1a 82       	std	Y+2, r1	; 0x02
    106e:	19 82       	std	Y+1, r1	; 0x01
                if (!isStrQueueEmpty(&MESSAGES_Q))
    1070:	80 eb       	ldi	r24, 0xB0	; 176
    1072:	94 e0       	ldi	r25, 0x04	; 4
    1074:	0e 94 1a 02 	call	0x434	; 0x434 <isStrQueueEmpty>
    1078:	89 2b       	or	r24, r25
    107a:	a9 f4       	brne	.+42     	; 0x10a6 <ui_show_display+0x36a>
                {
                    if (peekFrontStr(&MESSAGES_Q, &msgptr) == 0 && msgptr)
    107c:	be 01       	movw	r22, r28
    107e:	6f 5f       	subi	r22, 0xFF	; 255
    1080:	7f 4f       	sbci	r23, 0xFF	; 255
    1082:	80 eb       	ldi	r24, 0xB0	; 176
    1084:	94 e0       	ldi	r25, 0x04	; 4
    1086:	0e 94 a2 02 	call	0x544	; 0x544 <peekFrontStr>
    108a:	89 2b       	or	r24, r25
    108c:	09 f0       	breq	.+2      	; 0x1090 <ui_show_display+0x354>
    108e:	e4 c0       	rjmp	.+456    	; 0x1258 <ui_show_display+0x51c>
    1090:	69 81       	ldd	r22, Y+1	; 0x01
    1092:	7a 81       	ldd	r23, Y+2	; 0x02
    1094:	61 15       	cp	r22, r1
    1096:	71 05       	cpc	r23, r1
    1098:	09 f4       	brne	.+2      	; 0x109c <ui_show_display+0x360>
    109a:	de c0       	rjmp	.+444    	; 0x1258 <ui_show_display+0x51c>
                    {
                        display_set("MESSAGES", msgptr);
    109c:	81 eb       	ldi	r24, 0xB1	; 177
    109e:	92 e0       	ldi	r25, 0x02	; 2
    10a0:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <display_set>
    10a4:	d9 c0       	rjmp	.+434    	; 0x1258 <ui_show_display+0x51c>
                    }
                } else 
                {
                    display_set("MESSAGES", "No messages");
    10a6:	6a eb       	ldi	r22, 0xBA	; 186
    10a8:	72 e0       	ldi	r23, 0x02	; 2
    10aa:	81 eb       	ldi	r24, 0xB1	; 177
    10ac:	92 e0       	ldi	r25, 0x02	; 2
    10ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <display_set>
				}
            }
            break;
    10b2:	d2 c0       	rjmp	.+420    	; 0x1258 <ui_show_display+0x51c>
        case 7:
            if (active_config_index == -1)
    10b4:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <active_config_index>
    10b8:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <active_config_index+0x1>
    10bc:	8f 3f       	cpi	r24, 0xFF	; 255
    10be:	2f ef       	ldi	r18, 0xFF	; 255
    10c0:	92 07       	cpc	r25, r18
    10c2:	79 f4       	brne	.+30     	; 0x10e2 <ui_show_display+0x3a6>
            {
                display_set("CONFIG", CONFIG_BUFFER[config_hover_index]);
    10c4:	e0 91 80 04 	lds	r30, 0x0480	; 0x800480 <config_hover_index>
    10c8:	f0 91 81 04 	lds	r31, 0x0481	; 0x800481 <config_hover_index+0x1>
    10cc:	ee 0f       	add	r30, r30
    10ce:	ff 1f       	adc	r31, r31
    10d0:	e8 5d       	subi	r30, 0xD8	; 216
    10d2:	fe 4f       	sbci	r31, 0xFE	; 254
    10d4:	60 81       	ld	r22, Z
    10d6:	71 81       	ldd	r23, Z+1	; 0x01
    10d8:	86 ec       	ldi	r24, 0xC6	; 198
    10da:	92 e0       	ldi	r25, 0x02	; 2
    10dc:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <display_set>
    10e0:	bb c0       	rjmp	.+374    	; 0x1258 <ui_show_display+0x51c>
            }
            else
            {
                switch (active_config_index)
    10e2:	82 30       	cpi	r24, 0x02	; 2
    10e4:	91 05       	cpc	r25, r1
    10e6:	09 f4       	brne	.+2      	; 0x10ea <ui_show_display+0x3ae>
    10e8:	46 c0       	rjmp	.+140    	; 0x1176 <ui_show_display+0x43a>
    10ea:	2c f4       	brge	.+10     	; 0x10f6 <ui_show_display+0x3ba>
    10ec:	00 97       	sbiw	r24, 0x00	; 0
    10ee:	59 f0       	breq	.+22     	; 0x1106 <ui_show_display+0x3ca>
    10f0:	01 97       	sbiw	r24, 0x01	; 1
    10f2:	29 f1       	breq	.+74     	; 0x113e <ui_show_display+0x402>
    10f4:	a4 c0       	rjmp	.+328    	; 0x123e <ui_show_display+0x502>
    10f6:	83 30       	cpi	r24, 0x03	; 3
    10f8:	91 05       	cpc	r25, r1
    10fa:	09 f4       	brne	.+2      	; 0x10fe <ui_show_display+0x3c2>
    10fc:	58 c0       	rjmp	.+176    	; 0x11ae <ui_show_display+0x472>
    10fe:	04 97       	sbiw	r24, 0x04	; 4
    1100:	09 f4       	brne	.+2      	; 0x1104 <ui_show_display+0x3c8>
    1102:	79 c0       	rjmp	.+242    	; 0x11f6 <ui_show_display+0x4ba>
    1104:	9c c0       	rjmp	.+312    	; 0x123e <ui_show_display+0x502>
                {
                case 0:
                    format_float(buffer, sizeof(buffer), STEP_SIZE_FOR_INCREMENTS, 1, "Units");
    1106:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <STEP_SIZE_FOR_INCREMENTS>
    110a:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <STEP_SIZE_FOR_INCREMENTS+0x1>
    110e:	40 91 16 01 	lds	r20, 0x0116	; 0x800116 <STEP_SIZE_FOR_INCREMENTS+0x2>
    1112:	50 91 17 01 	lds	r21, 0x0117	; 0x800117 <STEP_SIZE_FOR_INCREMENTS+0x3>
    1116:	0f 2e       	mov	r0, r31
    1118:	fd ec       	ldi	r31, 0xCD	; 205
    111a:	ef 2e       	mov	r14, r31
    111c:	f2 e0       	ldi	r31, 0x02	; 2
    111e:	ff 2e       	mov	r15, r31
    1120:	f0 2d       	mov	r31, r0
    1122:	01 e0       	ldi	r16, 0x01	; 1
    1124:	60 e1       	ldi	r22, 0x10	; 16
    1126:	70 e0       	ldi	r23, 0x00	; 0
    1128:	88 e8       	ldi	r24, 0x88	; 136
    112a:	94 e0       	ldi	r25, 0x04	; 4
    112c:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <format_float>
                    display_set("STEP SIZE", buffer);
    1130:	68 e8       	ldi	r22, 0x88	; 136
    1132:	74 e0       	ldi	r23, 0x04	; 4
    1134:	83 ed       	ldi	r24, 0xD3	; 211
    1136:	92 e0       	ldi	r25, 0x02	; 2
    1138:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <display_set>
                    break;
    113c:	8d c0       	rjmp	.+282    	; 0x1258 <ui_show_display+0x51c>
                case 1:
                    format_float(buffer, sizeof(buffer), PUMP_THRESHOLD, 1, "Ltrs");
    113e:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <PUMP_THRESHOLD>
    1142:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <PUMP_THRESHOLD+0x1>
    1146:	40 91 0e 01 	lds	r20, 0x010E	; 0x80010e <PUMP_THRESHOLD+0x2>
    114a:	50 91 0f 01 	lds	r21, 0x010F	; 0x80010f <PUMP_THRESHOLD+0x3>
    114e:	0f 2e       	mov	r0, r31
    1150:	f2 e6       	ldi	r31, 0x62	; 98
    1152:	ef 2e       	mov	r14, r31
    1154:	f3 e0       	ldi	r31, 0x03	; 3
    1156:	ff 2e       	mov	r15, r31
    1158:	f0 2d       	mov	r31, r0
    115a:	01 e0       	ldi	r16, 0x01	; 1
    115c:	60 e1       	ldi	r22, 0x10	; 16
    115e:	70 e0       	ldi	r23, 0x00	; 0
    1160:	88 e8       	ldi	r24, 0x88	; 136
    1162:	94 e0       	ldi	r25, 0x04	; 4
    1164:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <format_float>
                    display_set("PUMP THRESHOLD", buffer);
    1168:	68 e8       	ldi	r22, 0x88	; 136
    116a:	74 e0       	ldi	r23, 0x04	; 4
    116c:	8d ed       	ldi	r24, 0xDD	; 221
    116e:	92 e0       	ldi	r25, 0x02	; 2
    1170:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <display_set>
                    break;
    1174:	71 c0       	rjmp	.+226    	; 0x1258 <ui_show_display+0x51c>
                case 2:
                    format_float(buffer, sizeof(buffer), SPRAY_THRESHOLD, 1, "degrees");
    1176:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <SPRAY_THRESHOLD>
    117a:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <SPRAY_THRESHOLD+0x1>
    117e:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <SPRAY_THRESHOLD+0x2>
    1182:	50 91 0b 01 	lds	r21, 0x010B	; 0x80010b <SPRAY_THRESHOLD+0x3>
    1186:	0f 2e       	mov	r0, r31
    1188:	f1 e8       	ldi	r31, 0x81	; 129
    118a:	ef 2e       	mov	r14, r31
    118c:	f3 e0       	ldi	r31, 0x03	; 3
    118e:	ff 2e       	mov	r15, r31
    1190:	f0 2d       	mov	r31, r0
    1192:	01 e0       	ldi	r16, 0x01	; 1
    1194:	60 e1       	ldi	r22, 0x10	; 16
    1196:	70 e0       	ldi	r23, 0x00	; 0
    1198:	88 e8       	ldi	r24, 0x88	; 136
    119a:	94 e0       	ldi	r25, 0x04	; 4
    119c:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <format_float>
                    display_set("SPRAY THRESHOLD", buffer);
    11a0:	68 e8       	ldi	r22, 0x88	; 136
    11a2:	74 e0       	ldi	r23, 0x04	; 4
    11a4:	8c ee       	ldi	r24, 0xEC	; 236
    11a6:	92 e0       	ldi	r25, 0x02	; 2
    11a8:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <display_set>
                    break;
    11ac:	55 c0       	rjmp	.+170    	; 0x1258 <ui_show_display+0x51c>
                case 3:
                    snprintf(buffer, sizeof(buffer), "%s", ENABLE_TRIGGER_VALUE ? "Enabled" : "Disabled");
    11ae:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <ENABLE_TRIGGER_VALUE>
    11b2:	88 23       	and	r24, r24
    11b4:	19 f0       	breq	.+6      	; 0x11bc <ui_show_display+0x480>
    11b6:	8c ed       	ldi	r24, 0xDC	; 220
    11b8:	91 e0       	ldi	r25, 0x01	; 1
    11ba:	02 c0       	rjmp	.+4      	; 0x11c0 <ui_show_display+0x484>
    11bc:	84 ee       	ldi	r24, 0xE4	; 228
    11be:	91 e0       	ldi	r25, 0x01	; 1
    11c0:	9f 93       	push	r25
    11c2:	8f 93       	push	r24
    11c4:	81 e7       	ldi	r24, 0x71	; 113
    11c6:	91 e0       	ldi	r25, 0x01	; 1
    11c8:	9f 93       	push	r25
    11ca:	8f 93       	push	r24
    11cc:	1f 92       	push	r1
    11ce:	80 e1       	ldi	r24, 0x10	; 16
    11d0:	8f 93       	push	r24
    11d2:	88 e8       	ldi	r24, 0x88	; 136
    11d4:	94 e0       	ldi	r25, 0x04	; 4
    11d6:	9f 93       	push	r25
    11d8:	8f 93       	push	r24
    11da:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <snprintf>
                    display_set("ENABLE TRIGGERS", buffer);
    11de:	68 e8       	ldi	r22, 0x88	; 136
    11e0:	74 e0       	ldi	r23, 0x04	; 4
    11e2:	8c ef       	ldi	r24, 0xFC	; 252
    11e4:	92 e0       	ldi	r25, 0x02	; 2
    11e6:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <display_set>
                    break;
    11ea:	0f b6       	in	r0, 0x3f	; 63
    11ec:	f8 94       	cli
    11ee:	de bf       	out	0x3e, r29	; 62
    11f0:	0f be       	out	0x3f, r0	; 63
    11f2:	cd bf       	out	0x3d, r28	; 61
    11f4:	31 c0       	rjmp	.+98     	; 0x1258 <ui_show_display+0x51c>
                case 4:
                    snprintf(buffer, sizeof(buffer), "%s", ENABLE_ALERT_VALUE ? "Enabled" : "Disabled");
    11f6:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <ENABLE_ALERT_VALUE>
    11fa:	88 23       	and	r24, r24
    11fc:	19 f0       	breq	.+6      	; 0x1204 <ui_show_display+0x4c8>
    11fe:	8c ed       	ldi	r24, 0xDC	; 220
    1200:	91 e0       	ldi	r25, 0x01	; 1
    1202:	02 c0       	rjmp	.+4      	; 0x1208 <ui_show_display+0x4cc>
    1204:	84 ee       	ldi	r24, 0xE4	; 228
    1206:	91 e0       	ldi	r25, 0x01	; 1
    1208:	9f 93       	push	r25
    120a:	8f 93       	push	r24
    120c:	81 e7       	ldi	r24, 0x71	; 113
    120e:	91 e0       	ldi	r25, 0x01	; 1
    1210:	9f 93       	push	r25
    1212:	8f 93       	push	r24
    1214:	1f 92       	push	r1
    1216:	80 e1       	ldi	r24, 0x10	; 16
    1218:	8f 93       	push	r24
    121a:	88 e8       	ldi	r24, 0x88	; 136
    121c:	94 e0       	ldi	r25, 0x04	; 4
    121e:	9f 93       	push	r25
    1220:	8f 93       	push	r24
    1222:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <snprintf>
                    display_set("ENABLE ALERTS", buffer);
    1226:	68 e8       	ldi	r22, 0x88	; 136
    1228:	74 e0       	ldi	r23, 0x04	; 4
    122a:	8c e0       	ldi	r24, 0x0C	; 12
    122c:	93 e0       	ldi	r25, 0x03	; 3
    122e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <display_set>
                    break;
    1232:	0f b6       	in	r0, 0x3f	; 63
    1234:	f8 94       	cli
    1236:	de bf       	out	0x3e, r29	; 62
    1238:	0f be       	out	0x3f, r0	; 63
    123a:	cd bf       	out	0x3d, r28	; 61
    123c:	0d c0       	rjmp	.+26     	; 0x1258 <ui_show_display+0x51c>
                default:
                    display_set("ERROR", "Invalid config");
    123e:	6a e1       	ldi	r22, 0x1A	; 26
    1240:	73 e0       	ldi	r23, 0x03	; 3
    1242:	85 e8       	ldi	r24, 0x85	; 133
    1244:	92 e0       	ldi	r25, 0x02	; 2
    1246:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <display_set>
                    break;
    124a:	06 c0       	rjmp	.+12     	; 0x1258 <ui_show_display+0x51c>
                }
            }
            break;

        default:
            display_set("ERROR", "Invalid menu");
    124c:	69 e2       	ldi	r22, 0x29	; 41
    124e:	73 e0       	ldi	r23, 0x03	; 3
    1250:	85 e8       	ldi	r24, 0x85	; 133
    1252:	92 e0       	ldi	r25, 0x02	; 2
    1254:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <display_set>
            break;
        }
    }
}
    1258:	0f 90       	pop	r0
    125a:	0f 90       	pop	r0
    125c:	df 91       	pop	r29
    125e:	cf 91       	pop	r28
    1260:	0f 91       	pop	r16
    1262:	ff 90       	pop	r15
    1264:	ef 90       	pop	r14
    1266:	08 95       	ret

00001268 <ui_process_key_command>:
    process a key command from the keypad and update the UI state
    params: uint8_t key - the key number (1-4)
    returns: void
*/
void ui_process_key_command (uint8_t key) {
    if (key == 1)
    1268:	81 30       	cpi	r24, 0x01	; 1
    126a:	a9 f5       	brne	.+106    	; 0x12d6 <ui_process_key_command+0x6e>
    {
        if (active_menu_index == -1)
    126c:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <active_menu_index>
    1270:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <active_menu_index+0x1>
    1274:	01 96       	adiw	r24, 0x01	; 1
    1276:	09 f4       	brne	.+2      	; 0x127a <ui_process_key_command+0x12>
    1278:	9b c2       	rjmp	.+1334   	; 0x17b0 <ui_process_key_command+0x548>
        {
            return;
        }
        else
        {
            if (active_trigger_index != -1)
    127a:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <active_trigger_index>
    127e:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <active_trigger_index+0x1>
    1282:	01 96       	adiw	r24, 0x01	; 1
    1284:	39 f0       	breq	.+14     	; 0x1294 <ui_process_key_command+0x2c>
            {
                active_trigger_index = -1;
    1286:	8f ef       	ldi	r24, 0xFF	; 255
    1288:	9f ef       	ldi	r25, 0xFF	; 255
    128a:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <active_trigger_index+0x1>
    128e:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <active_trigger_index>
    1292:	08 95       	ret
            }
            else if (active_config_index != -1)
    1294:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <active_config_index>
    1298:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <active_config_index+0x1>
    129c:	01 96       	adiw	r24, 0x01	; 1
    129e:	39 f0       	breq	.+14     	; 0x12ae <ui_process_key_command+0x46>
            {
                active_config_index = -1;
    12a0:	8f ef       	ldi	r24, 0xFF	; 255
    12a2:	9f ef       	ldi	r25, 0xFF	; 255
    12a4:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <active_config_index+0x1>
    12a8:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <active_config_index>
    12ac:	08 95       	ret
            }
            else if (active_live_view_index != -1)
    12ae:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <active_live_view_index>
    12b2:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <active_live_view_index+0x1>
    12b6:	01 96       	adiw	r24, 0x01	; 1
    12b8:	39 f0       	breq	.+14     	; 0x12c8 <ui_process_key_command+0x60>
            {
                active_live_view_index = -1;
    12ba:	8f ef       	ldi	r24, 0xFF	; 255
    12bc:	9f ef       	ldi	r25, 0xFF	; 255
    12be:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <active_live_view_index+0x1>
    12c2:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <active_live_view_index>
    12c6:	08 95       	ret
            }
            else
            {
                active_menu_index = -1;
    12c8:	8f ef       	ldi	r24, 0xFF	; 255
    12ca:	9f ef       	ldi	r25, 0xFF	; 255
    12cc:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <active_menu_index+0x1>
    12d0:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <active_menu_index>
    12d4:	08 95       	ret
            }
        }
    }
    else if (key == 2)
    12d6:	82 30       	cpi	r24, 0x02	; 2
    12d8:	09 f0       	breq	.+2      	; 0x12dc <ui_process_key_command+0x74>
    12da:	0e c1       	rjmp	.+540    	; 0x14f8 <ui_process_key_command+0x290>
    {
        if (active_menu_index == -1)
    12dc:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <active_menu_index>
    12e0:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <active_menu_index+0x1>
    12e4:	8f 3f       	cpi	r24, 0xFF	; 255
    12e6:	2f ef       	ldi	r18, 0xFF	; 255
    12e8:	92 07       	cpc	r25, r18
    12ea:	71 f4       	brne	.+28     	; 0x1308 <ui_process_key_command+0xa0>
        {
            if (menu_hover_index < (sizeof(MENU_BUFFER)/sizeof(MENU_BUFFER[0]) - 1))
    12ec:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <menu_hover_index>
    12f0:	90 91 85 04 	lds	r25, 0x0485	; 0x800485 <menu_hover_index+0x1>
    12f4:	87 30       	cpi	r24, 0x07	; 7
    12f6:	91 05       	cpc	r25, r1
    12f8:	08 f0       	brcs	.+2      	; 0x12fc <ui_process_key_command+0x94>
    12fa:	5a c2       	rjmp	.+1204   	; 0x17b0 <ui_process_key_command+0x548>
                menu_hover_index++; // navigate downwards on the main menu
    12fc:	01 96       	adiw	r24, 0x01	; 1
    12fe:	90 93 85 04 	sts	0x0485, r25	; 0x800485 <menu_hover_index+0x1>
    1302:	80 93 84 04 	sts	0x0484, r24	; 0x800484 <menu_hover_index>
    1306:	08 95       	ret
        }
        else if (active_menu_index == 4)
    1308:	84 30       	cpi	r24, 0x04	; 4
    130a:	91 05       	cpc	r25, r1
    130c:	71 f4       	brne	.+28     	; 0x132a <ui_process_key_command+0xc2>
        {
            // user is in the live view menu
            if (live_view_hover_index < (sizeof(LIVE_VIEW_BUFFER)/sizeof(LIVE_VIEW_BUFFER[0]) - 1))
    130e:	80 91 7c 04 	lds	r24, 0x047C	; 0x80047c <live_view_hover_index>
    1312:	90 91 7d 04 	lds	r25, 0x047D	; 0x80047d <live_view_hover_index+0x1>
    1316:	83 30       	cpi	r24, 0x03	; 3
    1318:	91 05       	cpc	r25, r1
    131a:	08 f0       	brcs	.+2      	; 0x131e <ui_process_key_command+0xb6>
    131c:	49 c2       	rjmp	.+1170   	; 0x17b0 <ui_process_key_command+0x548>
                live_view_hover_index++; // navigate downwards on the live view menu
    131e:	01 96       	adiw	r24, 0x01	; 1
    1320:	90 93 7d 04 	sts	0x047D, r25	; 0x80047d <live_view_hover_index+0x1>
    1324:	80 93 7c 04 	sts	0x047C, r24	; 0x80047c <live_view_hover_index>
    1328:	08 95       	ret
        }
        else if (active_menu_index == 5) 
    132a:	85 30       	cpi	r24, 0x05	; 5
    132c:	91 05       	cpc	r25, r1
    132e:	09 f0       	breq	.+2      	; 0x1332 <ui_process_key_command+0xca>
    1330:	50 c0       	rjmp	.+160    	; 0x13d2 <ui_process_key_command+0x16a>
        {
            // user is in the triggers menu
            if (active_trigger_index == -1)
    1332:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <active_trigger_index>
    1336:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <active_trigger_index+0x1>
    133a:	8f 3f       	cpi	r24, 0xFF	; 255
    133c:	2f ef       	ldi	r18, 0xFF	; 255
    133e:	92 07       	cpc	r25, r18
    1340:	69 f4       	brne	.+26     	; 0x135c <ui_process_key_command+0xf4>
            {
                if (trigger_hover_index < (sizeof(TRIGGERS_BUFFER)/sizeof(TRIGGERS_BUFFER[0]) - 1))
    1342:	80 91 82 04 	lds	r24, 0x0482	; 0x800482 <trigger_hover_index>
    1346:	90 91 83 04 	lds	r25, 0x0483	; 0x800483 <trigger_hover_index+0x1>
    134a:	00 97       	sbiw	r24, 0x00	; 0
    134c:	09 f0       	breq	.+2      	; 0x1350 <ui_process_key_command+0xe8>
    134e:	30 c2       	rjmp	.+1120   	; 0x17b0 <ui_process_key_command+0x548>
                    trigger_hover_index++; // navigate downwards on the triggers menu
    1350:	01 96       	adiw	r24, 0x01	; 1
    1352:	90 93 83 04 	sts	0x0483, r25	; 0x800483 <trigger_hover_index+0x1>
    1356:	80 93 82 04 	sts	0x0482, r24	; 0x800482 <trigger_hover_index>
    135a:	08 95       	ret
            } else {
                switch (active_trigger_index) {
    135c:	00 97       	sbiw	r24, 0x00	; 0
    135e:	19 f0       	breq	.+6      	; 0x1366 <ui_process_key_command+0xfe>
    1360:	01 97       	sbiw	r24, 0x01	; 1
    1362:	e1 f0       	breq	.+56     	; 0x139c <ui_process_key_command+0x134>
    1364:	08 95       	ret
                    case 0:
                        // adjust MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER - decrease
                        MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER -= STEP_SIZE_FOR_INCREMENTS;
    1366:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <STEP_SIZE_FOR_INCREMENTS>
    136a:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <STEP_SIZE_FOR_INCREMENTS+0x1>
    136e:	40 91 16 01 	lds	r20, 0x0116	; 0x800116 <STEP_SIZE_FOR_INCREMENTS+0x2>
    1372:	50 91 17 01 	lds	r21, 0x0117	; 0x800117 <STEP_SIZE_FOR_INCREMENTS+0x3>
    1376:	60 91 1c 01 	lds	r22, 0x011C	; 0x80011c <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER>
    137a:	70 91 1d 01 	lds	r23, 0x011D	; 0x80011d <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x1>
    137e:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x2>
    1382:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x3>
    1386:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <__subsf3>
    138a:	60 93 1c 01 	sts	0x011C, r22	; 0x80011c <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER>
    138e:	70 93 1d 01 	sts	0x011D, r23	; 0x80011d <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x1>
    1392:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x2>
    1396:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x3>
                        break;
    139a:	08 95       	ret
                    case 1:
                        // adjust MAXIMUM_TEMPERATURE_BEFORE_PUMPING - decrease
                        MAXIMUM_TEMPERATURE_BEFORE_PUMPING -= STEP_SIZE_FOR_INCREMENTS;
    139c:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <STEP_SIZE_FOR_INCREMENTS>
    13a0:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <STEP_SIZE_FOR_INCREMENTS+0x1>
    13a4:	40 91 16 01 	lds	r20, 0x0116	; 0x800116 <STEP_SIZE_FOR_INCREMENTS+0x2>
    13a8:	50 91 17 01 	lds	r21, 0x0117	; 0x800117 <STEP_SIZE_FOR_INCREMENTS+0x3>
    13ac:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING>
    13b0:	70 91 19 01 	lds	r23, 0x0119	; 0x800119 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x1>
    13b4:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x2>
    13b8:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x3>
    13bc:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <__subsf3>
    13c0:	60 93 18 01 	sts	0x0118, r22	; 0x800118 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING>
    13c4:	70 93 19 01 	sts	0x0119, r23	; 0x800119 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x1>
    13c8:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x2>
    13cc:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x3>
                        break;
    13d0:	08 95       	ret
                    default:
                        break;
                }
            }
        }
        else if (active_menu_index == 6) {
    13d2:	86 30       	cpi	r24, 0x06	; 6
    13d4:	91 05       	cpc	r25, r1
    13d6:	71 f4       	brne	.+28     	; 0x13f4 <ui_process_key_command+0x18c>
            if (message_hover_index < MSG_BUFFER_SIZE - 1)
    13d8:	80 91 7e 04 	lds	r24, 0x047E	; 0x80047e <message_hover_index>
    13dc:	90 91 7f 04 	lds	r25, 0x047F	; 0x80047f <message_hover_index+0x1>
    13e0:	83 30       	cpi	r24, 0x03	; 3
    13e2:	91 05       	cpc	r25, r1
    13e4:	0c f0       	brlt	.+2      	; 0x13e8 <ui_process_key_command+0x180>
    13e6:	e4 c1       	rjmp	.+968    	; 0x17b0 <ui_process_key_command+0x548>
                message_hover_index++;
    13e8:	01 96       	adiw	r24, 0x01	; 1
    13ea:	90 93 7f 04 	sts	0x047F, r25	; 0x80047f <message_hover_index+0x1>
    13ee:	80 93 7e 04 	sts	0x047E, r24	; 0x80047e <message_hover_index>
    13f2:	08 95       	ret
        }
        else if (active_menu_index == 7)
    13f4:	07 97       	sbiw	r24, 0x07	; 7
    13f6:	09 f0       	breq	.+2      	; 0x13fa <ui_process_key_command+0x192>
    13f8:	db c1       	rjmp	.+950    	; 0x17b0 <ui_process_key_command+0x548>
        {
            if (active_config_index == -1)
    13fa:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <active_config_index>
    13fe:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <active_config_index+0x1>
    1402:	8f 3f       	cpi	r24, 0xFF	; 255
    1404:	2f ef       	ldi	r18, 0xFF	; 255
    1406:	92 07       	cpc	r25, r18
    1408:	71 f4       	brne	.+28     	; 0x1426 <ui_process_key_command+0x1be>
            {
                if (config_hover_index < (sizeof(CONFIG_BUFFER)/sizeof(CONFIG_BUFFER[0]) - 1))
    140a:	80 91 80 04 	lds	r24, 0x0480	; 0x800480 <config_hover_index>
    140e:	90 91 81 04 	lds	r25, 0x0481	; 0x800481 <config_hover_index+0x1>
    1412:	84 30       	cpi	r24, 0x04	; 4
    1414:	91 05       	cpc	r25, r1
    1416:	08 f0       	brcs	.+2      	; 0x141a <ui_process_key_command+0x1b2>
    1418:	cb c1       	rjmp	.+918    	; 0x17b0 <ui_process_key_command+0x548>
                    config_hover_index++; // navigate downwards on the config menu
    141a:	01 96       	adiw	r24, 0x01	; 1
    141c:	90 93 81 04 	sts	0x0481, r25	; 0x800481 <config_hover_index+0x1>
    1420:	80 93 80 04 	sts	0x0480, r24	; 0x800480 <config_hover_index>
    1424:	08 95       	ret
            } else {
                switch (active_config_index)
    1426:	82 30       	cpi	r24, 0x02	; 2
    1428:	91 05       	cpc	r25, r1
    142a:	09 f4       	brne	.+2      	; 0x142e <ui_process_key_command+0x1c6>
    142c:	44 c0       	rjmp	.+136    	; 0x14b6 <ui_process_key_command+0x24e>
    142e:	2c f4       	brge	.+10     	; 0x143a <ui_process_key_command+0x1d2>
    1430:	00 97       	sbiw	r24, 0x00	; 0
    1432:	59 f0       	breq	.+22     	; 0x144a <ui_process_key_command+0x1e2>
    1434:	01 97       	sbiw	r24, 0x01	; 1
    1436:	21 f1       	breq	.+72     	; 0x1480 <ui_process_key_command+0x218>
    1438:	08 95       	ret
    143a:	83 30       	cpi	r24, 0x03	; 3
    143c:	91 05       	cpc	r25, r1
    143e:	09 f4       	brne	.+2      	; 0x1442 <ui_process_key_command+0x1da>
    1440:	55 c0       	rjmp	.+170    	; 0x14ec <ui_process_key_command+0x284>
    1442:	04 97       	sbiw	r24, 0x04	; 4
    1444:	09 f4       	brne	.+2      	; 0x1448 <ui_process_key_command+0x1e0>
    1446:	55 c0       	rjmp	.+170    	; 0x14f2 <ui_process_key_command+0x28a>
    1448:	08 95       	ret
                {
                case 0:
                    // adjust STEP_SIZE_FOR_INCREMENTS - decrease
                    STEP_SIZE_FOR_INCREMENTS -= STEP_INCREMENT;
    144a:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <STEP_INCREMENT>
    144e:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <STEP_INCREMENT+0x1>
    1452:	40 91 12 01 	lds	r20, 0x0112	; 0x800112 <STEP_INCREMENT+0x2>
    1456:	50 91 13 01 	lds	r21, 0x0113	; 0x800113 <STEP_INCREMENT+0x3>
    145a:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <STEP_SIZE_FOR_INCREMENTS>
    145e:	70 91 15 01 	lds	r23, 0x0115	; 0x800115 <STEP_SIZE_FOR_INCREMENTS+0x1>
    1462:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <STEP_SIZE_FOR_INCREMENTS+0x2>
    1466:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <STEP_SIZE_FOR_INCREMENTS+0x3>
    146a:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <__subsf3>
    146e:	60 93 14 01 	sts	0x0114, r22	; 0x800114 <STEP_SIZE_FOR_INCREMENTS>
    1472:	70 93 15 01 	sts	0x0115, r23	; 0x800115 <STEP_SIZE_FOR_INCREMENTS+0x1>
    1476:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <STEP_SIZE_FOR_INCREMENTS+0x2>
    147a:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <STEP_SIZE_FOR_INCREMENTS+0x3>
                    break;
    147e:	08 95       	ret
                case 1:
                    // adjust PUMP_THRESHOLD - decrease
                    PUMP_THRESHOLD -= STEP_SIZE_FOR_INCREMENTS;
    1480:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <STEP_SIZE_FOR_INCREMENTS>
    1484:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <STEP_SIZE_FOR_INCREMENTS+0x1>
    1488:	40 91 16 01 	lds	r20, 0x0116	; 0x800116 <STEP_SIZE_FOR_INCREMENTS+0x2>
    148c:	50 91 17 01 	lds	r21, 0x0117	; 0x800117 <STEP_SIZE_FOR_INCREMENTS+0x3>
    1490:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <PUMP_THRESHOLD>
    1494:	70 91 0d 01 	lds	r23, 0x010D	; 0x80010d <PUMP_THRESHOLD+0x1>
    1498:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <PUMP_THRESHOLD+0x2>
    149c:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <PUMP_THRESHOLD+0x3>
    14a0:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <__subsf3>
    14a4:	60 93 0c 01 	sts	0x010C, r22	; 0x80010c <PUMP_THRESHOLD>
    14a8:	70 93 0d 01 	sts	0x010D, r23	; 0x80010d <PUMP_THRESHOLD+0x1>
    14ac:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <PUMP_THRESHOLD+0x2>
    14b0:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <PUMP_THRESHOLD+0x3>
                    break;
    14b4:	08 95       	ret
                case 2:
                    // adjust SPRAY_THRESHOLD - decrease
                    SPRAY_THRESHOLD -= STEP_SIZE_FOR_INCREMENTS;
    14b6:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <STEP_SIZE_FOR_INCREMENTS>
    14ba:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <STEP_SIZE_FOR_INCREMENTS+0x1>
    14be:	40 91 16 01 	lds	r20, 0x0116	; 0x800116 <STEP_SIZE_FOR_INCREMENTS+0x2>
    14c2:	50 91 17 01 	lds	r21, 0x0117	; 0x800117 <STEP_SIZE_FOR_INCREMENTS+0x3>
    14c6:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <SPRAY_THRESHOLD>
    14ca:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <SPRAY_THRESHOLD+0x1>
    14ce:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <SPRAY_THRESHOLD+0x2>
    14d2:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <SPRAY_THRESHOLD+0x3>
    14d6:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <__subsf3>
    14da:	60 93 08 01 	sts	0x0108, r22	; 0x800108 <SPRAY_THRESHOLD>
    14de:	70 93 09 01 	sts	0x0109, r23	; 0x800109 <SPRAY_THRESHOLD+0x1>
    14e2:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <SPRAY_THRESHOLD+0x2>
    14e6:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <SPRAY_THRESHOLD+0x3>
                    break;
    14ea:	08 95       	ret
                case 3:
                    // adjust ENABLE_TRIGGER_VALUE - toggle
                    ENABLE_TRIGGER_VALUE = 0;
    14ec:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <ENABLE_TRIGGER_VALUE>
                    break;
    14f0:	08 95       	ret
                case 4:
                    // adjust ENABLE_ALERT_VALUE - toggle
                    ENABLE_ALERT_VALUE = 0;
    14f2:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <ENABLE_ALERT_VALUE>
                    break;
    14f6:	08 95       	ret
                    break;
                }
            }
        }
    }
    else if (key == 3)
    14f8:	83 30       	cpi	r24, 0x03	; 3
    14fa:	09 f0       	breq	.+2      	; 0x14fe <ui_process_key_command+0x296>
    14fc:	11 c1       	rjmp	.+546    	; 0x1720 <ui_process_key_command+0x4b8>
    {
        if (active_menu_index == -1)
    14fe:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <active_menu_index>
    1502:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <active_menu_index+0x1>
    1506:	8f 3f       	cpi	r24, 0xFF	; 255
    1508:	2f ef       	ldi	r18, 0xFF	; 255
    150a:	92 07       	cpc	r25, r18
    150c:	71 f4       	brne	.+28     	; 0x152a <ui_process_key_command+0x2c2>
        {
            if (menu_hover_index > 0)
    150e:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <menu_hover_index>
    1512:	90 91 85 04 	lds	r25, 0x0485	; 0x800485 <menu_hover_index+0x1>
    1516:	18 16       	cp	r1, r24
    1518:	19 06       	cpc	r1, r25
    151a:	0c f0       	brlt	.+2      	; 0x151e <ui_process_key_command+0x2b6>
    151c:	49 c1       	rjmp	.+658    	; 0x17b0 <ui_process_key_command+0x548>
                menu_hover_index--;
    151e:	01 97       	sbiw	r24, 0x01	; 1
    1520:	90 93 85 04 	sts	0x0485, r25	; 0x800485 <menu_hover_index+0x1>
    1524:	80 93 84 04 	sts	0x0484, r24	; 0x800484 <menu_hover_index>
    1528:	08 95       	ret
        }
        else if (active_menu_index == 4)
    152a:	84 30       	cpi	r24, 0x04	; 4
    152c:	91 05       	cpc	r25, r1
    152e:	71 f4       	brne	.+28     	; 0x154c <ui_process_key_command+0x2e4>
        {
            // user is in the live view menu
            if (live_view_hover_index > 0)
    1530:	80 91 7c 04 	lds	r24, 0x047C	; 0x80047c <live_view_hover_index>
    1534:	90 91 7d 04 	lds	r25, 0x047D	; 0x80047d <live_view_hover_index+0x1>
    1538:	18 16       	cp	r1, r24
    153a:	19 06       	cpc	r1, r25
    153c:	0c f0       	brlt	.+2      	; 0x1540 <ui_process_key_command+0x2d8>
    153e:	38 c1       	rjmp	.+624    	; 0x17b0 <ui_process_key_command+0x548>
                live_view_hover_index--;
    1540:	01 97       	sbiw	r24, 0x01	; 1
    1542:	90 93 7d 04 	sts	0x047D, r25	; 0x80047d <live_view_hover_index+0x1>
    1546:	80 93 7c 04 	sts	0x047C, r24	; 0x80047c <live_view_hover_index>
    154a:	08 95       	ret
        }
        else if (active_menu_index == 5)
    154c:	85 30       	cpi	r24, 0x05	; 5
    154e:	91 05       	cpc	r25, r1
    1550:	09 f0       	breq	.+2      	; 0x1554 <ui_process_key_command+0x2ec>
    1552:	51 c0       	rjmp	.+162    	; 0x15f6 <ui_process_key_command+0x38e>
        {
            if (active_trigger_index == -1)
    1554:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <active_trigger_index>
    1558:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <active_trigger_index+0x1>
    155c:	8f 3f       	cpi	r24, 0xFF	; 255
    155e:	2f ef       	ldi	r18, 0xFF	; 255
    1560:	92 07       	cpc	r25, r18
    1562:	71 f4       	brne	.+28     	; 0x1580 <ui_process_key_command+0x318>
            {
                if (trigger_hover_index > 0)
    1564:	80 91 82 04 	lds	r24, 0x0482	; 0x800482 <trigger_hover_index>
    1568:	90 91 83 04 	lds	r25, 0x0483	; 0x800483 <trigger_hover_index+0x1>
    156c:	18 16       	cp	r1, r24
    156e:	19 06       	cpc	r1, r25
    1570:	0c f0       	brlt	.+2      	; 0x1574 <ui_process_key_command+0x30c>
    1572:	1e c1       	rjmp	.+572    	; 0x17b0 <ui_process_key_command+0x548>
                    trigger_hover_index--;
    1574:	01 97       	sbiw	r24, 0x01	; 1
    1576:	90 93 83 04 	sts	0x0483, r25	; 0x800483 <trigger_hover_index+0x1>
    157a:	80 93 82 04 	sts	0x0482, r24	; 0x800482 <trigger_hover_index>
    157e:	08 95       	ret
            } else {
                switch (active_trigger_index) {
    1580:	00 97       	sbiw	r24, 0x00	; 0
    1582:	19 f0       	breq	.+6      	; 0x158a <ui_process_key_command+0x322>
    1584:	01 97       	sbiw	r24, 0x01	; 1
    1586:	e1 f0       	breq	.+56     	; 0x15c0 <ui_process_key_command+0x358>
    1588:	08 95       	ret
                    case 0:
                        // adjust MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER - decrease
                        MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER += STEP_SIZE_FOR_INCREMENTS;
    158a:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <STEP_SIZE_FOR_INCREMENTS>
    158e:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <STEP_SIZE_FOR_INCREMENTS+0x1>
    1592:	40 91 16 01 	lds	r20, 0x0116	; 0x800116 <STEP_SIZE_FOR_INCREMENTS+0x2>
    1596:	50 91 17 01 	lds	r21, 0x0117	; 0x800117 <STEP_SIZE_FOR_INCREMENTS+0x3>
    159a:	60 91 1c 01 	lds	r22, 0x011C	; 0x80011c <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER>
    159e:	70 91 1d 01 	lds	r23, 0x011D	; 0x80011d <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x1>
    15a2:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x2>
    15a6:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x3>
    15aa:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <__addsf3>
    15ae:	60 93 1c 01 	sts	0x011C, r22	; 0x80011c <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER>
    15b2:	70 93 1d 01 	sts	0x011D, r23	; 0x80011d <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x1>
    15b6:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x2>
    15ba:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x3>
                        break;
    15be:	08 95       	ret
                    case 1:
                        // adjust MAXIMUM_TEMPERATURE_BEFORE_PUMPING - decrease
                        MAXIMUM_TEMPERATURE_BEFORE_PUMPING += STEP_SIZE_FOR_INCREMENTS;
    15c0:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <STEP_SIZE_FOR_INCREMENTS>
    15c4:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <STEP_SIZE_FOR_INCREMENTS+0x1>
    15c8:	40 91 16 01 	lds	r20, 0x0116	; 0x800116 <STEP_SIZE_FOR_INCREMENTS+0x2>
    15cc:	50 91 17 01 	lds	r21, 0x0117	; 0x800117 <STEP_SIZE_FOR_INCREMENTS+0x3>
    15d0:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING>
    15d4:	70 91 19 01 	lds	r23, 0x0119	; 0x800119 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x1>
    15d8:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x2>
    15dc:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x3>
    15e0:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <__addsf3>
    15e4:	60 93 18 01 	sts	0x0118, r22	; 0x800118 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING>
    15e8:	70 93 19 01 	sts	0x0119, r23	; 0x800119 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x1>
    15ec:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x2>
    15f0:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x3>
                        break;
    15f4:	08 95       	ret
                    default:
                        break;
                }
            }
        } 
        else if (active_menu_index == 6) {
    15f6:	86 30       	cpi	r24, 0x06	; 6
    15f8:	91 05       	cpc	r25, r1
    15fa:	71 f4       	brne	.+28     	; 0x1618 <ui_process_key_command+0x3b0>
            if (message_hover_index > 0)
    15fc:	80 91 7e 04 	lds	r24, 0x047E	; 0x80047e <message_hover_index>
    1600:	90 91 7f 04 	lds	r25, 0x047F	; 0x80047f <message_hover_index+0x1>
    1604:	18 16       	cp	r1, r24
    1606:	19 06       	cpc	r1, r25
    1608:	0c f0       	brlt	.+2      	; 0x160c <ui_process_key_command+0x3a4>
    160a:	d2 c0       	rjmp	.+420    	; 0x17b0 <ui_process_key_command+0x548>
                message_hover_index--;
    160c:	01 97       	sbiw	r24, 0x01	; 1
    160e:	90 93 7f 04 	sts	0x047F, r25	; 0x80047f <message_hover_index+0x1>
    1612:	80 93 7e 04 	sts	0x047E, r24	; 0x80047e <message_hover_index>
    1616:	08 95       	ret
        }
        else if (active_menu_index == 7)
    1618:	07 97       	sbiw	r24, 0x07	; 7
    161a:	09 f0       	breq	.+2      	; 0x161e <ui_process_key_command+0x3b6>
    161c:	c9 c0       	rjmp	.+402    	; 0x17b0 <ui_process_key_command+0x548>
        {
            if (active_config_index == -1)
    161e:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <active_config_index>
    1622:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <active_config_index+0x1>
    1626:	8f 3f       	cpi	r24, 0xFF	; 255
    1628:	2f ef       	ldi	r18, 0xFF	; 255
    162a:	92 07       	cpc	r25, r18
    162c:	71 f4       	brne	.+28     	; 0x164a <ui_process_key_command+0x3e2>
            {
                if (config_hover_index > 0)
    162e:	80 91 80 04 	lds	r24, 0x0480	; 0x800480 <config_hover_index>
    1632:	90 91 81 04 	lds	r25, 0x0481	; 0x800481 <config_hover_index+0x1>
    1636:	18 16       	cp	r1, r24
    1638:	19 06       	cpc	r1, r25
    163a:	0c f0       	brlt	.+2      	; 0x163e <ui_process_key_command+0x3d6>
    163c:	b9 c0       	rjmp	.+370    	; 0x17b0 <ui_process_key_command+0x548>
                    config_hover_index--;
    163e:	01 97       	sbiw	r24, 0x01	; 1
    1640:	90 93 81 04 	sts	0x0481, r25	; 0x800481 <config_hover_index+0x1>
    1644:	80 93 80 04 	sts	0x0480, r24	; 0x800480 <config_hover_index>
    1648:	08 95       	ret
            } else {
            switch (active_config_index)
    164a:	82 30       	cpi	r24, 0x02	; 2
    164c:	91 05       	cpc	r25, r1
    164e:	09 f4       	brne	.+2      	; 0x1652 <ui_process_key_command+0x3ea>
    1650:	44 c0       	rjmp	.+136    	; 0x16da <ui_process_key_command+0x472>
    1652:	2c f4       	brge	.+10     	; 0x165e <ui_process_key_command+0x3f6>
    1654:	00 97       	sbiw	r24, 0x00	; 0
    1656:	59 f0       	breq	.+22     	; 0x166e <ui_process_key_command+0x406>
    1658:	01 97       	sbiw	r24, 0x01	; 1
    165a:	21 f1       	breq	.+72     	; 0x16a4 <ui_process_key_command+0x43c>
    165c:	08 95       	ret
    165e:	83 30       	cpi	r24, 0x03	; 3
    1660:	91 05       	cpc	r25, r1
    1662:	09 f4       	brne	.+2      	; 0x1666 <ui_process_key_command+0x3fe>
    1664:	55 c0       	rjmp	.+170    	; 0x1710 <ui_process_key_command+0x4a8>
    1666:	04 97       	sbiw	r24, 0x04	; 4
    1668:	09 f4       	brne	.+2      	; 0x166c <ui_process_key_command+0x404>
    166a:	56 c0       	rjmp	.+172    	; 0x1718 <ui_process_key_command+0x4b0>
    166c:	08 95       	ret
                {
                case 0:
                    // adjust STEP_SIZE_FOR_INCREMENTS - decrease
                    STEP_SIZE_FOR_INCREMENTS += STEP_INCREMENT;
    166e:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <STEP_INCREMENT>
    1672:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <STEP_INCREMENT+0x1>
    1676:	40 91 12 01 	lds	r20, 0x0112	; 0x800112 <STEP_INCREMENT+0x2>
    167a:	50 91 13 01 	lds	r21, 0x0113	; 0x800113 <STEP_INCREMENT+0x3>
    167e:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <STEP_SIZE_FOR_INCREMENTS>
    1682:	70 91 15 01 	lds	r23, 0x0115	; 0x800115 <STEP_SIZE_FOR_INCREMENTS+0x1>
    1686:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <STEP_SIZE_FOR_INCREMENTS+0x2>
    168a:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <STEP_SIZE_FOR_INCREMENTS+0x3>
    168e:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <__addsf3>
    1692:	60 93 14 01 	sts	0x0114, r22	; 0x800114 <STEP_SIZE_FOR_INCREMENTS>
    1696:	70 93 15 01 	sts	0x0115, r23	; 0x800115 <STEP_SIZE_FOR_INCREMENTS+0x1>
    169a:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <STEP_SIZE_FOR_INCREMENTS+0x2>
    169e:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <STEP_SIZE_FOR_INCREMENTS+0x3>
                    break;
    16a2:	08 95       	ret
                case 1:
                    // adjust PUMP_THRESHOLD - decrease
                    PUMP_THRESHOLD += STEP_SIZE_FOR_INCREMENTS;
    16a4:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <STEP_SIZE_FOR_INCREMENTS>
    16a8:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <STEP_SIZE_FOR_INCREMENTS+0x1>
    16ac:	40 91 16 01 	lds	r20, 0x0116	; 0x800116 <STEP_SIZE_FOR_INCREMENTS+0x2>
    16b0:	50 91 17 01 	lds	r21, 0x0117	; 0x800117 <STEP_SIZE_FOR_INCREMENTS+0x3>
    16b4:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <PUMP_THRESHOLD>
    16b8:	70 91 0d 01 	lds	r23, 0x010D	; 0x80010d <PUMP_THRESHOLD+0x1>
    16bc:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <PUMP_THRESHOLD+0x2>
    16c0:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <PUMP_THRESHOLD+0x3>
    16c4:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <__addsf3>
    16c8:	60 93 0c 01 	sts	0x010C, r22	; 0x80010c <PUMP_THRESHOLD>
    16cc:	70 93 0d 01 	sts	0x010D, r23	; 0x80010d <PUMP_THRESHOLD+0x1>
    16d0:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <PUMP_THRESHOLD+0x2>
    16d4:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <PUMP_THRESHOLD+0x3>
                    break;
    16d8:	08 95       	ret
                case 2:
                    // adjust SPRAY_THRESHOLD - decrease
                    SPRAY_THRESHOLD += STEP_SIZE_FOR_INCREMENTS;
    16da:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <STEP_SIZE_FOR_INCREMENTS>
    16de:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <STEP_SIZE_FOR_INCREMENTS+0x1>
    16e2:	40 91 16 01 	lds	r20, 0x0116	; 0x800116 <STEP_SIZE_FOR_INCREMENTS+0x2>
    16e6:	50 91 17 01 	lds	r21, 0x0117	; 0x800117 <STEP_SIZE_FOR_INCREMENTS+0x3>
    16ea:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <SPRAY_THRESHOLD>
    16ee:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <SPRAY_THRESHOLD+0x1>
    16f2:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <SPRAY_THRESHOLD+0x2>
    16f6:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <SPRAY_THRESHOLD+0x3>
    16fa:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <__addsf3>
    16fe:	60 93 08 01 	sts	0x0108, r22	; 0x800108 <SPRAY_THRESHOLD>
    1702:	70 93 09 01 	sts	0x0109, r23	; 0x800109 <SPRAY_THRESHOLD+0x1>
    1706:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <SPRAY_THRESHOLD+0x2>
    170a:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <SPRAY_THRESHOLD+0x3>
                    break;
    170e:	08 95       	ret
                case 3:
                    // adjust ENABLE_TRIGGER_VALUE - toggle
                    ENABLE_TRIGGER_VALUE = 1;
    1710:	81 e0       	ldi	r24, 0x01	; 1
    1712:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <ENABLE_TRIGGER_VALUE>
                    break;
    1716:	08 95       	ret
                case 4:
                    // adjust ENABLE_ALERT_VALUE - toggle
                    ENABLE_ALERT_VALUE = 1;
    1718:	81 e0       	ldi	r24, 0x01	; 1
    171a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <ENABLE_ALERT_VALUE>
                    break;
    171e:	08 95       	ret
                    break;
                }
            }
        }
    }
    else if (key == 4)
    1720:	84 30       	cpi	r24, 0x04	; 4
    1722:	09 f0       	breq	.+2      	; 0x1726 <ui_process_key_command+0x4be>
    1724:	45 c0       	rjmp	.+138    	; 0x17b0 <ui_process_key_command+0x548>
    {
        if (active_menu_index == -1)
    1726:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <active_menu_index>
    172a:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <active_menu_index+0x1>
    172e:	8f 3f       	cpi	r24, 0xFF	; 255
    1730:	2f ef       	ldi	r18, 0xFF	; 255
    1732:	92 07       	cpc	r25, r18
    1734:	49 f4       	brne	.+18     	; 0x1748 <ui_process_key_command+0x4e0>
        {
            active_menu_index = menu_hover_index;
    1736:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <menu_hover_index>
    173a:	90 91 85 04 	lds	r25, 0x0485	; 0x800485 <menu_hover_index+0x1>
    173e:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <active_menu_index+0x1>
    1742:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <active_menu_index>
    1746:	08 95       	ret
        }
        else if (active_menu_index == 4)
    1748:	84 30       	cpi	r24, 0x04	; 4
    174a:	91 05       	cpc	r25, r1
    174c:	79 f4       	brne	.+30     	; 0x176c <ui_process_key_command+0x504>
        {
            if (active_live_view_index == -1)
    174e:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <active_live_view_index>
    1752:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <active_live_view_index+0x1>
    1756:	01 96       	adiw	r24, 0x01	; 1
    1758:	59 f5       	brne	.+86     	; 0x17b0 <ui_process_key_command+0x548>
            {
                active_live_view_index = live_view_hover_index;
    175a:	80 91 7c 04 	lds	r24, 0x047C	; 0x80047c <live_view_hover_index>
    175e:	90 91 7d 04 	lds	r25, 0x047D	; 0x80047d <live_view_hover_index+0x1>
    1762:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <active_live_view_index+0x1>
    1766:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <active_live_view_index>
    176a:	08 95       	ret
            }
        }
        else if (active_menu_index == 5)
    176c:	85 30       	cpi	r24, 0x05	; 5
    176e:	91 05       	cpc	r25, r1
    1770:	79 f4       	brne	.+30     	; 0x1790 <ui_process_key_command+0x528>
        {
            if (active_trigger_index == -1)
    1772:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <active_trigger_index>
    1776:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <active_trigger_index+0x1>
    177a:	01 96       	adiw	r24, 0x01	; 1
    177c:	c9 f4       	brne	.+50     	; 0x17b0 <ui_process_key_command+0x548>
            {
                active_trigger_index = trigger_hover_index;
    177e:	80 91 82 04 	lds	r24, 0x0482	; 0x800482 <trigger_hover_index>
    1782:	90 91 83 04 	lds	r25, 0x0483	; 0x800483 <trigger_hover_index+0x1>
    1786:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <active_trigger_index+0x1>
    178a:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <active_trigger_index>
    178e:	08 95       	ret
            }
        }
        else if (active_menu_index == 7)
    1790:	07 97       	sbiw	r24, 0x07	; 7
    1792:	71 f4       	brne	.+28     	; 0x17b0 <ui_process_key_command+0x548>
        {
            if (active_config_index == -1)
    1794:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <active_config_index>
    1798:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <active_config_index+0x1>
    179c:	01 96       	adiw	r24, 0x01	; 1
    179e:	41 f4       	brne	.+16     	; 0x17b0 <ui_process_key_command+0x548>
            {
                active_config_index = config_hover_index;
    17a0:	80 91 80 04 	lds	r24, 0x0480	; 0x800480 <config_hover_index>
    17a4:	90 91 81 04 	lds	r25, 0x0481	; 0x800481 <config_hover_index+0x1>
    17a8:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <active_config_index+0x1>
    17ac:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <active_config_index>
    17b0:	08 95       	ret

000017b2 <__vector_9>:
        }
    }
}

ISR(TIMER2_OVF_vect)
{
    17b2:	1f 92       	push	r1
    17b4:	0f 92       	push	r0
    17b6:	0f b6       	in	r0, 0x3f	; 63
    17b8:	0f 92       	push	r0
    17ba:	11 24       	eor	r1, r1
    17bc:	8f 93       	push	r24
    17be:	9f 93       	push	r25
    /* Keep ISR short: only update tick and set a flag for main loop to do sensor work */
    tick++;
    17c0:	80 91 87 04 	lds	r24, 0x0487	; 0x800487 <tick>
    17c4:	8f 5f       	subi	r24, 0xFF	; 255
    17c6:	80 93 87 04 	sts	0x0487, r24	; 0x800487 <tick>

    if (tick >= 248) {
    17ca:	80 91 87 04 	lds	r24, 0x0487	; 0x800487 <tick>
    17ce:	88 3f       	cpi	r24, 0xF8	; 248
    17d0:	48 f0       	brcs	.+18     	; 0x17e4 <__vector_9+0x32>
        tick = 0;
    17d2:	10 92 87 04 	sts	0x0487, r1	; 0x800487 <tick>
        one_second_event = 1;
    17d6:	81 e0       	ldi	r24, 0x01	; 1
    17d8:	80 93 86 04 	sts	0x0486, r24	; 0x800486 <one_second_event>

        PORTC ^= (1 << PC2); // toggle PC2 every second
    17dc:	98 b1       	in	r25, 0x08	; 8
    17de:	84 e0       	ldi	r24, 0x04	; 4
    17e0:	89 27       	eor	r24, r25
    17e2:	88 b9       	out	0x08, r24	; 8
    }
}
    17e4:	9f 91       	pop	r25
    17e6:	8f 91       	pop	r24
    17e8:	0f 90       	pop	r0
    17ea:	0f be       	out	0x3f, r0	; 63
    17ec:	0f 90       	pop	r0
    17ee:	1f 90       	pop	r1
    17f0:	18 95       	reti

000017f2 <main>:

int main(void)
{
    17f2:	cf 93       	push	r28
    17f4:	df 93       	push	r29
    17f6:	cd b7       	in	r28, 0x3d	; 61
    17f8:	de b7       	in	r29, 0x3e	; 62
    17fa:	c0 54       	subi	r28, 0x40	; 64
    17fc:	d1 09       	sbc	r29, r1
    17fe:	0f b6       	in	r0, 0x3f	; 63
    1800:	f8 94       	cli
    1802:	de bf       	out	0x3e, r29	; 62
    1804:	0f be       	out	0x3f, r0	; 63
    1806:	cd bf       	out	0x3d, r28	; 61
    initQueue(&height_per_second);
    1808:	88 e9       	ldi	r24, 0x98	; 152
    180a:	94 e0       	ldi	r25, 0x04	; 4
    180c:	0e 94 36 01 	call	0x26c	; 0x26c <initQueue>
    initStrQueue(&MESSAGES_Q);
    1810:	80 eb       	ldi	r24, 0xB0	; 176
    1812:	94 e0       	ldi	r25, 0x04	; 4
    1814:	0e 94 03 02 	call	0x406	; 0x406 <initStrQueue>
    LCD_1602A_init();
    1818:	0e 94 4a 03 	call	0x694	; 0x694 <LCD_1602A_init>
    HCSR04_init();
    181c:	0e 94 7f 04 	call	0x8fe	; 0x8fe <HCSR04_init>
    KEYPAD_init();
    1820:	0e 94 b9 04 	call	0x972	; 0x972 <KEYPAD_init>

    LED_SYSTEM_ACTIVE_INIT();
    1824:	0e 94 cf 02 	call	0x59e	; 0x59e <LED_SYSTEM_ACTIVE_INIT>
    TIMER2_INIT();
    1828:	0e 94 bf 02 	call	0x57e	; 0x57e <TIMER2_INIT>

    uint8_t pressed_key = KEYPAD_NO_KEY;
	
	int tank_height = HCSR04_get_distance();
    182c:	0e 94 b4 04 	call	0x968	; 0x968 <HCSR04_get_distance>
    enqueue(&height_per_second, tank_height);
    1830:	bc 01       	movw	r22, r24
    1832:	88 e9       	ldi	r24, 0x98	; 152
    1834:	94 e0       	ldi	r25, 0x04	; 4
    1836:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <enqueue>

    /* main loop handles heavy work triggered by timer to avoid doing this in ISR */

    while (1)
    {
        ui_show_display();
    183a:	0e 94 9e 06 	call	0xd3c	; 0xd3c <ui_show_display>


        if (SYSTEM_SIGNAL) {
    183e:	80 91 6a 04 	lds	r24, 0x046A	; 0x80046a <__data_end>
    1842:	88 23       	and	r24, r24
    1844:	f9 f0       	breq	.+62     	; 0x1884 <main+0x92>
            char *msgptr = NULL;
    1846:	1a 82       	std	Y+2, r1	; 0x02
    1848:	19 82       	std	Y+1, r1	; 0x01
            SYSTEM_SIGNAL = 0;
    184a:	10 92 6a 04 	sts	0x046A, r1	; 0x80046a <__data_end>
            peekFrontStr(&MESSAGES_Q, &msgptr);
    184e:	be 01       	movw	r22, r28
    1850:	6f 5f       	subi	r22, 0xFF	; 255
    1852:	7f 4f       	sbci	r23, 0xFF	; 255
    1854:	80 eb       	ldi	r24, 0xB0	; 176
    1856:	94 e0       	ldi	r25, 0x04	; 4
    1858:	0e 94 a2 02 	call	0x544	; 0x544 <peekFrontStr>
            display_set("ALERT", msgptr ? msgptr : "System alert");
    185c:	69 81       	ldd	r22, Y+1	; 0x01
    185e:	7a 81       	ldd	r23, Y+2	; 0x02
    1860:	61 15       	cp	r22, r1
    1862:	71 05       	cpc	r23, r1
    1864:	11 f4       	brne	.+4      	; 0x186a <main+0x78>
    1866:	66 e3       	ldi	r22, 0x36	; 54
    1868:	73 e0       	ldi	r23, 0x03	; 3
    186a:	83 e4       	ldi	r24, 0x43	; 67
    186c:	93 e0       	ldi	r25, 0x03	; 3
    186e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <display_set>
    1872:	2f ef       	ldi	r18, 0xFF	; 255
    1874:	83 ed       	ldi	r24, 0xD3	; 211
    1876:	90 e3       	ldi	r25, 0x30	; 48
    1878:	21 50       	subi	r18, 0x01	; 1
    187a:	80 40       	sbci	r24, 0x00	; 0
    187c:	90 40       	sbci	r25, 0x00	; 0
    187e:	e1 f7       	brne	.-8      	; 0x1878 <main+0x86>
    1880:	00 c0       	rjmp	.+0      	; 0x1882 <main+0x90>
    1882:	00 00       	nop
            _delay_ms(1000); // show alert briefly
        }

        if (one_second_event) {
    1884:	80 91 86 04 	lds	r24, 0x0486	; 0x800486 <one_second_event>
    1888:	88 23       	and	r24, r24
    188a:	09 f4       	brne	.+2      	; 0x188e <main+0x9c>
    188c:	86 c1       	rjmp	.+780    	; 0x1b9a <main+0x3a8>
            one_second_event = 0;
    188e:	10 92 86 04 	sts	0x0486, r1	; 0x800486 <one_second_event>

            int tank_height = HCSR04_get_distance();
    1892:	0e 94 b4 04 	call	0x968	; 0x968 <HCSR04_get_distance>
    1896:	8c 01       	movw	r16, r24
            enqueue(&height_per_second, tank_height);
    1898:	bc 01       	movw	r22, r24
    189a:	88 e9       	ldi	r24, 0x98	; 152
    189c:	94 e0       	ldi	r25, 0x04	; 4
    189e:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <enqueue>

            float capacity = get_tank_capacity_at_height(tank_height * 1.5);
    18a2:	b8 01       	movw	r22, r16
    18a4:	11 0f       	add	r17, r17
    18a6:	88 0b       	sbc	r24, r24
    18a8:	99 0b       	sbc	r25, r25
    18aa:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <__floatsisf>
    18ae:	20 e0       	ldi	r18, 0x00	; 0
    18b0:	30 e0       	ldi	r19, 0x00	; 0
    18b2:	40 ec       	ldi	r20, 0xC0	; 192
    18b4:	5f e3       	ldi	r21, 0x3F	; 63
    18b6:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <__mulsf3>
    18ba:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <__fixsfsi>
    18be:	cb 01       	movw	r24, r22
    18c0:	0e 94 65 05 	call	0xaca	; 0xaca <get_tank_capacity_at_height>
    18c4:	d6 2e       	mov	r13, r22
    18c6:	c7 2e       	mov	r12, r23
    18c8:	b8 2e       	mov	r11, r24
    18ca:	a9 2e       	mov	r10, r25
            float soil_temp = get_soil_temperature();
    18cc:	0e 94 9b 06 	call	0xd36	; 0xd36 <get_soil_temperature>
    18d0:	16 2f       	mov	r17, r22
    18d2:	07 2f       	mov	r16, r23
    18d4:	f8 2e       	mov	r15, r24
    18d6:	e9 2e       	mov	r14, r25

            if (ENABLE_TRIGGER_VALUE) {
    18d8:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <ENABLE_TRIGGER_VALUE>
    18dc:	88 23       	and	r24, r24
    18de:	09 f4       	brne	.+2      	; 0x18e2 <main+0xf0>
    18e0:	5c c1       	rjmp	.+696    	; 0x1b9a <main+0x3a8>
                if (capacity <= MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER) {
    18e2:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER>
    18e6:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x1>
    18ea:	40 91 1e 01 	lds	r20, 0x011E	; 0x80011e <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x2>
    18ee:	50 91 1f 01 	lds	r21, 0x011F	; 0x80011f <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x3>
    18f2:	6d 2d       	mov	r22, r13
    18f4:	7c 2d       	mov	r23, r12
    18f6:	8b 2d       	mov	r24, r11
    18f8:	9a 2d       	mov	r25, r10
    18fa:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <__cmpsf2>
    18fe:	18 16       	cp	r1, r24
    1900:	fc f0       	brlt	.+62     	; 0x1940 <main+0x14e>
                    char msg[64];
                    snprintf(msg, sizeof(msg), "Refill triggered at %.1f Ltrs", capacity);
    1902:	af 92       	push	r10
    1904:	bf 92       	push	r11
    1906:	cf 92       	push	r12
    1908:	df 92       	push	r13
    190a:	89 e4       	ldi	r24, 0x49	; 73
    190c:	93 e0       	ldi	r25, 0x03	; 3
    190e:	9f 93       	push	r25
    1910:	8f 93       	push	r24
    1912:	1f 92       	push	r1
    1914:	80 e4       	ldi	r24, 0x40	; 64
    1916:	8f 93       	push	r24
    1918:	ce 01       	movw	r24, r28
    191a:	01 96       	adiw	r24, 0x01	; 1
    191c:	6c 01       	movw	r12, r24
    191e:	9f 93       	push	r25
    1920:	8f 93       	push	r24
    1922:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <snprintf>
                    enqueueStr(&MESSAGES_Q, msg);
    1926:	b6 01       	movw	r22, r12
    1928:	80 eb       	ldi	r24, 0xB0	; 176
    192a:	94 e0       	ldi	r25, 0x04	; 4
    192c:	0e 94 36 02 	call	0x46c	; 0x46c <enqueueStr>
                    SYSTEM_SIGNAL = 1;
    1930:	81 e0       	ldi	r24, 0x01	; 1
    1932:	80 93 6a 04 	sts	0x046A, r24	; 0x80046a <__data_end>
    1936:	0f b6       	in	r0, 0x3f	; 63
    1938:	f8 94       	cli
    193a:	de bf       	out	0x3e, r29	; 62
    193c:	0f be       	out	0x3f, r0	; 63
    193e:	cd bf       	out	0x3d, r28	; 61
                }

                if (soil_temp >= MAXIMUM_TEMPERATURE_BEFORE_PUMPING) {
    1940:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING>
    1944:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x1>
    1948:	40 91 1a 01 	lds	r20, 0x011A	; 0x80011a <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x2>
    194c:	50 91 1b 01 	lds	r21, 0x011B	; 0x80011b <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x3>
    1950:	61 2f       	mov	r22, r17
    1952:	70 2f       	mov	r23, r16
    1954:	8f 2d       	mov	r24, r15
    1956:	9e 2d       	mov	r25, r14
    1958:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <__gesf2>
    195c:	88 23       	and	r24, r24
    195e:	0c f4       	brge	.+2      	; 0x1962 <main+0x170>
    1960:	1c c1       	rjmp	.+568    	; 0x1b9a <main+0x3a8>
                    char msg[64];
                    snprintf(msg, sizeof(msg), "Cooling triggered at %.2f degrees", soil_temp);
    1962:	ef 92       	push	r14
    1964:	ff 92       	push	r15
    1966:	0f 93       	push	r16
    1968:	1f 93       	push	r17
    196a:	87 e6       	ldi	r24, 0x67	; 103
    196c:	93 e0       	ldi	r25, 0x03	; 3
    196e:	9f 93       	push	r25
    1970:	8f 93       	push	r24
    1972:	1f 92       	push	r1
    1974:	80 e4       	ldi	r24, 0x40	; 64
    1976:	8f 93       	push	r24
    1978:	8e 01       	movw	r16, r28
    197a:	0f 5f       	subi	r16, 0xFF	; 255
    197c:	1f 4f       	sbci	r17, 0xFF	; 255
    197e:	1f 93       	push	r17
    1980:	0f 93       	push	r16
    1982:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <snprintf>
                    enqueueStr(&MESSAGES_Q, msg);
    1986:	b8 01       	movw	r22, r16
    1988:	80 eb       	ldi	r24, 0xB0	; 176
    198a:	94 e0       	ldi	r25, 0x04	; 4
    198c:	0e 94 36 02 	call	0x46c	; 0x46c <enqueueStr>
                    SYSTEM_SIGNAL = 1;
    1990:	81 e0       	ldi	r24, 0x01	; 1
    1992:	80 93 6a 04 	sts	0x046A, r24	; 0x80046a <__data_end>
    1996:	0f b6       	in	r0, 0x3f	; 63
    1998:	f8 94       	cli
    199a:	de bf       	out	0x3e, r29	; 62
    199c:	0f be       	out	0x3f, r0	; 63
    199e:	cd bf       	out	0x3d, r28	; 61
    19a0:	fc c0       	rjmp	.+504    	; 0x1b9a <main+0x3a8>
        while (active_menu_index == 4 && active_live_view_index != -1)
        {
            while ((pressed_key = KEYPAD_read()) == KEYPAD_NO_KEY)
            {

                switch (live_view_hover_index)
    19a2:	80 91 7c 04 	lds	r24, 0x047C	; 0x80047c <live_view_hover_index>
    19a6:	90 91 7d 04 	lds	r25, 0x047D	; 0x80047d <live_view_hover_index+0x1>
    19aa:	81 30       	cpi	r24, 0x01	; 1
    19ac:	91 05       	cpc	r25, r1
    19ae:	09 f4       	brne	.+2      	; 0x19b2 <main+0x1c0>
    19b0:	40 c0       	rjmp	.+128    	; 0x1a32 <main+0x240>
    19b2:	1c f4       	brge	.+6      	; 0x19ba <main+0x1c8>
    19b4:	89 2b       	or	r24, r25
    19b6:	49 f0       	breq	.+18     	; 0x19ca <main+0x1d8>
    19b8:	d7 c0       	rjmp	.+430    	; 0x1b68 <main+0x376>
    19ba:	82 30       	cpi	r24, 0x02	; 2
    19bc:	91 05       	cpc	r25, r1
    19be:	09 f4       	brne	.+2      	; 0x19c2 <main+0x1d0>
    19c0:	6c c0       	rjmp	.+216    	; 0x1a9a <main+0x2a8>
    19c2:	03 97       	sbiw	r24, 0x03	; 3
    19c4:	09 f4       	brne	.+2      	; 0x19c8 <main+0x1d6>
    19c6:	9d c0       	rjmp	.+314    	; 0x1b02 <main+0x310>
    19c8:	cf c0       	rjmp	.+414    	; 0x1b68 <main+0x376>
                {
                    case 0:
                        if (!(SHOW_LOADING_WIDGET)) {
    19ca:	80 91 6b 04 	lds	r24, 0x046B	; 0x80046b <SHOW_LOADING_WIDGET>
    19ce:	81 11       	cpse	r24, r1
    19d0:	14 c0       	rjmp	.+40     	; 0x19fa <main+0x208>
                            display_set("CAPACITY", "Updating...");
    19d2:	69 e8       	ldi	r22, 0x89	; 137
    19d4:	73 e0       	ldi	r23, 0x03	; 3
    19d6:	87 e0       	ldi	r24, 0x07	; 7
    19d8:	92 e0       	ldi	r25, 0x02	; 2
    19da:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <display_set>
                            SHOW_LOADING_WIDGET = 1;
    19de:	81 e0       	ldi	r24, 0x01	; 1
    19e0:	80 93 6b 04 	sts	0x046B, r24	; 0x80046b <SHOW_LOADING_WIDGET>
                            current_tank_capacity = get_tank_capacity();
    19e4:	0e 94 96 05 	call	0xb2c	; 0xb2c <get_tank_capacity>
    19e8:	60 93 78 04 	sts	0x0478, r22	; 0x800478 <current_tank_capacity>
    19ec:	70 93 79 04 	sts	0x0479, r23	; 0x800479 <current_tank_capacity+0x1>
    19f0:	80 93 7a 04 	sts	0x047A, r24	; 0x80047a <current_tank_capacity+0x2>
    19f4:	90 93 7b 04 	sts	0x047B, r25	; 0x80047b <current_tank_capacity+0x3>
    19f8:	b7 c0       	rjmp	.+366    	; 0x1b68 <main+0x376>
                        }
                        else {
                            format_float(buffer, sizeof(buffer), current_tank_capacity, 1, "Ltrs");
    19fa:	20 91 78 04 	lds	r18, 0x0478	; 0x800478 <current_tank_capacity>
    19fe:	30 91 79 04 	lds	r19, 0x0479	; 0x800479 <current_tank_capacity+0x1>
    1a02:	40 91 7a 04 	lds	r20, 0x047A	; 0x80047a <current_tank_capacity+0x2>
    1a06:	50 91 7b 04 	lds	r21, 0x047B	; 0x80047b <current_tank_capacity+0x3>
    1a0a:	0f 2e       	mov	r0, r31
    1a0c:	f2 e6       	ldi	r31, 0x62	; 98
    1a0e:	ef 2e       	mov	r14, r31
    1a10:	f3 e0       	ldi	r31, 0x03	; 3
    1a12:	ff 2e       	mov	r15, r31
    1a14:	f0 2d       	mov	r31, r0
    1a16:	01 e0       	ldi	r16, 0x01	; 1
    1a18:	60 e1       	ldi	r22, 0x10	; 16
    1a1a:	70 e0       	ldi	r23, 0x00	; 0
    1a1c:	88 e8       	ldi	r24, 0x88	; 136
    1a1e:	94 e0       	ldi	r25, 0x04	; 4
    1a20:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <format_float>
                            display_set("CAPACITY", buffer);
    1a24:	68 e8       	ldi	r22, 0x88	; 136
    1a26:	74 e0       	ldi	r23, 0x04	; 4
    1a28:	87 e0       	ldi	r24, 0x07	; 7
    1a2a:	92 e0       	ldi	r25, 0x02	; 2
    1a2c:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <display_set>
    1a30:	9b c0       	rjmp	.+310    	; 0x1b68 <main+0x376>
                        }

                        break;
                    case 1:
                        if (!(SHOW_LOADING_WIDGET))
    1a32:	80 91 6b 04 	lds	r24, 0x046B	; 0x80046b <SHOW_LOADING_WIDGET>
    1a36:	81 11       	cpse	r24, r1
    1a38:	14 c0       	rjmp	.+40     	; 0x1a62 <main+0x270>
                        {
                            display_set("REFILL RATE", "Updating...");
    1a3a:	69 e8       	ldi	r22, 0x89	; 137
    1a3c:	73 e0       	ldi	r23, 0x03	; 3
    1a3e:	80 e1       	ldi	r24, 0x10	; 16
    1a40:	92 e0       	ldi	r25, 0x02	; 2
    1a42:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <display_set>
                            SHOW_LOADING_WIDGET = 1;
    1a46:	81 e0       	ldi	r24, 0x01	; 1
    1a48:	80 93 6b 04 	sts	0x046B, r24	; 0x80046b <SHOW_LOADING_WIDGET>
                            current_refill_rate = get_refill_rate();
    1a4c:	0e 94 a9 05 	call	0xb52	; 0xb52 <get_refill_rate>
    1a50:	60 93 74 04 	sts	0x0474, r22	; 0x800474 <current_refill_rate>
    1a54:	70 93 75 04 	sts	0x0475, r23	; 0x800475 <current_refill_rate+0x1>
    1a58:	80 93 76 04 	sts	0x0476, r24	; 0x800476 <current_refill_rate+0x2>
    1a5c:	90 93 77 04 	sts	0x0477, r25	; 0x800477 <current_refill_rate+0x3>
    1a60:	83 c0       	rjmp	.+262    	; 0x1b68 <main+0x376>
                        } else {
                            format_float(buffer, sizeof(buffer), current_refill_rate, 1, "Ltrs per min");
    1a62:	20 91 74 04 	lds	r18, 0x0474	; 0x800474 <current_refill_rate>
    1a66:	30 91 75 04 	lds	r19, 0x0475	; 0x800475 <current_refill_rate+0x1>
    1a6a:	40 91 76 04 	lds	r20, 0x0476	; 0x800476 <current_refill_rate+0x2>
    1a6e:	50 91 77 04 	lds	r21, 0x0477	; 0x800477 <current_refill_rate+0x3>
    1a72:	0f 2e       	mov	r0, r31
    1a74:	f7 e3       	ldi	r31, 0x37	; 55
    1a76:	ef 2e       	mov	r14, r31
    1a78:	f2 e0       	ldi	r31, 0x02	; 2
    1a7a:	ff 2e       	mov	r15, r31
    1a7c:	f0 2d       	mov	r31, r0
    1a7e:	01 e0       	ldi	r16, 0x01	; 1
    1a80:	60 e1       	ldi	r22, 0x10	; 16
    1a82:	70 e0       	ldi	r23, 0x00	; 0
    1a84:	88 e8       	ldi	r24, 0x88	; 136
    1a86:	94 e0       	ldi	r25, 0x04	; 4
    1a88:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <format_float>
                            display_set("REFILL RATE", buffer);
    1a8c:	68 e8       	ldi	r22, 0x88	; 136
    1a8e:	74 e0       	ldi	r23, 0x04	; 4
    1a90:	80 e1       	ldi	r24, 0x10	; 16
    1a92:	92 e0       	ldi	r25, 0x02	; 2
    1a94:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <display_set>
    1a98:	67 c0       	rjmp	.+206    	; 0x1b68 <main+0x376>
                        }
                        break;
                    case 2:
                        if (!(SHOW_LOADING_WIDGET))
    1a9a:	80 91 6b 04 	lds	r24, 0x046B	; 0x80046b <SHOW_LOADING_WIDGET>
    1a9e:	81 11       	cpse	r24, r1
    1aa0:	14 c0       	rjmp	.+40     	; 0x1aca <main+0x2d8>
                        {
                            display_set("LEAK RATE", "Updating...");
    1aa2:	69 e8       	ldi	r22, 0x89	; 137
    1aa4:	73 e0       	ldi	r23, 0x03	; 3
    1aa6:	8f e5       	ldi	r24, 0x5F	; 95
    1aa8:	92 e0       	ldi	r25, 0x02	; 2
    1aaa:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <display_set>
                            SHOW_LOADING_WIDGET = 1;
    1aae:	81 e0       	ldi	r24, 0x01	; 1
    1ab0:	80 93 6b 04 	sts	0x046B, r24	; 0x80046b <SHOW_LOADING_WIDGET>
                            current_leak_rate = get_leak_rate();
    1ab4:	0e 94 1c 06 	call	0xc38	; 0xc38 <get_leak_rate>
    1ab8:	60 93 70 04 	sts	0x0470, r22	; 0x800470 <current_leak_rate>
    1abc:	70 93 71 04 	sts	0x0471, r23	; 0x800471 <current_leak_rate+0x1>
    1ac0:	80 93 72 04 	sts	0x0472, r24	; 0x800472 <current_leak_rate+0x2>
    1ac4:	90 93 73 04 	sts	0x0473, r25	; 0x800473 <current_leak_rate+0x3>
    1ac8:	4f c0       	rjmp	.+158    	; 0x1b68 <main+0x376>
                        } else {
                            format_float(buffer, sizeof(buffer), current_leak_rate, 1, "Ltrs per min");
    1aca:	20 91 70 04 	lds	r18, 0x0470	; 0x800470 <current_leak_rate>
    1ace:	30 91 71 04 	lds	r19, 0x0471	; 0x800471 <current_leak_rate+0x1>
    1ad2:	40 91 72 04 	lds	r20, 0x0472	; 0x800472 <current_leak_rate+0x2>
    1ad6:	50 91 73 04 	lds	r21, 0x0473	; 0x800473 <current_leak_rate+0x3>
    1ada:	0f 2e       	mov	r0, r31
    1adc:	f7 e3       	ldi	r31, 0x37	; 55
    1ade:	ef 2e       	mov	r14, r31
    1ae0:	f2 e0       	ldi	r31, 0x02	; 2
    1ae2:	ff 2e       	mov	r15, r31
    1ae4:	f0 2d       	mov	r31, r0
    1ae6:	01 e0       	ldi	r16, 0x01	; 1
    1ae8:	60 e1       	ldi	r22, 0x10	; 16
    1aea:	70 e0       	ldi	r23, 0x00	; 0
    1aec:	88 e8       	ldi	r24, 0x88	; 136
    1aee:	94 e0       	ldi	r25, 0x04	; 4
    1af0:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <format_float>
                            display_set("LEAK RATE", buffer);
    1af4:	68 e8       	ldi	r22, 0x88	; 136
    1af6:	74 e0       	ldi	r23, 0x04	; 4
    1af8:	8f e5       	ldi	r24, 0x5F	; 95
    1afa:	92 e0       	ldi	r25, 0x02	; 2
    1afc:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <display_set>
    1b00:	33 c0       	rjmp	.+102    	; 0x1b68 <main+0x376>
                        }
                        
                        break;

                    case 3:
                        if (!(SHOW_LOADING_WIDGET))
    1b02:	80 91 6b 04 	lds	r24, 0x046B	; 0x80046b <SHOW_LOADING_WIDGET>
    1b06:	81 11       	cpse	r24, r1
    1b08:	14 c0       	rjmp	.+40     	; 0x1b32 <main+0x340>
                        {
                            display_set("SOIL TEMP", "Updating...");
    1b0a:	69 e8       	ldi	r22, 0x89	; 137
    1b0c:	73 e0       	ldi	r23, 0x03	; 3
    1b0e:	89 e6       	ldi	r24, 0x69	; 105
    1b10:	92 e0       	ldi	r25, 0x02	; 2
    1b12:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <display_set>
                            SHOW_LOADING_WIDGET = 1;
    1b16:	81 e0       	ldi	r24, 0x01	; 1
    1b18:	80 93 6b 04 	sts	0x046B, r24	; 0x80046b <SHOW_LOADING_WIDGET>
                            current_soil_temperature = get_soil_temperature();
    1b1c:	0e 94 9b 06 	call	0xd36	; 0xd36 <get_soil_temperature>
    1b20:	60 93 6c 04 	sts	0x046C, r22	; 0x80046c <current_soil_temperature>
    1b24:	70 93 6d 04 	sts	0x046D, r23	; 0x80046d <current_soil_temperature+0x1>
    1b28:	80 93 6e 04 	sts	0x046E, r24	; 0x80046e <current_soil_temperature+0x2>
    1b2c:	90 93 6f 04 	sts	0x046F, r25	; 0x80046f <current_soil_temperature+0x3>
    1b30:	1b c0       	rjmp	.+54     	; 0x1b68 <main+0x376>
                        } else {
                            format_float(buffer, sizeof(buffer), current_soil_temperature, 1, "degrees");
    1b32:	20 91 6c 04 	lds	r18, 0x046C	; 0x80046c <current_soil_temperature>
    1b36:	30 91 6d 04 	lds	r19, 0x046D	; 0x80046d <current_soil_temperature+0x1>
    1b3a:	40 91 6e 04 	lds	r20, 0x046E	; 0x80046e <current_soil_temperature+0x2>
    1b3e:	50 91 6f 04 	lds	r21, 0x046F	; 0x80046f <current_soil_temperature+0x3>
    1b42:	0f 2e       	mov	r0, r31
    1b44:	f1 e8       	ldi	r31, 0x81	; 129
    1b46:	ef 2e       	mov	r14, r31
    1b48:	f3 e0       	ldi	r31, 0x03	; 3
    1b4a:	ff 2e       	mov	r15, r31
    1b4c:	f0 2d       	mov	r31, r0
    1b4e:	01 e0       	ldi	r16, 0x01	; 1
    1b50:	60 e1       	ldi	r22, 0x10	; 16
    1b52:	70 e0       	ldi	r23, 0x00	; 0
    1b54:	88 e8       	ldi	r24, 0x88	; 136
    1b56:	94 e0       	ldi	r25, 0x04	; 4
    1b58:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <format_float>
                            display_set("SOIL TEMP", buffer);
    1b5c:	68 e8       	ldi	r22, 0x88	; 136
    1b5e:	74 e0       	ldi	r23, 0x04	; 4
    1b60:	89 e6       	ldi	r24, 0x69	; 105
    1b62:	92 e0       	ldi	r25, 0x02	; 2
    1b64:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <display_set>
            }
        }

        while (active_menu_index == 4 && active_live_view_index != -1)
        {
            while ((pressed_key = KEYPAD_read()) == KEYPAD_NO_KEY)
    1b68:	0e 94 c0 04 	call	0x980	; 0x980 <KEYPAD_read>
    1b6c:	18 2f       	mov	r17, r24
    1b6e:	85 30       	cpi	r24, 0x05	; 5
    1b70:	09 f4       	brne	.+2      	; 0x1b74 <main+0x382>
    1b72:	17 cf       	rjmp	.-466    	; 0x19a2 <main+0x1b0>
                        break;
                }
                
            }

            SHOW_LOADING_WIDGET = 0;
    1b74:	10 92 6b 04 	sts	0x046B, r1	; 0x80046b <SHOW_LOADING_WIDGET>

            if (pressed_key == 1)
    1b78:	81 30       	cpi	r24, 0x01	; 1
    1b7a:	41 f4       	brne	.+16     	; 0x1b8c <main+0x39a>
            {
                // exit live view on key 1 press
                active_menu_index = -1;
    1b7c:	8f ef       	ldi	r24, 0xFF	; 255
    1b7e:	9f ef       	ldi	r25, 0xFF	; 255
    1b80:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <active_menu_index+0x1>
    1b84:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <active_menu_index>
                pressed_key = KEYPAD_NO_KEY;
    1b88:	15 e0       	ldi	r17, 0x05	; 5
                break;
    1b8a:	14 c0       	rjmp	.+40     	; 0x1bb4 <main+0x3c2>
            } else {
                ui_process_key_command(pressed_key);
    1b8c:	0e 94 34 09 	call	0x1268	; 0x1268 <ui_process_key_command>
            }

            while (KEYPAD_read() != KEYPAD_NO_KEY);
    1b90:	0e 94 c0 04 	call	0x980	; 0x980 <KEYPAD_read>
    1b94:	85 30       	cpi	r24, 0x05	; 5
    1b96:	e1 f7       	brne	.-8      	; 0x1b90 <main+0x39e>
    1b98:	01 c0       	rjmp	.+2      	; 0x1b9c <main+0x3aa>

        if (SYSTEM_SIGNAL) {
            char *msgptr = NULL;
            SYSTEM_SIGNAL = 0;
            peekFrontStr(&MESSAGES_Q, &msgptr);
            display_set("ALERT", msgptr ? msgptr : "System alert");
    1b9a:	15 e0       	ldi	r17, 0x05	; 5
                    SYSTEM_SIGNAL = 1;
                }
            }
        }

        while (active_menu_index == 4 && active_live_view_index != -1)
    1b9c:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <active_menu_index>
    1ba0:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <active_menu_index+0x1>
    1ba4:	04 97       	sbiw	r24, 0x04	; 4
    1ba6:	31 f4       	brne	.+12     	; 0x1bb4 <main+0x3c2>
    1ba8:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <active_live_view_index>
    1bac:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <active_live_view_index+0x1>
    1bb0:	01 96       	adiw	r24, 0x01	; 1
    1bb2:	d1 f6       	brne	.-76     	; 0x1b68 <main+0x376>
        }


        // _delay_ms(20);

        if (pressed_key == KEYPAD_NO_KEY) {
    1bb4:	15 30       	cpi	r17, 0x05	; 5
    1bb6:	49 f4       	brne	.+18     	; 0x1bca <main+0x3d8>
            LED_system_active_on();
    1bb8:	0e 94 da 02 	call	0x5b4	; 0x5b4 <LED_system_active_on>
            while ((pressed_key = KEYPAD_read()) == KEYPAD_NO_KEY);
    1bbc:	0e 94 c0 04 	call	0x980	; 0x980 <KEYPAD_read>
    1bc0:	18 2f       	mov	r17, r24
    1bc2:	85 30       	cpi	r24, 0x05	; 5
    1bc4:	d9 f3       	breq	.-10     	; 0x1bbc <main+0x3ca>
            LED_system_active_off();
    1bc6:	0e 94 d6 02 	call	0x5ac	; 0x5ac <LED_system_active_off>
        }
        
        // _delay_ms(20);
        if (KEYPAD_read() == pressed_key)
    1bca:	0e 94 c0 04 	call	0x980	; 0x980 <KEYPAD_read>
    1bce:	18 13       	cpse	r17, r24
    1bd0:	34 ce       	rjmp	.-920    	; 0x183a <main+0x48>
        {
            ui_process_key_command(pressed_key);
    1bd2:	81 2f       	mov	r24, r17
    1bd4:	0e 94 34 09 	call	0x1268	; 0x1268 <ui_process_key_command>

            while (KEYPAD_read() != KEYPAD_NO_KEY); // wait until the key is released
    1bd8:	0e 94 c0 04 	call	0x980	; 0x980 <KEYPAD_read>
    1bdc:	85 30       	cpi	r24, 0x05	; 5
    1bde:	e1 f7       	brne	.-8      	; 0x1bd8 <main+0x3e6>
    1be0:	2c ce       	rjmp	.-936    	; 0x183a <main+0x48>

00001be2 <__subsf3>:
    1be2:	50 58       	subi	r21, 0x80	; 128

00001be4 <__addsf3>:
    1be4:	bb 27       	eor	r27, r27
    1be6:	aa 27       	eor	r26, r26
    1be8:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <__addsf3x>
    1bec:	0c 94 83 0f 	jmp	0x1f06	; 0x1f06 <__fp_round>
    1bf0:	0e 94 75 0f 	call	0x1eea	; 0x1eea <__fp_pscA>
    1bf4:	38 f0       	brcs	.+14     	; 0x1c04 <__addsf3+0x20>
    1bf6:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <__fp_pscB>
    1bfa:	20 f0       	brcs	.+8      	; 0x1c04 <__addsf3+0x20>
    1bfc:	39 f4       	brne	.+14     	; 0x1c0c <__addsf3+0x28>
    1bfe:	9f 3f       	cpi	r25, 0xFF	; 255
    1c00:	19 f4       	brne	.+6      	; 0x1c08 <__addsf3+0x24>
    1c02:	26 f4       	brtc	.+8      	; 0x1c0c <__addsf3+0x28>
    1c04:	0c 94 72 0f 	jmp	0x1ee4	; 0x1ee4 <__fp_nan>
    1c08:	0e f4       	brtc	.+2      	; 0x1c0c <__addsf3+0x28>
    1c0a:	e0 95       	com	r30
    1c0c:	e7 fb       	bst	r30, 7
    1c0e:	0c 94 6c 0f 	jmp	0x1ed8	; 0x1ed8 <__fp_inf>

00001c12 <__addsf3x>:
    1c12:	e9 2f       	mov	r30, r25
    1c14:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <__fp_split3>
    1c18:	58 f3       	brcs	.-42     	; 0x1bf0 <__addsf3+0xc>
    1c1a:	ba 17       	cp	r27, r26
    1c1c:	62 07       	cpc	r22, r18
    1c1e:	73 07       	cpc	r23, r19
    1c20:	84 07       	cpc	r24, r20
    1c22:	95 07       	cpc	r25, r21
    1c24:	20 f0       	brcs	.+8      	; 0x1c2e <__addsf3x+0x1c>
    1c26:	79 f4       	brne	.+30     	; 0x1c46 <__addsf3x+0x34>
    1c28:	a6 f5       	brtc	.+104    	; 0x1c92 <__addsf3x+0x80>
    1c2a:	0c 94 b6 0f 	jmp	0x1f6c	; 0x1f6c <__fp_zero>
    1c2e:	0e f4       	brtc	.+2      	; 0x1c32 <__addsf3x+0x20>
    1c30:	e0 95       	com	r30
    1c32:	0b 2e       	mov	r0, r27
    1c34:	ba 2f       	mov	r27, r26
    1c36:	a0 2d       	mov	r26, r0
    1c38:	0b 01       	movw	r0, r22
    1c3a:	b9 01       	movw	r22, r18
    1c3c:	90 01       	movw	r18, r0
    1c3e:	0c 01       	movw	r0, r24
    1c40:	ca 01       	movw	r24, r20
    1c42:	a0 01       	movw	r20, r0
    1c44:	11 24       	eor	r1, r1
    1c46:	ff 27       	eor	r31, r31
    1c48:	59 1b       	sub	r21, r25
    1c4a:	99 f0       	breq	.+38     	; 0x1c72 <__addsf3x+0x60>
    1c4c:	59 3f       	cpi	r21, 0xF9	; 249
    1c4e:	50 f4       	brcc	.+20     	; 0x1c64 <__addsf3x+0x52>
    1c50:	50 3e       	cpi	r21, 0xE0	; 224
    1c52:	68 f1       	brcs	.+90     	; 0x1cae <__addsf3x+0x9c>
    1c54:	1a 16       	cp	r1, r26
    1c56:	f0 40       	sbci	r31, 0x00	; 0
    1c58:	a2 2f       	mov	r26, r18
    1c5a:	23 2f       	mov	r18, r19
    1c5c:	34 2f       	mov	r19, r20
    1c5e:	44 27       	eor	r20, r20
    1c60:	58 5f       	subi	r21, 0xF8	; 248
    1c62:	f3 cf       	rjmp	.-26     	; 0x1c4a <__addsf3x+0x38>
    1c64:	46 95       	lsr	r20
    1c66:	37 95       	ror	r19
    1c68:	27 95       	ror	r18
    1c6a:	a7 95       	ror	r26
    1c6c:	f0 40       	sbci	r31, 0x00	; 0
    1c6e:	53 95       	inc	r21
    1c70:	c9 f7       	brne	.-14     	; 0x1c64 <__addsf3x+0x52>
    1c72:	7e f4       	brtc	.+30     	; 0x1c92 <__addsf3x+0x80>
    1c74:	1f 16       	cp	r1, r31
    1c76:	ba 0b       	sbc	r27, r26
    1c78:	62 0b       	sbc	r22, r18
    1c7a:	73 0b       	sbc	r23, r19
    1c7c:	84 0b       	sbc	r24, r20
    1c7e:	ba f0       	brmi	.+46     	; 0x1cae <__addsf3x+0x9c>
    1c80:	91 50       	subi	r25, 0x01	; 1
    1c82:	a1 f0       	breq	.+40     	; 0x1cac <__addsf3x+0x9a>
    1c84:	ff 0f       	add	r31, r31
    1c86:	bb 1f       	adc	r27, r27
    1c88:	66 1f       	adc	r22, r22
    1c8a:	77 1f       	adc	r23, r23
    1c8c:	88 1f       	adc	r24, r24
    1c8e:	c2 f7       	brpl	.-16     	; 0x1c80 <__addsf3x+0x6e>
    1c90:	0e c0       	rjmp	.+28     	; 0x1cae <__addsf3x+0x9c>
    1c92:	ba 0f       	add	r27, r26
    1c94:	62 1f       	adc	r22, r18
    1c96:	73 1f       	adc	r23, r19
    1c98:	84 1f       	adc	r24, r20
    1c9a:	48 f4       	brcc	.+18     	; 0x1cae <__addsf3x+0x9c>
    1c9c:	87 95       	ror	r24
    1c9e:	77 95       	ror	r23
    1ca0:	67 95       	ror	r22
    1ca2:	b7 95       	ror	r27
    1ca4:	f7 95       	ror	r31
    1ca6:	9e 3f       	cpi	r25, 0xFE	; 254
    1ca8:	08 f0       	brcs	.+2      	; 0x1cac <__addsf3x+0x9a>
    1caa:	b0 cf       	rjmp	.-160    	; 0x1c0c <__addsf3+0x28>
    1cac:	93 95       	inc	r25
    1cae:	88 0f       	add	r24, r24
    1cb0:	08 f0       	brcs	.+2      	; 0x1cb4 <__addsf3x+0xa2>
    1cb2:	99 27       	eor	r25, r25
    1cb4:	ee 0f       	add	r30, r30
    1cb6:	97 95       	ror	r25
    1cb8:	87 95       	ror	r24
    1cba:	08 95       	ret

00001cbc <__cmpsf2>:
    1cbc:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <__fp_cmp>
    1cc0:	08 f4       	brcc	.+2      	; 0x1cc4 <__cmpsf2+0x8>
    1cc2:	81 e0       	ldi	r24, 0x01	; 1
    1cc4:	08 95       	ret

00001cc6 <__divsf3>:
    1cc6:	0e 94 77 0e 	call	0x1cee	; 0x1cee <__divsf3x>
    1cca:	0c 94 83 0f 	jmp	0x1f06	; 0x1f06 <__fp_round>
    1cce:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <__fp_pscB>
    1cd2:	58 f0       	brcs	.+22     	; 0x1cea <__divsf3+0x24>
    1cd4:	0e 94 75 0f 	call	0x1eea	; 0x1eea <__fp_pscA>
    1cd8:	40 f0       	brcs	.+16     	; 0x1cea <__divsf3+0x24>
    1cda:	29 f4       	brne	.+10     	; 0x1ce6 <__divsf3+0x20>
    1cdc:	5f 3f       	cpi	r21, 0xFF	; 255
    1cde:	29 f0       	breq	.+10     	; 0x1cea <__divsf3+0x24>
    1ce0:	0c 94 6c 0f 	jmp	0x1ed8	; 0x1ed8 <__fp_inf>
    1ce4:	51 11       	cpse	r21, r1
    1ce6:	0c 94 b7 0f 	jmp	0x1f6e	; 0x1f6e <__fp_szero>
    1cea:	0c 94 72 0f 	jmp	0x1ee4	; 0x1ee4 <__fp_nan>

00001cee <__divsf3x>:
    1cee:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <__fp_split3>
    1cf2:	68 f3       	brcs	.-38     	; 0x1cce <__divsf3+0x8>

00001cf4 <__divsf3_pse>:
    1cf4:	99 23       	and	r25, r25
    1cf6:	b1 f3       	breq	.-20     	; 0x1ce4 <__divsf3+0x1e>
    1cf8:	55 23       	and	r21, r21
    1cfa:	91 f3       	breq	.-28     	; 0x1ce0 <__divsf3+0x1a>
    1cfc:	95 1b       	sub	r25, r21
    1cfe:	55 0b       	sbc	r21, r21
    1d00:	bb 27       	eor	r27, r27
    1d02:	aa 27       	eor	r26, r26
    1d04:	62 17       	cp	r22, r18
    1d06:	73 07       	cpc	r23, r19
    1d08:	84 07       	cpc	r24, r20
    1d0a:	38 f0       	brcs	.+14     	; 0x1d1a <__divsf3_pse+0x26>
    1d0c:	9f 5f       	subi	r25, 0xFF	; 255
    1d0e:	5f 4f       	sbci	r21, 0xFF	; 255
    1d10:	22 0f       	add	r18, r18
    1d12:	33 1f       	adc	r19, r19
    1d14:	44 1f       	adc	r20, r20
    1d16:	aa 1f       	adc	r26, r26
    1d18:	a9 f3       	breq	.-22     	; 0x1d04 <__divsf3_pse+0x10>
    1d1a:	35 d0       	rcall	.+106    	; 0x1d86 <__divsf3_pse+0x92>
    1d1c:	0e 2e       	mov	r0, r30
    1d1e:	3a f0       	brmi	.+14     	; 0x1d2e <__divsf3_pse+0x3a>
    1d20:	e0 e8       	ldi	r30, 0x80	; 128
    1d22:	32 d0       	rcall	.+100    	; 0x1d88 <__divsf3_pse+0x94>
    1d24:	91 50       	subi	r25, 0x01	; 1
    1d26:	50 40       	sbci	r21, 0x00	; 0
    1d28:	e6 95       	lsr	r30
    1d2a:	00 1c       	adc	r0, r0
    1d2c:	ca f7       	brpl	.-14     	; 0x1d20 <__divsf3_pse+0x2c>
    1d2e:	2b d0       	rcall	.+86     	; 0x1d86 <__divsf3_pse+0x92>
    1d30:	fe 2f       	mov	r31, r30
    1d32:	29 d0       	rcall	.+82     	; 0x1d86 <__divsf3_pse+0x92>
    1d34:	66 0f       	add	r22, r22
    1d36:	77 1f       	adc	r23, r23
    1d38:	88 1f       	adc	r24, r24
    1d3a:	bb 1f       	adc	r27, r27
    1d3c:	26 17       	cp	r18, r22
    1d3e:	37 07       	cpc	r19, r23
    1d40:	48 07       	cpc	r20, r24
    1d42:	ab 07       	cpc	r26, r27
    1d44:	b0 e8       	ldi	r27, 0x80	; 128
    1d46:	09 f0       	breq	.+2      	; 0x1d4a <__divsf3_pse+0x56>
    1d48:	bb 0b       	sbc	r27, r27
    1d4a:	80 2d       	mov	r24, r0
    1d4c:	bf 01       	movw	r22, r30
    1d4e:	ff 27       	eor	r31, r31
    1d50:	93 58       	subi	r25, 0x83	; 131
    1d52:	5f 4f       	sbci	r21, 0xFF	; 255
    1d54:	3a f0       	brmi	.+14     	; 0x1d64 <__divsf3_pse+0x70>
    1d56:	9e 3f       	cpi	r25, 0xFE	; 254
    1d58:	51 05       	cpc	r21, r1
    1d5a:	78 f0       	brcs	.+30     	; 0x1d7a <__divsf3_pse+0x86>
    1d5c:	0c 94 6c 0f 	jmp	0x1ed8	; 0x1ed8 <__fp_inf>
    1d60:	0c 94 b7 0f 	jmp	0x1f6e	; 0x1f6e <__fp_szero>
    1d64:	5f 3f       	cpi	r21, 0xFF	; 255
    1d66:	e4 f3       	brlt	.-8      	; 0x1d60 <__divsf3_pse+0x6c>
    1d68:	98 3e       	cpi	r25, 0xE8	; 232
    1d6a:	d4 f3       	brlt	.-12     	; 0x1d60 <__divsf3_pse+0x6c>
    1d6c:	86 95       	lsr	r24
    1d6e:	77 95       	ror	r23
    1d70:	67 95       	ror	r22
    1d72:	b7 95       	ror	r27
    1d74:	f7 95       	ror	r31
    1d76:	9f 5f       	subi	r25, 0xFF	; 255
    1d78:	c9 f7       	brne	.-14     	; 0x1d6c <__divsf3_pse+0x78>
    1d7a:	88 0f       	add	r24, r24
    1d7c:	91 1d       	adc	r25, r1
    1d7e:	96 95       	lsr	r25
    1d80:	87 95       	ror	r24
    1d82:	97 f9       	bld	r25, 7
    1d84:	08 95       	ret
    1d86:	e1 e0       	ldi	r30, 0x01	; 1
    1d88:	66 0f       	add	r22, r22
    1d8a:	77 1f       	adc	r23, r23
    1d8c:	88 1f       	adc	r24, r24
    1d8e:	bb 1f       	adc	r27, r27
    1d90:	62 17       	cp	r22, r18
    1d92:	73 07       	cpc	r23, r19
    1d94:	84 07       	cpc	r24, r20
    1d96:	ba 07       	cpc	r27, r26
    1d98:	20 f0       	brcs	.+8      	; 0x1da2 <__divsf3_pse+0xae>
    1d9a:	62 1b       	sub	r22, r18
    1d9c:	73 0b       	sbc	r23, r19
    1d9e:	84 0b       	sbc	r24, r20
    1da0:	ba 0b       	sbc	r27, r26
    1da2:	ee 1f       	adc	r30, r30
    1da4:	88 f7       	brcc	.-30     	; 0x1d88 <__divsf3_pse+0x94>
    1da6:	e0 95       	com	r30
    1da8:	08 95       	ret

00001daa <__fixsfsi>:
    1daa:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <__fixunssfsi>
    1dae:	68 94       	set
    1db0:	b1 11       	cpse	r27, r1
    1db2:	0c 94 b7 0f 	jmp	0x1f6e	; 0x1f6e <__fp_szero>
    1db6:	08 95       	ret

00001db8 <__fixunssfsi>:
    1db8:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <__fp_splitA>
    1dbc:	88 f0       	brcs	.+34     	; 0x1de0 <__fixunssfsi+0x28>
    1dbe:	9f 57       	subi	r25, 0x7F	; 127
    1dc0:	98 f0       	brcs	.+38     	; 0x1de8 <__fixunssfsi+0x30>
    1dc2:	b9 2f       	mov	r27, r25
    1dc4:	99 27       	eor	r25, r25
    1dc6:	b7 51       	subi	r27, 0x17	; 23
    1dc8:	b0 f0       	brcs	.+44     	; 0x1df6 <__fixunssfsi+0x3e>
    1dca:	e1 f0       	breq	.+56     	; 0x1e04 <__fixunssfsi+0x4c>
    1dcc:	66 0f       	add	r22, r22
    1dce:	77 1f       	adc	r23, r23
    1dd0:	88 1f       	adc	r24, r24
    1dd2:	99 1f       	adc	r25, r25
    1dd4:	1a f0       	brmi	.+6      	; 0x1ddc <__fixunssfsi+0x24>
    1dd6:	ba 95       	dec	r27
    1dd8:	c9 f7       	brne	.-14     	; 0x1dcc <__fixunssfsi+0x14>
    1dda:	14 c0       	rjmp	.+40     	; 0x1e04 <__fixunssfsi+0x4c>
    1ddc:	b1 30       	cpi	r27, 0x01	; 1
    1dde:	91 f0       	breq	.+36     	; 0x1e04 <__fixunssfsi+0x4c>
    1de0:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <__fp_zero>
    1de4:	b1 e0       	ldi	r27, 0x01	; 1
    1de6:	08 95       	ret
    1de8:	0c 94 b6 0f 	jmp	0x1f6c	; 0x1f6c <__fp_zero>
    1dec:	67 2f       	mov	r22, r23
    1dee:	78 2f       	mov	r23, r24
    1df0:	88 27       	eor	r24, r24
    1df2:	b8 5f       	subi	r27, 0xF8	; 248
    1df4:	39 f0       	breq	.+14     	; 0x1e04 <__fixunssfsi+0x4c>
    1df6:	b9 3f       	cpi	r27, 0xF9	; 249
    1df8:	cc f3       	brlt	.-14     	; 0x1dec <__fixunssfsi+0x34>
    1dfa:	86 95       	lsr	r24
    1dfc:	77 95       	ror	r23
    1dfe:	67 95       	ror	r22
    1e00:	b3 95       	inc	r27
    1e02:	d9 f7       	brne	.-10     	; 0x1dfa <__fixunssfsi+0x42>
    1e04:	3e f4       	brtc	.+14     	; 0x1e14 <__fixunssfsi+0x5c>
    1e06:	90 95       	com	r25
    1e08:	80 95       	com	r24
    1e0a:	70 95       	com	r23
    1e0c:	61 95       	neg	r22
    1e0e:	7f 4f       	sbci	r23, 0xFF	; 255
    1e10:	8f 4f       	sbci	r24, 0xFF	; 255
    1e12:	9f 4f       	sbci	r25, 0xFF	; 255
    1e14:	08 95       	ret

00001e16 <__floatunsisf>:
    1e16:	e8 94       	clt
    1e18:	09 c0       	rjmp	.+18     	; 0x1e2c <__floatsisf+0x12>

00001e1a <__floatsisf>:
    1e1a:	97 fb       	bst	r25, 7
    1e1c:	3e f4       	brtc	.+14     	; 0x1e2c <__floatsisf+0x12>
    1e1e:	90 95       	com	r25
    1e20:	80 95       	com	r24
    1e22:	70 95       	com	r23
    1e24:	61 95       	neg	r22
    1e26:	7f 4f       	sbci	r23, 0xFF	; 255
    1e28:	8f 4f       	sbci	r24, 0xFF	; 255
    1e2a:	9f 4f       	sbci	r25, 0xFF	; 255
    1e2c:	99 23       	and	r25, r25
    1e2e:	a9 f0       	breq	.+42     	; 0x1e5a <__floatsisf+0x40>
    1e30:	f9 2f       	mov	r31, r25
    1e32:	96 e9       	ldi	r25, 0x96	; 150
    1e34:	bb 27       	eor	r27, r27
    1e36:	93 95       	inc	r25
    1e38:	f6 95       	lsr	r31
    1e3a:	87 95       	ror	r24
    1e3c:	77 95       	ror	r23
    1e3e:	67 95       	ror	r22
    1e40:	b7 95       	ror	r27
    1e42:	f1 11       	cpse	r31, r1
    1e44:	f8 cf       	rjmp	.-16     	; 0x1e36 <__floatsisf+0x1c>
    1e46:	fa f4       	brpl	.+62     	; 0x1e86 <__floatsisf+0x6c>
    1e48:	bb 0f       	add	r27, r27
    1e4a:	11 f4       	brne	.+4      	; 0x1e50 <__floatsisf+0x36>
    1e4c:	60 ff       	sbrs	r22, 0
    1e4e:	1b c0       	rjmp	.+54     	; 0x1e86 <__floatsisf+0x6c>
    1e50:	6f 5f       	subi	r22, 0xFF	; 255
    1e52:	7f 4f       	sbci	r23, 0xFF	; 255
    1e54:	8f 4f       	sbci	r24, 0xFF	; 255
    1e56:	9f 4f       	sbci	r25, 0xFF	; 255
    1e58:	16 c0       	rjmp	.+44     	; 0x1e86 <__floatsisf+0x6c>
    1e5a:	88 23       	and	r24, r24
    1e5c:	11 f0       	breq	.+4      	; 0x1e62 <__floatsisf+0x48>
    1e5e:	96 e9       	ldi	r25, 0x96	; 150
    1e60:	11 c0       	rjmp	.+34     	; 0x1e84 <__floatsisf+0x6a>
    1e62:	77 23       	and	r23, r23
    1e64:	21 f0       	breq	.+8      	; 0x1e6e <__floatsisf+0x54>
    1e66:	9e e8       	ldi	r25, 0x8E	; 142
    1e68:	87 2f       	mov	r24, r23
    1e6a:	76 2f       	mov	r23, r22
    1e6c:	05 c0       	rjmp	.+10     	; 0x1e78 <__floatsisf+0x5e>
    1e6e:	66 23       	and	r22, r22
    1e70:	71 f0       	breq	.+28     	; 0x1e8e <__floatsisf+0x74>
    1e72:	96 e8       	ldi	r25, 0x86	; 134
    1e74:	86 2f       	mov	r24, r22
    1e76:	70 e0       	ldi	r23, 0x00	; 0
    1e78:	60 e0       	ldi	r22, 0x00	; 0
    1e7a:	2a f0       	brmi	.+10     	; 0x1e86 <__floatsisf+0x6c>
    1e7c:	9a 95       	dec	r25
    1e7e:	66 0f       	add	r22, r22
    1e80:	77 1f       	adc	r23, r23
    1e82:	88 1f       	adc	r24, r24
    1e84:	da f7       	brpl	.-10     	; 0x1e7c <__floatsisf+0x62>
    1e86:	88 0f       	add	r24, r24
    1e88:	96 95       	lsr	r25
    1e8a:	87 95       	ror	r24
    1e8c:	97 f9       	bld	r25, 7
    1e8e:	08 95       	ret

00001e90 <__fp_cmp>:
    1e90:	99 0f       	add	r25, r25
    1e92:	00 08       	sbc	r0, r0
    1e94:	55 0f       	add	r21, r21
    1e96:	aa 0b       	sbc	r26, r26
    1e98:	e0 e8       	ldi	r30, 0x80	; 128
    1e9a:	fe ef       	ldi	r31, 0xFE	; 254
    1e9c:	16 16       	cp	r1, r22
    1e9e:	17 06       	cpc	r1, r23
    1ea0:	e8 07       	cpc	r30, r24
    1ea2:	f9 07       	cpc	r31, r25
    1ea4:	c0 f0       	brcs	.+48     	; 0x1ed6 <__fp_cmp+0x46>
    1ea6:	12 16       	cp	r1, r18
    1ea8:	13 06       	cpc	r1, r19
    1eaa:	e4 07       	cpc	r30, r20
    1eac:	f5 07       	cpc	r31, r21
    1eae:	98 f0       	brcs	.+38     	; 0x1ed6 <__fp_cmp+0x46>
    1eb0:	62 1b       	sub	r22, r18
    1eb2:	73 0b       	sbc	r23, r19
    1eb4:	84 0b       	sbc	r24, r20
    1eb6:	95 0b       	sbc	r25, r21
    1eb8:	39 f4       	brne	.+14     	; 0x1ec8 <__fp_cmp+0x38>
    1eba:	0a 26       	eor	r0, r26
    1ebc:	61 f0       	breq	.+24     	; 0x1ed6 <__fp_cmp+0x46>
    1ebe:	23 2b       	or	r18, r19
    1ec0:	24 2b       	or	r18, r20
    1ec2:	25 2b       	or	r18, r21
    1ec4:	21 f4       	brne	.+8      	; 0x1ece <__fp_cmp+0x3e>
    1ec6:	08 95       	ret
    1ec8:	0a 26       	eor	r0, r26
    1eca:	09 f4       	brne	.+2      	; 0x1ece <__fp_cmp+0x3e>
    1ecc:	a1 40       	sbci	r26, 0x01	; 1
    1ece:	a6 95       	lsr	r26
    1ed0:	8f ef       	ldi	r24, 0xFF	; 255
    1ed2:	81 1d       	adc	r24, r1
    1ed4:	81 1d       	adc	r24, r1
    1ed6:	08 95       	ret

00001ed8 <__fp_inf>:
    1ed8:	97 f9       	bld	r25, 7
    1eda:	9f 67       	ori	r25, 0x7F	; 127
    1edc:	80 e8       	ldi	r24, 0x80	; 128
    1ede:	70 e0       	ldi	r23, 0x00	; 0
    1ee0:	60 e0       	ldi	r22, 0x00	; 0
    1ee2:	08 95       	ret

00001ee4 <__fp_nan>:
    1ee4:	9f ef       	ldi	r25, 0xFF	; 255
    1ee6:	80 ec       	ldi	r24, 0xC0	; 192
    1ee8:	08 95       	ret

00001eea <__fp_pscA>:
    1eea:	00 24       	eor	r0, r0
    1eec:	0a 94       	dec	r0
    1eee:	16 16       	cp	r1, r22
    1ef0:	17 06       	cpc	r1, r23
    1ef2:	18 06       	cpc	r1, r24
    1ef4:	09 06       	cpc	r0, r25
    1ef6:	08 95       	ret

00001ef8 <__fp_pscB>:
    1ef8:	00 24       	eor	r0, r0
    1efa:	0a 94       	dec	r0
    1efc:	12 16       	cp	r1, r18
    1efe:	13 06       	cpc	r1, r19
    1f00:	14 06       	cpc	r1, r20
    1f02:	05 06       	cpc	r0, r21
    1f04:	08 95       	ret

00001f06 <__fp_round>:
    1f06:	09 2e       	mov	r0, r25
    1f08:	03 94       	inc	r0
    1f0a:	00 0c       	add	r0, r0
    1f0c:	11 f4       	brne	.+4      	; 0x1f12 <__fp_round+0xc>
    1f0e:	88 23       	and	r24, r24
    1f10:	52 f0       	brmi	.+20     	; 0x1f26 <__fp_round+0x20>
    1f12:	bb 0f       	add	r27, r27
    1f14:	40 f4       	brcc	.+16     	; 0x1f26 <__fp_round+0x20>
    1f16:	bf 2b       	or	r27, r31
    1f18:	11 f4       	brne	.+4      	; 0x1f1e <__fp_round+0x18>
    1f1a:	60 ff       	sbrs	r22, 0
    1f1c:	04 c0       	rjmp	.+8      	; 0x1f26 <__fp_round+0x20>
    1f1e:	6f 5f       	subi	r22, 0xFF	; 255
    1f20:	7f 4f       	sbci	r23, 0xFF	; 255
    1f22:	8f 4f       	sbci	r24, 0xFF	; 255
    1f24:	9f 4f       	sbci	r25, 0xFF	; 255
    1f26:	08 95       	ret

00001f28 <__fp_split3>:
    1f28:	57 fd       	sbrc	r21, 7
    1f2a:	90 58       	subi	r25, 0x80	; 128
    1f2c:	44 0f       	add	r20, r20
    1f2e:	55 1f       	adc	r21, r21
    1f30:	59 f0       	breq	.+22     	; 0x1f48 <__fp_splitA+0x10>
    1f32:	5f 3f       	cpi	r21, 0xFF	; 255
    1f34:	71 f0       	breq	.+28     	; 0x1f52 <__fp_splitA+0x1a>
    1f36:	47 95       	ror	r20

00001f38 <__fp_splitA>:
    1f38:	88 0f       	add	r24, r24
    1f3a:	97 fb       	bst	r25, 7
    1f3c:	99 1f       	adc	r25, r25
    1f3e:	61 f0       	breq	.+24     	; 0x1f58 <__fp_splitA+0x20>
    1f40:	9f 3f       	cpi	r25, 0xFF	; 255
    1f42:	79 f0       	breq	.+30     	; 0x1f62 <__fp_splitA+0x2a>
    1f44:	87 95       	ror	r24
    1f46:	08 95       	ret
    1f48:	12 16       	cp	r1, r18
    1f4a:	13 06       	cpc	r1, r19
    1f4c:	14 06       	cpc	r1, r20
    1f4e:	55 1f       	adc	r21, r21
    1f50:	f2 cf       	rjmp	.-28     	; 0x1f36 <__fp_split3+0xe>
    1f52:	46 95       	lsr	r20
    1f54:	f1 df       	rcall	.-30     	; 0x1f38 <__fp_splitA>
    1f56:	08 c0       	rjmp	.+16     	; 0x1f68 <__fp_splitA+0x30>
    1f58:	16 16       	cp	r1, r22
    1f5a:	17 06       	cpc	r1, r23
    1f5c:	18 06       	cpc	r1, r24
    1f5e:	99 1f       	adc	r25, r25
    1f60:	f1 cf       	rjmp	.-30     	; 0x1f44 <__fp_splitA+0xc>
    1f62:	86 95       	lsr	r24
    1f64:	71 05       	cpc	r23, r1
    1f66:	61 05       	cpc	r22, r1
    1f68:	08 94       	sec
    1f6a:	08 95       	ret

00001f6c <__fp_zero>:
    1f6c:	e8 94       	clt

00001f6e <__fp_szero>:
    1f6e:	bb 27       	eor	r27, r27
    1f70:	66 27       	eor	r22, r22
    1f72:	77 27       	eor	r23, r23
    1f74:	cb 01       	movw	r24, r22
    1f76:	97 f9       	bld	r25, 7
    1f78:	08 95       	ret

00001f7a <__gesf2>:
    1f7a:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <__fp_cmp>
    1f7e:	08 f4       	brcc	.+2      	; 0x1f82 <__gesf2+0x8>
    1f80:	8f ef       	ldi	r24, 0xFF	; 255
    1f82:	08 95       	ret

00001f84 <__mulsf3>:
    1f84:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <__mulsf3x>
    1f88:	0c 94 83 0f 	jmp	0x1f06	; 0x1f06 <__fp_round>
    1f8c:	0e 94 75 0f 	call	0x1eea	; 0x1eea <__fp_pscA>
    1f90:	38 f0       	brcs	.+14     	; 0x1fa0 <__mulsf3+0x1c>
    1f92:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <__fp_pscB>
    1f96:	20 f0       	brcs	.+8      	; 0x1fa0 <__mulsf3+0x1c>
    1f98:	95 23       	and	r25, r21
    1f9a:	11 f0       	breq	.+4      	; 0x1fa0 <__mulsf3+0x1c>
    1f9c:	0c 94 6c 0f 	jmp	0x1ed8	; 0x1ed8 <__fp_inf>
    1fa0:	0c 94 72 0f 	jmp	0x1ee4	; 0x1ee4 <__fp_nan>
    1fa4:	11 24       	eor	r1, r1
    1fa6:	0c 94 b7 0f 	jmp	0x1f6e	; 0x1f6e <__fp_szero>

00001faa <__mulsf3x>:
    1faa:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <__fp_split3>
    1fae:	70 f3       	brcs	.-36     	; 0x1f8c <__mulsf3+0x8>

00001fb0 <__mulsf3_pse>:
    1fb0:	95 9f       	mul	r25, r21
    1fb2:	c1 f3       	breq	.-16     	; 0x1fa4 <__mulsf3+0x20>
    1fb4:	95 0f       	add	r25, r21
    1fb6:	50 e0       	ldi	r21, 0x00	; 0
    1fb8:	55 1f       	adc	r21, r21
    1fba:	62 9f       	mul	r22, r18
    1fbc:	f0 01       	movw	r30, r0
    1fbe:	72 9f       	mul	r23, r18
    1fc0:	bb 27       	eor	r27, r27
    1fc2:	f0 0d       	add	r31, r0
    1fc4:	b1 1d       	adc	r27, r1
    1fc6:	63 9f       	mul	r22, r19
    1fc8:	aa 27       	eor	r26, r26
    1fca:	f0 0d       	add	r31, r0
    1fcc:	b1 1d       	adc	r27, r1
    1fce:	aa 1f       	adc	r26, r26
    1fd0:	64 9f       	mul	r22, r20
    1fd2:	66 27       	eor	r22, r22
    1fd4:	b0 0d       	add	r27, r0
    1fd6:	a1 1d       	adc	r26, r1
    1fd8:	66 1f       	adc	r22, r22
    1fda:	82 9f       	mul	r24, r18
    1fdc:	22 27       	eor	r18, r18
    1fde:	b0 0d       	add	r27, r0
    1fe0:	a1 1d       	adc	r26, r1
    1fe2:	62 1f       	adc	r22, r18
    1fe4:	73 9f       	mul	r23, r19
    1fe6:	b0 0d       	add	r27, r0
    1fe8:	a1 1d       	adc	r26, r1
    1fea:	62 1f       	adc	r22, r18
    1fec:	83 9f       	mul	r24, r19
    1fee:	a0 0d       	add	r26, r0
    1ff0:	61 1d       	adc	r22, r1
    1ff2:	22 1f       	adc	r18, r18
    1ff4:	74 9f       	mul	r23, r20
    1ff6:	33 27       	eor	r19, r19
    1ff8:	a0 0d       	add	r26, r0
    1ffa:	61 1d       	adc	r22, r1
    1ffc:	23 1f       	adc	r18, r19
    1ffe:	84 9f       	mul	r24, r20
    2000:	60 0d       	add	r22, r0
    2002:	21 1d       	adc	r18, r1
    2004:	82 2f       	mov	r24, r18
    2006:	76 2f       	mov	r23, r22
    2008:	6a 2f       	mov	r22, r26
    200a:	11 24       	eor	r1, r1
    200c:	9f 57       	subi	r25, 0x7F	; 127
    200e:	50 40       	sbci	r21, 0x00	; 0
    2010:	9a f0       	brmi	.+38     	; 0x2038 <__mulsf3_pse+0x88>
    2012:	f1 f0       	breq	.+60     	; 0x2050 <__mulsf3_pse+0xa0>
    2014:	88 23       	and	r24, r24
    2016:	4a f0       	brmi	.+18     	; 0x202a <__mulsf3_pse+0x7a>
    2018:	ee 0f       	add	r30, r30
    201a:	ff 1f       	adc	r31, r31
    201c:	bb 1f       	adc	r27, r27
    201e:	66 1f       	adc	r22, r22
    2020:	77 1f       	adc	r23, r23
    2022:	88 1f       	adc	r24, r24
    2024:	91 50       	subi	r25, 0x01	; 1
    2026:	50 40       	sbci	r21, 0x00	; 0
    2028:	a9 f7       	brne	.-22     	; 0x2014 <__mulsf3_pse+0x64>
    202a:	9e 3f       	cpi	r25, 0xFE	; 254
    202c:	51 05       	cpc	r21, r1
    202e:	80 f0       	brcs	.+32     	; 0x2050 <__mulsf3_pse+0xa0>
    2030:	0c 94 6c 0f 	jmp	0x1ed8	; 0x1ed8 <__fp_inf>
    2034:	0c 94 b7 0f 	jmp	0x1f6e	; 0x1f6e <__fp_szero>
    2038:	5f 3f       	cpi	r21, 0xFF	; 255
    203a:	e4 f3       	brlt	.-8      	; 0x2034 <__mulsf3_pse+0x84>
    203c:	98 3e       	cpi	r25, 0xE8	; 232
    203e:	d4 f3       	brlt	.-12     	; 0x2034 <__mulsf3_pse+0x84>
    2040:	86 95       	lsr	r24
    2042:	77 95       	ror	r23
    2044:	67 95       	ror	r22
    2046:	b7 95       	ror	r27
    2048:	f7 95       	ror	r31
    204a:	e7 95       	ror	r30
    204c:	9f 5f       	subi	r25, 0xFF	; 255
    204e:	c1 f7       	brne	.-16     	; 0x2040 <__mulsf3_pse+0x90>
    2050:	fe 2b       	or	r31, r30
    2052:	88 0f       	add	r24, r24
    2054:	91 1d       	adc	r25, r1
    2056:	96 95       	lsr	r25
    2058:	87 95       	ror	r24
    205a:	97 f9       	bld	r25, 7
    205c:	08 95       	ret

0000205e <__divmodhi4>:
    205e:	97 fb       	bst	r25, 7
    2060:	07 2e       	mov	r0, r23
    2062:	16 f4       	brtc	.+4      	; 0x2068 <__divmodhi4+0xa>
    2064:	00 94       	com	r0
    2066:	07 d0       	rcall	.+14     	; 0x2076 <__divmodhi4_neg1>
    2068:	77 fd       	sbrc	r23, 7
    206a:	09 d0       	rcall	.+18     	; 0x207e <__divmodhi4_neg2>
    206c:	0e 94 49 10 	call	0x2092	; 0x2092 <__udivmodhi4>
    2070:	07 fc       	sbrc	r0, 7
    2072:	05 d0       	rcall	.+10     	; 0x207e <__divmodhi4_neg2>
    2074:	3e f4       	brtc	.+14     	; 0x2084 <__divmodhi4_exit>

00002076 <__divmodhi4_neg1>:
    2076:	90 95       	com	r25
    2078:	81 95       	neg	r24
    207a:	9f 4f       	sbci	r25, 0xFF	; 255
    207c:	08 95       	ret

0000207e <__divmodhi4_neg2>:
    207e:	70 95       	com	r23
    2080:	61 95       	neg	r22
    2082:	7f 4f       	sbci	r23, 0xFF	; 255

00002084 <__divmodhi4_exit>:
    2084:	08 95       	ret

00002086 <__tablejump2__>:
    2086:	ee 0f       	add	r30, r30
    2088:	ff 1f       	adc	r31, r31
    208a:	05 90       	lpm	r0, Z+
    208c:	f4 91       	lpm	r31, Z
    208e:	e0 2d       	mov	r30, r0
    2090:	09 94       	ijmp

00002092 <__udivmodhi4>:
    2092:	aa 1b       	sub	r26, r26
    2094:	bb 1b       	sub	r27, r27
    2096:	51 e1       	ldi	r21, 0x11	; 17
    2098:	07 c0       	rjmp	.+14     	; 0x20a8 <__udivmodhi4_ep>

0000209a <__udivmodhi4_loop>:
    209a:	aa 1f       	adc	r26, r26
    209c:	bb 1f       	adc	r27, r27
    209e:	a6 17       	cp	r26, r22
    20a0:	b7 07       	cpc	r27, r23
    20a2:	10 f0       	brcs	.+4      	; 0x20a8 <__udivmodhi4_ep>
    20a4:	a6 1b       	sub	r26, r22
    20a6:	b7 0b       	sbc	r27, r23

000020a8 <__udivmodhi4_ep>:
    20a8:	88 1f       	adc	r24, r24
    20aa:	99 1f       	adc	r25, r25
    20ac:	5a 95       	dec	r21
    20ae:	a9 f7       	brne	.-22     	; 0x209a <__udivmodhi4_loop>
    20b0:	80 95       	com	r24
    20b2:	90 95       	com	r25
    20b4:	bc 01       	movw	r22, r24
    20b6:	cd 01       	movw	r24, r26
    20b8:	08 95       	ret

000020ba <dtostrf>:
    20ba:	ef 92       	push	r14
    20bc:	0f 93       	push	r16
    20be:	1f 93       	push	r17
    20c0:	cf 93       	push	r28
    20c2:	df 93       	push	r29
    20c4:	e8 01       	movw	r28, r16
    20c6:	47 fd       	sbrc	r20, 7
    20c8:	02 c0       	rjmp	.+4      	; 0x20ce <dtostrf+0x14>
    20ca:	34 e0       	ldi	r19, 0x04	; 4
    20cc:	01 c0       	rjmp	.+2      	; 0x20d0 <dtostrf+0x16>
    20ce:	34 e1       	ldi	r19, 0x14	; 20
    20d0:	04 2e       	mov	r0, r20
    20d2:	00 0c       	add	r0, r0
    20d4:	55 0b       	sbc	r21, r21
    20d6:	57 ff       	sbrs	r21, 7
    20d8:	03 c0       	rjmp	.+6      	; 0x20e0 <dtostrf+0x26>
    20da:	51 95       	neg	r21
    20dc:	41 95       	neg	r20
    20de:	51 09       	sbc	r21, r1
    20e0:	e3 2e       	mov	r14, r19
    20e2:	02 2f       	mov	r16, r18
    20e4:	24 2f       	mov	r18, r20
    20e6:	ae 01       	movw	r20, r28
    20e8:	0e 94 fc 13 	call	0x27f8	; 0x27f8 <dtoa_prf>
    20ec:	ce 01       	movw	r24, r28
    20ee:	df 91       	pop	r29
    20f0:	cf 91       	pop	r28
    20f2:	1f 91       	pop	r17
    20f4:	0f 91       	pop	r16
    20f6:	ef 90       	pop	r14
    20f8:	08 95       	ret

000020fa <malloc>:
    20fa:	0f 93       	push	r16
    20fc:	1f 93       	push	r17
    20fe:	cf 93       	push	r28
    2100:	df 93       	push	r29
    2102:	82 30       	cpi	r24, 0x02	; 2
    2104:	91 05       	cpc	r25, r1
    2106:	10 f4       	brcc	.+4      	; 0x210c <malloc+0x12>
    2108:	82 e0       	ldi	r24, 0x02	; 2
    210a:	90 e0       	ldi	r25, 0x00	; 0
    210c:	e0 91 ca 04 	lds	r30, 0x04CA	; 0x8004ca <__flp>
    2110:	f0 91 cb 04 	lds	r31, 0x04CB	; 0x8004cb <__flp+0x1>
    2114:	20 e0       	ldi	r18, 0x00	; 0
    2116:	30 e0       	ldi	r19, 0x00	; 0
    2118:	a0 e0       	ldi	r26, 0x00	; 0
    211a:	b0 e0       	ldi	r27, 0x00	; 0
    211c:	30 97       	sbiw	r30, 0x00	; 0
    211e:	19 f1       	breq	.+70     	; 0x2166 <malloc+0x6c>
    2120:	40 81       	ld	r20, Z
    2122:	51 81       	ldd	r21, Z+1	; 0x01
    2124:	02 81       	ldd	r16, Z+2	; 0x02
    2126:	13 81       	ldd	r17, Z+3	; 0x03
    2128:	48 17       	cp	r20, r24
    212a:	59 07       	cpc	r21, r25
    212c:	c8 f0       	brcs	.+50     	; 0x2160 <malloc+0x66>
    212e:	84 17       	cp	r24, r20
    2130:	95 07       	cpc	r25, r21
    2132:	69 f4       	brne	.+26     	; 0x214e <malloc+0x54>
    2134:	10 97       	sbiw	r26, 0x00	; 0
    2136:	31 f0       	breq	.+12     	; 0x2144 <malloc+0x4a>
    2138:	12 96       	adiw	r26, 0x02	; 2
    213a:	0c 93       	st	X, r16
    213c:	12 97       	sbiw	r26, 0x02	; 2
    213e:	13 96       	adiw	r26, 0x03	; 3
    2140:	1c 93       	st	X, r17
    2142:	27 c0       	rjmp	.+78     	; 0x2192 <malloc+0x98>
    2144:	00 93 ca 04 	sts	0x04CA, r16	; 0x8004ca <__flp>
    2148:	10 93 cb 04 	sts	0x04CB, r17	; 0x8004cb <__flp+0x1>
    214c:	22 c0       	rjmp	.+68     	; 0x2192 <malloc+0x98>
    214e:	21 15       	cp	r18, r1
    2150:	31 05       	cpc	r19, r1
    2152:	19 f0       	breq	.+6      	; 0x215a <malloc+0x60>
    2154:	42 17       	cp	r20, r18
    2156:	53 07       	cpc	r21, r19
    2158:	18 f4       	brcc	.+6      	; 0x2160 <malloc+0x66>
    215a:	9a 01       	movw	r18, r20
    215c:	bd 01       	movw	r22, r26
    215e:	ef 01       	movw	r28, r30
    2160:	df 01       	movw	r26, r30
    2162:	f8 01       	movw	r30, r16
    2164:	db cf       	rjmp	.-74     	; 0x211c <malloc+0x22>
    2166:	21 15       	cp	r18, r1
    2168:	31 05       	cpc	r19, r1
    216a:	f9 f0       	breq	.+62     	; 0x21aa <malloc+0xb0>
    216c:	28 1b       	sub	r18, r24
    216e:	39 0b       	sbc	r19, r25
    2170:	24 30       	cpi	r18, 0x04	; 4
    2172:	31 05       	cpc	r19, r1
    2174:	80 f4       	brcc	.+32     	; 0x2196 <malloc+0x9c>
    2176:	8a 81       	ldd	r24, Y+2	; 0x02
    2178:	9b 81       	ldd	r25, Y+3	; 0x03
    217a:	61 15       	cp	r22, r1
    217c:	71 05       	cpc	r23, r1
    217e:	21 f0       	breq	.+8      	; 0x2188 <malloc+0x8e>
    2180:	fb 01       	movw	r30, r22
    2182:	93 83       	std	Z+3, r25	; 0x03
    2184:	82 83       	std	Z+2, r24	; 0x02
    2186:	04 c0       	rjmp	.+8      	; 0x2190 <malloc+0x96>
    2188:	90 93 cb 04 	sts	0x04CB, r25	; 0x8004cb <__flp+0x1>
    218c:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__flp>
    2190:	fe 01       	movw	r30, r28
    2192:	32 96       	adiw	r30, 0x02	; 2
    2194:	44 c0       	rjmp	.+136    	; 0x221e <malloc+0x124>
    2196:	fe 01       	movw	r30, r28
    2198:	e2 0f       	add	r30, r18
    219a:	f3 1f       	adc	r31, r19
    219c:	81 93       	st	Z+, r24
    219e:	91 93       	st	Z+, r25
    21a0:	22 50       	subi	r18, 0x02	; 2
    21a2:	31 09       	sbc	r19, r1
    21a4:	39 83       	std	Y+1, r19	; 0x01
    21a6:	28 83       	st	Y, r18
    21a8:	3a c0       	rjmp	.+116    	; 0x221e <malloc+0x124>
    21aa:	20 91 c8 04 	lds	r18, 0x04C8	; 0x8004c8 <__brkval>
    21ae:	30 91 c9 04 	lds	r19, 0x04C9	; 0x8004c9 <__brkval+0x1>
    21b2:	23 2b       	or	r18, r19
    21b4:	41 f4       	brne	.+16     	; 0x21c6 <malloc+0xcc>
    21b6:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    21ba:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    21be:	30 93 c9 04 	sts	0x04C9, r19	; 0x8004c9 <__brkval+0x1>
    21c2:	20 93 c8 04 	sts	0x04C8, r18	; 0x8004c8 <__brkval>
    21c6:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    21ca:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    21ce:	21 15       	cp	r18, r1
    21d0:	31 05       	cpc	r19, r1
    21d2:	41 f4       	brne	.+16     	; 0x21e4 <malloc+0xea>
    21d4:	2d b7       	in	r18, 0x3d	; 61
    21d6:	3e b7       	in	r19, 0x3e	; 62
    21d8:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    21dc:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    21e0:	24 1b       	sub	r18, r20
    21e2:	35 0b       	sbc	r19, r21
    21e4:	e0 91 c8 04 	lds	r30, 0x04C8	; 0x8004c8 <__brkval>
    21e8:	f0 91 c9 04 	lds	r31, 0x04C9	; 0x8004c9 <__brkval+0x1>
    21ec:	e2 17       	cp	r30, r18
    21ee:	f3 07       	cpc	r31, r19
    21f0:	a0 f4       	brcc	.+40     	; 0x221a <malloc+0x120>
    21f2:	2e 1b       	sub	r18, r30
    21f4:	3f 0b       	sbc	r19, r31
    21f6:	28 17       	cp	r18, r24
    21f8:	39 07       	cpc	r19, r25
    21fa:	78 f0       	brcs	.+30     	; 0x221a <malloc+0x120>
    21fc:	ac 01       	movw	r20, r24
    21fe:	4e 5f       	subi	r20, 0xFE	; 254
    2200:	5f 4f       	sbci	r21, 0xFF	; 255
    2202:	24 17       	cp	r18, r20
    2204:	35 07       	cpc	r19, r21
    2206:	48 f0       	brcs	.+18     	; 0x221a <malloc+0x120>
    2208:	4e 0f       	add	r20, r30
    220a:	5f 1f       	adc	r21, r31
    220c:	50 93 c9 04 	sts	0x04C9, r21	; 0x8004c9 <__brkval+0x1>
    2210:	40 93 c8 04 	sts	0x04C8, r20	; 0x8004c8 <__brkval>
    2214:	81 93       	st	Z+, r24
    2216:	91 93       	st	Z+, r25
    2218:	02 c0       	rjmp	.+4      	; 0x221e <malloc+0x124>
    221a:	e0 e0       	ldi	r30, 0x00	; 0
    221c:	f0 e0       	ldi	r31, 0x00	; 0
    221e:	cf 01       	movw	r24, r30
    2220:	df 91       	pop	r29
    2222:	cf 91       	pop	r28
    2224:	1f 91       	pop	r17
    2226:	0f 91       	pop	r16
    2228:	08 95       	ret

0000222a <free>:
    222a:	cf 93       	push	r28
    222c:	df 93       	push	r29
    222e:	00 97       	sbiw	r24, 0x00	; 0
    2230:	09 f4       	brne	.+2      	; 0x2234 <free+0xa>
    2232:	81 c0       	rjmp	.+258    	; 0x2336 <free+0x10c>
    2234:	fc 01       	movw	r30, r24
    2236:	32 97       	sbiw	r30, 0x02	; 2
    2238:	13 82       	std	Z+3, r1	; 0x03
    223a:	12 82       	std	Z+2, r1	; 0x02
    223c:	a0 91 ca 04 	lds	r26, 0x04CA	; 0x8004ca <__flp>
    2240:	b0 91 cb 04 	lds	r27, 0x04CB	; 0x8004cb <__flp+0x1>
    2244:	10 97       	sbiw	r26, 0x00	; 0
    2246:	81 f4       	brne	.+32     	; 0x2268 <free+0x3e>
    2248:	20 81       	ld	r18, Z
    224a:	31 81       	ldd	r19, Z+1	; 0x01
    224c:	82 0f       	add	r24, r18
    224e:	93 1f       	adc	r25, r19
    2250:	20 91 c8 04 	lds	r18, 0x04C8	; 0x8004c8 <__brkval>
    2254:	30 91 c9 04 	lds	r19, 0x04C9	; 0x8004c9 <__brkval+0x1>
    2258:	28 17       	cp	r18, r24
    225a:	39 07       	cpc	r19, r25
    225c:	51 f5       	brne	.+84     	; 0x22b2 <free+0x88>
    225e:	f0 93 c9 04 	sts	0x04C9, r31	; 0x8004c9 <__brkval+0x1>
    2262:	e0 93 c8 04 	sts	0x04C8, r30	; 0x8004c8 <__brkval>
    2266:	67 c0       	rjmp	.+206    	; 0x2336 <free+0x10c>
    2268:	ed 01       	movw	r28, r26
    226a:	20 e0       	ldi	r18, 0x00	; 0
    226c:	30 e0       	ldi	r19, 0x00	; 0
    226e:	ce 17       	cp	r28, r30
    2270:	df 07       	cpc	r29, r31
    2272:	40 f4       	brcc	.+16     	; 0x2284 <free+0x5a>
    2274:	4a 81       	ldd	r20, Y+2	; 0x02
    2276:	5b 81       	ldd	r21, Y+3	; 0x03
    2278:	9e 01       	movw	r18, r28
    227a:	41 15       	cp	r20, r1
    227c:	51 05       	cpc	r21, r1
    227e:	f1 f0       	breq	.+60     	; 0x22bc <free+0x92>
    2280:	ea 01       	movw	r28, r20
    2282:	f5 cf       	rjmp	.-22     	; 0x226e <free+0x44>
    2284:	d3 83       	std	Z+3, r29	; 0x03
    2286:	c2 83       	std	Z+2, r28	; 0x02
    2288:	40 81       	ld	r20, Z
    228a:	51 81       	ldd	r21, Z+1	; 0x01
    228c:	84 0f       	add	r24, r20
    228e:	95 1f       	adc	r25, r21
    2290:	c8 17       	cp	r28, r24
    2292:	d9 07       	cpc	r29, r25
    2294:	59 f4       	brne	.+22     	; 0x22ac <free+0x82>
    2296:	88 81       	ld	r24, Y
    2298:	99 81       	ldd	r25, Y+1	; 0x01
    229a:	84 0f       	add	r24, r20
    229c:	95 1f       	adc	r25, r21
    229e:	02 96       	adiw	r24, 0x02	; 2
    22a0:	91 83       	std	Z+1, r25	; 0x01
    22a2:	80 83       	st	Z, r24
    22a4:	8a 81       	ldd	r24, Y+2	; 0x02
    22a6:	9b 81       	ldd	r25, Y+3	; 0x03
    22a8:	93 83       	std	Z+3, r25	; 0x03
    22aa:	82 83       	std	Z+2, r24	; 0x02
    22ac:	21 15       	cp	r18, r1
    22ae:	31 05       	cpc	r19, r1
    22b0:	29 f4       	brne	.+10     	; 0x22bc <free+0x92>
    22b2:	f0 93 cb 04 	sts	0x04CB, r31	; 0x8004cb <__flp+0x1>
    22b6:	e0 93 ca 04 	sts	0x04CA, r30	; 0x8004ca <__flp>
    22ba:	3d c0       	rjmp	.+122    	; 0x2336 <free+0x10c>
    22bc:	e9 01       	movw	r28, r18
    22be:	fb 83       	std	Y+3, r31	; 0x03
    22c0:	ea 83       	std	Y+2, r30	; 0x02
    22c2:	49 91       	ld	r20, Y+
    22c4:	59 91       	ld	r21, Y+
    22c6:	c4 0f       	add	r28, r20
    22c8:	d5 1f       	adc	r29, r21
    22ca:	ec 17       	cp	r30, r28
    22cc:	fd 07       	cpc	r31, r29
    22ce:	61 f4       	brne	.+24     	; 0x22e8 <free+0xbe>
    22d0:	80 81       	ld	r24, Z
    22d2:	91 81       	ldd	r25, Z+1	; 0x01
    22d4:	84 0f       	add	r24, r20
    22d6:	95 1f       	adc	r25, r21
    22d8:	02 96       	adiw	r24, 0x02	; 2
    22da:	e9 01       	movw	r28, r18
    22dc:	99 83       	std	Y+1, r25	; 0x01
    22de:	88 83       	st	Y, r24
    22e0:	82 81       	ldd	r24, Z+2	; 0x02
    22e2:	93 81       	ldd	r25, Z+3	; 0x03
    22e4:	9b 83       	std	Y+3, r25	; 0x03
    22e6:	8a 83       	std	Y+2, r24	; 0x02
    22e8:	e0 e0       	ldi	r30, 0x00	; 0
    22ea:	f0 e0       	ldi	r31, 0x00	; 0
    22ec:	12 96       	adiw	r26, 0x02	; 2
    22ee:	8d 91       	ld	r24, X+
    22f0:	9c 91       	ld	r25, X
    22f2:	13 97       	sbiw	r26, 0x03	; 3
    22f4:	00 97       	sbiw	r24, 0x00	; 0
    22f6:	19 f0       	breq	.+6      	; 0x22fe <free+0xd4>
    22f8:	fd 01       	movw	r30, r26
    22fa:	dc 01       	movw	r26, r24
    22fc:	f7 cf       	rjmp	.-18     	; 0x22ec <free+0xc2>
    22fe:	8d 91       	ld	r24, X+
    2300:	9c 91       	ld	r25, X
    2302:	11 97       	sbiw	r26, 0x01	; 1
    2304:	9d 01       	movw	r18, r26
    2306:	2e 5f       	subi	r18, 0xFE	; 254
    2308:	3f 4f       	sbci	r19, 0xFF	; 255
    230a:	82 0f       	add	r24, r18
    230c:	93 1f       	adc	r25, r19
    230e:	20 91 c8 04 	lds	r18, 0x04C8	; 0x8004c8 <__brkval>
    2312:	30 91 c9 04 	lds	r19, 0x04C9	; 0x8004c9 <__brkval+0x1>
    2316:	28 17       	cp	r18, r24
    2318:	39 07       	cpc	r19, r25
    231a:	69 f4       	brne	.+26     	; 0x2336 <free+0x10c>
    231c:	30 97       	sbiw	r30, 0x00	; 0
    231e:	29 f4       	brne	.+10     	; 0x232a <free+0x100>
    2320:	10 92 cb 04 	sts	0x04CB, r1	; 0x8004cb <__flp+0x1>
    2324:	10 92 ca 04 	sts	0x04CA, r1	; 0x8004ca <__flp>
    2328:	02 c0       	rjmp	.+4      	; 0x232e <free+0x104>
    232a:	13 82       	std	Z+3, r1	; 0x03
    232c:	12 82       	std	Z+2, r1	; 0x02
    232e:	b0 93 c9 04 	sts	0x04C9, r27	; 0x8004c9 <__brkval+0x1>
    2332:	a0 93 c8 04 	sts	0x04C8, r26	; 0x8004c8 <__brkval>
    2336:	df 91       	pop	r29
    2338:	cf 91       	pop	r28
    233a:	08 95       	ret

0000233c <strcpy>:
    233c:	fb 01       	movw	r30, r22
    233e:	dc 01       	movw	r26, r24
    2340:	01 90       	ld	r0, Z+
    2342:	0d 92       	st	X+, r0
    2344:	00 20       	and	r0, r0
    2346:	e1 f7       	brne	.-8      	; 0x2340 <strcpy+0x4>
    2348:	08 95       	ret

0000234a <printf>:
    234a:	a0 e0       	ldi	r26, 0x00	; 0
    234c:	b0 e0       	ldi	r27, 0x00	; 0
    234e:	eb ea       	ldi	r30, 0xAB	; 171
    2350:	f1 e1       	ldi	r31, 0x11	; 17
    2352:	0c 94 ee 16 	jmp	0x2ddc	; 0x2ddc <__prologue_saves__+0x20>
    2356:	ae 01       	movw	r20, r28
    2358:	4b 5f       	subi	r20, 0xFB	; 251
    235a:	5f 4f       	sbci	r21, 0xFF	; 255
    235c:	fa 01       	movw	r30, r20
    235e:	61 91       	ld	r22, Z+
    2360:	71 91       	ld	r23, Z+
    2362:	af 01       	movw	r20, r30
    2364:	80 91 ce 04 	lds	r24, 0x04CE	; 0x8004ce <__iob+0x2>
    2368:	90 91 cf 04 	lds	r25, 0x04CF	; 0x8004cf <__iob+0x3>
    236c:	0e 94 1b 12 	call	0x2436	; 0x2436 <vfprintf>
    2370:	e2 e0       	ldi	r30, 0x02	; 2
    2372:	0c 94 0a 17 	jmp	0x2e14	; 0x2e14 <__epilogue_restores__+0x20>

00002376 <puts>:
    2376:	0f 93       	push	r16
    2378:	1f 93       	push	r17
    237a:	cf 93       	push	r28
    237c:	df 93       	push	r29
    237e:	e0 91 ce 04 	lds	r30, 0x04CE	; 0x8004ce <__iob+0x2>
    2382:	f0 91 cf 04 	lds	r31, 0x04CF	; 0x8004cf <__iob+0x3>
    2386:	23 81       	ldd	r18, Z+3	; 0x03
    2388:	21 ff       	sbrs	r18, 1
    238a:	1b c0       	rjmp	.+54     	; 0x23c2 <puts+0x4c>
    238c:	8c 01       	movw	r16, r24
    238e:	d0 e0       	ldi	r29, 0x00	; 0
    2390:	c0 e0       	ldi	r28, 0x00	; 0
    2392:	f8 01       	movw	r30, r16
    2394:	81 91       	ld	r24, Z+
    2396:	8f 01       	movw	r16, r30
    2398:	60 91 ce 04 	lds	r22, 0x04CE	; 0x8004ce <__iob+0x2>
    239c:	70 91 cf 04 	lds	r23, 0x04CF	; 0x8004cf <__iob+0x3>
    23a0:	db 01       	movw	r26, r22
    23a2:	18 96       	adiw	r26, 0x08	; 8
    23a4:	ed 91       	ld	r30, X+
    23a6:	fc 91       	ld	r31, X
    23a8:	19 97       	sbiw	r26, 0x09	; 9
    23aa:	88 23       	and	r24, r24
    23ac:	31 f0       	breq	.+12     	; 0x23ba <puts+0x44>
    23ae:	09 95       	icall
    23b0:	89 2b       	or	r24, r25
    23b2:	79 f3       	breq	.-34     	; 0x2392 <puts+0x1c>
    23b4:	df ef       	ldi	r29, 0xFF	; 255
    23b6:	cf ef       	ldi	r28, 0xFF	; 255
    23b8:	ec cf       	rjmp	.-40     	; 0x2392 <puts+0x1c>
    23ba:	8a e0       	ldi	r24, 0x0A	; 10
    23bc:	09 95       	icall
    23be:	89 2b       	or	r24, r25
    23c0:	19 f0       	breq	.+6      	; 0x23c8 <puts+0x52>
    23c2:	8f ef       	ldi	r24, 0xFF	; 255
    23c4:	9f ef       	ldi	r25, 0xFF	; 255
    23c6:	02 c0       	rjmp	.+4      	; 0x23cc <puts+0x56>
    23c8:	8d 2f       	mov	r24, r29
    23ca:	9c 2f       	mov	r25, r28
    23cc:	df 91       	pop	r29
    23ce:	cf 91       	pop	r28
    23d0:	1f 91       	pop	r17
    23d2:	0f 91       	pop	r16
    23d4:	08 95       	ret

000023d6 <snprintf>:
    23d6:	ae e0       	ldi	r26, 0x0E	; 14
    23d8:	b0 e0       	ldi	r27, 0x00	; 0
    23da:	e1 ef       	ldi	r30, 0xF1	; 241
    23dc:	f1 e1       	ldi	r31, 0x11	; 17
    23de:	0c 94 ec 16 	jmp	0x2dd8	; 0x2dd8 <__prologue_saves__+0x1c>
    23e2:	0d 89       	ldd	r16, Y+21	; 0x15
    23e4:	1e 89       	ldd	r17, Y+22	; 0x16
    23e6:	8f 89       	ldd	r24, Y+23	; 0x17
    23e8:	98 8d       	ldd	r25, Y+24	; 0x18
    23ea:	26 e0       	ldi	r18, 0x06	; 6
    23ec:	2c 83       	std	Y+4, r18	; 0x04
    23ee:	1a 83       	std	Y+2, r17	; 0x02
    23f0:	09 83       	std	Y+1, r16	; 0x01
    23f2:	97 ff       	sbrs	r25, 7
    23f4:	02 c0       	rjmp	.+4      	; 0x23fa <snprintf+0x24>
    23f6:	80 e0       	ldi	r24, 0x00	; 0
    23f8:	90 e8       	ldi	r25, 0x80	; 128
    23fa:	01 97       	sbiw	r24, 0x01	; 1
    23fc:	9e 83       	std	Y+6, r25	; 0x06
    23fe:	8d 83       	std	Y+5, r24	; 0x05
    2400:	ae 01       	movw	r20, r28
    2402:	45 5e       	subi	r20, 0xE5	; 229
    2404:	5f 4f       	sbci	r21, 0xFF	; 255
    2406:	69 8d       	ldd	r22, Y+25	; 0x19
    2408:	7a 8d       	ldd	r23, Y+26	; 0x1a
    240a:	ce 01       	movw	r24, r28
    240c:	01 96       	adiw	r24, 0x01	; 1
    240e:	0e 94 1b 12 	call	0x2436	; 0x2436 <vfprintf>
    2412:	4d 81       	ldd	r20, Y+5	; 0x05
    2414:	5e 81       	ldd	r21, Y+6	; 0x06
    2416:	57 fd       	sbrc	r21, 7
    2418:	0a c0       	rjmp	.+20     	; 0x242e <snprintf+0x58>
    241a:	2f 81       	ldd	r18, Y+7	; 0x07
    241c:	38 85       	ldd	r19, Y+8	; 0x08
    241e:	42 17       	cp	r20, r18
    2420:	53 07       	cpc	r21, r19
    2422:	0c f4       	brge	.+2      	; 0x2426 <snprintf+0x50>
    2424:	9a 01       	movw	r18, r20
    2426:	f8 01       	movw	r30, r16
    2428:	e2 0f       	add	r30, r18
    242a:	f3 1f       	adc	r31, r19
    242c:	10 82       	st	Z, r1
    242e:	2e 96       	adiw	r28, 0x0e	; 14
    2430:	e4 e0       	ldi	r30, 0x04	; 4
    2432:	0c 94 08 17 	jmp	0x2e10	; 0x2e10 <__epilogue_restores__+0x1c>

00002436 <vfprintf>:
    2436:	ab e0       	ldi	r26, 0x0B	; 11
    2438:	b0 e0       	ldi	r27, 0x00	; 0
    243a:	e1 e2       	ldi	r30, 0x21	; 33
    243c:	f2 e1       	ldi	r31, 0x12	; 18
    243e:	0c 94 de 16 	jmp	0x2dbc	; 0x2dbc <__prologue_saves__>
    2442:	6c 01       	movw	r12, r24
    2444:	7b 01       	movw	r14, r22
    2446:	8a 01       	movw	r16, r20
    2448:	fc 01       	movw	r30, r24
    244a:	17 82       	std	Z+7, r1	; 0x07
    244c:	16 82       	std	Z+6, r1	; 0x06
    244e:	83 81       	ldd	r24, Z+3	; 0x03
    2450:	81 ff       	sbrs	r24, 1
    2452:	cc c1       	rjmp	.+920    	; 0x27ec <vfprintf+0x3b6>
    2454:	ce 01       	movw	r24, r28
    2456:	01 96       	adiw	r24, 0x01	; 1
    2458:	3c 01       	movw	r6, r24
    245a:	f6 01       	movw	r30, r12
    245c:	93 81       	ldd	r25, Z+3	; 0x03
    245e:	f7 01       	movw	r30, r14
    2460:	93 fd       	sbrc	r25, 3
    2462:	85 91       	lpm	r24, Z+
    2464:	93 ff       	sbrs	r25, 3
    2466:	81 91       	ld	r24, Z+
    2468:	7f 01       	movw	r14, r30
    246a:	88 23       	and	r24, r24
    246c:	09 f4       	brne	.+2      	; 0x2470 <vfprintf+0x3a>
    246e:	ba c1       	rjmp	.+884    	; 0x27e4 <vfprintf+0x3ae>
    2470:	85 32       	cpi	r24, 0x25	; 37
    2472:	39 f4       	brne	.+14     	; 0x2482 <vfprintf+0x4c>
    2474:	93 fd       	sbrc	r25, 3
    2476:	85 91       	lpm	r24, Z+
    2478:	93 ff       	sbrs	r25, 3
    247a:	81 91       	ld	r24, Z+
    247c:	7f 01       	movw	r14, r30
    247e:	85 32       	cpi	r24, 0x25	; 37
    2480:	29 f4       	brne	.+10     	; 0x248c <vfprintf+0x56>
    2482:	b6 01       	movw	r22, r12
    2484:	90 e0       	ldi	r25, 0x00	; 0
    2486:	0e 94 44 16 	call	0x2c88	; 0x2c88 <fputc>
    248a:	e7 cf       	rjmp	.-50     	; 0x245a <vfprintf+0x24>
    248c:	91 2c       	mov	r9, r1
    248e:	21 2c       	mov	r2, r1
    2490:	31 2c       	mov	r3, r1
    2492:	ff e1       	ldi	r31, 0x1F	; 31
    2494:	f3 15       	cp	r31, r3
    2496:	d8 f0       	brcs	.+54     	; 0x24ce <vfprintf+0x98>
    2498:	8b 32       	cpi	r24, 0x2B	; 43
    249a:	79 f0       	breq	.+30     	; 0x24ba <vfprintf+0x84>
    249c:	38 f4       	brcc	.+14     	; 0x24ac <vfprintf+0x76>
    249e:	80 32       	cpi	r24, 0x20	; 32
    24a0:	79 f0       	breq	.+30     	; 0x24c0 <vfprintf+0x8a>
    24a2:	83 32       	cpi	r24, 0x23	; 35
    24a4:	a1 f4       	brne	.+40     	; 0x24ce <vfprintf+0x98>
    24a6:	23 2d       	mov	r18, r3
    24a8:	20 61       	ori	r18, 0x10	; 16
    24aa:	1d c0       	rjmp	.+58     	; 0x24e6 <vfprintf+0xb0>
    24ac:	8d 32       	cpi	r24, 0x2D	; 45
    24ae:	61 f0       	breq	.+24     	; 0x24c8 <vfprintf+0x92>
    24b0:	80 33       	cpi	r24, 0x30	; 48
    24b2:	69 f4       	brne	.+26     	; 0x24ce <vfprintf+0x98>
    24b4:	23 2d       	mov	r18, r3
    24b6:	21 60       	ori	r18, 0x01	; 1
    24b8:	16 c0       	rjmp	.+44     	; 0x24e6 <vfprintf+0xb0>
    24ba:	83 2d       	mov	r24, r3
    24bc:	82 60       	ori	r24, 0x02	; 2
    24be:	38 2e       	mov	r3, r24
    24c0:	e3 2d       	mov	r30, r3
    24c2:	e4 60       	ori	r30, 0x04	; 4
    24c4:	3e 2e       	mov	r3, r30
    24c6:	2a c0       	rjmp	.+84     	; 0x251c <vfprintf+0xe6>
    24c8:	f3 2d       	mov	r31, r3
    24ca:	f8 60       	ori	r31, 0x08	; 8
    24cc:	1d c0       	rjmp	.+58     	; 0x2508 <vfprintf+0xd2>
    24ce:	37 fc       	sbrc	r3, 7
    24d0:	2d c0       	rjmp	.+90     	; 0x252c <vfprintf+0xf6>
    24d2:	20 ed       	ldi	r18, 0xD0	; 208
    24d4:	28 0f       	add	r18, r24
    24d6:	2a 30       	cpi	r18, 0x0A	; 10
    24d8:	40 f0       	brcs	.+16     	; 0x24ea <vfprintf+0xb4>
    24da:	8e 32       	cpi	r24, 0x2E	; 46
    24dc:	b9 f4       	brne	.+46     	; 0x250c <vfprintf+0xd6>
    24de:	36 fc       	sbrc	r3, 6
    24e0:	81 c1       	rjmp	.+770    	; 0x27e4 <vfprintf+0x3ae>
    24e2:	23 2d       	mov	r18, r3
    24e4:	20 64       	ori	r18, 0x40	; 64
    24e6:	32 2e       	mov	r3, r18
    24e8:	19 c0       	rjmp	.+50     	; 0x251c <vfprintf+0xe6>
    24ea:	36 fe       	sbrs	r3, 6
    24ec:	06 c0       	rjmp	.+12     	; 0x24fa <vfprintf+0xc4>
    24ee:	8a e0       	ldi	r24, 0x0A	; 10
    24f0:	98 9e       	mul	r9, r24
    24f2:	20 0d       	add	r18, r0
    24f4:	11 24       	eor	r1, r1
    24f6:	92 2e       	mov	r9, r18
    24f8:	11 c0       	rjmp	.+34     	; 0x251c <vfprintf+0xe6>
    24fa:	ea e0       	ldi	r30, 0x0A	; 10
    24fc:	2e 9e       	mul	r2, r30
    24fe:	20 0d       	add	r18, r0
    2500:	11 24       	eor	r1, r1
    2502:	22 2e       	mov	r2, r18
    2504:	f3 2d       	mov	r31, r3
    2506:	f0 62       	ori	r31, 0x20	; 32
    2508:	3f 2e       	mov	r3, r31
    250a:	08 c0       	rjmp	.+16     	; 0x251c <vfprintf+0xe6>
    250c:	8c 36       	cpi	r24, 0x6C	; 108
    250e:	21 f4       	brne	.+8      	; 0x2518 <vfprintf+0xe2>
    2510:	83 2d       	mov	r24, r3
    2512:	80 68       	ori	r24, 0x80	; 128
    2514:	38 2e       	mov	r3, r24
    2516:	02 c0       	rjmp	.+4      	; 0x251c <vfprintf+0xe6>
    2518:	88 36       	cpi	r24, 0x68	; 104
    251a:	41 f4       	brne	.+16     	; 0x252c <vfprintf+0xf6>
    251c:	f7 01       	movw	r30, r14
    251e:	93 fd       	sbrc	r25, 3
    2520:	85 91       	lpm	r24, Z+
    2522:	93 ff       	sbrs	r25, 3
    2524:	81 91       	ld	r24, Z+
    2526:	7f 01       	movw	r14, r30
    2528:	81 11       	cpse	r24, r1
    252a:	b3 cf       	rjmp	.-154    	; 0x2492 <vfprintf+0x5c>
    252c:	98 2f       	mov	r25, r24
    252e:	9f 7d       	andi	r25, 0xDF	; 223
    2530:	95 54       	subi	r25, 0x45	; 69
    2532:	93 30       	cpi	r25, 0x03	; 3
    2534:	28 f4       	brcc	.+10     	; 0x2540 <vfprintf+0x10a>
    2536:	0c 5f       	subi	r16, 0xFC	; 252
    2538:	1f 4f       	sbci	r17, 0xFF	; 255
    253a:	9f e3       	ldi	r25, 0x3F	; 63
    253c:	99 83       	std	Y+1, r25	; 0x01
    253e:	0d c0       	rjmp	.+26     	; 0x255a <vfprintf+0x124>
    2540:	83 36       	cpi	r24, 0x63	; 99
    2542:	31 f0       	breq	.+12     	; 0x2550 <vfprintf+0x11a>
    2544:	83 37       	cpi	r24, 0x73	; 115
    2546:	71 f0       	breq	.+28     	; 0x2564 <vfprintf+0x12e>
    2548:	83 35       	cpi	r24, 0x53	; 83
    254a:	09 f0       	breq	.+2      	; 0x254e <vfprintf+0x118>
    254c:	59 c0       	rjmp	.+178    	; 0x2600 <vfprintf+0x1ca>
    254e:	21 c0       	rjmp	.+66     	; 0x2592 <vfprintf+0x15c>
    2550:	f8 01       	movw	r30, r16
    2552:	80 81       	ld	r24, Z
    2554:	89 83       	std	Y+1, r24	; 0x01
    2556:	0e 5f       	subi	r16, 0xFE	; 254
    2558:	1f 4f       	sbci	r17, 0xFF	; 255
    255a:	88 24       	eor	r8, r8
    255c:	83 94       	inc	r8
    255e:	91 2c       	mov	r9, r1
    2560:	53 01       	movw	r10, r6
    2562:	13 c0       	rjmp	.+38     	; 0x258a <vfprintf+0x154>
    2564:	28 01       	movw	r4, r16
    2566:	f2 e0       	ldi	r31, 0x02	; 2
    2568:	4f 0e       	add	r4, r31
    256a:	51 1c       	adc	r5, r1
    256c:	f8 01       	movw	r30, r16
    256e:	a0 80       	ld	r10, Z
    2570:	b1 80       	ldd	r11, Z+1	; 0x01
    2572:	36 fe       	sbrs	r3, 6
    2574:	03 c0       	rjmp	.+6      	; 0x257c <vfprintf+0x146>
    2576:	69 2d       	mov	r22, r9
    2578:	70 e0       	ldi	r23, 0x00	; 0
    257a:	02 c0       	rjmp	.+4      	; 0x2580 <vfprintf+0x14a>
    257c:	6f ef       	ldi	r22, 0xFF	; 255
    257e:	7f ef       	ldi	r23, 0xFF	; 255
    2580:	c5 01       	movw	r24, r10
    2582:	0e 94 39 16 	call	0x2c72	; 0x2c72 <strnlen>
    2586:	4c 01       	movw	r8, r24
    2588:	82 01       	movw	r16, r4
    258a:	f3 2d       	mov	r31, r3
    258c:	ff 77       	andi	r31, 0x7F	; 127
    258e:	3f 2e       	mov	r3, r31
    2590:	16 c0       	rjmp	.+44     	; 0x25be <vfprintf+0x188>
    2592:	28 01       	movw	r4, r16
    2594:	22 e0       	ldi	r18, 0x02	; 2
    2596:	42 0e       	add	r4, r18
    2598:	51 1c       	adc	r5, r1
    259a:	f8 01       	movw	r30, r16
    259c:	a0 80       	ld	r10, Z
    259e:	b1 80       	ldd	r11, Z+1	; 0x01
    25a0:	36 fe       	sbrs	r3, 6
    25a2:	03 c0       	rjmp	.+6      	; 0x25aa <vfprintf+0x174>
    25a4:	69 2d       	mov	r22, r9
    25a6:	70 e0       	ldi	r23, 0x00	; 0
    25a8:	02 c0       	rjmp	.+4      	; 0x25ae <vfprintf+0x178>
    25aa:	6f ef       	ldi	r22, 0xFF	; 255
    25ac:	7f ef       	ldi	r23, 0xFF	; 255
    25ae:	c5 01       	movw	r24, r10
    25b0:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <strnlen_P>
    25b4:	4c 01       	movw	r8, r24
    25b6:	f3 2d       	mov	r31, r3
    25b8:	f0 68       	ori	r31, 0x80	; 128
    25ba:	3f 2e       	mov	r3, r31
    25bc:	82 01       	movw	r16, r4
    25be:	33 fc       	sbrc	r3, 3
    25c0:	1b c0       	rjmp	.+54     	; 0x25f8 <vfprintf+0x1c2>
    25c2:	82 2d       	mov	r24, r2
    25c4:	90 e0       	ldi	r25, 0x00	; 0
    25c6:	88 16       	cp	r8, r24
    25c8:	99 06       	cpc	r9, r25
    25ca:	b0 f4       	brcc	.+44     	; 0x25f8 <vfprintf+0x1c2>
    25cc:	b6 01       	movw	r22, r12
    25ce:	80 e2       	ldi	r24, 0x20	; 32
    25d0:	90 e0       	ldi	r25, 0x00	; 0
    25d2:	0e 94 44 16 	call	0x2c88	; 0x2c88 <fputc>
    25d6:	2a 94       	dec	r2
    25d8:	f4 cf       	rjmp	.-24     	; 0x25c2 <vfprintf+0x18c>
    25da:	f5 01       	movw	r30, r10
    25dc:	37 fc       	sbrc	r3, 7
    25de:	85 91       	lpm	r24, Z+
    25e0:	37 fe       	sbrs	r3, 7
    25e2:	81 91       	ld	r24, Z+
    25e4:	5f 01       	movw	r10, r30
    25e6:	b6 01       	movw	r22, r12
    25e8:	90 e0       	ldi	r25, 0x00	; 0
    25ea:	0e 94 44 16 	call	0x2c88	; 0x2c88 <fputc>
    25ee:	21 10       	cpse	r2, r1
    25f0:	2a 94       	dec	r2
    25f2:	21 e0       	ldi	r18, 0x01	; 1
    25f4:	82 1a       	sub	r8, r18
    25f6:	91 08       	sbc	r9, r1
    25f8:	81 14       	cp	r8, r1
    25fa:	91 04       	cpc	r9, r1
    25fc:	71 f7       	brne	.-36     	; 0x25da <vfprintf+0x1a4>
    25fe:	e8 c0       	rjmp	.+464    	; 0x27d0 <vfprintf+0x39a>
    2600:	84 36       	cpi	r24, 0x64	; 100
    2602:	11 f0       	breq	.+4      	; 0x2608 <vfprintf+0x1d2>
    2604:	89 36       	cpi	r24, 0x69	; 105
    2606:	41 f5       	brne	.+80     	; 0x2658 <vfprintf+0x222>
    2608:	f8 01       	movw	r30, r16
    260a:	37 fe       	sbrs	r3, 7
    260c:	07 c0       	rjmp	.+14     	; 0x261c <vfprintf+0x1e6>
    260e:	60 81       	ld	r22, Z
    2610:	71 81       	ldd	r23, Z+1	; 0x01
    2612:	82 81       	ldd	r24, Z+2	; 0x02
    2614:	93 81       	ldd	r25, Z+3	; 0x03
    2616:	0c 5f       	subi	r16, 0xFC	; 252
    2618:	1f 4f       	sbci	r17, 0xFF	; 255
    261a:	08 c0       	rjmp	.+16     	; 0x262c <vfprintf+0x1f6>
    261c:	60 81       	ld	r22, Z
    261e:	71 81       	ldd	r23, Z+1	; 0x01
    2620:	07 2e       	mov	r0, r23
    2622:	00 0c       	add	r0, r0
    2624:	88 0b       	sbc	r24, r24
    2626:	99 0b       	sbc	r25, r25
    2628:	0e 5f       	subi	r16, 0xFE	; 254
    262a:	1f 4f       	sbci	r17, 0xFF	; 255
    262c:	f3 2d       	mov	r31, r3
    262e:	ff 76       	andi	r31, 0x6F	; 111
    2630:	3f 2e       	mov	r3, r31
    2632:	97 ff       	sbrs	r25, 7
    2634:	09 c0       	rjmp	.+18     	; 0x2648 <vfprintf+0x212>
    2636:	90 95       	com	r25
    2638:	80 95       	com	r24
    263a:	70 95       	com	r23
    263c:	61 95       	neg	r22
    263e:	7f 4f       	sbci	r23, 0xFF	; 255
    2640:	8f 4f       	sbci	r24, 0xFF	; 255
    2642:	9f 4f       	sbci	r25, 0xFF	; 255
    2644:	f0 68       	ori	r31, 0x80	; 128
    2646:	3f 2e       	mov	r3, r31
    2648:	2a e0       	ldi	r18, 0x0A	; 10
    264a:	30 e0       	ldi	r19, 0x00	; 0
    264c:	a3 01       	movw	r20, r6
    264e:	0e 94 80 16 	call	0x2d00	; 0x2d00 <__ultoa_invert>
    2652:	88 2e       	mov	r8, r24
    2654:	86 18       	sub	r8, r6
    2656:	45 c0       	rjmp	.+138    	; 0x26e2 <vfprintf+0x2ac>
    2658:	85 37       	cpi	r24, 0x75	; 117
    265a:	31 f4       	brne	.+12     	; 0x2668 <vfprintf+0x232>
    265c:	23 2d       	mov	r18, r3
    265e:	2f 7e       	andi	r18, 0xEF	; 239
    2660:	b2 2e       	mov	r11, r18
    2662:	2a e0       	ldi	r18, 0x0A	; 10
    2664:	30 e0       	ldi	r19, 0x00	; 0
    2666:	25 c0       	rjmp	.+74     	; 0x26b2 <vfprintf+0x27c>
    2668:	93 2d       	mov	r25, r3
    266a:	99 7f       	andi	r25, 0xF9	; 249
    266c:	b9 2e       	mov	r11, r25
    266e:	8f 36       	cpi	r24, 0x6F	; 111
    2670:	c1 f0       	breq	.+48     	; 0x26a2 <vfprintf+0x26c>
    2672:	18 f4       	brcc	.+6      	; 0x267a <vfprintf+0x244>
    2674:	88 35       	cpi	r24, 0x58	; 88
    2676:	79 f0       	breq	.+30     	; 0x2696 <vfprintf+0x260>
    2678:	b5 c0       	rjmp	.+362    	; 0x27e4 <vfprintf+0x3ae>
    267a:	80 37       	cpi	r24, 0x70	; 112
    267c:	19 f0       	breq	.+6      	; 0x2684 <vfprintf+0x24e>
    267e:	88 37       	cpi	r24, 0x78	; 120
    2680:	21 f0       	breq	.+8      	; 0x268a <vfprintf+0x254>
    2682:	b0 c0       	rjmp	.+352    	; 0x27e4 <vfprintf+0x3ae>
    2684:	e9 2f       	mov	r30, r25
    2686:	e0 61       	ori	r30, 0x10	; 16
    2688:	be 2e       	mov	r11, r30
    268a:	b4 fe       	sbrs	r11, 4
    268c:	0d c0       	rjmp	.+26     	; 0x26a8 <vfprintf+0x272>
    268e:	fb 2d       	mov	r31, r11
    2690:	f4 60       	ori	r31, 0x04	; 4
    2692:	bf 2e       	mov	r11, r31
    2694:	09 c0       	rjmp	.+18     	; 0x26a8 <vfprintf+0x272>
    2696:	34 fe       	sbrs	r3, 4
    2698:	0a c0       	rjmp	.+20     	; 0x26ae <vfprintf+0x278>
    269a:	29 2f       	mov	r18, r25
    269c:	26 60       	ori	r18, 0x06	; 6
    269e:	b2 2e       	mov	r11, r18
    26a0:	06 c0       	rjmp	.+12     	; 0x26ae <vfprintf+0x278>
    26a2:	28 e0       	ldi	r18, 0x08	; 8
    26a4:	30 e0       	ldi	r19, 0x00	; 0
    26a6:	05 c0       	rjmp	.+10     	; 0x26b2 <vfprintf+0x27c>
    26a8:	20 e1       	ldi	r18, 0x10	; 16
    26aa:	30 e0       	ldi	r19, 0x00	; 0
    26ac:	02 c0       	rjmp	.+4      	; 0x26b2 <vfprintf+0x27c>
    26ae:	20 e1       	ldi	r18, 0x10	; 16
    26b0:	32 e0       	ldi	r19, 0x02	; 2
    26b2:	f8 01       	movw	r30, r16
    26b4:	b7 fe       	sbrs	r11, 7
    26b6:	07 c0       	rjmp	.+14     	; 0x26c6 <vfprintf+0x290>
    26b8:	60 81       	ld	r22, Z
    26ba:	71 81       	ldd	r23, Z+1	; 0x01
    26bc:	82 81       	ldd	r24, Z+2	; 0x02
    26be:	93 81       	ldd	r25, Z+3	; 0x03
    26c0:	0c 5f       	subi	r16, 0xFC	; 252
    26c2:	1f 4f       	sbci	r17, 0xFF	; 255
    26c4:	06 c0       	rjmp	.+12     	; 0x26d2 <vfprintf+0x29c>
    26c6:	60 81       	ld	r22, Z
    26c8:	71 81       	ldd	r23, Z+1	; 0x01
    26ca:	80 e0       	ldi	r24, 0x00	; 0
    26cc:	90 e0       	ldi	r25, 0x00	; 0
    26ce:	0e 5f       	subi	r16, 0xFE	; 254
    26d0:	1f 4f       	sbci	r17, 0xFF	; 255
    26d2:	a3 01       	movw	r20, r6
    26d4:	0e 94 80 16 	call	0x2d00	; 0x2d00 <__ultoa_invert>
    26d8:	88 2e       	mov	r8, r24
    26da:	86 18       	sub	r8, r6
    26dc:	fb 2d       	mov	r31, r11
    26de:	ff 77       	andi	r31, 0x7F	; 127
    26e0:	3f 2e       	mov	r3, r31
    26e2:	36 fe       	sbrs	r3, 6
    26e4:	0d c0       	rjmp	.+26     	; 0x2700 <vfprintf+0x2ca>
    26e6:	23 2d       	mov	r18, r3
    26e8:	2e 7f       	andi	r18, 0xFE	; 254
    26ea:	a2 2e       	mov	r10, r18
    26ec:	89 14       	cp	r8, r9
    26ee:	58 f4       	brcc	.+22     	; 0x2706 <vfprintf+0x2d0>
    26f0:	34 fe       	sbrs	r3, 4
    26f2:	0b c0       	rjmp	.+22     	; 0x270a <vfprintf+0x2d4>
    26f4:	32 fc       	sbrc	r3, 2
    26f6:	09 c0       	rjmp	.+18     	; 0x270a <vfprintf+0x2d4>
    26f8:	83 2d       	mov	r24, r3
    26fa:	8e 7e       	andi	r24, 0xEE	; 238
    26fc:	a8 2e       	mov	r10, r24
    26fe:	05 c0       	rjmp	.+10     	; 0x270a <vfprintf+0x2d4>
    2700:	b8 2c       	mov	r11, r8
    2702:	a3 2c       	mov	r10, r3
    2704:	03 c0       	rjmp	.+6      	; 0x270c <vfprintf+0x2d6>
    2706:	b8 2c       	mov	r11, r8
    2708:	01 c0       	rjmp	.+2      	; 0x270c <vfprintf+0x2d6>
    270a:	b9 2c       	mov	r11, r9
    270c:	a4 fe       	sbrs	r10, 4
    270e:	0f c0       	rjmp	.+30     	; 0x272e <vfprintf+0x2f8>
    2710:	fe 01       	movw	r30, r28
    2712:	e8 0d       	add	r30, r8
    2714:	f1 1d       	adc	r31, r1
    2716:	80 81       	ld	r24, Z
    2718:	80 33       	cpi	r24, 0x30	; 48
    271a:	21 f4       	brne	.+8      	; 0x2724 <vfprintf+0x2ee>
    271c:	9a 2d       	mov	r25, r10
    271e:	99 7e       	andi	r25, 0xE9	; 233
    2720:	a9 2e       	mov	r10, r25
    2722:	09 c0       	rjmp	.+18     	; 0x2736 <vfprintf+0x300>
    2724:	a2 fe       	sbrs	r10, 2
    2726:	06 c0       	rjmp	.+12     	; 0x2734 <vfprintf+0x2fe>
    2728:	b3 94       	inc	r11
    272a:	b3 94       	inc	r11
    272c:	04 c0       	rjmp	.+8      	; 0x2736 <vfprintf+0x300>
    272e:	8a 2d       	mov	r24, r10
    2730:	86 78       	andi	r24, 0x86	; 134
    2732:	09 f0       	breq	.+2      	; 0x2736 <vfprintf+0x300>
    2734:	b3 94       	inc	r11
    2736:	a3 fc       	sbrc	r10, 3
    2738:	11 c0       	rjmp	.+34     	; 0x275c <vfprintf+0x326>
    273a:	a0 fe       	sbrs	r10, 0
    273c:	06 c0       	rjmp	.+12     	; 0x274a <vfprintf+0x314>
    273e:	b2 14       	cp	r11, r2
    2740:	88 f4       	brcc	.+34     	; 0x2764 <vfprintf+0x32e>
    2742:	28 0c       	add	r2, r8
    2744:	92 2c       	mov	r9, r2
    2746:	9b 18       	sub	r9, r11
    2748:	0e c0       	rjmp	.+28     	; 0x2766 <vfprintf+0x330>
    274a:	b2 14       	cp	r11, r2
    274c:	60 f4       	brcc	.+24     	; 0x2766 <vfprintf+0x330>
    274e:	b6 01       	movw	r22, r12
    2750:	80 e2       	ldi	r24, 0x20	; 32
    2752:	90 e0       	ldi	r25, 0x00	; 0
    2754:	0e 94 44 16 	call	0x2c88	; 0x2c88 <fputc>
    2758:	b3 94       	inc	r11
    275a:	f7 cf       	rjmp	.-18     	; 0x274a <vfprintf+0x314>
    275c:	b2 14       	cp	r11, r2
    275e:	18 f4       	brcc	.+6      	; 0x2766 <vfprintf+0x330>
    2760:	2b 18       	sub	r2, r11
    2762:	02 c0       	rjmp	.+4      	; 0x2768 <vfprintf+0x332>
    2764:	98 2c       	mov	r9, r8
    2766:	21 2c       	mov	r2, r1
    2768:	a4 fe       	sbrs	r10, 4
    276a:	10 c0       	rjmp	.+32     	; 0x278c <vfprintf+0x356>
    276c:	b6 01       	movw	r22, r12
    276e:	80 e3       	ldi	r24, 0x30	; 48
    2770:	90 e0       	ldi	r25, 0x00	; 0
    2772:	0e 94 44 16 	call	0x2c88	; 0x2c88 <fputc>
    2776:	a2 fe       	sbrs	r10, 2
    2778:	17 c0       	rjmp	.+46     	; 0x27a8 <vfprintf+0x372>
    277a:	a1 fc       	sbrc	r10, 1
    277c:	03 c0       	rjmp	.+6      	; 0x2784 <vfprintf+0x34e>
    277e:	88 e7       	ldi	r24, 0x78	; 120
    2780:	90 e0       	ldi	r25, 0x00	; 0
    2782:	02 c0       	rjmp	.+4      	; 0x2788 <vfprintf+0x352>
    2784:	88 e5       	ldi	r24, 0x58	; 88
    2786:	90 e0       	ldi	r25, 0x00	; 0
    2788:	b6 01       	movw	r22, r12
    278a:	0c c0       	rjmp	.+24     	; 0x27a4 <vfprintf+0x36e>
    278c:	8a 2d       	mov	r24, r10
    278e:	86 78       	andi	r24, 0x86	; 134
    2790:	59 f0       	breq	.+22     	; 0x27a8 <vfprintf+0x372>
    2792:	a1 fe       	sbrs	r10, 1
    2794:	02 c0       	rjmp	.+4      	; 0x279a <vfprintf+0x364>
    2796:	8b e2       	ldi	r24, 0x2B	; 43
    2798:	01 c0       	rjmp	.+2      	; 0x279c <vfprintf+0x366>
    279a:	80 e2       	ldi	r24, 0x20	; 32
    279c:	a7 fc       	sbrc	r10, 7
    279e:	8d e2       	ldi	r24, 0x2D	; 45
    27a0:	b6 01       	movw	r22, r12
    27a2:	90 e0       	ldi	r25, 0x00	; 0
    27a4:	0e 94 44 16 	call	0x2c88	; 0x2c88 <fputc>
    27a8:	89 14       	cp	r8, r9
    27aa:	38 f4       	brcc	.+14     	; 0x27ba <vfprintf+0x384>
    27ac:	b6 01       	movw	r22, r12
    27ae:	80 e3       	ldi	r24, 0x30	; 48
    27b0:	90 e0       	ldi	r25, 0x00	; 0
    27b2:	0e 94 44 16 	call	0x2c88	; 0x2c88 <fputc>
    27b6:	9a 94       	dec	r9
    27b8:	f7 cf       	rjmp	.-18     	; 0x27a8 <vfprintf+0x372>
    27ba:	8a 94       	dec	r8
    27bc:	f3 01       	movw	r30, r6
    27be:	e8 0d       	add	r30, r8
    27c0:	f1 1d       	adc	r31, r1
    27c2:	80 81       	ld	r24, Z
    27c4:	b6 01       	movw	r22, r12
    27c6:	90 e0       	ldi	r25, 0x00	; 0
    27c8:	0e 94 44 16 	call	0x2c88	; 0x2c88 <fputc>
    27cc:	81 10       	cpse	r8, r1
    27ce:	f5 cf       	rjmp	.-22     	; 0x27ba <vfprintf+0x384>
    27d0:	22 20       	and	r2, r2
    27d2:	09 f4       	brne	.+2      	; 0x27d6 <vfprintf+0x3a0>
    27d4:	42 ce       	rjmp	.-892    	; 0x245a <vfprintf+0x24>
    27d6:	b6 01       	movw	r22, r12
    27d8:	80 e2       	ldi	r24, 0x20	; 32
    27da:	90 e0       	ldi	r25, 0x00	; 0
    27dc:	0e 94 44 16 	call	0x2c88	; 0x2c88 <fputc>
    27e0:	2a 94       	dec	r2
    27e2:	f6 cf       	rjmp	.-20     	; 0x27d0 <vfprintf+0x39a>
    27e4:	f6 01       	movw	r30, r12
    27e6:	86 81       	ldd	r24, Z+6	; 0x06
    27e8:	97 81       	ldd	r25, Z+7	; 0x07
    27ea:	02 c0       	rjmp	.+4      	; 0x27f0 <vfprintf+0x3ba>
    27ec:	8f ef       	ldi	r24, 0xFF	; 255
    27ee:	9f ef       	ldi	r25, 0xFF	; 255
    27f0:	2b 96       	adiw	r28, 0x0b	; 11
    27f2:	e2 e1       	ldi	r30, 0x12	; 18
    27f4:	0c 94 fa 16 	jmp	0x2df4	; 0x2df4 <__epilogue_restores__>

000027f8 <dtoa_prf>:
    27f8:	a9 e0       	ldi	r26, 0x09	; 9
    27fa:	b0 e0       	ldi	r27, 0x00	; 0
    27fc:	e2 e0       	ldi	r30, 0x02	; 2
    27fe:	f4 e1       	ldi	r31, 0x14	; 20
    2800:	0c 94 e4 16 	jmp	0x2dc8	; 0x2dc8 <__prologue_saves__+0xc>
    2804:	6a 01       	movw	r12, r20
    2806:	12 2f       	mov	r17, r18
    2808:	b0 2e       	mov	r11, r16
    280a:	2b e3       	ldi	r18, 0x3B	; 59
    280c:	20 17       	cp	r18, r16
    280e:	20 f0       	brcs	.+8      	; 0x2818 <dtoa_prf+0x20>
    2810:	ff 24       	eor	r15, r15
    2812:	f3 94       	inc	r15
    2814:	f0 0e       	add	r15, r16
    2816:	02 c0       	rjmp	.+4      	; 0x281c <dtoa_prf+0x24>
    2818:	2c e3       	ldi	r18, 0x3C	; 60
    281a:	f2 2e       	mov	r15, r18
    281c:	0f 2d       	mov	r16, r15
    281e:	27 e0       	ldi	r18, 0x07	; 7
    2820:	ae 01       	movw	r20, r28
    2822:	4f 5f       	subi	r20, 0xFF	; 255
    2824:	5f 4f       	sbci	r21, 0xFF	; 255
    2826:	0e 94 56 15 	call	0x2aac	; 0x2aac <__ftoa_engine>
    282a:	bc 01       	movw	r22, r24
    282c:	49 81       	ldd	r20, Y+1	; 0x01
    282e:	84 2f       	mov	r24, r20
    2830:	89 70       	andi	r24, 0x09	; 9
    2832:	81 30       	cpi	r24, 0x01	; 1
    2834:	31 f0       	breq	.+12     	; 0x2842 <dtoa_prf+0x4a>
    2836:	e1 fc       	sbrc	r14, 1
    2838:	06 c0       	rjmp	.+12     	; 0x2846 <dtoa_prf+0x4e>
    283a:	e0 fe       	sbrs	r14, 0
    283c:	06 c0       	rjmp	.+12     	; 0x284a <dtoa_prf+0x52>
    283e:	90 e2       	ldi	r25, 0x20	; 32
    2840:	05 c0       	rjmp	.+10     	; 0x284c <dtoa_prf+0x54>
    2842:	9d e2       	ldi	r25, 0x2D	; 45
    2844:	03 c0       	rjmp	.+6      	; 0x284c <dtoa_prf+0x54>
    2846:	9b e2       	ldi	r25, 0x2B	; 43
    2848:	01 c0       	rjmp	.+2      	; 0x284c <dtoa_prf+0x54>
    284a:	90 e0       	ldi	r25, 0x00	; 0
    284c:	5e 2d       	mov	r21, r14
    284e:	50 71       	andi	r21, 0x10	; 16
    2850:	43 ff       	sbrs	r20, 3
    2852:	3c c0       	rjmp	.+120    	; 0x28cc <dtoa_prf+0xd4>
    2854:	91 11       	cpse	r25, r1
    2856:	02 c0       	rjmp	.+4      	; 0x285c <dtoa_prf+0x64>
    2858:	83 e0       	ldi	r24, 0x03	; 3
    285a:	01 c0       	rjmp	.+2      	; 0x285e <dtoa_prf+0x66>
    285c:	84 e0       	ldi	r24, 0x04	; 4
    285e:	81 17       	cp	r24, r17
    2860:	18 f4       	brcc	.+6      	; 0x2868 <dtoa_prf+0x70>
    2862:	21 2f       	mov	r18, r17
    2864:	28 1b       	sub	r18, r24
    2866:	01 c0       	rjmp	.+2      	; 0x286a <dtoa_prf+0x72>
    2868:	20 e0       	ldi	r18, 0x00	; 0
    286a:	51 11       	cpse	r21, r1
    286c:	0b c0       	rjmp	.+22     	; 0x2884 <dtoa_prf+0x8c>
    286e:	f6 01       	movw	r30, r12
    2870:	82 2f       	mov	r24, r18
    2872:	30 e2       	ldi	r19, 0x20	; 32
    2874:	88 23       	and	r24, r24
    2876:	19 f0       	breq	.+6      	; 0x287e <dtoa_prf+0x86>
    2878:	31 93       	st	Z+, r19
    287a:	81 50       	subi	r24, 0x01	; 1
    287c:	fb cf       	rjmp	.-10     	; 0x2874 <dtoa_prf+0x7c>
    287e:	c2 0e       	add	r12, r18
    2880:	d1 1c       	adc	r13, r1
    2882:	20 e0       	ldi	r18, 0x00	; 0
    2884:	99 23       	and	r25, r25
    2886:	29 f0       	breq	.+10     	; 0x2892 <dtoa_prf+0x9a>
    2888:	d6 01       	movw	r26, r12
    288a:	9c 93       	st	X, r25
    288c:	f6 01       	movw	r30, r12
    288e:	31 96       	adiw	r30, 0x01	; 1
    2890:	6f 01       	movw	r12, r30
    2892:	c6 01       	movw	r24, r12
    2894:	03 96       	adiw	r24, 0x03	; 3
    2896:	e2 fe       	sbrs	r14, 2
    2898:	0a c0       	rjmp	.+20     	; 0x28ae <dtoa_prf+0xb6>
    289a:	3e e4       	ldi	r19, 0x4E	; 78
    289c:	d6 01       	movw	r26, r12
    289e:	3c 93       	st	X, r19
    28a0:	41 e4       	ldi	r20, 0x41	; 65
    28a2:	11 96       	adiw	r26, 0x01	; 1
    28a4:	4c 93       	st	X, r20
    28a6:	11 97       	sbiw	r26, 0x01	; 1
    28a8:	12 96       	adiw	r26, 0x02	; 2
    28aa:	3c 93       	st	X, r19
    28ac:	06 c0       	rjmp	.+12     	; 0x28ba <dtoa_prf+0xc2>
    28ae:	3e e6       	ldi	r19, 0x6E	; 110
    28b0:	f6 01       	movw	r30, r12
    28b2:	30 83       	st	Z, r19
    28b4:	41 e6       	ldi	r20, 0x61	; 97
    28b6:	41 83       	std	Z+1, r20	; 0x01
    28b8:	32 83       	std	Z+2, r19	; 0x02
    28ba:	fc 01       	movw	r30, r24
    28bc:	32 2f       	mov	r19, r18
    28be:	40 e2       	ldi	r20, 0x20	; 32
    28c0:	33 23       	and	r19, r19
    28c2:	09 f4       	brne	.+2      	; 0x28c6 <dtoa_prf+0xce>
    28c4:	42 c0       	rjmp	.+132    	; 0x294a <dtoa_prf+0x152>
    28c6:	41 93       	st	Z+, r20
    28c8:	31 50       	subi	r19, 0x01	; 1
    28ca:	fa cf       	rjmp	.-12     	; 0x28c0 <dtoa_prf+0xc8>
    28cc:	42 ff       	sbrs	r20, 2
    28ce:	44 c0       	rjmp	.+136    	; 0x2958 <dtoa_prf+0x160>
    28d0:	91 11       	cpse	r25, r1
    28d2:	02 c0       	rjmp	.+4      	; 0x28d8 <dtoa_prf+0xe0>
    28d4:	83 e0       	ldi	r24, 0x03	; 3
    28d6:	01 c0       	rjmp	.+2      	; 0x28da <dtoa_prf+0xe2>
    28d8:	84 e0       	ldi	r24, 0x04	; 4
    28da:	81 17       	cp	r24, r17
    28dc:	18 f4       	brcc	.+6      	; 0x28e4 <dtoa_prf+0xec>
    28de:	21 2f       	mov	r18, r17
    28e0:	28 1b       	sub	r18, r24
    28e2:	01 c0       	rjmp	.+2      	; 0x28e6 <dtoa_prf+0xee>
    28e4:	20 e0       	ldi	r18, 0x00	; 0
    28e6:	51 11       	cpse	r21, r1
    28e8:	0b c0       	rjmp	.+22     	; 0x2900 <dtoa_prf+0x108>
    28ea:	f6 01       	movw	r30, r12
    28ec:	82 2f       	mov	r24, r18
    28ee:	30 e2       	ldi	r19, 0x20	; 32
    28f0:	88 23       	and	r24, r24
    28f2:	19 f0       	breq	.+6      	; 0x28fa <dtoa_prf+0x102>
    28f4:	31 93       	st	Z+, r19
    28f6:	81 50       	subi	r24, 0x01	; 1
    28f8:	fb cf       	rjmp	.-10     	; 0x28f0 <dtoa_prf+0xf8>
    28fa:	c2 0e       	add	r12, r18
    28fc:	d1 1c       	adc	r13, r1
    28fe:	20 e0       	ldi	r18, 0x00	; 0
    2900:	99 23       	and	r25, r25
    2902:	29 f0       	breq	.+10     	; 0x290e <dtoa_prf+0x116>
    2904:	d6 01       	movw	r26, r12
    2906:	9c 93       	st	X, r25
    2908:	f6 01       	movw	r30, r12
    290a:	31 96       	adiw	r30, 0x01	; 1
    290c:	6f 01       	movw	r12, r30
    290e:	c6 01       	movw	r24, r12
    2910:	03 96       	adiw	r24, 0x03	; 3
    2912:	e2 fe       	sbrs	r14, 2
    2914:	0b c0       	rjmp	.+22     	; 0x292c <dtoa_prf+0x134>
    2916:	39 e4       	ldi	r19, 0x49	; 73
    2918:	d6 01       	movw	r26, r12
    291a:	3c 93       	st	X, r19
    291c:	3e e4       	ldi	r19, 0x4E	; 78
    291e:	11 96       	adiw	r26, 0x01	; 1
    2920:	3c 93       	st	X, r19
    2922:	11 97       	sbiw	r26, 0x01	; 1
    2924:	36 e4       	ldi	r19, 0x46	; 70
    2926:	12 96       	adiw	r26, 0x02	; 2
    2928:	3c 93       	st	X, r19
    292a:	07 c0       	rjmp	.+14     	; 0x293a <dtoa_prf+0x142>
    292c:	39 e6       	ldi	r19, 0x69	; 105
    292e:	f6 01       	movw	r30, r12
    2930:	30 83       	st	Z, r19
    2932:	3e e6       	ldi	r19, 0x6E	; 110
    2934:	31 83       	std	Z+1, r19	; 0x01
    2936:	36 e6       	ldi	r19, 0x66	; 102
    2938:	32 83       	std	Z+2, r19	; 0x02
    293a:	fc 01       	movw	r30, r24
    293c:	32 2f       	mov	r19, r18
    293e:	40 e2       	ldi	r20, 0x20	; 32
    2940:	33 23       	and	r19, r19
    2942:	19 f0       	breq	.+6      	; 0x294a <dtoa_prf+0x152>
    2944:	41 93       	st	Z+, r20
    2946:	31 50       	subi	r19, 0x01	; 1
    2948:	fb cf       	rjmp	.-10     	; 0x2940 <dtoa_prf+0x148>
    294a:	fc 01       	movw	r30, r24
    294c:	e2 0f       	add	r30, r18
    294e:	f1 1d       	adc	r31, r1
    2950:	10 82       	st	Z, r1
    2952:	8e ef       	ldi	r24, 0xFE	; 254
    2954:	9f ef       	ldi	r25, 0xFF	; 255
    2956:	a6 c0       	rjmp	.+332    	; 0x2aa4 <dtoa_prf+0x2ac>
    2958:	21 e0       	ldi	r18, 0x01	; 1
    295a:	30 e0       	ldi	r19, 0x00	; 0
    295c:	91 11       	cpse	r25, r1
    295e:	02 c0       	rjmp	.+4      	; 0x2964 <dtoa_prf+0x16c>
    2960:	20 e0       	ldi	r18, 0x00	; 0
    2962:	30 e0       	ldi	r19, 0x00	; 0
    2964:	16 16       	cp	r1, r22
    2966:	17 06       	cpc	r1, r23
    2968:	1c f4       	brge	.+6      	; 0x2970 <dtoa_prf+0x178>
    296a:	fb 01       	movw	r30, r22
    296c:	31 96       	adiw	r30, 0x01	; 1
    296e:	02 c0       	rjmp	.+4      	; 0x2974 <dtoa_prf+0x17c>
    2970:	e1 e0       	ldi	r30, 0x01	; 1
    2972:	f0 e0       	ldi	r31, 0x00	; 0
    2974:	2e 0f       	add	r18, r30
    2976:	3f 1f       	adc	r19, r31
    2978:	bb 20       	and	r11, r11
    297a:	21 f0       	breq	.+8      	; 0x2984 <dtoa_prf+0x18c>
    297c:	eb 2d       	mov	r30, r11
    297e:	f0 e0       	ldi	r31, 0x00	; 0
    2980:	31 96       	adiw	r30, 0x01	; 1
    2982:	02 c0       	rjmp	.+4      	; 0x2988 <dtoa_prf+0x190>
    2984:	e0 e0       	ldi	r30, 0x00	; 0
    2986:	f0 e0       	ldi	r31, 0x00	; 0
    2988:	2e 0f       	add	r18, r30
    298a:	3f 1f       	adc	r19, r31
    298c:	e1 2f       	mov	r30, r17
    298e:	f0 e0       	ldi	r31, 0x00	; 0
    2990:	2e 17       	cp	r18, r30
    2992:	3f 07       	cpc	r19, r31
    2994:	1c f4       	brge	.+6      	; 0x299c <dtoa_prf+0x1a4>
    2996:	12 1b       	sub	r17, r18
    2998:	21 2f       	mov	r18, r17
    299a:	01 c0       	rjmp	.+2      	; 0x299e <dtoa_prf+0x1a6>
    299c:	20 e0       	ldi	r18, 0x00	; 0
    299e:	8e 2d       	mov	r24, r14
    29a0:	88 71       	andi	r24, 0x18	; 24
    29a2:	59 f4       	brne	.+22     	; 0x29ba <dtoa_prf+0x1c2>
    29a4:	f6 01       	movw	r30, r12
    29a6:	82 2f       	mov	r24, r18
    29a8:	30 e2       	ldi	r19, 0x20	; 32
    29aa:	88 23       	and	r24, r24
    29ac:	19 f0       	breq	.+6      	; 0x29b4 <dtoa_prf+0x1bc>
    29ae:	31 93       	st	Z+, r19
    29b0:	81 50       	subi	r24, 0x01	; 1
    29b2:	fb cf       	rjmp	.-10     	; 0x29aa <dtoa_prf+0x1b2>
    29b4:	c2 0e       	add	r12, r18
    29b6:	d1 1c       	adc	r13, r1
    29b8:	20 e0       	ldi	r18, 0x00	; 0
    29ba:	99 23       	and	r25, r25
    29bc:	29 f0       	breq	.+10     	; 0x29c8 <dtoa_prf+0x1d0>
    29be:	d6 01       	movw	r26, r12
    29c0:	9c 93       	st	X, r25
    29c2:	f6 01       	movw	r30, r12
    29c4:	31 96       	adiw	r30, 0x01	; 1
    29c6:	6f 01       	movw	r12, r30
    29c8:	51 11       	cpse	r21, r1
    29ca:	0b c0       	rjmp	.+22     	; 0x29e2 <dtoa_prf+0x1ea>
    29cc:	f6 01       	movw	r30, r12
    29ce:	82 2f       	mov	r24, r18
    29d0:	90 e3       	ldi	r25, 0x30	; 48
    29d2:	88 23       	and	r24, r24
    29d4:	19 f0       	breq	.+6      	; 0x29dc <dtoa_prf+0x1e4>
    29d6:	91 93       	st	Z+, r25
    29d8:	81 50       	subi	r24, 0x01	; 1
    29da:	fb cf       	rjmp	.-10     	; 0x29d2 <dtoa_prf+0x1da>
    29dc:	c2 0e       	add	r12, r18
    29de:	d1 1c       	adc	r13, r1
    29e0:	20 e0       	ldi	r18, 0x00	; 0
    29e2:	0f 2d       	mov	r16, r15
    29e4:	06 0f       	add	r16, r22
    29e6:	9a 81       	ldd	r25, Y+2	; 0x02
    29e8:	34 2f       	mov	r19, r20
    29ea:	30 71       	andi	r19, 0x10	; 16
    29ec:	44 ff       	sbrs	r20, 4
    29ee:	03 c0       	rjmp	.+6      	; 0x29f6 <dtoa_prf+0x1fe>
    29f0:	91 33       	cpi	r25, 0x31	; 49
    29f2:	09 f4       	brne	.+2      	; 0x29f6 <dtoa_prf+0x1fe>
    29f4:	01 50       	subi	r16, 0x01	; 1
    29f6:	10 16       	cp	r1, r16
    29f8:	24 f4       	brge	.+8      	; 0x2a02 <dtoa_prf+0x20a>
    29fa:	09 30       	cpi	r16, 0x09	; 9
    29fc:	18 f0       	brcs	.+6      	; 0x2a04 <dtoa_prf+0x20c>
    29fe:	08 e0       	ldi	r16, 0x08	; 8
    2a00:	01 c0       	rjmp	.+2      	; 0x2a04 <dtoa_prf+0x20c>
    2a02:	01 e0       	ldi	r16, 0x01	; 1
    2a04:	ab 01       	movw	r20, r22
    2a06:	77 ff       	sbrs	r23, 7
    2a08:	02 c0       	rjmp	.+4      	; 0x2a0e <dtoa_prf+0x216>
    2a0a:	40 e0       	ldi	r20, 0x00	; 0
    2a0c:	50 e0       	ldi	r21, 0x00	; 0
    2a0e:	fb 01       	movw	r30, r22
    2a10:	e4 1b       	sub	r30, r20
    2a12:	f5 0b       	sbc	r31, r21
    2a14:	a1 e0       	ldi	r26, 0x01	; 1
    2a16:	b0 e0       	ldi	r27, 0x00	; 0
    2a18:	ac 0f       	add	r26, r28
    2a1a:	bd 1f       	adc	r27, r29
    2a1c:	ea 0f       	add	r30, r26
    2a1e:	fb 1f       	adc	r31, r27
    2a20:	8e e2       	ldi	r24, 0x2E	; 46
    2a22:	a8 2e       	mov	r10, r24
    2a24:	4b 01       	movw	r8, r22
    2a26:	80 1a       	sub	r8, r16
    2a28:	91 08       	sbc	r9, r1
    2a2a:	0b 2d       	mov	r16, r11
    2a2c:	10 e0       	ldi	r17, 0x00	; 0
    2a2e:	11 95       	neg	r17
    2a30:	01 95       	neg	r16
    2a32:	11 09       	sbc	r17, r1
    2a34:	4f 3f       	cpi	r20, 0xFF	; 255
    2a36:	bf ef       	ldi	r27, 0xFF	; 255
    2a38:	5b 07       	cpc	r21, r27
    2a3a:	21 f4       	brne	.+8      	; 0x2a44 <dtoa_prf+0x24c>
    2a3c:	d6 01       	movw	r26, r12
    2a3e:	ac 92       	st	X, r10
    2a40:	11 96       	adiw	r26, 0x01	; 1
    2a42:	6d 01       	movw	r12, r26
    2a44:	64 17       	cp	r22, r20
    2a46:	75 07       	cpc	r23, r21
    2a48:	2c f0       	brlt	.+10     	; 0x2a54 <dtoa_prf+0x25c>
    2a4a:	84 16       	cp	r8, r20
    2a4c:	95 06       	cpc	r9, r21
    2a4e:	14 f4       	brge	.+4      	; 0x2a54 <dtoa_prf+0x25c>
    2a50:	81 81       	ldd	r24, Z+1	; 0x01
    2a52:	01 c0       	rjmp	.+2      	; 0x2a56 <dtoa_prf+0x25e>
    2a54:	80 e3       	ldi	r24, 0x30	; 48
    2a56:	41 50       	subi	r20, 0x01	; 1
    2a58:	51 09       	sbc	r21, r1
    2a5a:	31 96       	adiw	r30, 0x01	; 1
    2a5c:	d6 01       	movw	r26, r12
    2a5e:	11 96       	adiw	r26, 0x01	; 1
    2a60:	7d 01       	movw	r14, r26
    2a62:	40 17       	cp	r20, r16
    2a64:	51 07       	cpc	r21, r17
    2a66:	24 f0       	brlt	.+8      	; 0x2a70 <dtoa_prf+0x278>
    2a68:	d6 01       	movw	r26, r12
    2a6a:	8c 93       	st	X, r24
    2a6c:	67 01       	movw	r12, r14
    2a6e:	e2 cf       	rjmp	.-60     	; 0x2a34 <dtoa_prf+0x23c>
    2a70:	64 17       	cp	r22, r20
    2a72:	75 07       	cpc	r23, r21
    2a74:	39 f4       	brne	.+14     	; 0x2a84 <dtoa_prf+0x28c>
    2a76:	96 33       	cpi	r25, 0x36	; 54
    2a78:	20 f4       	brcc	.+8      	; 0x2a82 <dtoa_prf+0x28a>
    2a7a:	95 33       	cpi	r25, 0x35	; 53
    2a7c:	19 f4       	brne	.+6      	; 0x2a84 <dtoa_prf+0x28c>
    2a7e:	31 11       	cpse	r19, r1
    2a80:	01 c0       	rjmp	.+2      	; 0x2a84 <dtoa_prf+0x28c>
    2a82:	81 e3       	ldi	r24, 0x31	; 49
    2a84:	f6 01       	movw	r30, r12
    2a86:	80 83       	st	Z, r24
    2a88:	f7 01       	movw	r30, r14
    2a8a:	82 2f       	mov	r24, r18
    2a8c:	90 e2       	ldi	r25, 0x20	; 32
    2a8e:	88 23       	and	r24, r24
    2a90:	19 f0       	breq	.+6      	; 0x2a98 <dtoa_prf+0x2a0>
    2a92:	91 93       	st	Z+, r25
    2a94:	81 50       	subi	r24, 0x01	; 1
    2a96:	fb cf       	rjmp	.-10     	; 0x2a8e <dtoa_prf+0x296>
    2a98:	f7 01       	movw	r30, r14
    2a9a:	e2 0f       	add	r30, r18
    2a9c:	f1 1d       	adc	r31, r1
    2a9e:	10 82       	st	Z, r1
    2aa0:	80 e0       	ldi	r24, 0x00	; 0
    2aa2:	90 e0       	ldi	r25, 0x00	; 0
    2aa4:	29 96       	adiw	r28, 0x09	; 9
    2aa6:	ec e0       	ldi	r30, 0x0C	; 12
    2aa8:	0c 94 00 17 	jmp	0x2e00	; 0x2e00 <__epilogue_restores__+0xc>

00002aac <__ftoa_engine>:
    2aac:	28 30       	cpi	r18, 0x08	; 8
    2aae:	08 f0       	brcs	.+2      	; 0x2ab2 <__ftoa_engine+0x6>
    2ab0:	27 e0       	ldi	r18, 0x07	; 7
    2ab2:	33 27       	eor	r19, r19
    2ab4:	da 01       	movw	r26, r20
    2ab6:	99 0f       	add	r25, r25
    2ab8:	31 1d       	adc	r19, r1
    2aba:	87 fd       	sbrc	r24, 7
    2abc:	91 60       	ori	r25, 0x01	; 1
    2abe:	00 96       	adiw	r24, 0x00	; 0
    2ac0:	61 05       	cpc	r22, r1
    2ac2:	71 05       	cpc	r23, r1
    2ac4:	39 f4       	brne	.+14     	; 0x2ad4 <__ftoa_engine+0x28>
    2ac6:	32 60       	ori	r19, 0x02	; 2
    2ac8:	2e 5f       	subi	r18, 0xFE	; 254
    2aca:	3d 93       	st	X+, r19
    2acc:	30 e3       	ldi	r19, 0x30	; 48
    2ace:	2a 95       	dec	r18
    2ad0:	e1 f7       	brne	.-8      	; 0x2aca <__ftoa_engine+0x1e>
    2ad2:	08 95       	ret
    2ad4:	9f 3f       	cpi	r25, 0xFF	; 255
    2ad6:	30 f0       	brcs	.+12     	; 0x2ae4 <__ftoa_engine+0x38>
    2ad8:	80 38       	cpi	r24, 0x80	; 128
    2ada:	71 05       	cpc	r23, r1
    2adc:	61 05       	cpc	r22, r1
    2ade:	09 f0       	breq	.+2      	; 0x2ae2 <__ftoa_engine+0x36>
    2ae0:	3c 5f       	subi	r19, 0xFC	; 252
    2ae2:	3c 5f       	subi	r19, 0xFC	; 252
    2ae4:	3d 93       	st	X+, r19
    2ae6:	91 30       	cpi	r25, 0x01	; 1
    2ae8:	08 f0       	brcs	.+2      	; 0x2aec <__ftoa_engine+0x40>
    2aea:	80 68       	ori	r24, 0x80	; 128
    2aec:	91 1d       	adc	r25, r1
    2aee:	df 93       	push	r29
    2af0:	cf 93       	push	r28
    2af2:	1f 93       	push	r17
    2af4:	0f 93       	push	r16
    2af6:	ff 92       	push	r15
    2af8:	ef 92       	push	r14
    2afa:	19 2f       	mov	r17, r25
    2afc:	98 7f       	andi	r25, 0xF8	; 248
    2afe:	96 95       	lsr	r25
    2b00:	e9 2f       	mov	r30, r25
    2b02:	96 95       	lsr	r25
    2b04:	96 95       	lsr	r25
    2b06:	e9 0f       	add	r30, r25
    2b08:	ff 27       	eor	r31, r31
    2b0a:	ee 52       	subi	r30, 0x2E	; 46
    2b0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b0e:	99 27       	eor	r25, r25
    2b10:	33 27       	eor	r19, r19
    2b12:	ee 24       	eor	r14, r14
    2b14:	ff 24       	eor	r15, r15
    2b16:	a7 01       	movw	r20, r14
    2b18:	e7 01       	movw	r28, r14
    2b1a:	05 90       	lpm	r0, Z+
    2b1c:	08 94       	sec
    2b1e:	07 94       	ror	r0
    2b20:	28 f4       	brcc	.+10     	; 0x2b2c <__ftoa_engine+0x80>
    2b22:	36 0f       	add	r19, r22
    2b24:	e7 1e       	adc	r14, r23
    2b26:	f8 1e       	adc	r15, r24
    2b28:	49 1f       	adc	r20, r25
    2b2a:	51 1d       	adc	r21, r1
    2b2c:	66 0f       	add	r22, r22
    2b2e:	77 1f       	adc	r23, r23
    2b30:	88 1f       	adc	r24, r24
    2b32:	99 1f       	adc	r25, r25
    2b34:	06 94       	lsr	r0
    2b36:	a1 f7       	brne	.-24     	; 0x2b20 <__ftoa_engine+0x74>
    2b38:	05 90       	lpm	r0, Z+
    2b3a:	07 94       	ror	r0
    2b3c:	28 f4       	brcc	.+10     	; 0x2b48 <__ftoa_engine+0x9c>
    2b3e:	e7 0e       	add	r14, r23
    2b40:	f8 1e       	adc	r15, r24
    2b42:	49 1f       	adc	r20, r25
    2b44:	56 1f       	adc	r21, r22
    2b46:	c1 1d       	adc	r28, r1
    2b48:	77 0f       	add	r23, r23
    2b4a:	88 1f       	adc	r24, r24
    2b4c:	99 1f       	adc	r25, r25
    2b4e:	66 1f       	adc	r22, r22
    2b50:	06 94       	lsr	r0
    2b52:	a1 f7       	brne	.-24     	; 0x2b3c <__ftoa_engine+0x90>
    2b54:	05 90       	lpm	r0, Z+
    2b56:	07 94       	ror	r0
    2b58:	28 f4       	brcc	.+10     	; 0x2b64 <__ftoa_engine+0xb8>
    2b5a:	f8 0e       	add	r15, r24
    2b5c:	49 1f       	adc	r20, r25
    2b5e:	56 1f       	adc	r21, r22
    2b60:	c7 1f       	adc	r28, r23
    2b62:	d1 1d       	adc	r29, r1
    2b64:	88 0f       	add	r24, r24
    2b66:	99 1f       	adc	r25, r25
    2b68:	66 1f       	adc	r22, r22
    2b6a:	77 1f       	adc	r23, r23
    2b6c:	06 94       	lsr	r0
    2b6e:	a1 f7       	brne	.-24     	; 0x2b58 <__ftoa_engine+0xac>
    2b70:	05 90       	lpm	r0, Z+
    2b72:	07 94       	ror	r0
    2b74:	20 f4       	brcc	.+8      	; 0x2b7e <__ftoa_engine+0xd2>
    2b76:	49 0f       	add	r20, r25
    2b78:	56 1f       	adc	r21, r22
    2b7a:	c7 1f       	adc	r28, r23
    2b7c:	d8 1f       	adc	r29, r24
    2b7e:	99 0f       	add	r25, r25
    2b80:	66 1f       	adc	r22, r22
    2b82:	77 1f       	adc	r23, r23
    2b84:	88 1f       	adc	r24, r24
    2b86:	06 94       	lsr	r0
    2b88:	a9 f7       	brne	.-22     	; 0x2b74 <__ftoa_engine+0xc8>
    2b8a:	84 91       	lpm	r24, Z
    2b8c:	10 95       	com	r17
    2b8e:	17 70       	andi	r17, 0x07	; 7
    2b90:	41 f0       	breq	.+16     	; 0x2ba2 <__ftoa_engine+0xf6>
    2b92:	d6 95       	lsr	r29
    2b94:	c7 95       	ror	r28
    2b96:	57 95       	ror	r21
    2b98:	47 95       	ror	r20
    2b9a:	f7 94       	ror	r15
    2b9c:	e7 94       	ror	r14
    2b9e:	1a 95       	dec	r17
    2ba0:	c1 f7       	brne	.-16     	; 0x2b92 <__ftoa_engine+0xe6>
    2ba2:	e8 e7       	ldi	r30, 0x78	; 120
    2ba4:	f0 e0       	ldi	r31, 0x00	; 0
    2ba6:	68 94       	set
    2ba8:	15 90       	lpm	r1, Z+
    2baa:	15 91       	lpm	r17, Z+
    2bac:	35 91       	lpm	r19, Z+
    2bae:	65 91       	lpm	r22, Z+
    2bb0:	95 91       	lpm	r25, Z+
    2bb2:	05 90       	lpm	r0, Z+
    2bb4:	7f e2       	ldi	r23, 0x2F	; 47
    2bb6:	73 95       	inc	r23
    2bb8:	e1 18       	sub	r14, r1
    2bba:	f1 0a       	sbc	r15, r17
    2bbc:	43 0b       	sbc	r20, r19
    2bbe:	56 0b       	sbc	r21, r22
    2bc0:	c9 0b       	sbc	r28, r25
    2bc2:	d0 09       	sbc	r29, r0
    2bc4:	c0 f7       	brcc	.-16     	; 0x2bb6 <__ftoa_engine+0x10a>
    2bc6:	e1 0c       	add	r14, r1
    2bc8:	f1 1e       	adc	r15, r17
    2bca:	43 1f       	adc	r20, r19
    2bcc:	56 1f       	adc	r21, r22
    2bce:	c9 1f       	adc	r28, r25
    2bd0:	d0 1d       	adc	r29, r0
    2bd2:	7e f4       	brtc	.+30     	; 0x2bf2 <__ftoa_engine+0x146>
    2bd4:	70 33       	cpi	r23, 0x30	; 48
    2bd6:	11 f4       	brne	.+4      	; 0x2bdc <__ftoa_engine+0x130>
    2bd8:	8a 95       	dec	r24
    2bda:	e6 cf       	rjmp	.-52     	; 0x2ba8 <__ftoa_engine+0xfc>
    2bdc:	e8 94       	clt
    2bde:	01 50       	subi	r16, 0x01	; 1
    2be0:	30 f0       	brcs	.+12     	; 0x2bee <__ftoa_engine+0x142>
    2be2:	08 0f       	add	r16, r24
    2be4:	0a f4       	brpl	.+2      	; 0x2be8 <__ftoa_engine+0x13c>
    2be6:	00 27       	eor	r16, r16
    2be8:	02 17       	cp	r16, r18
    2bea:	08 f4       	brcc	.+2      	; 0x2bee <__ftoa_engine+0x142>
    2bec:	20 2f       	mov	r18, r16
    2bee:	23 95       	inc	r18
    2bf0:	02 2f       	mov	r16, r18
    2bf2:	7a 33       	cpi	r23, 0x3A	; 58
    2bf4:	28 f0       	brcs	.+10     	; 0x2c00 <__ftoa_engine+0x154>
    2bf6:	79 e3       	ldi	r23, 0x39	; 57
    2bf8:	7d 93       	st	X+, r23
    2bfa:	2a 95       	dec	r18
    2bfc:	e9 f7       	brne	.-6      	; 0x2bf8 <__ftoa_engine+0x14c>
    2bfe:	10 c0       	rjmp	.+32     	; 0x2c20 <__ftoa_engine+0x174>
    2c00:	7d 93       	st	X+, r23
    2c02:	2a 95       	dec	r18
    2c04:	89 f6       	brne	.-94     	; 0x2ba8 <__ftoa_engine+0xfc>
    2c06:	06 94       	lsr	r0
    2c08:	97 95       	ror	r25
    2c0a:	67 95       	ror	r22
    2c0c:	37 95       	ror	r19
    2c0e:	17 95       	ror	r17
    2c10:	17 94       	ror	r1
    2c12:	e1 18       	sub	r14, r1
    2c14:	f1 0a       	sbc	r15, r17
    2c16:	43 0b       	sbc	r20, r19
    2c18:	56 0b       	sbc	r21, r22
    2c1a:	c9 0b       	sbc	r28, r25
    2c1c:	d0 09       	sbc	r29, r0
    2c1e:	98 f0       	brcs	.+38     	; 0x2c46 <__ftoa_engine+0x19a>
    2c20:	23 95       	inc	r18
    2c22:	7e 91       	ld	r23, -X
    2c24:	73 95       	inc	r23
    2c26:	7a 33       	cpi	r23, 0x3A	; 58
    2c28:	08 f0       	brcs	.+2      	; 0x2c2c <__ftoa_engine+0x180>
    2c2a:	70 e3       	ldi	r23, 0x30	; 48
    2c2c:	7c 93       	st	X, r23
    2c2e:	20 13       	cpse	r18, r16
    2c30:	b8 f7       	brcc	.-18     	; 0x2c20 <__ftoa_engine+0x174>
    2c32:	7e 91       	ld	r23, -X
    2c34:	70 61       	ori	r23, 0x10	; 16
    2c36:	7d 93       	st	X+, r23
    2c38:	30 f0       	brcs	.+12     	; 0x2c46 <__ftoa_engine+0x19a>
    2c3a:	83 95       	inc	r24
    2c3c:	71 e3       	ldi	r23, 0x31	; 49
    2c3e:	7d 93       	st	X+, r23
    2c40:	70 e3       	ldi	r23, 0x30	; 48
    2c42:	2a 95       	dec	r18
    2c44:	e1 f7       	brne	.-8      	; 0x2c3e <__ftoa_engine+0x192>
    2c46:	11 24       	eor	r1, r1
    2c48:	ef 90       	pop	r14
    2c4a:	ff 90       	pop	r15
    2c4c:	0f 91       	pop	r16
    2c4e:	1f 91       	pop	r17
    2c50:	cf 91       	pop	r28
    2c52:	df 91       	pop	r29
    2c54:	99 27       	eor	r25, r25
    2c56:	87 fd       	sbrc	r24, 7
    2c58:	90 95       	com	r25
    2c5a:	08 95       	ret

00002c5c <strnlen_P>:
    2c5c:	fc 01       	movw	r30, r24
    2c5e:	05 90       	lpm	r0, Z+
    2c60:	61 50       	subi	r22, 0x01	; 1
    2c62:	70 40       	sbci	r23, 0x00	; 0
    2c64:	01 10       	cpse	r0, r1
    2c66:	d8 f7       	brcc	.-10     	; 0x2c5e <strnlen_P+0x2>
    2c68:	80 95       	com	r24
    2c6a:	90 95       	com	r25
    2c6c:	8e 0f       	add	r24, r30
    2c6e:	9f 1f       	adc	r25, r31
    2c70:	08 95       	ret

00002c72 <strnlen>:
    2c72:	fc 01       	movw	r30, r24
    2c74:	61 50       	subi	r22, 0x01	; 1
    2c76:	70 40       	sbci	r23, 0x00	; 0
    2c78:	01 90       	ld	r0, Z+
    2c7a:	01 10       	cpse	r0, r1
    2c7c:	d8 f7       	brcc	.-10     	; 0x2c74 <strnlen+0x2>
    2c7e:	80 95       	com	r24
    2c80:	90 95       	com	r25
    2c82:	8e 0f       	add	r24, r30
    2c84:	9f 1f       	adc	r25, r31
    2c86:	08 95       	ret

00002c88 <fputc>:
    2c88:	0f 93       	push	r16
    2c8a:	1f 93       	push	r17
    2c8c:	cf 93       	push	r28
    2c8e:	df 93       	push	r29
    2c90:	fb 01       	movw	r30, r22
    2c92:	23 81       	ldd	r18, Z+3	; 0x03
    2c94:	21 fd       	sbrc	r18, 1
    2c96:	03 c0       	rjmp	.+6      	; 0x2c9e <fputc+0x16>
    2c98:	8f ef       	ldi	r24, 0xFF	; 255
    2c9a:	9f ef       	ldi	r25, 0xFF	; 255
    2c9c:	2c c0       	rjmp	.+88     	; 0x2cf6 <fputc+0x6e>
    2c9e:	22 ff       	sbrs	r18, 2
    2ca0:	16 c0       	rjmp	.+44     	; 0x2cce <fputc+0x46>
    2ca2:	46 81       	ldd	r20, Z+6	; 0x06
    2ca4:	57 81       	ldd	r21, Z+7	; 0x07
    2ca6:	24 81       	ldd	r18, Z+4	; 0x04
    2ca8:	35 81       	ldd	r19, Z+5	; 0x05
    2caa:	42 17       	cp	r20, r18
    2cac:	53 07       	cpc	r21, r19
    2cae:	44 f4       	brge	.+16     	; 0x2cc0 <fputc+0x38>
    2cb0:	a0 81       	ld	r26, Z
    2cb2:	b1 81       	ldd	r27, Z+1	; 0x01
    2cb4:	9d 01       	movw	r18, r26
    2cb6:	2f 5f       	subi	r18, 0xFF	; 255
    2cb8:	3f 4f       	sbci	r19, 0xFF	; 255
    2cba:	31 83       	std	Z+1, r19	; 0x01
    2cbc:	20 83       	st	Z, r18
    2cbe:	8c 93       	st	X, r24
    2cc0:	26 81       	ldd	r18, Z+6	; 0x06
    2cc2:	37 81       	ldd	r19, Z+7	; 0x07
    2cc4:	2f 5f       	subi	r18, 0xFF	; 255
    2cc6:	3f 4f       	sbci	r19, 0xFF	; 255
    2cc8:	37 83       	std	Z+7, r19	; 0x07
    2cca:	26 83       	std	Z+6, r18	; 0x06
    2ccc:	14 c0       	rjmp	.+40     	; 0x2cf6 <fputc+0x6e>
    2cce:	8b 01       	movw	r16, r22
    2cd0:	ec 01       	movw	r28, r24
    2cd2:	fb 01       	movw	r30, r22
    2cd4:	00 84       	ldd	r0, Z+8	; 0x08
    2cd6:	f1 85       	ldd	r31, Z+9	; 0x09
    2cd8:	e0 2d       	mov	r30, r0
    2cda:	09 95       	icall
    2cdc:	89 2b       	or	r24, r25
    2cde:	e1 f6       	brne	.-72     	; 0x2c98 <fputc+0x10>
    2ce0:	d8 01       	movw	r26, r16
    2ce2:	16 96       	adiw	r26, 0x06	; 6
    2ce4:	8d 91       	ld	r24, X+
    2ce6:	9c 91       	ld	r25, X
    2ce8:	17 97       	sbiw	r26, 0x07	; 7
    2cea:	01 96       	adiw	r24, 0x01	; 1
    2cec:	17 96       	adiw	r26, 0x07	; 7
    2cee:	9c 93       	st	X, r25
    2cf0:	8e 93       	st	-X, r24
    2cf2:	16 97       	sbiw	r26, 0x06	; 6
    2cf4:	ce 01       	movw	r24, r28
    2cf6:	df 91       	pop	r29
    2cf8:	cf 91       	pop	r28
    2cfa:	1f 91       	pop	r17
    2cfc:	0f 91       	pop	r16
    2cfe:	08 95       	ret

00002d00 <__ultoa_invert>:
    2d00:	fa 01       	movw	r30, r20
    2d02:	aa 27       	eor	r26, r26
    2d04:	28 30       	cpi	r18, 0x08	; 8
    2d06:	51 f1       	breq	.+84     	; 0x2d5c <__ultoa_invert+0x5c>
    2d08:	20 31       	cpi	r18, 0x10	; 16
    2d0a:	81 f1       	breq	.+96     	; 0x2d6c <__ultoa_invert+0x6c>
    2d0c:	e8 94       	clt
    2d0e:	6f 93       	push	r22
    2d10:	6e 7f       	andi	r22, 0xFE	; 254
    2d12:	6e 5f       	subi	r22, 0xFE	; 254
    2d14:	7f 4f       	sbci	r23, 0xFF	; 255
    2d16:	8f 4f       	sbci	r24, 0xFF	; 255
    2d18:	9f 4f       	sbci	r25, 0xFF	; 255
    2d1a:	af 4f       	sbci	r26, 0xFF	; 255
    2d1c:	b1 e0       	ldi	r27, 0x01	; 1
    2d1e:	3e d0       	rcall	.+124    	; 0x2d9c <__ultoa_invert+0x9c>
    2d20:	b4 e0       	ldi	r27, 0x04	; 4
    2d22:	3c d0       	rcall	.+120    	; 0x2d9c <__ultoa_invert+0x9c>
    2d24:	67 0f       	add	r22, r23
    2d26:	78 1f       	adc	r23, r24
    2d28:	89 1f       	adc	r24, r25
    2d2a:	9a 1f       	adc	r25, r26
    2d2c:	a1 1d       	adc	r26, r1
    2d2e:	68 0f       	add	r22, r24
    2d30:	79 1f       	adc	r23, r25
    2d32:	8a 1f       	adc	r24, r26
    2d34:	91 1d       	adc	r25, r1
    2d36:	a1 1d       	adc	r26, r1
    2d38:	6a 0f       	add	r22, r26
    2d3a:	71 1d       	adc	r23, r1
    2d3c:	81 1d       	adc	r24, r1
    2d3e:	91 1d       	adc	r25, r1
    2d40:	a1 1d       	adc	r26, r1
    2d42:	20 d0       	rcall	.+64     	; 0x2d84 <__ultoa_invert+0x84>
    2d44:	09 f4       	brne	.+2      	; 0x2d48 <__ultoa_invert+0x48>
    2d46:	68 94       	set
    2d48:	3f 91       	pop	r19
    2d4a:	2a e0       	ldi	r18, 0x0A	; 10
    2d4c:	26 9f       	mul	r18, r22
    2d4e:	11 24       	eor	r1, r1
    2d50:	30 19       	sub	r19, r0
    2d52:	30 5d       	subi	r19, 0xD0	; 208
    2d54:	31 93       	st	Z+, r19
    2d56:	de f6       	brtc	.-74     	; 0x2d0e <__ultoa_invert+0xe>
    2d58:	cf 01       	movw	r24, r30
    2d5a:	08 95       	ret
    2d5c:	46 2f       	mov	r20, r22
    2d5e:	47 70       	andi	r20, 0x07	; 7
    2d60:	40 5d       	subi	r20, 0xD0	; 208
    2d62:	41 93       	st	Z+, r20
    2d64:	b3 e0       	ldi	r27, 0x03	; 3
    2d66:	0f d0       	rcall	.+30     	; 0x2d86 <__ultoa_invert+0x86>
    2d68:	c9 f7       	brne	.-14     	; 0x2d5c <__ultoa_invert+0x5c>
    2d6a:	f6 cf       	rjmp	.-20     	; 0x2d58 <__ultoa_invert+0x58>
    2d6c:	46 2f       	mov	r20, r22
    2d6e:	4f 70       	andi	r20, 0x0F	; 15
    2d70:	40 5d       	subi	r20, 0xD0	; 208
    2d72:	4a 33       	cpi	r20, 0x3A	; 58
    2d74:	18 f0       	brcs	.+6      	; 0x2d7c <__ultoa_invert+0x7c>
    2d76:	49 5d       	subi	r20, 0xD9	; 217
    2d78:	31 fd       	sbrc	r19, 1
    2d7a:	40 52       	subi	r20, 0x20	; 32
    2d7c:	41 93       	st	Z+, r20
    2d7e:	02 d0       	rcall	.+4      	; 0x2d84 <__ultoa_invert+0x84>
    2d80:	a9 f7       	brne	.-22     	; 0x2d6c <__ultoa_invert+0x6c>
    2d82:	ea cf       	rjmp	.-44     	; 0x2d58 <__ultoa_invert+0x58>
    2d84:	b4 e0       	ldi	r27, 0x04	; 4
    2d86:	a6 95       	lsr	r26
    2d88:	97 95       	ror	r25
    2d8a:	87 95       	ror	r24
    2d8c:	77 95       	ror	r23
    2d8e:	67 95       	ror	r22
    2d90:	ba 95       	dec	r27
    2d92:	c9 f7       	brne	.-14     	; 0x2d86 <__ultoa_invert+0x86>
    2d94:	00 97       	sbiw	r24, 0x00	; 0
    2d96:	61 05       	cpc	r22, r1
    2d98:	71 05       	cpc	r23, r1
    2d9a:	08 95       	ret
    2d9c:	9b 01       	movw	r18, r22
    2d9e:	ac 01       	movw	r20, r24
    2da0:	0a 2e       	mov	r0, r26
    2da2:	06 94       	lsr	r0
    2da4:	57 95       	ror	r21
    2da6:	47 95       	ror	r20
    2da8:	37 95       	ror	r19
    2daa:	27 95       	ror	r18
    2dac:	ba 95       	dec	r27
    2dae:	c9 f7       	brne	.-14     	; 0x2da2 <__ultoa_invert+0xa2>
    2db0:	62 0f       	add	r22, r18
    2db2:	73 1f       	adc	r23, r19
    2db4:	84 1f       	adc	r24, r20
    2db6:	95 1f       	adc	r25, r21
    2db8:	a0 1d       	adc	r26, r0
    2dba:	08 95       	ret

00002dbc <__prologue_saves__>:
    2dbc:	2f 92       	push	r2
    2dbe:	3f 92       	push	r3
    2dc0:	4f 92       	push	r4
    2dc2:	5f 92       	push	r5
    2dc4:	6f 92       	push	r6
    2dc6:	7f 92       	push	r7
    2dc8:	8f 92       	push	r8
    2dca:	9f 92       	push	r9
    2dcc:	af 92       	push	r10
    2dce:	bf 92       	push	r11
    2dd0:	cf 92       	push	r12
    2dd2:	df 92       	push	r13
    2dd4:	ef 92       	push	r14
    2dd6:	ff 92       	push	r15
    2dd8:	0f 93       	push	r16
    2dda:	1f 93       	push	r17
    2ddc:	cf 93       	push	r28
    2dde:	df 93       	push	r29
    2de0:	cd b7       	in	r28, 0x3d	; 61
    2de2:	de b7       	in	r29, 0x3e	; 62
    2de4:	ca 1b       	sub	r28, r26
    2de6:	db 0b       	sbc	r29, r27
    2de8:	0f b6       	in	r0, 0x3f	; 63
    2dea:	f8 94       	cli
    2dec:	de bf       	out	0x3e, r29	; 62
    2dee:	0f be       	out	0x3f, r0	; 63
    2df0:	cd bf       	out	0x3d, r28	; 61
    2df2:	09 94       	ijmp

00002df4 <__epilogue_restores__>:
    2df4:	2a 88       	ldd	r2, Y+18	; 0x12
    2df6:	39 88       	ldd	r3, Y+17	; 0x11
    2df8:	48 88       	ldd	r4, Y+16	; 0x10
    2dfa:	5f 84       	ldd	r5, Y+15	; 0x0f
    2dfc:	6e 84       	ldd	r6, Y+14	; 0x0e
    2dfe:	7d 84       	ldd	r7, Y+13	; 0x0d
    2e00:	8c 84       	ldd	r8, Y+12	; 0x0c
    2e02:	9b 84       	ldd	r9, Y+11	; 0x0b
    2e04:	aa 84       	ldd	r10, Y+10	; 0x0a
    2e06:	b9 84       	ldd	r11, Y+9	; 0x09
    2e08:	c8 84       	ldd	r12, Y+8	; 0x08
    2e0a:	df 80       	ldd	r13, Y+7	; 0x07
    2e0c:	ee 80       	ldd	r14, Y+6	; 0x06
    2e0e:	fd 80       	ldd	r15, Y+5	; 0x05
    2e10:	0c 81       	ldd	r16, Y+4	; 0x04
    2e12:	1b 81       	ldd	r17, Y+3	; 0x03
    2e14:	aa 81       	ldd	r26, Y+2	; 0x02
    2e16:	b9 81       	ldd	r27, Y+1	; 0x01
    2e18:	ce 0f       	add	r28, r30
    2e1a:	d1 1d       	adc	r29, r1
    2e1c:	0f b6       	in	r0, 0x3f	; 63
    2e1e:	f8 94       	cli
    2e20:	de bf       	out	0x3e, r29	; 62
    2e22:	0f be       	out	0x3f, r0	; 63
    2e24:	cd bf       	out	0x3d, r28	; 61
    2e26:	ed 01       	movw	r28, r26
    2e28:	08 95       	ret

00002e2a <_exit>:
    2e2a:	f8 94       	cli

00002e2c <__stop_program>:
    2e2c:	ff cf       	rjmp	.-2      	; 0x2e2c <__stop_program>
