
workable.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000208  00800100  00001e62  00001ef6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001e62  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000018  00800308  00800308  000020fe  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000020fe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000215c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  0000219c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001627  00000000  00000000  0000228c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000988  00000000  00000000  000038b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000cc8  00000000  00000000  0000423b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000029c  00000000  00000000  00004f04  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000784  00000000  00000000  000051a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d5f  00000000  00000000  00005924  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  00006683  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b8 00 	jmp	0x170	; 0x170 <__ctors_end>
       4:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
       8:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
       c:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      10:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      14:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      18:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      1c:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      20:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      24:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      28:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      2c:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      30:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      34:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      38:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      3c:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      40:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      44:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      48:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      4c:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      50:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      54:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      58:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      5c:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      60:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      64:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      68:	a2 03       	fmuls	r18, r18
      6a:	ba 03       	fmulsu	r19, r18
      6c:	d2 03       	fmuls	r21, r18
      6e:	ea 03       	fmulsu	r22, r18
      70:	02 04       	cpc	r0, r2
      72:	5d 04       	cpc	r5, r13
      74:	6c 04       	cpc	r6, r12

00000076 <__trampolines_end>:
      76:	00 40       	sbci	r16, 0x00	; 0
      78:	7a 10       	cpse	r7, r10
      7a:	f3 5a       	subi	r31, 0xA3	; 163
      7c:	00 a0       	ldd	r0, Z+32	; 0x20
      7e:	72 4e       	sbci	r23, 0xE2	; 226
      80:	18 09       	sbc	r17, r8
      82:	00 10       	cpse	r0, r0
      84:	a5 d4       	rcall	.+2378   	; 0x9d0 <__stack+0xd1>
      86:	e8 00       	.word	0x00e8	; ????
      88:	00 e8       	ldi	r16, 0x80	; 128
      8a:	76 48       	sbci	r23, 0x86	; 134
      8c:	17 00       	.word	0x0017	; ????
      8e:	00 e4       	ldi	r16, 0x40	; 64
      90:	0b 54       	subi	r16, 0x4B	; 75
      92:	02 00       	.word	0x0002	; ????
      94:	00 ca       	rjmp	.-3072   	; 0xfffff496 <__eeprom_end+0xff7ef496>
      96:	9a 3b       	cpi	r25, 0xBA	; 186
      98:	00 00       	nop
      9a:	00 e1       	ldi	r16, 0x10	; 16
      9c:	f5 05       	cpc	r31, r5
      9e:	00 00       	nop
      a0:	80 96       	adiw	r24, 0x20	; 32
      a2:	98 00       	.word	0x0098	; ????
      a4:	00 00       	nop
      a6:	40 42       	sbci	r20, 0x20	; 32
      a8:	0f 00       	.word	0x000f	; ????
      aa:	00 00       	nop
      ac:	a0 86       	std	Z+8, r10	; 0x08
      ae:	01 00       	.word	0x0001	; ????
      b0:	00 00       	nop
      b2:	10 27       	eor	r17, r16
      b4:	00 00       	nop
      b6:	00 00       	nop
      b8:	e8 03       	fmulsu	r22, r16
      ba:	00 00       	nop
      bc:	00 00       	nop
      be:	64 00       	.word	0x0064	; ????
      c0:	00 00       	nop
      c2:	00 00       	nop
      c4:	0a 00       	.word	0x000a	; ????
      c6:	00 00       	nop
      c8:	00 00       	nop
      ca:	01 00       	.word	0x0001	; ????
      cc:	00 00       	nop
      ce:	00 00       	nop
      d0:	2c 76       	andi	r18, 0x6C	; 108
      d2:	d8 88       	ldd	r13, Y+16	; 0x10
      d4:	dc 67       	ori	r29, 0x7C	; 124
      d6:	4f 08       	sbc	r4, r15
      d8:	23 df       	rcall	.-442    	; 0xffffff20 <__eeprom_end+0xff7eff20>
      da:	c1 df       	rcall	.-126    	; 0x5e <__SREG__+0x1f>
      dc:	ae 59       	subi	r26, 0x9E	; 158
      de:	e1 b1       	in	r30, 0x01	; 1
      e0:	b7 96       	adiw	r30, 0x27	; 39
      e2:	e5 e3       	ldi	r30, 0x35	; 53
      e4:	e4 53       	subi	r30, 0x34	; 52
      e6:	c6 3a       	cpi	r28, 0xA6	; 166
      e8:	e6 51       	subi	r30, 0x16	; 22
      ea:	99 76       	andi	r25, 0x69	; 105
      ec:	96 e8       	ldi	r25, 0x86	; 134
      ee:	e6 c2       	rjmp	.+1484   	; 0x6bc <get_tank_capacity+0x16>
      f0:	84 26       	eor	r8, r20
      f2:	eb 89       	ldd	r30, Y+19	; 0x13
      f4:	8c 9b       	sbis	0x11, 4	; 17
      f6:	62 ed       	ldi	r22, 0xD2	; 210
      f8:	40 7c       	andi	r20, 0xC0	; 192
      fa:	6f fc       	.word	0xfc6f	; ????
      fc:	ef bc       	out	0x2f, r14	; 47
      fe:	9c 9f       	mul	r25, r28
     100:	40 f2       	brcs	.-112    	; 0x92 <__trampolines_end+0x1c>
     102:	ba a5       	ldd	r27, Y+42	; 0x2a
     104:	6f a5       	ldd	r22, Y+47	; 0x2f
     106:	f4 90       	lpm	r15, Z
     108:	05 5a       	subi	r16, 0xA5	; 165
     10a:	2a f7       	brpl	.-54     	; 0xd6 <__trampolines_end+0x60>
     10c:	5c 93       	st	X, r21
     10e:	6b 6c       	ori	r22, 0xCB	; 203
     110:	f9 67       	ori	r31, 0x79	; 121
     112:	6d c1       	rjmp	.+730    	; 0x3ee <DS18B20_write_bit+0x3a>
     114:	1b fc       	.word	0xfc1b	; ????
     116:	e0 e4       	ldi	r30, 0x40	; 64
     118:	0d 47       	sbci	r16, 0x7D	; 125
     11a:	fe f5       	brtc	.+126    	; 0x19a <.do_clear_bss_loop>
     11c:	20 e6       	ldi	r18, 0x60	; 96
     11e:	b5 00       	.word	0x00b5	; ????
     120:	d0 ed       	ldi	r29, 0xD0	; 208
     122:	90 2e       	mov	r9, r16
     124:	03 00       	.word	0x0003	; ????
     126:	94 35       	cpi	r25, 0x54	; 84
     128:	77 05       	cpc	r23, r7
     12a:	00 80       	ld	r0, Z
     12c:	84 1e       	adc	r8, r20
     12e:	08 00       	.word	0x0008	; ????
     130:	00 20       	and	r0, r0
     132:	4e 0a       	sbc	r4, r30
     134:	00 00       	nop
     136:	00 c8       	rjmp	.-4096   	; 0xfffff138 <__eeprom_end+0xff7ef138>
     138:	0c 33       	cpi	r16, 0x3C	; 60
     13a:	33 33       	cpi	r19, 0x33	; 51
     13c:	33 0f       	add	r19, r19
     13e:	98 6e       	ori	r25, 0xE8	; 232
     140:	12 83       	std	Z+2, r17	; 0x02
     142:	11 41       	sbci	r17, 0x11	; 17
     144:	ef 8d       	ldd	r30, Y+31	; 0x1f
     146:	21 14       	cp	r2, r1
     148:	89 3b       	cpi	r24, 0xB9	; 185
     14a:	e6 55       	subi	r30, 0x56	; 86
     14c:	16 cf       	rjmp	.-468    	; 0xffffff7a <__eeprom_end+0xff7eff7a>
     14e:	fe e6       	ldi	r31, 0x6E	; 110
     150:	db 18       	sub	r13, r11
     152:	d1 84       	ldd	r13, Z+9	; 0x09
     154:	4b 38       	cpi	r20, 0x8B	; 139
     156:	1b f7       	brvc	.-58     	; 0x11e <__trampolines_end+0xa8>
     158:	7c 1d       	adc	r23, r12
     15a:	90 1d       	adc	r25, r0
     15c:	a4 bb       	out	0x14, r26	; 20
     15e:	e4 24       	eor	r14, r4
     160:	20 32       	cpi	r18, 0x20	; 32
     162:	84 72       	andi	r24, 0x24	; 36
     164:	5e 22       	and	r5, r30
     166:	81 00       	.word	0x0081	; ????
     168:	c9 f1       	breq	.+114    	; 0x1dc <format_float+0x2e>
     16a:	24 ec       	ldi	r18, 0xC4	; 196
     16c:	a1 e5       	ldi	r26, 0x51	; 81
     16e:	3d 27       	eor	r19, r29

00000170 <__ctors_end>:
     170:	11 24       	eor	r1, r1
     172:	1f be       	out	0x3f, r1	; 63
     174:	cf ef       	ldi	r28, 0xFF	; 255
     176:	d8 e0       	ldi	r29, 0x08	; 8
     178:	de bf       	out	0x3e, r29	; 62
     17a:	cd bf       	out	0x3d, r28	; 61

0000017c <__do_copy_data>:
     17c:	13 e0       	ldi	r17, 0x03	; 3
     17e:	a0 e0       	ldi	r26, 0x00	; 0
     180:	b1 e0       	ldi	r27, 0x01	; 1
     182:	e2 e6       	ldi	r30, 0x62	; 98
     184:	fe e1       	ldi	r31, 0x1E	; 30
     186:	02 c0       	rjmp	.+4      	; 0x18c <__do_copy_data+0x10>
     188:	05 90       	lpm	r0, Z+
     18a:	0d 92       	st	X+, r0
     18c:	a8 30       	cpi	r26, 0x08	; 8
     18e:	b1 07       	cpc	r27, r17
     190:	d9 f7       	brne	.-10     	; 0x188 <__do_copy_data+0xc>

00000192 <__do_clear_bss>:
     192:	23 e0       	ldi	r18, 0x03	; 3
     194:	a8 e0       	ldi	r26, 0x08	; 8
     196:	b3 e0       	ldi	r27, 0x03	; 3
     198:	01 c0       	rjmp	.+2      	; 0x19c <.do_clear_bss_start>

0000019a <.do_clear_bss_loop>:
     19a:	1d 92       	st	X+, r1

0000019c <.do_clear_bss_start>:
     19c:	a0 32       	cpi	r26, 0x20	; 32
     19e:	b2 07       	cpc	r27, r18
     1a0:	e1 f7       	brne	.-8      	; 0x19a <.do_clear_bss_loop>
     1a2:	0e 94 ab 07 	call	0xf56	; 0xf56 <main>
     1a6:	0c 94 2f 0f 	jmp	0x1e5e	; 0x1e5e <_exit>

000001aa <__bad_interrupt>:
     1aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ae <format_float>:
{
    while (*str)
    {
        LCD_1602A_load_data(*str++);
    }
}
     1ae:	af 92       	push	r10
     1b0:	bf 92       	push	r11
     1b2:	cf 92       	push	r12
     1b4:	df 92       	push	r13
     1b6:	ef 92       	push	r14
     1b8:	ff 92       	push	r15
     1ba:	0f 93       	push	r16
     1bc:	1f 93       	push	r17
     1be:	cf 93       	push	r28
     1c0:	df 93       	push	r29
     1c2:	cd b7       	in	r28, 0x3d	; 61
     1c4:	de b7       	in	r29, 0x3e	; 62
     1c6:	68 97       	sbiw	r28, 0x18	; 24
     1c8:	0f b6       	in	r0, 0x3f	; 63
     1ca:	f8 94       	cli
     1cc:	de bf       	out	0x3e, r29	; 62
     1ce:	0f be       	out	0x3f, r0	; 63
     1d0:	cd bf       	out	0x3d, r28	; 61
     1d2:	d8 2e       	mov	r13, r24
     1d4:	c9 2e       	mov	r12, r25
     1d6:	b6 2e       	mov	r11, r22
     1d8:	a7 2e       	mov	r10, r23
     1da:	ca 01       	movw	r24, r20
     1dc:	b9 01       	movw	r22, r18
     1de:	20 2f       	mov	r18, r16
     1e0:	8e 01       	movw	r16, r28
     1e2:	0f 5f       	subi	r16, 0xFF	; 255
     1e4:	1f 4f       	sbci	r17, 0xFF	; 255
     1e6:	40 e0       	ldi	r20, 0x00	; 0
     1e8:	0e 94 e5 09 	call	0x13ca	; 0x13ca <dtostrf>
     1ec:	e1 14       	cp	r14, r1
     1ee:	f1 04       	cpc	r15, r1
     1f0:	c1 f0       	breq	.+48     	; 0x222 <format_float+0x74>
     1f2:	f7 01       	movw	r30, r14
     1f4:	80 81       	ld	r24, Z
     1f6:	88 23       	and	r24, r24
     1f8:	a1 f0       	breq	.+40     	; 0x222 <format_float+0x74>
     1fa:	ff 92       	push	r15
     1fc:	ef 92       	push	r14
     1fe:	1f 93       	push	r17
     200:	0f 93       	push	r16
     202:	84 e4       	ldi	r24, 0x44	; 68
     204:	91 e0       	ldi	r25, 0x01	; 1
     206:	9f 93       	push	r25
     208:	8f 93       	push	r24
     20a:	af 92       	push	r10
     20c:	bf 92       	push	r11
     20e:	cf 92       	push	r12
     210:	df 92       	push	r13
     212:	0e 94 05 0a 	call	0x140a	; 0x140a <snprintf>
     216:	0f b6       	in	r0, 0x3f	; 63
     218:	f8 94       	cli
     21a:	de bf       	out	0x3e, r29	; 62
     21c:	0f be       	out	0x3f, r0	; 63
     21e:	cd bf       	out	0x3d, r28	; 61
     220:	13 c0       	rjmp	.+38     	; 0x248 <format_float+0x9a>
     222:	ce 01       	movw	r24, r28
     224:	01 96       	adiw	r24, 0x01	; 1
     226:	9f 93       	push	r25
     228:	8f 93       	push	r24
     22a:	87 e4       	ldi	r24, 0x47	; 71
     22c:	91 e0       	ldi	r25, 0x01	; 1
     22e:	9f 93       	push	r25
     230:	8f 93       	push	r24
     232:	af 92       	push	r10
     234:	bf 92       	push	r11
     236:	cf 92       	push	r12
     238:	df 92       	push	r13
     23a:	0e 94 05 0a 	call	0x140a	; 0x140a <snprintf>
     23e:	0f b6       	in	r0, 0x3f	; 63
     240:	f8 94       	cli
     242:	de bf       	out	0x3e, r29	; 62
     244:	0f be       	out	0x3f, r0	; 63
     246:	cd bf       	out	0x3d, r28	; 61
     248:	68 96       	adiw	r28, 0x18	; 24
     24a:	0f b6       	in	r0, 0x3f	; 63
     24c:	f8 94       	cli
     24e:	de bf       	out	0x3e, r29	; 62
     250:	0f be       	out	0x3f, r0	; 63
     252:	cd bf       	out	0x3d, r28	; 61
     254:	df 91       	pop	r29
     256:	cf 91       	pop	r28
     258:	1f 91       	pop	r17
     25a:	0f 91       	pop	r16
     25c:	ff 90       	pop	r15
     25e:	ef 90       	pop	r14
     260:	df 90       	pop	r13
     262:	cf 90       	pop	r12
     264:	bf 90       	pop	r11
     266:	af 90       	pop	r10
     268:	08 95       	ret

0000026a <LCD_1602A_latch>:
     26a:	85 b1       	in	r24, 0x05	; 5
     26c:	81 60       	ori	r24, 0x01	; 1
     26e:	85 b9       	out	0x05, r24	; 5
     270:	85 e0       	ldi	r24, 0x05	; 5
     272:	8a 95       	dec	r24
     274:	f1 f7       	brne	.-4      	; 0x272 <LCD_1602A_latch+0x8>
     276:	00 00       	nop
     278:	85 b1       	in	r24, 0x05	; 5
     27a:	8e 7f       	andi	r24, 0xFE	; 254
     27c:	85 b9       	out	0x05, r24	; 5
     27e:	8f e8       	ldi	r24, 0x8F	; 143
     280:	91 e0       	ldi	r25, 0x01	; 1
     282:	01 97       	sbiw	r24, 0x01	; 1
     284:	f1 f7       	brne	.-4      	; 0x282 <LCD_1602A_latch+0x18>
     286:	00 c0       	rjmp	.+0      	; 0x288 <LCD_1602A_latch+0x1e>
     288:	00 00       	nop
     28a:	08 95       	ret

0000028c <LCD_1602A_send_nibble>:
     28c:	9b b1       	in	r25, 0x0b	; 11
     28e:	9f 70       	andi	r25, 0x0F	; 15
     290:	9b b9       	out	0x0b, r25	; 11
     292:	80 ff       	sbrs	r24, 0
     294:	03 c0       	rjmp	.+6      	; 0x29c <LCD_1602A_send_nibble+0x10>
     296:	9b b1       	in	r25, 0x0b	; 11
     298:	90 61       	ori	r25, 0x10	; 16
     29a:	9b b9       	out	0x0b, r25	; 11
     29c:	81 ff       	sbrs	r24, 1
     29e:	03 c0       	rjmp	.+6      	; 0x2a6 <LCD_1602A_send_nibble+0x1a>
     2a0:	9b b1       	in	r25, 0x0b	; 11
     2a2:	90 62       	ori	r25, 0x20	; 32
     2a4:	9b b9       	out	0x0b, r25	; 11
     2a6:	82 ff       	sbrs	r24, 2
     2a8:	03 c0       	rjmp	.+6      	; 0x2b0 <LCD_1602A_send_nibble+0x24>
     2aa:	9b b1       	in	r25, 0x0b	; 11
     2ac:	90 64       	ori	r25, 0x40	; 64
     2ae:	9b b9       	out	0x0b, r25	; 11
     2b0:	83 ff       	sbrs	r24, 3
     2b2:	03 c0       	rjmp	.+6      	; 0x2ba <LCD_1602A_send_nibble+0x2e>
     2b4:	8b b1       	in	r24, 0x0b	; 11
     2b6:	80 68       	ori	r24, 0x80	; 128
     2b8:	8b b9       	out	0x0b, r24	; 11
     2ba:	0e 94 35 01 	call	0x26a	; 0x26a <LCD_1602A_latch>
     2be:	08 95       	ret

000002c0 <LCD_1602A_load_command>:
     2c0:	cf 93       	push	r28
     2c2:	c8 2f       	mov	r28, r24
     2c4:	85 b1       	in	r24, 0x05	; 5
     2c6:	8d 7f       	andi	r24, 0xFD	; 253
     2c8:	85 b9       	out	0x05, r24	; 5
     2ca:	8c 2f       	mov	r24, r28
     2cc:	82 95       	swap	r24
     2ce:	8f 70       	andi	r24, 0x0F	; 15
     2d0:	0e 94 46 01 	call	0x28c	; 0x28c <LCD_1602A_send_nibble>
     2d4:	8c 2f       	mov	r24, r28
     2d6:	8f 70       	andi	r24, 0x0F	; 15
     2d8:	0e 94 46 01 	call	0x28c	; 0x28c <LCD_1602A_send_nibble>
     2dc:	cf 91       	pop	r28
     2de:	08 95       	ret

000002e0 <LCD_1602A_load_data>:
     2e0:	cf 93       	push	r28
     2e2:	c8 2f       	mov	r28, r24
     2e4:	85 b1       	in	r24, 0x05	; 5
     2e6:	82 60       	ori	r24, 0x02	; 2
     2e8:	85 b9       	out	0x05, r24	; 5
     2ea:	8c 2f       	mov	r24, r28
     2ec:	82 95       	swap	r24
     2ee:	8f 70       	andi	r24, 0x0F	; 15
     2f0:	0e 94 46 01 	call	0x28c	; 0x28c <LCD_1602A_send_nibble>
     2f4:	8c 2f       	mov	r24, r28
     2f6:	8f 70       	andi	r24, 0x0F	; 15
     2f8:	0e 94 46 01 	call	0x28c	; 0x28c <LCD_1602A_send_nibble>
     2fc:	cf 91       	pop	r28
     2fe:	08 95       	ret

00000300 <LCD_1602A_init>:
    params: void
    returns: void
*/
void LCD_1602A_init(void)
{
    LCD_1602A_CTRL_DDR |= (1 << LCD_1602A_RS) | (1 << LCD_1602A_EN);
     300:	84 b1       	in	r24, 0x04	; 4
     302:	83 60       	ori	r24, 0x03	; 3
     304:	84 b9       	out	0x04, r24	; 4
    LCD_1602A_DATA_DDR |= (1 << LCD_1602A_D4) | (1 << LCD_1602A_D5) | (1 << LCD_1602A_D6) | (1 << LCD_1602A_D7);
     306:	8a b1       	in	r24, 0x0a	; 10
     308:	80 6f       	ori	r24, 0xF0	; 240
     30a:	8a b9       	out	0x0a, r24	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     30c:	2f ef       	ldi	r18, 0xFF	; 255
     30e:	89 ef       	ldi	r24, 0xF9	; 249
     310:	90 e0       	ldi	r25, 0x00	; 0
     312:	21 50       	subi	r18, 0x01	; 1
     314:	80 40       	sbci	r24, 0x00	; 0
     316:	90 40       	sbci	r25, 0x00	; 0
     318:	e1 f7       	brne	.-8      	; 0x312 <LCD_1602A_init+0x12>
     31a:	00 c0       	rjmp	.+0      	; 0x31c <LCD_1602A_init+0x1c>
     31c:	00 00       	nop

    _delay_ms(20); // Wait for LCD power up
    LCD_1602A_send_nibble(DISPLAY_WAIT_POWER_UP);
     31e:	83 e0       	ldi	r24, 0x03	; 3
     320:	0e 94 46 01 	call	0x28c	; 0x28c <LCD_1602A_send_nibble>
     324:	8f e1       	ldi	r24, 0x1F	; 31
     326:	9e e4       	ldi	r25, 0x4E	; 78
     328:	01 97       	sbiw	r24, 0x01	; 1
     32a:	f1 f7       	brne	.-4      	; 0x328 <LCD_1602A_init+0x28>
     32c:	00 c0       	rjmp	.+0      	; 0x32e <LCD_1602A_init+0x2e>
     32e:	00 00       	nop
    _delay_ms(5);
    LCD_1602A_send_nibble(DISPLAY_WAIT_POWER_UP);
     330:	83 e0       	ldi	r24, 0x03	; 3
     332:	0e 94 46 01 	call	0x28c	; 0x28c <LCD_1602A_send_nibble>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     336:	87 e5       	ldi	r24, 0x57	; 87
     338:	92 e0       	ldi	r25, 0x02	; 2
     33a:	01 97       	sbiw	r24, 0x01	; 1
     33c:	f1 f7       	brne	.-4      	; 0x33a <LCD_1602A_init+0x3a>
     33e:	00 c0       	rjmp	.+0      	; 0x340 <LCD_1602A_init+0x40>
     340:	00 00       	nop
    _delay_us(150);
    LCD_1602A_send_nibble(DISPLAY_WAIT_POWER_UP);
     342:	83 e0       	ldi	r24, 0x03	; 3
     344:	0e 94 46 01 	call	0x28c	; 0x28c <LCD_1602A_send_nibble>

    LCD_1602A_send_nibble(DISPLAY_4_BIT_MODE); // Switch to 4-bit mode
     348:	82 e0       	ldi	r24, 0x02	; 2
     34a:	0e 94 46 01 	call	0x28c	; 0x28c <LCD_1602A_send_nibble>

    LCD_1602A_load_command(DISPLAY_FUNCTION_SET_4BIT_2LINE);
     34e:	88 e2       	ldi	r24, 0x28	; 40
     350:	0e 94 60 01 	call	0x2c0	; 0x2c0 <LCD_1602A_load_command>
    LCD_1602A_load_command(DISPLAY_DISPLAY_ON_CURSOR_OFF);
     354:	8c e0       	ldi	r24, 0x0C	; 12
     356:	0e 94 60 01 	call	0x2c0	; 0x2c0 <LCD_1602A_load_command>
    LCD_1602A_load_command(DISPLAY_ENTRY_MODE_SET);
     35a:	86 e0       	ldi	r24, 0x06	; 6
     35c:	0e 94 60 01 	call	0x2c0	; 0x2c0 <LCD_1602A_load_command>
    LCD_1602A_load_command(DISPLAY_CLEAR_SCREEN);
     360:	81 e0       	ldi	r24, 0x01	; 1
     362:	0e 94 60 01 	call	0x2c0	; 0x2c0 <LCD_1602A_load_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     366:	8f e3       	ldi	r24, 0x3F	; 63
     368:	9f e1       	ldi	r25, 0x1F	; 31
     36a:	01 97       	sbiw	r24, 0x01	; 1
     36c:	f1 f7       	brne	.-4      	; 0x36a <LCD_1602A_init+0x6a>
     36e:	00 c0       	rjmp	.+0      	; 0x370 <LCD_1602A_init+0x70>
     370:	00 00       	nop
     372:	08 95       	ret

00000374 <DS18B20_reset>:
    params: void
    returns: uint8_t - 1 if presence pulse detected, 0 otherwise
*/
uint8_t DS18B20_reset(void)
{
    DS18B20_OUTPUT();
     374:	87 b1       	in	r24, 0x07	; 7
     376:	81 60       	ori	r24, 0x01	; 1
     378:	87 b9       	out	0x07, r24	; 7
    DS18B20_LOW();
     37a:	88 b1       	in	r24, 0x08	; 8
     37c:	8e 7f       	andi	r24, 0xFE	; 254
     37e:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     380:	8f e7       	ldi	r24, 0x7F	; 127
     382:	97 e0       	ldi	r25, 0x07	; 7
     384:	01 97       	sbiw	r24, 0x01	; 1
     386:	f1 f7       	brne	.-4      	; 0x384 <DS18B20_reset+0x10>
     388:	00 c0       	rjmp	.+0      	; 0x38a <DS18B20_reset+0x16>
     38a:	00 00       	nop
    _delay_us(480);
    DS18B20_INPUT();
     38c:	87 b1       	in	r24, 0x07	; 7
     38e:	8e 7f       	andi	r24, 0xFE	; 254
     390:	87 b9       	out	0x07, r24	; 7
     392:	ef ee       	ldi	r30, 0xEF	; 239
     394:	f0 e0       	ldi	r31, 0x00	; 0
     396:	31 97       	sbiw	r30, 0x01	; 1
     398:	f1 f7       	brne	.-4      	; 0x396 <DS18B20_reset+0x22>
     39a:	00 c0       	rjmp	.+0      	; 0x39c <DS18B20_reset+0x28>
     39c:	00 00       	nop
    _delay_us(60);

    uint8_t presence = !(DS18B20_PIN & (1 << DS18B20_DQ));
     39e:	96 b1       	in	r25, 0x06	; 6
     3a0:	81 e0       	ldi	r24, 0x01	; 1
     3a2:	89 27       	eor	r24, r25
     3a4:	81 70       	andi	r24, 0x01	; 1
     3a6:	ef e8       	ldi	r30, 0x8F	; 143
     3a8:	f6 e0       	ldi	r31, 0x06	; 6
     3aa:	31 97       	sbiw	r30, 0x01	; 1
     3ac:	f1 f7       	brne	.-4      	; 0x3aa <DS18B20_reset+0x36>
     3ae:	00 c0       	rjmp	.+0      	; 0x3b0 <DS18B20_reset+0x3c>
     3b0:	00 00       	nop
    _delay_us(420);
    return presence;
}
     3b2:	08 95       	ret

000003b4 <DS18B20_write_bit>:
    params: uint8_t bit - the bit to write (0 or 1)
    returns: void
*/
void DS18B20_write_bit(uint8_t bit)
{
    DS18B20_OUTPUT();
     3b4:	97 b1       	in	r25, 0x07	; 7
     3b6:	91 60       	ori	r25, 0x01	; 1
     3b8:	97 b9       	out	0x07, r25	; 7
    DS18B20_LOW();
     3ba:	98 b1       	in	r25, 0x08	; 8
     3bc:	9e 7f       	andi	r25, 0xFE	; 254
     3be:	98 b9       	out	0x08, r25	; 8
    if (bit)
     3c0:	88 23       	and	r24, r24
     3c2:	71 f0       	breq	.+28     	; 0x3e0 <DS18B20_write_bit+0x2c>
     3c4:	85 e0       	ldi	r24, 0x05	; 5
     3c6:	8a 95       	dec	r24
     3c8:	f1 f7       	brne	.-4      	; 0x3c6 <DS18B20_write_bit+0x12>
     3ca:	00 00       	nop
    {
        _delay_us(1);
        DS18B20_INPUT();
     3cc:	87 b1       	in	r24, 0x07	; 7
     3ce:	8e 7f       	andi	r24, 0xFE	; 254
     3d0:	87 b9       	out	0x07, r24	; 7
     3d2:	8f ee       	ldi	r24, 0xEF	; 239
     3d4:	90 e0       	ldi	r25, 0x00	; 0
     3d6:	01 97       	sbiw	r24, 0x01	; 1
     3d8:	f1 f7       	brne	.-4      	; 0x3d6 <DS18B20_write_bit+0x22>
     3da:	00 c0       	rjmp	.+0      	; 0x3dc <DS18B20_write_bit+0x28>
     3dc:	00 00       	nop
     3de:	08 95       	ret
     3e0:	8f ee       	ldi	r24, 0xEF	; 239
     3e2:	90 e0       	ldi	r25, 0x00	; 0
     3e4:	01 97       	sbiw	r24, 0x01	; 1
     3e6:	f1 f7       	brne	.-4      	; 0x3e4 <DS18B20_write_bit+0x30>
     3e8:	00 c0       	rjmp	.+0      	; 0x3ea <DS18B20_write_bit+0x36>
     3ea:	00 00       	nop
        _delay_us(60);
    }
    else
    {
        _delay_us(60);
        DS18B20_INPUT();
     3ec:	87 b1       	in	r24, 0x07	; 7
     3ee:	8e 7f       	andi	r24, 0xFE	; 254
     3f0:	87 b9       	out	0x07, r24	; 7
     3f2:	08 95       	ret

000003f4 <DS18B20_write_byte>:
    write a byte to the DS18B20 sensor
    params: uint8_t data - the byte to write
    returns: void
*/
void DS18B20_write_byte(uint8_t data)
{
     3f4:	cf 93       	push	r28
     3f6:	df 93       	push	r29
     3f8:	d8 2f       	mov	r29, r24
    for (uint8_t i = 0; i < 8; i++)
     3fa:	c0 e0       	ldi	r28, 0x00	; 0
     3fc:	06 c0       	rjmp	.+12     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
    {
        DS18B20_write_bit(data & 0x01);
     3fe:	8d 2f       	mov	r24, r29
     400:	81 70       	andi	r24, 0x01	; 1
     402:	0e 94 da 01 	call	0x3b4	; 0x3b4 <DS18B20_write_bit>
        data >>= 1;
     406:	d6 95       	lsr	r29
    params: uint8_t data - the byte to write
    returns: void
*/
void DS18B20_write_byte(uint8_t data)
{
    for (uint8_t i = 0; i < 8; i++)
     408:	cf 5f       	subi	r28, 0xFF	; 255
     40a:	c8 30       	cpi	r28, 0x08	; 8
     40c:	c0 f3       	brcs	.-16     	; 0x3fe <DS18B20_write_byte+0xa>
    {
        DS18B20_write_bit(data & 0x01);
        data >>= 1;
    }
}
     40e:	df 91       	pop	r29
     410:	cf 91       	pop	r28
     412:	08 95       	ret

00000414 <DS18B20_read_bit>:
    returns: uint8_t - the bit read (0 or 1)
*/
uint8_t DS18B20_read_bit(void)
{
    uint8_t bit;
    DS18B20_OUTPUT();
     414:	87 b1       	in	r24, 0x07	; 7
     416:	81 60       	ori	r24, 0x01	; 1
     418:	87 b9       	out	0x07, r24	; 7
    DS18B20_LOW();
     41a:	88 b1       	in	r24, 0x08	; 8
     41c:	8e 7f       	andi	r24, 0xFE	; 254
     41e:	88 b9       	out	0x08, r24	; 8
     420:	8a e0       	ldi	r24, 0x0A	; 10
     422:	8a 95       	dec	r24
     424:	f1 f7       	brne	.-4      	; 0x422 <DS18B20_read_bit+0xe>
     426:	00 c0       	rjmp	.+0      	; 0x428 <DS18B20_read_bit+0x14>
    _delay_us(2);
    DS18B20_INPUT();
     428:	87 b1       	in	r24, 0x07	; 7
     42a:	8e 7f       	andi	r24, 0xFE	; 254
     42c:	87 b9       	out	0x07, r24	; 7
     42e:	e5 e3       	ldi	r30, 0x35	; 53
     430:	ea 95       	dec	r30
     432:	f1 f7       	brne	.-4      	; 0x430 <DS18B20_read_bit+0x1c>
     434:	00 00       	nop
    _delay_us(10);
    bit = (DS18B20_PIN & (1 << DS18B20_DQ)) ? 1 : 0;
     436:	86 b1       	in	r24, 0x06	; 6
     438:	81 70       	andi	r24, 0x01	; 1
     43a:	e7 ec       	ldi	r30, 0xC7	; 199
     43c:	f0 e0       	ldi	r31, 0x00	; 0
     43e:	31 97       	sbiw	r30, 0x01	; 1
     440:	f1 f7       	brne	.-4      	; 0x43e <DS18B20_read_bit+0x2a>
     442:	00 c0       	rjmp	.+0      	; 0x444 <DS18B20_read_bit+0x30>
     444:	00 00       	nop
    _delay_us(50);
    return bit;
}
     446:	08 95       	ret

00000448 <DS18B20_read_byte>:
    read a byte from the DS18B20 sensor
    params: void
    returns: uint8_t - the byte read
*/
uint8_t DS18B20_read_byte(void)
{
     448:	cf 93       	push	r28
     44a:	df 93       	push	r29
    uint8_t data = 0;
    for (uint8_t i = 0; i < 8; i++)
     44c:	c0 e0       	ldi	r28, 0x00	; 0
    params: void
    returns: uint8_t - the byte read
*/
uint8_t DS18B20_read_byte(void)
{
    uint8_t data = 0;
     44e:	d0 e0       	ldi	r29, 0x00	; 0
    for (uint8_t i = 0; i < 8; i++)
     450:	06 c0       	rjmp	.+12     	; 0x45e <DS18B20_read_byte+0x16>
    {
        data >>= 1;
     452:	d6 95       	lsr	r29
        if (DS18B20_read_bit())
     454:	0e 94 0a 02 	call	0x414	; 0x414 <DS18B20_read_bit>
     458:	81 11       	cpse	r24, r1
            data |= 0x80;
     45a:	d0 68       	ori	r29, 0x80	; 128
    returns: uint8_t - the byte read
*/
uint8_t DS18B20_read_byte(void)
{
    uint8_t data = 0;
    for (uint8_t i = 0; i < 8; i++)
     45c:	cf 5f       	subi	r28, 0xFF	; 255
     45e:	c8 30       	cpi	r28, 0x08	; 8
     460:	c0 f3       	brcs	.-16     	; 0x452 <DS18B20_read_byte+0xa>
        data >>= 1;
        if (DS18B20_read_bit())
            data |= 0x80;
    }
    return data;
}
     462:	8d 2f       	mov	r24, r29
     464:	df 91       	pop	r29
     466:	cf 91       	pop	r28
     468:	08 95       	ret

0000046a <DS18B20_read_temperature>:
    read temperature from the DS18B20 sensor
    params: void
    returns: float - the temperature in degrees Celsius
*/
float DS18B20_read_temperature(void)
{
     46a:	cf 93       	push	r28
    uint8_t temp_l, temp_h;
    int16_t temp;

    DS18B20_reset();
     46c:	0e 94 ba 01 	call	0x374	; 0x374 <DS18B20_reset>
    DS18B20_write_byte(0xCC);
     470:	8c ec       	ldi	r24, 0xCC	; 204
     472:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <DS18B20_write_byte>
    DS18B20_write_byte(0x44);
     476:	84 e4       	ldi	r24, 0x44	; 68
     478:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <DS18B20_write_byte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     47c:	2f ef       	ldi	r18, 0xFF	; 255
     47e:	8e e9       	ldi	r24, 0x9E	; 158
     480:	94 e2       	ldi	r25, 0x24	; 36
     482:	21 50       	subi	r18, 0x01	; 1
     484:	80 40       	sbci	r24, 0x00	; 0
     486:	90 40       	sbci	r25, 0x00	; 0
     488:	e1 f7       	brne	.-8      	; 0x482 <DS18B20_read_temperature+0x18>
     48a:	00 c0       	rjmp	.+0      	; 0x48c <DS18B20_read_temperature+0x22>
     48c:	00 00       	nop
    _delay_ms(750);

    DS18B20_reset();
     48e:	0e 94 ba 01 	call	0x374	; 0x374 <DS18B20_reset>
    DS18B20_write_byte(0xCC);
     492:	8c ec       	ldi	r24, 0xCC	; 204
     494:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <DS18B20_write_byte>
    DS18B20_write_byte(0xBE);
     498:	8e eb       	ldi	r24, 0xBE	; 190
     49a:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <DS18B20_write_byte>

    temp_l = DS18B20_read_byte();
     49e:	0e 94 24 02 	call	0x448	; 0x448 <DS18B20_read_byte>
     4a2:	c8 2f       	mov	r28, r24
    temp_h = DS18B20_read_byte();
     4a4:	0e 94 24 02 	call	0x448	; 0x448 <DS18B20_read_byte>

    temp = (temp_h << 8) | temp_l;
     4a8:	68 2f       	mov	r22, r24
     4aa:	70 e0       	ldi	r23, 0x00	; 0
     4ac:	76 2f       	mov	r23, r22
     4ae:	66 27       	eor	r22, r22
     4b0:	6c 2b       	or	r22, r28

    return (float)temp / 16.0;
     4b2:	07 2e       	mov	r0, r23
     4b4:	00 0c       	add	r0, r0
     4b6:	88 0b       	sbc	r24, r24
     4b8:	99 0b       	sbc	r25, r25
     4ba:	0e 94 e6 08 	call	0x11cc	; 0x11cc <__floatsisf>
     4be:	20 e0       	ldi	r18, 0x00	; 0
     4c0:	30 e0       	ldi	r19, 0x00	; 0
     4c2:	40 e8       	ldi	r20, 0x80	; 128
     4c4:	5d e3       	ldi	r21, 0x3D	; 61
     4c6:	0e 94 72 09 	call	0x12e4	; 0x12e4 <__mulsf3>
}
     4ca:	cf 91       	pop	r28
     4cc:	08 95       	ret

000004ce <HCSR04_init>:
    params: void
    returns: void
*/
void HCSR04_init(void)
{
    HCSR04_TRIG_DDR |= (1 << HCSR04_TRIG_PIN);
     4ce:	8a b1       	in	r24, 0x0a	; 10
     4d0:	84 60       	ori	r24, 0x04	; 4
     4d2:	8a b9       	out	0x0a, r24	; 10
    HCSR04_ECHO_DDR &= ~(1 << HCSR04_ECHO_PIN);
     4d4:	8a b1       	in	r24, 0x0a	; 10
     4d6:	87 7f       	andi	r24, 0xF7	; 247
     4d8:	8a b9       	out	0x0a, r24	; 10
     4da:	08 95       	ret

000004dc <HCSR04_trigger>:
    params: void
    returns: void
*/
void HCSR04_trigger(void)
{
    HCSR04_TRIG_PORT &= ~(1 << HCSR04_TRIG_PIN);
     4dc:	8b b1       	in	r24, 0x0b	; 11
     4de:	8b 7f       	andi	r24, 0xFB	; 251
     4e0:	8b b9       	out	0x0b, r24	; 11
     4e2:	2f ef       	ldi	r18, 0xFF	; 255
     4e4:	83 ec       	ldi	r24, 0xC3	; 195
     4e6:	99 e0       	ldi	r25, 0x09	; 9
     4e8:	21 50       	subi	r18, 0x01	; 1
     4ea:	80 40       	sbci	r24, 0x00	; 0
     4ec:	90 40       	sbci	r25, 0x00	; 0
     4ee:	e1 f7       	brne	.-8      	; 0x4e8 <HCSR04_trigger+0xc>
     4f0:	00 c0       	rjmp	.+0      	; 0x4f2 <HCSR04_trigger+0x16>
     4f2:	00 00       	nop
    _delay_ms(200);
    HCSR04_TRIG_PORT |= (1 << HCSR04_TRIG_PIN);
     4f4:	8b b1       	in	r24, 0x0b	; 11
     4f6:	84 60       	ori	r24, 0x04	; 4
     4f8:	8b b9       	out	0x0b, r24	; 11
     4fa:	2f ef       	ldi	r18, 0xFF	; 255
     4fc:	83 ec       	ldi	r24, 0xC3	; 195
     4fe:	99 e0       	ldi	r25, 0x09	; 9
     500:	21 50       	subi	r18, 0x01	; 1
     502:	80 40       	sbci	r24, 0x00	; 0
     504:	90 40       	sbci	r25, 0x00	; 0
     506:	e1 f7       	brne	.-8      	; 0x500 <HCSR04_trigger+0x24>
     508:	00 c0       	rjmp	.+0      	; 0x50a <HCSR04_trigger+0x2e>
     50a:	00 00       	nop
    _delay_ms(200);
    HCSR04_TRIG_PORT &= ~(1 << HCSR04_TRIG_PIN);
     50c:	8b b1       	in	r24, 0x0b	; 11
     50e:	8b 7f       	andi	r24, 0xFB	; 251
     510:	8b b9       	out	0x0b, r24	; 11
     512:	08 95       	ret

00000514 <HCSR04_read>:
*/
uint16_t HCSR04_read(void)
{
    uint32_t count = 0;

    while (!(HCSR04_ECHO_DEF_PIN & (1 << HCSR04_ECHO_PIN)));
     514:	4b 9b       	sbis	0x09, 3	; 9
     516:	fe cf       	rjmp	.-4      	; 0x514 <HCSR04_read>
     518:	60 e0       	ldi	r22, 0x00	; 0
     51a:	70 e0       	ldi	r23, 0x00	; 0
     51c:	cb 01       	movw	r24, r22
     51e:	08 c0       	rjmp	.+16     	; 0x530 <HCSR04_read+0x1c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     520:	25 e0       	ldi	r18, 0x05	; 5
     522:	2a 95       	dec	r18
     524:	f1 f7       	brne	.-4      	; 0x522 <HCSR04_read+0xe>
     526:	00 00       	nop

    while (HCSR04_ECHO_DEF_PIN & (1 << HCSR04_ECHO_PIN))
    {
        _delay_us(1);
        count++;
     528:	6f 5f       	subi	r22, 0xFF	; 255
     52a:	7f 4f       	sbci	r23, 0xFF	; 255
     52c:	8f 4f       	sbci	r24, 0xFF	; 255
     52e:	9f 4f       	sbci	r25, 0xFF	; 255
{
    uint32_t count = 0;

    while (!(HCSR04_ECHO_DEF_PIN & (1 << HCSR04_ECHO_PIN)));

    while (HCSR04_ECHO_DEF_PIN & (1 << HCSR04_ECHO_PIN))
     530:	4b 99       	sbic	0x09, 3	; 9
     532:	f6 cf       	rjmp	.-20     	; 0x520 <HCSR04_read+0xc>
    {
        _delay_us(1);
        count++;
    }

    return (uint16_t)(count / 58.0);
     534:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <__floatunsisf>
     538:	20 e0       	ldi	r18, 0x00	; 0
     53a:	30 e0       	ldi	r19, 0x00	; 0
     53c:	48 e6       	ldi	r20, 0x68	; 104
     53e:	52 e4       	ldi	r21, 0x42	; 66
     540:	0e 94 43 08 	call	0x1086	; 0x1086 <__divsf3>
     544:	0e 94 b5 08 	call	0x116a	; 0x116a <__fixunssfsi>
}
     548:	cb 01       	movw	r24, r22
     54a:	08 95       	ret

0000054c <HCSR04_get_distance>:
    params: void
    returns: uint16_t - the distance in centimeters
*/
uint16_t HCSR04_get_distance(void)
{
    HCSR04_trigger();
     54c:	0e 94 6e 02 	call	0x4dc	; 0x4dc <HCSR04_trigger>
    return HCSR04_read();
     550:	0e 94 8a 02 	call	0x514	; 0x514 <HCSR04_read>
}
     554:	08 95       	ret

00000556 <KEYPAD_init>:
    params: void
    returns: void
*/
void KEYPAD_init(void)
{
    KEYPAD_DDR &= ~((1 << KEYPAD_KEY_1) | (1 << KEYPAD_KEY_2) | (1 << KEYPAD_KEY_3) | (1 << KEYPAD_KEY_4));
     556:	84 b1       	in	r24, 0x04	; 4
     558:	83 7c       	andi	r24, 0xC3	; 195
     55a:	84 b9       	out	0x04, r24	; 4
    KEYPAD_PORT |= (1 << KEYPAD_KEY_1) | (1 << KEYPAD_KEY_2) | (1 << KEYPAD_KEY_3) | (1 << KEYPAD_KEY_4);
     55c:	85 b1       	in	r24, 0x05	; 5
     55e:	8c 63       	ori	r24, 0x3C	; 60
     560:	85 b9       	out	0x05, r24	; 5
     562:	08 95       	ret

00000564 <KEYPAD_read>:
    params: void
    returns: uint8_t - the key number (1-4) or KEYPAD_NO_KEY if no key is pressed
*/
uint8_t KEYPAD_read(void)
{
    if (!(KEYPAD_PIN & (1 << KEYPAD_KEY_1))) return 1;
     564:	1a 9b       	sbis	0x03, 2	; 3
     566:	08 c0       	rjmp	.+16     	; 0x578 <KEYPAD_read+0x14>
    if (!(KEYPAD_PIN & (1 << KEYPAD_KEY_2))) return 2;
     568:	1b 9b       	sbis	0x03, 3	; 3
     56a:	08 c0       	rjmp	.+16     	; 0x57c <KEYPAD_read+0x18>
    if (!(KEYPAD_PIN & (1 << KEYPAD_KEY_3))) return 3;
     56c:	1c 9b       	sbis	0x03, 4	; 3
     56e:	08 c0       	rjmp	.+16     	; 0x580 <KEYPAD_read+0x1c>
    if (!(KEYPAD_PIN & (1 << KEYPAD_KEY_4))) return 4;
     570:	1d 99       	sbic	0x03, 5	; 3
     572:	08 c0       	rjmp	.+16     	; 0x584 <KEYPAD_read+0x20>
     574:	84 e0       	ldi	r24, 0x04	; 4
     576:	08 95       	ret
    params: void
    returns: uint8_t - the key number (1-4) or KEYPAD_NO_KEY if no key is pressed
*/
uint8_t KEYPAD_read(void)
{
    if (!(KEYPAD_PIN & (1 << KEYPAD_KEY_1))) return 1;
     578:	81 e0       	ldi	r24, 0x01	; 1
     57a:	08 95       	ret
    if (!(KEYPAD_PIN & (1 << KEYPAD_KEY_2))) return 2;
     57c:	82 e0       	ldi	r24, 0x02	; 2
     57e:	08 95       	ret
    if (!(KEYPAD_PIN & (1 << KEYPAD_KEY_3))) return 3;
     580:	83 e0       	ldi	r24, 0x03	; 3
     582:	08 95       	ret
    if (!(KEYPAD_PIN & (1 << KEYPAD_KEY_4))) return 4;
    return KEYPAD_NO_KEY;
     584:	85 e0       	ldi	r24, 0x05	; 5
}
     586:	08 95       	ret

00000588 <display_set>:
    params: const unsigned char* title - title string (max 12 chars)
            const unsigned char* data - data string (max 16 chars)
    returns: void
*/
void display_set(const unsigned char *title, const unsigned char *data)
{
     588:	0f 93       	push	r16
     58a:	1f 93       	push	r17
     58c:	cf 93       	push	r28
     58e:	df 93       	push	r29
     590:	cd b7       	in	r28, 0x3d	; 61
     592:	de b7       	in	r29, 0x3e	; 62
     594:	a0 97       	sbiw	r28, 0x20	; 32
     596:	0f b6       	in	r0, 0x3f	; 63
     598:	f8 94       	cli
     59a:	de bf       	out	0x3e, r29	; 62
     59c:	0f be       	out	0x3f, r0	; 63
     59e:	cd bf       	out	0x3d, r28	; 61
     5a0:	db 01       	movw	r26, r22
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5a2:	ef e3       	ldi	r30, 0x3F	; 63
     5a4:	ff e1       	ldi	r31, 0x1F	; 31
     5a6:	31 97       	sbiw	r30, 0x01	; 1
     5a8:	f1 f7       	brne	.-4      	; 0x5a6 <display_set+0x1e>
     5aa:	00 c0       	rjmp	.+0      	; 0x5ac <display_set+0x24>
     5ac:	00 00       	nop

    unsigned char line1[16];
    unsigned char line2[16];

    // prepare line1: copy up to 12 chars from title, pad with spaces
    int i = 0;
     5ae:	20 e0       	ldi	r18, 0x00	; 0
     5b0:	30 e0       	ldi	r19, 0x00	; 0
    for (; i < 12 && *title; ++i)
     5b2:	0a c0       	rjmp	.+20     	; 0x5c8 <display_set+0x40>
        line1[i] = *title++;
     5b4:	01 96       	adiw	r24, 0x01	; 1
     5b6:	e1 e0       	ldi	r30, 0x01	; 1
     5b8:	f0 e0       	ldi	r31, 0x00	; 0
     5ba:	ec 0f       	add	r30, r28
     5bc:	fd 1f       	adc	r31, r29
     5be:	e2 0f       	add	r30, r18
     5c0:	f3 1f       	adc	r31, r19
     5c2:	40 83       	st	Z, r20
    unsigned char line1[16];
    unsigned char line2[16];

    // prepare line1: copy up to 12 chars from title, pad with spaces
    int i = 0;
    for (; i < 12 && *title; ++i)
     5c4:	2f 5f       	subi	r18, 0xFF	; 255
     5c6:	3f 4f       	sbci	r19, 0xFF	; 255
     5c8:	2c 30       	cpi	r18, 0x0C	; 12
     5ca:	31 05       	cpc	r19, r1
     5cc:	7c f4       	brge	.+30     	; 0x5ec <display_set+0x64>
     5ce:	fc 01       	movw	r30, r24
     5d0:	40 81       	ld	r20, Z
     5d2:	41 11       	cpse	r20, r1
     5d4:	ef cf       	rjmp	.-34     	; 0x5b4 <display_set+0x2c>
     5d6:	0a c0       	rjmp	.+20     	; 0x5ec <display_set+0x64>
        line1[i] = *title++;
    for (; i < 12; ++i)
        line1[i] = ' ';
     5d8:	e1 e0       	ldi	r30, 0x01	; 1
     5da:	f0 e0       	ldi	r31, 0x00	; 0
     5dc:	ec 0f       	add	r30, r28
     5de:	fd 1f       	adc	r31, r29
     5e0:	e2 0f       	add	r30, r18
     5e2:	f3 1f       	adc	r31, r19
     5e4:	80 e2       	ldi	r24, 0x20	; 32
     5e6:	80 83       	st	Z, r24

    // prepare line1: copy up to 12 chars from title, pad with spaces
    int i = 0;
    for (; i < 12 && *title; ++i)
        line1[i] = *title++;
    for (; i < 12; ++i)
     5e8:	2f 5f       	subi	r18, 0xFF	; 255
     5ea:	3f 4f       	sbci	r19, 0xFF	; 255
     5ec:	2c 30       	cpi	r18, 0x0C	; 12
     5ee:	31 05       	cpc	r19, r1
     5f0:	9c f3       	brlt	.-26     	; 0x5d8 <display_set+0x50>
        line1[i] = ' ';

    // add control commands at the end of line1
    line1[12] = 0x7F;
     5f2:	8f e7       	ldi	r24, 0x7F	; 127
     5f4:	8d 87       	std	Y+13, r24	; 0x0d
    line1[13] = '-';
     5f6:	8d e2       	ldi	r24, 0x2D	; 45
     5f8:	8e 87       	std	Y+14, r24	; 0x0e
    line1[14] = '+';
     5fa:	8b e2       	ldi	r24, 0x2B	; 43
     5fc:	8f 87       	std	Y+15, r24	; 0x0f
    line1[15] = 0x7E;
     5fe:	8e e7       	ldi	r24, 0x7E	; 126
     600:	88 8b       	std	Y+16, r24	; 0x10

    // prepare line2: copy up to 16 chars from data, pad with spaces
    i = 0;
     602:	80 e0       	ldi	r24, 0x00	; 0
     604:	90 e0       	ldi	r25, 0x00	; 0
    for (; i < 16 && *data; ++i)
     606:	09 c0       	rjmp	.+18     	; 0x61a <display_set+0x92>
        line2[i] = *data++;
     608:	11 96       	adiw	r26, 0x01	; 1
     60a:	e1 e1       	ldi	r30, 0x11	; 17
     60c:	f0 e0       	ldi	r31, 0x00	; 0
     60e:	ec 0f       	add	r30, r28
     610:	fd 1f       	adc	r31, r29
     612:	e8 0f       	add	r30, r24
     614:	f9 1f       	adc	r31, r25
     616:	20 83       	st	Z, r18
    line1[14] = '+';
    line1[15] = 0x7E;

    // prepare line2: copy up to 16 chars from data, pad with spaces
    i = 0;
    for (; i < 16 && *data; ++i)
     618:	01 96       	adiw	r24, 0x01	; 1
     61a:	80 31       	cpi	r24, 0x10	; 16
     61c:	91 05       	cpc	r25, r1
     61e:	6c f4       	brge	.+26     	; 0x63a <display_set+0xb2>
     620:	2c 91       	ld	r18, X
     622:	21 11       	cpse	r18, r1
     624:	f1 cf       	rjmp	.-30     	; 0x608 <display_set+0x80>
     626:	09 c0       	rjmp	.+18     	; 0x63a <display_set+0xb2>
        line2[i] = *data++;
    for (; i < 16; ++i)
        line2[i] = ' ';
     628:	e1 e1       	ldi	r30, 0x11	; 17
     62a:	f0 e0       	ldi	r31, 0x00	; 0
     62c:	ec 0f       	add	r30, r28
     62e:	fd 1f       	adc	r31, r29
     630:	e8 0f       	add	r30, r24
     632:	f9 1f       	adc	r31, r25
     634:	20 e2       	ldi	r18, 0x20	; 32
     636:	20 83       	st	Z, r18

    // prepare line2: copy up to 16 chars from data, pad with spaces
    i = 0;
    for (; i < 16 && *data; ++i)
        line2[i] = *data++;
    for (; i < 16; ++i)
     638:	01 96       	adiw	r24, 0x01	; 1
     63a:	80 31       	cpi	r24, 0x10	; 16
     63c:	91 05       	cpc	r25, r1
     63e:	a4 f3       	brlt	.-24     	; 0x628 <display_set+0xa0>
        line2[i] = ' ';

    // reset cursor to first line and write 16 chars
    LCD_1602A_load_command(DISPLAY_SET_CURSOR_LINE_1);
     640:	80 e8       	ldi	r24, 0x80	; 128
     642:	0e 94 60 01 	call	0x2c0	; 0x2c0 <LCD_1602A_load_command>
    for (i = 0; i < 16; ++i)
     646:	00 e0       	ldi	r16, 0x00	; 0
     648:	10 e0       	ldi	r17, 0x00	; 0
     64a:	0b c0       	rjmp	.+22     	; 0x662 <display_set+0xda>
    {
        LCD_1602A_load_data(line1[i]);
     64c:	e1 e0       	ldi	r30, 0x01	; 1
     64e:	f0 e0       	ldi	r31, 0x00	; 0
     650:	ec 0f       	add	r30, r28
     652:	fd 1f       	adc	r31, r29
     654:	e0 0f       	add	r30, r16
     656:	f1 1f       	adc	r31, r17
     658:	80 81       	ld	r24, Z
     65a:	0e 94 70 01 	call	0x2e0	; 0x2e0 <LCD_1602A_load_data>
    for (; i < 16; ++i)
        line2[i] = ' ';

    // reset cursor to first line and write 16 chars
    LCD_1602A_load_command(DISPLAY_SET_CURSOR_LINE_1);
    for (i = 0; i < 16; ++i)
     65e:	0f 5f       	subi	r16, 0xFF	; 255
     660:	1f 4f       	sbci	r17, 0xFF	; 255
     662:	00 31       	cpi	r16, 0x10	; 16
     664:	11 05       	cpc	r17, r1
     666:	94 f3       	brlt	.-28     	; 0x64c <display_set+0xc4>
    {
        LCD_1602A_load_data(line1[i]);
    }

    // reset cursor to second line and write 16 chars
    LCD_1602A_load_command(DISPLAY_SET_CURSOR_LINE_2);
     668:	80 ec       	ldi	r24, 0xC0	; 192
     66a:	0e 94 60 01 	call	0x2c0	; 0x2c0 <LCD_1602A_load_command>
    for (i = 0; i < 16; ++i)
     66e:	00 e0       	ldi	r16, 0x00	; 0
     670:	10 e0       	ldi	r17, 0x00	; 0
     672:	0b c0       	rjmp	.+22     	; 0x68a <display_set+0x102>
    {
        LCD_1602A_load_data(line2[i]);
     674:	e1 e1       	ldi	r30, 0x11	; 17
     676:	f0 e0       	ldi	r31, 0x00	; 0
     678:	ec 0f       	add	r30, r28
     67a:	fd 1f       	adc	r31, r29
     67c:	e0 0f       	add	r30, r16
     67e:	f1 1f       	adc	r31, r17
     680:	80 81       	ld	r24, Z
     682:	0e 94 70 01 	call	0x2e0	; 0x2e0 <LCD_1602A_load_data>
        LCD_1602A_load_data(line1[i]);
    }

    // reset cursor to second line and write 16 chars
    LCD_1602A_load_command(DISPLAY_SET_CURSOR_LINE_2);
    for (i = 0; i < 16; ++i)
     686:	0f 5f       	subi	r16, 0xFF	; 255
     688:	1f 4f       	sbci	r17, 0xFF	; 255
     68a:	00 31       	cpi	r16, 0x10	; 16
     68c:	11 05       	cpc	r17, r1
     68e:	94 f3       	brlt	.-28     	; 0x674 <display_set+0xec>
    {
        LCD_1602A_load_data(line2[i]);
    }
}
     690:	a0 96       	adiw	r28, 0x20	; 32
     692:	0f b6       	in	r0, 0x3f	; 63
     694:	f8 94       	cli
     696:	de bf       	out	0x3e, r29	; 62
     698:	0f be       	out	0x3f, r0	; 63
     69a:	cd bf       	out	0x3d, r28	; 61
     69c:	df 91       	pop	r29
     69e:	cf 91       	pop	r28
     6a0:	1f 91       	pop	r17
     6a2:	0f 91       	pop	r16
     6a4:	08 95       	ret

000006a6 <get_tank_capacity>:
    params: void
    returns: float - the tank capacity in liters
*/
float get_tank_capacity()
{
    uint16_t water_depth = HCSR04_get_distance();
     6a6:	0e 94 a6 02 	call	0x54c	; 0x54c <HCSR04_get_distance>

    uint16_t water_height = TANK_HEIGHT_IN_CM - water_depth;
     6aa:	60 e2       	ldi	r22, 0x20	; 32
     6ac:	73 e0       	ldi	r23, 0x03	; 3
     6ae:	68 1b       	sub	r22, r24
     6b0:	79 0b       	sbc	r23, r25

    // The following formula assumes the tank is a perfect cylinder: V = π * r^2 * h
    float volume = (PI * ((float)TANK_RADIUS_IN_CM * (float)TANK_RADIUS_IN_CM) * (float)water_height) / 1000.0; // convert cm^3 to liters
     6b2:	80 e0       	ldi	r24, 0x00	; 0
     6b4:	90 e0       	ldi	r25, 0x00	; 0
     6b6:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <__floatunsisf>
     6ba:	2a e5       	ldi	r18, 0x5A	; 90
     6bc:	34 e1       	ldi	r19, 0x14	; 20
     6be:	4d e9       	ldi	r20, 0x9D	; 157
     6c0:	52 e4       	ldi	r21, 0x42	; 66
     6c2:	0e 94 72 09 	call	0x12e4	; 0x12e4 <__mulsf3>
     6c6:	20 e0       	ldi	r18, 0x00	; 0
     6c8:	30 e0       	ldi	r19, 0x00	; 0
     6ca:	4a e7       	ldi	r20, 0x7A	; 122
     6cc:	54 e4       	ldi	r21, 0x44	; 68
     6ce:	0e 94 43 08 	call	0x1086	; 0x1086 <__divsf3>
    return volume;
}
     6d2:	08 95       	ret

000006d4 <get_refill_rate>:
     6d4:	2f ef       	ldi	r18, 0xFF	; 255
     6d6:	87 ea       	ldi	r24, 0xA7	; 167
     6d8:	91 e6       	ldi	r25, 0x61	; 97
     6da:	21 50       	subi	r18, 0x01	; 1
     6dc:	80 40       	sbci	r24, 0x00	; 0
     6de:	90 40       	sbci	r25, 0x00	; 0
     6e0:	e1 f7       	brne	.-8      	; 0x6da <get_refill_rate+0x6>
     6e2:	00 c0       	rjmp	.+0      	; 0x6e4 <get_refill_rate+0x10>
     6e4:	00 00       	nop

float get_refill_rate()
{
    _delay_ms(2000);
    return 4.0;
}
     6e6:	60 e0       	ldi	r22, 0x00	; 0
     6e8:	70 e0       	ldi	r23, 0x00	; 0
     6ea:	80 e8       	ldi	r24, 0x80	; 128
     6ec:	90 e4       	ldi	r25, 0x40	; 64
     6ee:	08 95       	ret

000006f0 <get_leak_rate>:

float get_leak_rate()
{
    return 1.5;
}
     6f0:	60 e0       	ldi	r22, 0x00	; 0
     6f2:	70 e0       	ldi	r23, 0x00	; 0
     6f4:	80 ec       	ldi	r24, 0xC0	; 192
     6f6:	9f e3       	ldi	r25, 0x3F	; 63
     6f8:	08 95       	ret

000006fa <get_soil_temperature>:

float get_soil_temperature()
{
    return DS18B20_read_temperature();
     6fa:	0e 94 35 02 	call	0x46a	; 0x46a <DS18B20_read_temperature>
}
     6fe:	08 95       	ret

00000700 <ui_show_display>:
    update the display based on the current active menu and hover indices
    params: void
    returns: void
*/
void ui_show_display(void)
{
     700:	ef 92       	push	r14
     702:	ff 92       	push	r15
     704:	0f 93       	push	r16
    if (active_menu_index == -1)
     706:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <active_menu_index>
     70a:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <active_menu_index+0x1>
     70e:	ef 3f       	cpi	r30, 0xFF	; 255
     710:	2f ef       	ldi	r18, 0xFF	; 255
     712:	f2 07       	cpc	r31, r18
     714:	79 f4       	brne	.+30     	; 0x734 <ui_show_display+0x34>
    {
        display_set("MAIN MENU", MENU_BUFFER[menu_hover_index]);
     716:	e0 91 0e 03 	lds	r30, 0x030E	; 0x80030e <menu_hover_index>
     71a:	f0 91 0f 03 	lds	r31, 0x030F	; 0x80030f <menu_hover_index+0x1>
     71e:	ee 0f       	add	r30, r30
     720:	ff 1f       	adc	r31, r31
     722:	ea 5c       	subi	r30, 0xCA	; 202
     724:	fe 4f       	sbci	r31, 0xFE	; 254
     726:	60 81       	ld	r22, Z
     728:	71 81       	ldd	r23, Z+1	; 0x01
     72a:	8b e5       	ldi	r24, 0x5B	; 91
     72c:	91 e0       	ldi	r25, 0x01	; 1
     72e:	0e 94 c4 02 	call	0x588	; 0x588 <display_set>
     732:	aa c1       	rjmp	.+852    	; 0xa88 <__stack+0x189>
    }
    else
    {
        switch (active_menu_index)
     734:	e7 30       	cpi	r30, 0x07	; 7
     736:	f1 05       	cpc	r31, r1
     738:	08 f0       	brcs	.+2      	; 0x73c <ui_show_display+0x3c>
     73a:	a0 c1       	rjmp	.+832    	; 0xa7c <__stack+0x17d>
     73c:	ec 5c       	subi	r30, 0xCC	; 204
     73e:	ff 4f       	sbci	r31, 0xFF	; 255
     740:	0c 94 df 09 	jmp	0x13be	; 0x13be <__tablejump2__>
        {
        case 0:
            format_float(buffer, sizeof(buffer), get_tank_capacity(), 1, "Ltrs");
     744:	0e 94 53 03 	call	0x6a6	; 0x6a6 <get_tank_capacity>
     748:	9b 01       	movw	r18, r22
     74a:	ac 01       	movw	r20, r24
     74c:	0f 2e       	mov	r0, r31
     74e:	f5 e6       	ldi	r31, 0x65	; 101
     750:	ef 2e       	mov	r14, r31
     752:	f1 e0       	ldi	r31, 0x01	; 1
     754:	ff 2e       	mov	r15, r31
     756:	f0 2d       	mov	r31, r0
     758:	01 e0       	ldi	r16, 0x01	; 1
     75a:	60 e1       	ldi	r22, 0x10	; 16
     75c:	70 e0       	ldi	r23, 0x00	; 0
     75e:	80 e1       	ldi	r24, 0x10	; 16
     760:	93 e0       	ldi	r25, 0x03	; 3
     762:	0e 94 d7 00 	call	0x1ae	; 0x1ae <format_float>
            display_set("TANK CAPACITY", buffer);
     766:	60 e1       	ldi	r22, 0x10	; 16
     768:	73 e0       	ldi	r23, 0x03	; 3
     76a:	8a e6       	ldi	r24, 0x6A	; 106
     76c:	91 e0       	ldi	r25, 0x01	; 1
     76e:	0e 94 c4 02 	call	0x588	; 0x588 <display_set>
            break;
     772:	8a c1       	rjmp	.+788    	; 0xa88 <__stack+0x189>
        case 1:
            format_float(buffer, sizeof(buffer), get_refill_rate(), 1, "Ltrs per min");
     774:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <get_refill_rate>
     778:	9b 01       	movw	r18, r22
     77a:	ac 01       	movw	r20, r24
     77c:	0f 2e       	mov	r0, r31
     77e:	f8 e7       	ldi	r31, 0x78	; 120
     780:	ef 2e       	mov	r14, r31
     782:	f1 e0       	ldi	r31, 0x01	; 1
     784:	ff 2e       	mov	r15, r31
     786:	f0 2d       	mov	r31, r0
     788:	01 e0       	ldi	r16, 0x01	; 1
     78a:	60 e1       	ldi	r22, 0x10	; 16
     78c:	70 e0       	ldi	r23, 0x00	; 0
     78e:	80 e1       	ldi	r24, 0x10	; 16
     790:	93 e0       	ldi	r25, 0x03	; 3
     792:	0e 94 d7 00 	call	0x1ae	; 0x1ae <format_float>
            display_set("REFILL RATE", buffer);
     796:	60 e1       	ldi	r22, 0x10	; 16
     798:	73 e0       	ldi	r23, 0x03	; 3
     79a:	85 e8       	ldi	r24, 0x85	; 133
     79c:	91 e0       	ldi	r25, 0x01	; 1
     79e:	0e 94 c4 02 	call	0x588	; 0x588 <display_set>
            break;
     7a2:	72 c1       	rjmp	.+740    	; 0xa88 <__stack+0x189>
        case 2:
            format_float(buffer, sizeof(buffer), get_leak_rate(), 1, "Ltrs per min");
     7a4:	0e 94 78 03 	call	0x6f0	; 0x6f0 <get_leak_rate>
     7a8:	9b 01       	movw	r18, r22
     7aa:	ac 01       	movw	r20, r24
     7ac:	0f 2e       	mov	r0, r31
     7ae:	f8 e7       	ldi	r31, 0x78	; 120
     7b0:	ef 2e       	mov	r14, r31
     7b2:	f1 e0       	ldi	r31, 0x01	; 1
     7b4:	ff 2e       	mov	r15, r31
     7b6:	f0 2d       	mov	r31, r0
     7b8:	01 e0       	ldi	r16, 0x01	; 1
     7ba:	60 e1       	ldi	r22, 0x10	; 16
     7bc:	70 e0       	ldi	r23, 0x00	; 0
     7be:	80 e1       	ldi	r24, 0x10	; 16
     7c0:	93 e0       	ldi	r25, 0x03	; 3
     7c2:	0e 94 d7 00 	call	0x1ae	; 0x1ae <format_float>
            display_set("LEAKAGE RATE", buffer);
     7c6:	60 e1       	ldi	r22, 0x10	; 16
     7c8:	73 e0       	ldi	r23, 0x03	; 3
     7ca:	81 e9       	ldi	r24, 0x91	; 145
     7cc:	91 e0       	ldi	r25, 0x01	; 1
     7ce:	0e 94 c4 02 	call	0x588	; 0x588 <display_set>
            break;
     7d2:	5a c1       	rjmp	.+692    	; 0xa88 <__stack+0x189>
        case 3:
            format_float(buffer, sizeof(buffer), get_soil_temperature(), 1, "degrees");
     7d4:	0e 94 7d 03 	call	0x6fa	; 0x6fa <get_soil_temperature>
     7d8:	9b 01       	movw	r18, r22
     7da:	ac 01       	movw	r20, r24
     7dc:	0f 2e       	mov	r0, r31
     7de:	fe e9       	ldi	r31, 0x9E	; 158
     7e0:	ef 2e       	mov	r14, r31
     7e2:	f1 e0       	ldi	r31, 0x01	; 1
     7e4:	ff 2e       	mov	r15, r31
     7e6:	f0 2d       	mov	r31, r0
     7e8:	01 e0       	ldi	r16, 0x01	; 1
     7ea:	60 e1       	ldi	r22, 0x10	; 16
     7ec:	70 e0       	ldi	r23, 0x00	; 0
     7ee:	80 e1       	ldi	r24, 0x10	; 16
     7f0:	93 e0       	ldi	r25, 0x03	; 3
     7f2:	0e 94 d7 00 	call	0x1ae	; 0x1ae <format_float>
            display_set("SOIL TEMPERATURE", buffer);
     7f6:	60 e1       	ldi	r22, 0x10	; 16
     7f8:	73 e0       	ldi	r23, 0x03	; 3
     7fa:	86 ea       	ldi	r24, 0xA6	; 166
     7fc:	91 e0       	ldi	r25, 0x01	; 1
     7fe:	0e 94 c4 02 	call	0x588	; 0x588 <display_set>
            break;
     802:	42 c1       	rjmp	.+644    	; 0xa88 <__stack+0x189>
        case 4:
            if (active_trigger_index == -1)
     804:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <active_trigger_index>
     808:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <active_trigger_index+0x1>
     80c:	8f 3f       	cpi	r24, 0xFF	; 255
     80e:	2f ef       	ldi	r18, 0xFF	; 255
     810:	92 07       	cpc	r25, r18
     812:	79 f4       	brne	.+30     	; 0x832 <__DATA_REGION_LENGTH__+0x32>
            {
                display_set("TRIGGERS", TRIGGERS_BUFFER[trigger_hover_index]);
     814:	e0 91 0c 03 	lds	r30, 0x030C	; 0x80030c <trigger_hover_index>
     818:	f0 91 0d 03 	lds	r31, 0x030D	; 0x80030d <trigger_hover_index+0x1>
     81c:	ee 0f       	add	r30, r30
     81e:	ff 1f       	adc	r31, r31
     820:	ee 5c       	subi	r30, 0xCE	; 206
     822:	fe 4f       	sbci	r31, 0xFE	; 254
     824:	60 81       	ld	r22, Z
     826:	71 81       	ldd	r23, Z+1	; 0x01
     828:	89 e2       	ldi	r24, 0x29	; 41
     82a:	92 e0       	ldi	r25, 0x02	; 2
     82c:	0e 94 c4 02 	call	0x588	; 0x588 <display_set>
     830:	2b c1       	rjmp	.+598    	; 0xa88 <__stack+0x189>
            }
            else
            {
                switch (active_trigger_index)
     832:	00 97       	sbiw	r24, 0x00	; 0
     834:	19 f0       	breq	.+6      	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
     836:	01 97       	sbiw	r24, 0x01	; 1
     838:	e9 f0       	breq	.+58     	; 0x874 <__DATA_REGION_LENGTH__+0x74>
     83a:	38 c0       	rjmp	.+112    	; 0x8ac <__DATA_REGION_LENGTH__+0xac>
                {
                case 0:
                    format_float(buffer, sizeof(buffer), MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER, 1, "Ltrs");
     83c:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER>
     840:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x1>
     844:	40 91 18 01 	lds	r20, 0x0118	; 0x800118 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x2>
     848:	50 91 19 01 	lds	r21, 0x0119	; 0x800119 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x3>
     84c:	0f 2e       	mov	r0, r31
     84e:	f5 e6       	ldi	r31, 0x65	; 101
     850:	ef 2e       	mov	r14, r31
     852:	f1 e0       	ldi	r31, 0x01	; 1
     854:	ff 2e       	mov	r15, r31
     856:	f0 2d       	mov	r31, r0
     858:	01 e0       	ldi	r16, 0x01	; 1
     85a:	60 e1       	ldi	r22, 0x10	; 16
     85c:	70 e0       	ldi	r23, 0x00	; 0
     85e:	80 e1       	ldi	r24, 0x10	; 16
     860:	93 e0       	ldi	r25, 0x03	; 3
     862:	0e 94 d7 00 	call	0x1ae	; 0x1ae <format_float>
                    display_set("MIN CAPACITY", buffer);
     866:	60 e1       	ldi	r22, 0x10	; 16
     868:	73 e0       	ldi	r23, 0x03	; 3
     86a:	87 eb       	ldi	r24, 0xB7	; 183
     86c:	91 e0       	ldi	r25, 0x01	; 1
     86e:	0e 94 c4 02 	call	0x588	; 0x588 <display_set>
                    break;
     872:	0a c1       	rjmp	.+532    	; 0xa88 <__stack+0x189>
                case 1:
                    format_float(buffer, sizeof(buffer), MAXIMUM_TEMPERATURE_BEFORE_PUMPING, 2, "degrees");
     874:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING>
     878:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x1>
     87c:	40 91 14 01 	lds	r20, 0x0114	; 0x800114 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x2>
     880:	50 91 15 01 	lds	r21, 0x0115	; 0x800115 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x3>
     884:	0f 2e       	mov	r0, r31
     886:	fe e9       	ldi	r31, 0x9E	; 158
     888:	ef 2e       	mov	r14, r31
     88a:	f1 e0       	ldi	r31, 0x01	; 1
     88c:	ff 2e       	mov	r15, r31
     88e:	f0 2d       	mov	r31, r0
     890:	02 e0       	ldi	r16, 0x02	; 2
     892:	60 e1       	ldi	r22, 0x10	; 16
     894:	70 e0       	ldi	r23, 0x00	; 0
     896:	80 e1       	ldi	r24, 0x10	; 16
     898:	93 e0       	ldi	r25, 0x03	; 3
     89a:	0e 94 d7 00 	call	0x1ae	; 0x1ae <format_float>
                    display_set("MAX TEMP", buffer);
     89e:	60 e1       	ldi	r22, 0x10	; 16
     8a0:	73 e0       	ldi	r23, 0x03	; 3
     8a2:	84 ec       	ldi	r24, 0xC4	; 196
     8a4:	91 e0       	ldi	r25, 0x01	; 1
     8a6:	0e 94 c4 02 	call	0x588	; 0x588 <display_set>
                    break;
     8aa:	ee c0       	rjmp	.+476    	; 0xa88 <__stack+0x189>
                default:
                    display_set("ERROR", "Invalid trigger");
     8ac:	6d ec       	ldi	r22, 0xCD	; 205
     8ae:	71 e0       	ldi	r23, 0x01	; 1
     8b0:	8d ed       	ldi	r24, 0xDD	; 221
     8b2:	91 e0       	ldi	r25, 0x01	; 1
     8b4:	0e 94 c4 02 	call	0x588	; 0x588 <display_set>
                    break;
     8b8:	e7 c0       	rjmp	.+462    	; 0xa88 <__stack+0x189>
                }
            }
            break;

        case 5:
            display_set("MESSAGES", MESSAGES_BUFFER[message_hover_index]);
     8ba:	e0 91 08 03 	lds	r30, 0x0308	; 0x800308 <__data_end>
     8be:	f0 91 09 03 	lds	r31, 0x0309	; 0x800309 <__data_end+0x1>
     8c2:	ee 0f       	add	r30, r30
     8c4:	ff 1f       	adc	r31, r31
     8c6:	e0 5e       	subi	r30, 0xE0	; 224
     8c8:	fe 4f       	sbci	r31, 0xFE	; 254
     8ca:	60 81       	ld	r22, Z
     8cc:	71 81       	ldd	r23, Z+1	; 0x01
     8ce:	83 ee       	ldi	r24, 0xE3	; 227
     8d0:	91 e0       	ldi	r25, 0x01	; 1
     8d2:	0e 94 c4 02 	call	0x588	; 0x588 <display_set>
            break;
     8d6:	d8 c0       	rjmp	.+432    	; 0xa88 <__stack+0x189>
        case 6:
            if (active_config_index == -1)
     8d8:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <active_config_index>
     8dc:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <active_config_index+0x1>
     8e0:	8f 3f       	cpi	r24, 0xFF	; 255
     8e2:	2f ef       	ldi	r18, 0xFF	; 255
     8e4:	92 07       	cpc	r25, r18
     8e6:	79 f4       	brne	.+30     	; 0x906 <__stack+0x7>
            {
                display_set("CONFIG", CONFIG_BUFFER[config_hover_index]);
     8e8:	e0 91 0a 03 	lds	r30, 0x030A	; 0x80030a <config_hover_index>
     8ec:	f0 91 0b 03 	lds	r31, 0x030B	; 0x80030b <config_hover_index+0x1>
     8f0:	ee 0f       	add	r30, r30
     8f2:	ff 1f       	adc	r31, r31
     8f4:	e8 5d       	subi	r30, 0xD8	; 216
     8f6:	fe 4f       	sbci	r31, 0xFE	; 254
     8f8:	60 81       	ld	r22, Z
     8fa:	71 81       	ldd	r23, Z+1	; 0x01
     8fc:	8c ee       	ldi	r24, 0xEC	; 236
     8fe:	91 e0       	ldi	r25, 0x01	; 1
     900:	0e 94 c4 02 	call	0x588	; 0x588 <display_set>
     904:	c1 c0       	rjmp	.+386    	; 0xa88 <__stack+0x189>
            }
            else
            {
                switch (active_config_index)
     906:	82 30       	cpi	r24, 0x02	; 2
     908:	91 05       	cpc	r25, r1
     90a:	09 f4       	brne	.+2      	; 0x90e <__stack+0xf>
     90c:	46 c0       	rjmp	.+140    	; 0x99a <__stack+0x9b>
     90e:	2c f4       	brge	.+10     	; 0x91a <__stack+0x1b>
     910:	00 97       	sbiw	r24, 0x00	; 0
     912:	59 f0       	breq	.+22     	; 0x92a <__stack+0x2b>
     914:	01 97       	sbiw	r24, 0x01	; 1
     916:	29 f1       	breq	.+74     	; 0x962 <__stack+0x63>
     918:	aa c0       	rjmp	.+340    	; 0xa6e <__stack+0x16f>
     91a:	83 30       	cpi	r24, 0x03	; 3
     91c:	91 05       	cpc	r25, r1
     91e:	09 f4       	brne	.+2      	; 0x922 <__stack+0x23>
     920:	58 c0       	rjmp	.+176    	; 0x9d2 <__stack+0xd3>
     922:	04 97       	sbiw	r24, 0x04	; 4
     924:	09 f4       	brne	.+2      	; 0x928 <__stack+0x29>
     926:	7c c0       	rjmp	.+248    	; 0xa20 <__stack+0x121>
     928:	a2 c0       	rjmp	.+324    	; 0xa6e <__stack+0x16f>
                {
                case 0:
                    format_float(buffer, sizeof(buffer), STEP_SIZE_FOR_INCREMENTS, 1, "Units");
     92a:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <STEP_SIZE_FOR_INCREMENTS>
     92e:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <STEP_SIZE_FOR_INCREMENTS+0x1>
     932:	40 91 10 01 	lds	r20, 0x0110	; 0x800110 <STEP_SIZE_FOR_INCREMENTS+0x2>
     936:	50 91 11 01 	lds	r21, 0x0111	; 0x800111 <STEP_SIZE_FOR_INCREMENTS+0x3>
     93a:	0f 2e       	mov	r0, r31
     93c:	f3 ef       	ldi	r31, 0xF3	; 243
     93e:	ef 2e       	mov	r14, r31
     940:	f1 e0       	ldi	r31, 0x01	; 1
     942:	ff 2e       	mov	r15, r31
     944:	f0 2d       	mov	r31, r0
     946:	01 e0       	ldi	r16, 0x01	; 1
     948:	60 e1       	ldi	r22, 0x10	; 16
     94a:	70 e0       	ldi	r23, 0x00	; 0
     94c:	80 e1       	ldi	r24, 0x10	; 16
     94e:	93 e0       	ldi	r25, 0x03	; 3
     950:	0e 94 d7 00 	call	0x1ae	; 0x1ae <format_float>
                    display_set("STEP SIZE", buffer);
     954:	60 e1       	ldi	r22, 0x10	; 16
     956:	73 e0       	ldi	r23, 0x03	; 3
     958:	89 ef       	ldi	r24, 0xF9	; 249
     95a:	91 e0       	ldi	r25, 0x01	; 1
     95c:	0e 94 c4 02 	call	0x588	; 0x588 <display_set>
                    break;
     960:	93 c0       	rjmp	.+294    	; 0xa88 <__stack+0x189>
                case 1:
                    format_float(buffer, sizeof(buffer), PUMP_THRESHOLD, 1, "Ltrs");
     962:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <PUMP_THRESHOLD>
     966:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <PUMP_THRESHOLD+0x1>
     96a:	40 91 08 01 	lds	r20, 0x0108	; 0x800108 <PUMP_THRESHOLD+0x2>
     96e:	50 91 09 01 	lds	r21, 0x0109	; 0x800109 <PUMP_THRESHOLD+0x3>
     972:	0f 2e       	mov	r0, r31
     974:	f5 e6       	ldi	r31, 0x65	; 101
     976:	ef 2e       	mov	r14, r31
     978:	f1 e0       	ldi	r31, 0x01	; 1
     97a:	ff 2e       	mov	r15, r31
     97c:	f0 2d       	mov	r31, r0
     97e:	01 e0       	ldi	r16, 0x01	; 1
     980:	60 e1       	ldi	r22, 0x10	; 16
     982:	70 e0       	ldi	r23, 0x00	; 0
     984:	80 e1       	ldi	r24, 0x10	; 16
     986:	93 e0       	ldi	r25, 0x03	; 3
     988:	0e 94 d7 00 	call	0x1ae	; 0x1ae <format_float>
                    display_set("PUMP THRESHOLD", buffer);
     98c:	60 e1       	ldi	r22, 0x10	; 16
     98e:	73 e0       	ldi	r23, 0x03	; 3
     990:	83 e0       	ldi	r24, 0x03	; 3
     992:	92 e0       	ldi	r25, 0x02	; 2
     994:	0e 94 c4 02 	call	0x588	; 0x588 <display_set>
                    break;
     998:	77 c0       	rjmp	.+238    	; 0xa88 <__stack+0x189>
                case 2:
                    format_float(buffer, sizeof(buffer), SPRAY_THRESHOLD, 1, "degrees");
     99a:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <SPRAY_THRESHOLD>
     99e:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <SPRAY_THRESHOLD+0x1>
     9a2:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <SPRAY_THRESHOLD+0x2>
     9a6:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <SPRAY_THRESHOLD+0x3>
     9aa:	0f 2e       	mov	r0, r31
     9ac:	fe e9       	ldi	r31, 0x9E	; 158
     9ae:	ef 2e       	mov	r14, r31
     9b0:	f1 e0       	ldi	r31, 0x01	; 1
     9b2:	ff 2e       	mov	r15, r31
     9b4:	f0 2d       	mov	r31, r0
     9b6:	01 e0       	ldi	r16, 0x01	; 1
     9b8:	60 e1       	ldi	r22, 0x10	; 16
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	80 e1       	ldi	r24, 0x10	; 16
     9be:	93 e0       	ldi	r25, 0x03	; 3
     9c0:	0e 94 d7 00 	call	0x1ae	; 0x1ae <format_float>
                    display_set("SPRAY THRESHOLD", buffer);
     9c4:	60 e1       	ldi	r22, 0x10	; 16
     9c6:	73 e0       	ldi	r23, 0x03	; 3
     9c8:	82 e1       	ldi	r24, 0x12	; 18
     9ca:	92 e0       	ldi	r25, 0x02	; 2
     9cc:	0e 94 c4 02 	call	0x588	; 0x588 <display_set>
                    break;
     9d0:	5b c0       	rjmp	.+182    	; 0xa88 <__stack+0x189>
                case 3:
                    snprintf(buffer, sizeof(buffer), "%s", ENABLE_TRIGGER_VALUE ? "Enabled" : "Disabled");
     9d2:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <ENABLE_TRIGGER_VALUE>
     9d6:	88 23       	and	r24, r24
     9d8:	19 f0       	breq	.+6      	; 0x9e0 <__stack+0xe1>
     9da:	8a e4       	ldi	r24, 0x4A	; 74
     9dc:	91 e0       	ldi	r25, 0x01	; 1
     9de:	02 c0       	rjmp	.+4      	; 0x9e4 <__stack+0xe5>
     9e0:	82 e5       	ldi	r24, 0x52	; 82
     9e2:	91 e0       	ldi	r25, 0x01	; 1
     9e4:	9f 93       	push	r25
     9e6:	8f 93       	push	r24
     9e8:	87 e4       	ldi	r24, 0x47	; 71
     9ea:	91 e0       	ldi	r25, 0x01	; 1
     9ec:	9f 93       	push	r25
     9ee:	8f 93       	push	r24
     9f0:	1f 92       	push	r1
     9f2:	80 e1       	ldi	r24, 0x10	; 16
     9f4:	8f 93       	push	r24
     9f6:	80 e1       	ldi	r24, 0x10	; 16
     9f8:	93 e0       	ldi	r25, 0x03	; 3
     9fa:	9f 93       	push	r25
     9fc:	8f 93       	push	r24
     9fe:	0e 94 05 0a 	call	0x140a	; 0x140a <snprintf>
                    display_set("ENABLE TRIGGERS", buffer);
     a02:	60 e1       	ldi	r22, 0x10	; 16
     a04:	73 e0       	ldi	r23, 0x03	; 3
     a06:	82 e2       	ldi	r24, 0x22	; 34
     a08:	92 e0       	ldi	r25, 0x02	; 2
     a0a:	0e 94 c4 02 	call	0x588	; 0x588 <display_set>
                    break;
     a0e:	8d b7       	in	r24, 0x3d	; 61
     a10:	9e b7       	in	r25, 0x3e	; 62
     a12:	08 96       	adiw	r24, 0x08	; 8
     a14:	0f b6       	in	r0, 0x3f	; 63
     a16:	f8 94       	cli
     a18:	9e bf       	out	0x3e, r25	; 62
     a1a:	0f be       	out	0x3f, r0	; 63
     a1c:	8d bf       	out	0x3d, r24	; 61
     a1e:	34 c0       	rjmp	.+104    	; 0xa88 <__stack+0x189>
                case 4:
                    snprintf(buffer, sizeof(buffer), "%s", ENABLE_ALERT_VALUE ? "Enabled" : "Disabled");
     a20:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     a24:	88 23       	and	r24, r24
     a26:	19 f0       	breq	.+6      	; 0xa2e <__stack+0x12f>
     a28:	8a e4       	ldi	r24, 0x4A	; 74
     a2a:	91 e0       	ldi	r25, 0x01	; 1
     a2c:	02 c0       	rjmp	.+4      	; 0xa32 <__stack+0x133>
     a2e:	82 e5       	ldi	r24, 0x52	; 82
     a30:	91 e0       	ldi	r25, 0x01	; 1
     a32:	9f 93       	push	r25
     a34:	8f 93       	push	r24
     a36:	87 e4       	ldi	r24, 0x47	; 71
     a38:	91 e0       	ldi	r25, 0x01	; 1
     a3a:	9f 93       	push	r25
     a3c:	8f 93       	push	r24
     a3e:	1f 92       	push	r1
     a40:	80 e1       	ldi	r24, 0x10	; 16
     a42:	8f 93       	push	r24
     a44:	80 e1       	ldi	r24, 0x10	; 16
     a46:	93 e0       	ldi	r25, 0x03	; 3
     a48:	9f 93       	push	r25
     a4a:	8f 93       	push	r24
     a4c:	0e 94 05 0a 	call	0x140a	; 0x140a <snprintf>
                    display_set("ENABLE ALERTS", buffer);
     a50:	60 e1       	ldi	r22, 0x10	; 16
     a52:	73 e0       	ldi	r23, 0x03	; 3
     a54:	82 e3       	ldi	r24, 0x32	; 50
     a56:	92 e0       	ldi	r25, 0x02	; 2
     a58:	0e 94 c4 02 	call	0x588	; 0x588 <display_set>
                    break;
     a5c:	8d b7       	in	r24, 0x3d	; 61
     a5e:	9e b7       	in	r25, 0x3e	; 62
     a60:	08 96       	adiw	r24, 0x08	; 8
     a62:	0f b6       	in	r0, 0x3f	; 63
     a64:	f8 94       	cli
     a66:	9e bf       	out	0x3e, r25	; 62
     a68:	0f be       	out	0x3f, r0	; 63
     a6a:	8d bf       	out	0x3d, r24	; 61
     a6c:	0d c0       	rjmp	.+26     	; 0xa88 <__stack+0x189>
                default:
                    display_set("ERROR", "Invalid config");
     a6e:	60 e4       	ldi	r22, 0x40	; 64
     a70:	72 e0       	ldi	r23, 0x02	; 2
     a72:	8d ed       	ldi	r24, 0xDD	; 221
     a74:	91 e0       	ldi	r25, 0x01	; 1
     a76:	0e 94 c4 02 	call	0x588	; 0x588 <display_set>
                    break;
     a7a:	06 c0       	rjmp	.+12     	; 0xa88 <__stack+0x189>
                }
            }
            break;

        default:
            display_set("ERROR", "Invalid menu");
     a7c:	6f e4       	ldi	r22, 0x4F	; 79
     a7e:	72 e0       	ldi	r23, 0x02	; 2
     a80:	8d ed       	ldi	r24, 0xDD	; 221
     a82:	91 e0       	ldi	r25, 0x01	; 1
     a84:	0e 94 c4 02 	call	0x588	; 0x588 <display_set>
            break;
        }
    }
}
     a88:	0f 91       	pop	r16
     a8a:	ff 90       	pop	r15
     a8c:	ef 90       	pop	r14
     a8e:	08 95       	ret

00000a90 <ui_process_key_command>:
    process a key command from the keypad and update the UI state
    params: uint8_t key - the key number (1-4)
    returns: void
*/
void ui_process_key_command (uint8_t key) {
    if (key == 1)
     a90:	81 30       	cpi	r24, 0x01	; 1
     a92:	41 f5       	brne	.+80     	; 0xae4 <ui_process_key_command+0x54>
    {
        if (active_menu_index == -1)
     a94:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <active_menu_index>
     a98:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <active_menu_index+0x1>
     a9c:	01 96       	adiw	r24, 0x01	; 1
     a9e:	09 f4       	brne	.+2      	; 0xaa2 <ui_process_key_command+0x12>
     aa0:	59 c2       	rjmp	.+1202   	; 0xf54 <ui_process_key_command+0x4c4>
        {
            return;
        }
        else
        {
            if (active_trigger_index != -1)
     aa2:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <active_trigger_index>
     aa6:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <active_trigger_index+0x1>
     aaa:	01 96       	adiw	r24, 0x01	; 1
     aac:	39 f0       	breq	.+14     	; 0xabc <ui_process_key_command+0x2c>
            {
                active_trigger_index = -1;
     aae:	8f ef       	ldi	r24, 0xFF	; 255
     ab0:	9f ef       	ldi	r25, 0xFF	; 255
     ab2:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <active_trigger_index+0x1>
     ab6:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <active_trigger_index>
     aba:	08 95       	ret
            }
            else if (active_config_index != -1)
     abc:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <active_config_index>
     ac0:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <active_config_index+0x1>
     ac4:	01 96       	adiw	r24, 0x01	; 1
     ac6:	39 f0       	breq	.+14     	; 0xad6 <ui_process_key_command+0x46>
            {
                active_config_index = -1;
     ac8:	8f ef       	ldi	r24, 0xFF	; 255
     aca:	9f ef       	ldi	r25, 0xFF	; 255
     acc:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <active_config_index+0x1>
     ad0:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <active_config_index>
     ad4:	08 95       	ret
            }
            else
            {
                active_menu_index = -1;
     ad6:	8f ef       	ldi	r24, 0xFF	; 255
     ad8:	9f ef       	ldi	r25, 0xFF	; 255
     ada:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <active_menu_index+0x1>
     ade:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <active_menu_index>
     ae2:	08 95       	ret
            }
        }
    }
    else if (key == 2)
     ae4:	82 30       	cpi	r24, 0x02	; 2
     ae6:	09 f0       	breq	.+2      	; 0xaea <ui_process_key_command+0x5a>
     ae8:	fd c0       	rjmp	.+506    	; 0xce4 <ui_process_key_command+0x254>
    {
        if (active_menu_index == -1)
     aea:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <active_menu_index>
     aee:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <active_menu_index+0x1>
     af2:	8f 3f       	cpi	r24, 0xFF	; 255
     af4:	2f ef       	ldi	r18, 0xFF	; 255
     af6:	92 07       	cpc	r25, r18
     af8:	71 f4       	brne	.+28     	; 0xb16 <ui_process_key_command+0x86>
        {
            if (menu_hover_index < 6)
     afa:	80 91 0e 03 	lds	r24, 0x030E	; 0x80030e <menu_hover_index>
     afe:	90 91 0f 03 	lds	r25, 0x030F	; 0x80030f <menu_hover_index+0x1>
     b02:	86 30       	cpi	r24, 0x06	; 6
     b04:	91 05       	cpc	r25, r1
     b06:	0c f0       	brlt	.+2      	; 0xb0a <ui_process_key_command+0x7a>
     b08:	25 c2       	rjmp	.+1098   	; 0xf54 <ui_process_key_command+0x4c4>
                menu_hover_index++; // navigate downwards on the main menu
     b0a:	01 96       	adiw	r24, 0x01	; 1
     b0c:	90 93 0f 03 	sts	0x030F, r25	; 0x80030f <menu_hover_index+0x1>
     b10:	80 93 0e 03 	sts	0x030E, r24	; 0x80030e <menu_hover_index>
     b14:	08 95       	ret
        }
        else if (active_menu_index == 4) 
     b16:	84 30       	cpi	r24, 0x04	; 4
     b18:	91 05       	cpc	r25, r1
     b1a:	09 f0       	breq	.+2      	; 0xb1e <ui_process_key_command+0x8e>
     b1c:	50 c0       	rjmp	.+160    	; 0xbbe <ui_process_key_command+0x12e>
        {
            // user is in the triggers menu
            if (active_trigger_index == -1)
     b1e:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <active_trigger_index>
     b22:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <active_trigger_index+0x1>
     b26:	8f 3f       	cpi	r24, 0xFF	; 255
     b28:	2f ef       	ldi	r18, 0xFF	; 255
     b2a:	92 07       	cpc	r25, r18
     b2c:	69 f4       	brne	.+26     	; 0xb48 <ui_process_key_command+0xb8>
            {
                if (trigger_hover_index < (sizeof(TRIGGERS_BUFFER)/sizeof(TRIGGERS_BUFFER[0]) - 1))
     b2e:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <trigger_hover_index>
     b32:	90 91 0d 03 	lds	r25, 0x030D	; 0x80030d <trigger_hover_index+0x1>
     b36:	00 97       	sbiw	r24, 0x00	; 0
     b38:	09 f0       	breq	.+2      	; 0xb3c <ui_process_key_command+0xac>
     b3a:	0c c2       	rjmp	.+1048   	; 0xf54 <ui_process_key_command+0x4c4>
                    trigger_hover_index++; // navigate downwards on the triggers menu
     b3c:	01 96       	adiw	r24, 0x01	; 1
     b3e:	90 93 0d 03 	sts	0x030D, r25	; 0x80030d <trigger_hover_index+0x1>
     b42:	80 93 0c 03 	sts	0x030C, r24	; 0x80030c <trigger_hover_index>
     b46:	08 95       	ret
            } else {
                switch (active_trigger_index) {
     b48:	00 97       	sbiw	r24, 0x00	; 0
     b4a:	19 f0       	breq	.+6      	; 0xb52 <ui_process_key_command+0xc2>
     b4c:	01 97       	sbiw	r24, 0x01	; 1
     b4e:	e1 f0       	breq	.+56     	; 0xb88 <ui_process_key_command+0xf8>
     b50:	08 95       	ret
                    case 0:
                        // adjust MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER - decrease
                        MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER -= STEP_SIZE_FOR_INCREMENTS;
     b52:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <STEP_SIZE_FOR_INCREMENTS>
     b56:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <STEP_SIZE_FOR_INCREMENTS+0x1>
     b5a:	40 91 10 01 	lds	r20, 0x0110	; 0x800110 <STEP_SIZE_FOR_INCREMENTS+0x2>
     b5e:	50 91 11 01 	lds	r21, 0x0111	; 0x800111 <STEP_SIZE_FOR_INCREMENTS+0x3>
     b62:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER>
     b66:	70 91 17 01 	lds	r23, 0x0117	; 0x800117 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x1>
     b6a:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x2>
     b6e:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x3>
     b72:	0e 94 d6 07 	call	0xfac	; 0xfac <__subsf3>
     b76:	60 93 16 01 	sts	0x0116, r22	; 0x800116 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER>
     b7a:	70 93 17 01 	sts	0x0117, r23	; 0x800117 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x1>
     b7e:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x2>
     b82:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x3>
                        break;
     b86:	08 95       	ret
                    case 1:
                        // adjust MAXIMUM_TEMPERATURE_BEFORE_PUMPING - decrease
                        MAXIMUM_TEMPERATURE_BEFORE_PUMPING -= STEP_SIZE_FOR_INCREMENTS;
     b88:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <STEP_SIZE_FOR_INCREMENTS>
     b8c:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <STEP_SIZE_FOR_INCREMENTS+0x1>
     b90:	40 91 10 01 	lds	r20, 0x0110	; 0x800110 <STEP_SIZE_FOR_INCREMENTS+0x2>
     b94:	50 91 11 01 	lds	r21, 0x0111	; 0x800111 <STEP_SIZE_FOR_INCREMENTS+0x3>
     b98:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING>
     b9c:	70 91 13 01 	lds	r23, 0x0113	; 0x800113 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x1>
     ba0:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x2>
     ba4:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x3>
     ba8:	0e 94 d6 07 	call	0xfac	; 0xfac <__subsf3>
     bac:	60 93 12 01 	sts	0x0112, r22	; 0x800112 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING>
     bb0:	70 93 13 01 	sts	0x0113, r23	; 0x800113 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x1>
     bb4:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x2>
     bb8:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x3>
                        break;
     bbc:	08 95       	ret
                    default:
                        break;
                }
            }
        }
        else if (active_menu_index == 5) {
     bbe:	85 30       	cpi	r24, 0x05	; 5
     bc0:	91 05       	cpc	r25, r1
     bc2:	71 f4       	brne	.+28     	; 0xbe0 <ui_process_key_command+0x150>
            if (message_hover_index < MSG_BUFFER_SIZE - 1)
     bc4:	80 91 08 03 	lds	r24, 0x0308	; 0x800308 <__data_end>
     bc8:	90 91 09 03 	lds	r25, 0x0309	; 0x800309 <__data_end+0x1>
     bcc:	83 30       	cpi	r24, 0x03	; 3
     bce:	91 05       	cpc	r25, r1
     bd0:	0c f0       	brlt	.+2      	; 0xbd4 <ui_process_key_command+0x144>
     bd2:	c0 c1       	rjmp	.+896    	; 0xf54 <ui_process_key_command+0x4c4>
                message_hover_index++;
     bd4:	01 96       	adiw	r24, 0x01	; 1
     bd6:	90 93 09 03 	sts	0x0309, r25	; 0x800309 <__data_end+0x1>
     bda:	80 93 08 03 	sts	0x0308, r24	; 0x800308 <__data_end>
     bde:	08 95       	ret
        }
        else if (active_menu_index == 6)
     be0:	06 97       	sbiw	r24, 0x06	; 6
     be2:	09 f0       	breq	.+2      	; 0xbe6 <ui_process_key_command+0x156>
     be4:	b7 c1       	rjmp	.+878    	; 0xf54 <ui_process_key_command+0x4c4>
        {
            if (active_config_index == -1)
     be6:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <active_config_index>
     bea:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <active_config_index+0x1>
     bee:	8f 3f       	cpi	r24, 0xFF	; 255
     bf0:	2f ef       	ldi	r18, 0xFF	; 255
     bf2:	92 07       	cpc	r25, r18
     bf4:	71 f4       	brne	.+28     	; 0xc12 <ui_process_key_command+0x182>
            {
                if (config_hover_index < (sizeof(CONFIG_BUFFER)/sizeof(CONFIG_BUFFER[0]) - 1))
     bf6:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <config_hover_index>
     bfa:	90 91 0b 03 	lds	r25, 0x030B	; 0x80030b <config_hover_index+0x1>
     bfe:	84 30       	cpi	r24, 0x04	; 4
     c00:	91 05       	cpc	r25, r1
     c02:	08 f0       	brcs	.+2      	; 0xc06 <ui_process_key_command+0x176>
     c04:	a7 c1       	rjmp	.+846    	; 0xf54 <ui_process_key_command+0x4c4>
                    config_hover_index++; // navigate downwards on the config menu
     c06:	01 96       	adiw	r24, 0x01	; 1
     c08:	90 93 0b 03 	sts	0x030B, r25	; 0x80030b <config_hover_index+0x1>
     c0c:	80 93 0a 03 	sts	0x030A, r24	; 0x80030a <config_hover_index>
     c10:	08 95       	ret
            } else {
                switch (active_config_index)
     c12:	82 30       	cpi	r24, 0x02	; 2
     c14:	91 05       	cpc	r25, r1
     c16:	09 f4       	brne	.+2      	; 0xc1a <ui_process_key_command+0x18a>
     c18:	44 c0       	rjmp	.+136    	; 0xca2 <ui_process_key_command+0x212>
     c1a:	2c f4       	brge	.+10     	; 0xc26 <ui_process_key_command+0x196>
     c1c:	00 97       	sbiw	r24, 0x00	; 0
     c1e:	59 f0       	breq	.+22     	; 0xc36 <ui_process_key_command+0x1a6>
     c20:	01 97       	sbiw	r24, 0x01	; 1
     c22:	21 f1       	breq	.+72     	; 0xc6c <ui_process_key_command+0x1dc>
     c24:	08 95       	ret
     c26:	83 30       	cpi	r24, 0x03	; 3
     c28:	91 05       	cpc	r25, r1
     c2a:	09 f4       	brne	.+2      	; 0xc2e <ui_process_key_command+0x19e>
     c2c:	55 c0       	rjmp	.+170    	; 0xcd8 <ui_process_key_command+0x248>
     c2e:	04 97       	sbiw	r24, 0x04	; 4
     c30:	09 f4       	brne	.+2      	; 0xc34 <ui_process_key_command+0x1a4>
     c32:	55 c0       	rjmp	.+170    	; 0xcde <ui_process_key_command+0x24e>
     c34:	08 95       	ret
                {
                case 0:
                    // adjust STEP_SIZE_FOR_INCREMENTS - decrease
                    STEP_SIZE_FOR_INCREMENTS -= STEP_INCREMENT;
     c36:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <STEP_INCREMENT>
     c3a:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <STEP_INCREMENT+0x1>
     c3e:	40 91 0c 01 	lds	r20, 0x010C	; 0x80010c <STEP_INCREMENT+0x2>
     c42:	50 91 0d 01 	lds	r21, 0x010D	; 0x80010d <STEP_INCREMENT+0x3>
     c46:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <STEP_SIZE_FOR_INCREMENTS>
     c4a:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <STEP_SIZE_FOR_INCREMENTS+0x1>
     c4e:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <STEP_SIZE_FOR_INCREMENTS+0x2>
     c52:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <STEP_SIZE_FOR_INCREMENTS+0x3>
     c56:	0e 94 d6 07 	call	0xfac	; 0xfac <__subsf3>
     c5a:	60 93 0e 01 	sts	0x010E, r22	; 0x80010e <STEP_SIZE_FOR_INCREMENTS>
     c5e:	70 93 0f 01 	sts	0x010F, r23	; 0x80010f <STEP_SIZE_FOR_INCREMENTS+0x1>
     c62:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <STEP_SIZE_FOR_INCREMENTS+0x2>
     c66:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <STEP_SIZE_FOR_INCREMENTS+0x3>
                    break;
     c6a:	08 95       	ret
                case 1:
                    // adjust PUMP_THRESHOLD - decrease
                    PUMP_THRESHOLD -= STEP_SIZE_FOR_INCREMENTS;
     c6c:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <STEP_SIZE_FOR_INCREMENTS>
     c70:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <STEP_SIZE_FOR_INCREMENTS+0x1>
     c74:	40 91 10 01 	lds	r20, 0x0110	; 0x800110 <STEP_SIZE_FOR_INCREMENTS+0x2>
     c78:	50 91 11 01 	lds	r21, 0x0111	; 0x800111 <STEP_SIZE_FOR_INCREMENTS+0x3>
     c7c:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <PUMP_THRESHOLD>
     c80:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <PUMP_THRESHOLD+0x1>
     c84:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <PUMP_THRESHOLD+0x2>
     c88:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <PUMP_THRESHOLD+0x3>
     c8c:	0e 94 d6 07 	call	0xfac	; 0xfac <__subsf3>
     c90:	60 93 06 01 	sts	0x0106, r22	; 0x800106 <PUMP_THRESHOLD>
     c94:	70 93 07 01 	sts	0x0107, r23	; 0x800107 <PUMP_THRESHOLD+0x1>
     c98:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <PUMP_THRESHOLD+0x2>
     c9c:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <PUMP_THRESHOLD+0x3>
                    break;
     ca0:	08 95       	ret
                case 2:
                    // adjust SPRAY_THRESHOLD - decrease
                    SPRAY_THRESHOLD -= STEP_SIZE_FOR_INCREMENTS;
     ca2:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <STEP_SIZE_FOR_INCREMENTS>
     ca6:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <STEP_SIZE_FOR_INCREMENTS+0x1>
     caa:	40 91 10 01 	lds	r20, 0x0110	; 0x800110 <STEP_SIZE_FOR_INCREMENTS+0x2>
     cae:	50 91 11 01 	lds	r21, 0x0111	; 0x800111 <STEP_SIZE_FOR_INCREMENTS+0x3>
     cb2:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <SPRAY_THRESHOLD>
     cb6:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <SPRAY_THRESHOLD+0x1>
     cba:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <SPRAY_THRESHOLD+0x2>
     cbe:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <SPRAY_THRESHOLD+0x3>
     cc2:	0e 94 d6 07 	call	0xfac	; 0xfac <__subsf3>
     cc6:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <SPRAY_THRESHOLD>
     cca:	70 93 03 01 	sts	0x0103, r23	; 0x800103 <SPRAY_THRESHOLD+0x1>
     cce:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <SPRAY_THRESHOLD+0x2>
     cd2:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <SPRAY_THRESHOLD+0x3>
                    break;
     cd6:	08 95       	ret
                case 3:
                    // adjust ENABLE_TRIGGER_VALUE - toggle
                    ENABLE_TRIGGER_VALUE = 0;
     cd8:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <ENABLE_TRIGGER_VALUE>
                    break;
     cdc:	08 95       	ret
                case 4:
                    // adjust ENABLE_ALERT_VALUE - toggle
                    ENABLE_ALERT_VALUE = 0;
     cde:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
                    break;
     ce2:	08 95       	ret
                    break;
                }
            }
        }
    }
    else if (key == 3)
     ce4:	83 30       	cpi	r24, 0x03	; 3
     ce6:	09 f0       	breq	.+2      	; 0xcea <ui_process_key_command+0x25a>
     ce8:	00 c1       	rjmp	.+512    	; 0xeea <ui_process_key_command+0x45a>
    {
        if (active_menu_index == -1)
     cea:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <active_menu_index>
     cee:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <active_menu_index+0x1>
     cf2:	8f 3f       	cpi	r24, 0xFF	; 255
     cf4:	2f ef       	ldi	r18, 0xFF	; 255
     cf6:	92 07       	cpc	r25, r18
     cf8:	71 f4       	brne	.+28     	; 0xd16 <ui_process_key_command+0x286>
        {
            if (menu_hover_index > 0)
     cfa:	80 91 0e 03 	lds	r24, 0x030E	; 0x80030e <menu_hover_index>
     cfe:	90 91 0f 03 	lds	r25, 0x030F	; 0x80030f <menu_hover_index+0x1>
     d02:	18 16       	cp	r1, r24
     d04:	19 06       	cpc	r1, r25
     d06:	0c f0       	brlt	.+2      	; 0xd0a <ui_process_key_command+0x27a>
     d08:	25 c1       	rjmp	.+586    	; 0xf54 <ui_process_key_command+0x4c4>
                menu_hover_index--;
     d0a:	01 97       	sbiw	r24, 0x01	; 1
     d0c:	90 93 0f 03 	sts	0x030F, r25	; 0x80030f <menu_hover_index+0x1>
     d10:	80 93 0e 03 	sts	0x030E, r24	; 0x80030e <menu_hover_index>
     d14:	08 95       	ret
        }
        else if (active_menu_index == 4)
     d16:	84 30       	cpi	r24, 0x04	; 4
     d18:	91 05       	cpc	r25, r1
     d1a:	09 f0       	breq	.+2      	; 0xd1e <ui_process_key_command+0x28e>
     d1c:	51 c0       	rjmp	.+162    	; 0xdc0 <ui_process_key_command+0x330>
        {
            if (active_trigger_index == -1)
     d1e:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <active_trigger_index>
     d22:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <active_trigger_index+0x1>
     d26:	8f 3f       	cpi	r24, 0xFF	; 255
     d28:	2f ef       	ldi	r18, 0xFF	; 255
     d2a:	92 07       	cpc	r25, r18
     d2c:	71 f4       	brne	.+28     	; 0xd4a <ui_process_key_command+0x2ba>
            {
                if (trigger_hover_index > 0)
     d2e:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <trigger_hover_index>
     d32:	90 91 0d 03 	lds	r25, 0x030D	; 0x80030d <trigger_hover_index+0x1>
     d36:	18 16       	cp	r1, r24
     d38:	19 06       	cpc	r1, r25
     d3a:	0c f0       	brlt	.+2      	; 0xd3e <ui_process_key_command+0x2ae>
     d3c:	0b c1       	rjmp	.+534    	; 0xf54 <ui_process_key_command+0x4c4>
                    trigger_hover_index--;
     d3e:	01 97       	sbiw	r24, 0x01	; 1
     d40:	90 93 0d 03 	sts	0x030D, r25	; 0x80030d <trigger_hover_index+0x1>
     d44:	80 93 0c 03 	sts	0x030C, r24	; 0x80030c <trigger_hover_index>
     d48:	08 95       	ret
            } else {
                switch (active_trigger_index) {
     d4a:	00 97       	sbiw	r24, 0x00	; 0
     d4c:	19 f0       	breq	.+6      	; 0xd54 <ui_process_key_command+0x2c4>
     d4e:	01 97       	sbiw	r24, 0x01	; 1
     d50:	e1 f0       	breq	.+56     	; 0xd8a <ui_process_key_command+0x2fa>
     d52:	08 95       	ret
                    case 0:
                        // adjust MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER - decrease
                        MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER += STEP_SIZE_FOR_INCREMENTS;
     d54:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <STEP_SIZE_FOR_INCREMENTS>
     d58:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <STEP_SIZE_FOR_INCREMENTS+0x1>
     d5c:	40 91 10 01 	lds	r20, 0x0110	; 0x800110 <STEP_SIZE_FOR_INCREMENTS+0x2>
     d60:	50 91 11 01 	lds	r21, 0x0111	; 0x800111 <STEP_SIZE_FOR_INCREMENTS+0x3>
     d64:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER>
     d68:	70 91 17 01 	lds	r23, 0x0117	; 0x800117 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x1>
     d6c:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x2>
     d70:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x3>
     d74:	0e 94 d7 07 	call	0xfae	; 0xfae <__addsf3>
     d78:	60 93 16 01 	sts	0x0116, r22	; 0x800116 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER>
     d7c:	70 93 17 01 	sts	0x0117, r23	; 0x800117 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x1>
     d80:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x2>
     d84:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <MINIMUM_CAPACITY_BEFORE_REFILLING_TRIGGER+0x3>
                        break;
     d88:	08 95       	ret
                    case 1:
                        // adjust MAXIMUM_TEMPERATURE_BEFORE_PUMPING - decrease
                        MAXIMUM_TEMPERATURE_BEFORE_PUMPING += STEP_SIZE_FOR_INCREMENTS;
     d8a:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <STEP_SIZE_FOR_INCREMENTS>
     d8e:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <STEP_SIZE_FOR_INCREMENTS+0x1>
     d92:	40 91 10 01 	lds	r20, 0x0110	; 0x800110 <STEP_SIZE_FOR_INCREMENTS+0x2>
     d96:	50 91 11 01 	lds	r21, 0x0111	; 0x800111 <STEP_SIZE_FOR_INCREMENTS+0x3>
     d9a:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING>
     d9e:	70 91 13 01 	lds	r23, 0x0113	; 0x800113 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x1>
     da2:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x2>
     da6:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x3>
     daa:	0e 94 d7 07 	call	0xfae	; 0xfae <__addsf3>
     dae:	60 93 12 01 	sts	0x0112, r22	; 0x800112 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING>
     db2:	70 93 13 01 	sts	0x0113, r23	; 0x800113 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x1>
     db6:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x2>
     dba:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <MAXIMUM_TEMPERATURE_BEFORE_PUMPING+0x3>
                        break;
     dbe:	08 95       	ret
                    default:
                        break;
                }
            }
        } 
        else if (active_menu_index == 5) {
     dc0:	85 30       	cpi	r24, 0x05	; 5
     dc2:	91 05       	cpc	r25, r1
     dc4:	71 f4       	brne	.+28     	; 0xde2 <ui_process_key_command+0x352>
            if (message_hover_index > 0)
     dc6:	80 91 08 03 	lds	r24, 0x0308	; 0x800308 <__data_end>
     dca:	90 91 09 03 	lds	r25, 0x0309	; 0x800309 <__data_end+0x1>
     dce:	18 16       	cp	r1, r24
     dd0:	19 06       	cpc	r1, r25
     dd2:	0c f0       	brlt	.+2      	; 0xdd6 <ui_process_key_command+0x346>
     dd4:	bf c0       	rjmp	.+382    	; 0xf54 <ui_process_key_command+0x4c4>
                message_hover_index--;
     dd6:	01 97       	sbiw	r24, 0x01	; 1
     dd8:	90 93 09 03 	sts	0x0309, r25	; 0x800309 <__data_end+0x1>
     ddc:	80 93 08 03 	sts	0x0308, r24	; 0x800308 <__data_end>
     de0:	08 95       	ret
        }
        else if (active_menu_index == 6)
     de2:	06 97       	sbiw	r24, 0x06	; 6
     de4:	09 f0       	breq	.+2      	; 0xde8 <ui_process_key_command+0x358>
     de6:	b6 c0       	rjmp	.+364    	; 0xf54 <ui_process_key_command+0x4c4>
        {
            if (active_config_index == -1)
     de8:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <active_config_index>
     dec:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <active_config_index+0x1>
     df0:	8f 3f       	cpi	r24, 0xFF	; 255
     df2:	2f ef       	ldi	r18, 0xFF	; 255
     df4:	92 07       	cpc	r25, r18
     df6:	71 f4       	brne	.+28     	; 0xe14 <ui_process_key_command+0x384>
            {
                if (config_hover_index > 0)
     df8:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <config_hover_index>
     dfc:	90 91 0b 03 	lds	r25, 0x030B	; 0x80030b <config_hover_index+0x1>
     e00:	18 16       	cp	r1, r24
     e02:	19 06       	cpc	r1, r25
     e04:	0c f0       	brlt	.+2      	; 0xe08 <ui_process_key_command+0x378>
     e06:	a6 c0       	rjmp	.+332    	; 0xf54 <ui_process_key_command+0x4c4>
                    config_hover_index--;
     e08:	01 97       	sbiw	r24, 0x01	; 1
     e0a:	90 93 0b 03 	sts	0x030B, r25	; 0x80030b <config_hover_index+0x1>
     e0e:	80 93 0a 03 	sts	0x030A, r24	; 0x80030a <config_hover_index>
     e12:	08 95       	ret
            } else {
            switch (active_config_index)
     e14:	82 30       	cpi	r24, 0x02	; 2
     e16:	91 05       	cpc	r25, r1
     e18:	09 f4       	brne	.+2      	; 0xe1c <ui_process_key_command+0x38c>
     e1a:	44 c0       	rjmp	.+136    	; 0xea4 <ui_process_key_command+0x414>
     e1c:	2c f4       	brge	.+10     	; 0xe28 <ui_process_key_command+0x398>
     e1e:	00 97       	sbiw	r24, 0x00	; 0
     e20:	59 f0       	breq	.+22     	; 0xe38 <ui_process_key_command+0x3a8>
     e22:	01 97       	sbiw	r24, 0x01	; 1
     e24:	21 f1       	breq	.+72     	; 0xe6e <ui_process_key_command+0x3de>
     e26:	08 95       	ret
     e28:	83 30       	cpi	r24, 0x03	; 3
     e2a:	91 05       	cpc	r25, r1
     e2c:	09 f4       	brne	.+2      	; 0xe30 <ui_process_key_command+0x3a0>
     e2e:	55 c0       	rjmp	.+170    	; 0xeda <ui_process_key_command+0x44a>
     e30:	04 97       	sbiw	r24, 0x04	; 4
     e32:	09 f4       	brne	.+2      	; 0xe36 <ui_process_key_command+0x3a6>
     e34:	56 c0       	rjmp	.+172    	; 0xee2 <ui_process_key_command+0x452>
     e36:	08 95       	ret
                {
                case 0:
                    // adjust STEP_SIZE_FOR_INCREMENTS - decrease
                    STEP_SIZE_FOR_INCREMENTS += STEP_INCREMENT;
     e38:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <STEP_INCREMENT>
     e3c:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <STEP_INCREMENT+0x1>
     e40:	40 91 0c 01 	lds	r20, 0x010C	; 0x80010c <STEP_INCREMENT+0x2>
     e44:	50 91 0d 01 	lds	r21, 0x010D	; 0x80010d <STEP_INCREMENT+0x3>
     e48:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <STEP_SIZE_FOR_INCREMENTS>
     e4c:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <STEP_SIZE_FOR_INCREMENTS+0x1>
     e50:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <STEP_SIZE_FOR_INCREMENTS+0x2>
     e54:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <STEP_SIZE_FOR_INCREMENTS+0x3>
     e58:	0e 94 d7 07 	call	0xfae	; 0xfae <__addsf3>
     e5c:	60 93 0e 01 	sts	0x010E, r22	; 0x80010e <STEP_SIZE_FOR_INCREMENTS>
     e60:	70 93 0f 01 	sts	0x010F, r23	; 0x80010f <STEP_SIZE_FOR_INCREMENTS+0x1>
     e64:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <STEP_SIZE_FOR_INCREMENTS+0x2>
     e68:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <STEP_SIZE_FOR_INCREMENTS+0x3>
                    break;
     e6c:	08 95       	ret
                case 1:
                    // adjust PUMP_THRESHOLD - decrease
                    PUMP_THRESHOLD += STEP_SIZE_FOR_INCREMENTS;
     e6e:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <STEP_SIZE_FOR_INCREMENTS>
     e72:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <STEP_SIZE_FOR_INCREMENTS+0x1>
     e76:	40 91 10 01 	lds	r20, 0x0110	; 0x800110 <STEP_SIZE_FOR_INCREMENTS+0x2>
     e7a:	50 91 11 01 	lds	r21, 0x0111	; 0x800111 <STEP_SIZE_FOR_INCREMENTS+0x3>
     e7e:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <PUMP_THRESHOLD>
     e82:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <PUMP_THRESHOLD+0x1>
     e86:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <PUMP_THRESHOLD+0x2>
     e8a:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <PUMP_THRESHOLD+0x3>
     e8e:	0e 94 d7 07 	call	0xfae	; 0xfae <__addsf3>
     e92:	60 93 06 01 	sts	0x0106, r22	; 0x800106 <PUMP_THRESHOLD>
     e96:	70 93 07 01 	sts	0x0107, r23	; 0x800107 <PUMP_THRESHOLD+0x1>
     e9a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <PUMP_THRESHOLD+0x2>
     e9e:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <PUMP_THRESHOLD+0x3>
                    break;
     ea2:	08 95       	ret
                case 2:
                    // adjust SPRAY_THRESHOLD - decrease
                    SPRAY_THRESHOLD += STEP_SIZE_FOR_INCREMENTS;
     ea4:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <STEP_SIZE_FOR_INCREMENTS>
     ea8:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <STEP_SIZE_FOR_INCREMENTS+0x1>
     eac:	40 91 10 01 	lds	r20, 0x0110	; 0x800110 <STEP_SIZE_FOR_INCREMENTS+0x2>
     eb0:	50 91 11 01 	lds	r21, 0x0111	; 0x800111 <STEP_SIZE_FOR_INCREMENTS+0x3>
     eb4:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <SPRAY_THRESHOLD>
     eb8:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <SPRAY_THRESHOLD+0x1>
     ebc:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <SPRAY_THRESHOLD+0x2>
     ec0:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <SPRAY_THRESHOLD+0x3>
     ec4:	0e 94 d7 07 	call	0xfae	; 0xfae <__addsf3>
     ec8:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <SPRAY_THRESHOLD>
     ecc:	70 93 03 01 	sts	0x0103, r23	; 0x800103 <SPRAY_THRESHOLD+0x1>
     ed0:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <SPRAY_THRESHOLD+0x2>
     ed4:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <SPRAY_THRESHOLD+0x3>
                    break;
     ed8:	08 95       	ret
                case 3:
                    // adjust ENABLE_TRIGGER_VALUE - toggle
                    ENABLE_TRIGGER_VALUE = 1;
     eda:	81 e0       	ldi	r24, 0x01	; 1
     edc:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <ENABLE_TRIGGER_VALUE>
                    break;
     ee0:	08 95       	ret
                case 4:
                    // adjust ENABLE_ALERT_VALUE - toggle
                    ENABLE_ALERT_VALUE = 1;
     ee2:	81 e0       	ldi	r24, 0x01	; 1
     ee4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
                    break;
     ee8:	08 95       	ret
                    break;
                }
            }
        }
    }
    else if (key == 4)
     eea:	84 30       	cpi	r24, 0x04	; 4
     eec:	99 f5       	brne	.+102    	; 0xf54 <ui_process_key_command+0x4c4>
    {
        if (active_menu_index == -1)
     eee:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <active_menu_index>
     ef2:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <active_menu_index+0x1>
     ef6:	8f 3f       	cpi	r24, 0xFF	; 255
     ef8:	2f ef       	ldi	r18, 0xFF	; 255
     efa:	92 07       	cpc	r25, r18
     efc:	49 f4       	brne	.+18     	; 0xf10 <ui_process_key_command+0x480>
        {
            active_menu_index = menu_hover_index;
     efe:	80 91 0e 03 	lds	r24, 0x030E	; 0x80030e <menu_hover_index>
     f02:	90 91 0f 03 	lds	r25, 0x030F	; 0x80030f <menu_hover_index+0x1>
     f06:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <active_menu_index+0x1>
     f0a:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <active_menu_index>
     f0e:	08 95       	ret
        }
        else if (active_menu_index == 4)
     f10:	84 30       	cpi	r24, 0x04	; 4
     f12:	91 05       	cpc	r25, r1
     f14:	79 f4       	brne	.+30     	; 0xf34 <ui_process_key_command+0x4a4>
        {
            if (active_trigger_index == -1)
     f16:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <active_trigger_index>
     f1a:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <active_trigger_index+0x1>
     f1e:	01 96       	adiw	r24, 0x01	; 1
     f20:	c9 f4       	brne	.+50     	; 0xf54 <ui_process_key_command+0x4c4>
            {
                active_trigger_index = trigger_hover_index;
     f22:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <trigger_hover_index>
     f26:	90 91 0d 03 	lds	r25, 0x030D	; 0x80030d <trigger_hover_index+0x1>
     f2a:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <active_trigger_index+0x1>
     f2e:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <active_trigger_index>
     f32:	08 95       	ret
            }
        }
        else if (active_menu_index == 6)
     f34:	06 97       	sbiw	r24, 0x06	; 6
     f36:	71 f4       	brne	.+28     	; 0xf54 <ui_process_key_command+0x4c4>
        {
            if (active_config_index == -1)
     f38:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <active_config_index>
     f3c:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <active_config_index+0x1>
     f40:	01 96       	adiw	r24, 0x01	; 1
     f42:	41 f4       	brne	.+16     	; 0xf54 <ui_process_key_command+0x4c4>
            {
                active_config_index = config_hover_index;
     f44:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <config_hover_index>
     f48:	90 91 0b 03 	lds	r25, 0x030B	; 0x80030b <config_hover_index+0x1>
     f4c:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <active_config_index+0x1>
     f50:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <active_config_index>
     f54:	08 95       	ret

00000f56 <main>:



int main(void)
{
    LCD_1602A_init();
     f56:	0e 94 80 01 	call	0x300	; 0x300 <LCD_1602A_init>
    HCSR04_init();
     f5a:	0e 94 67 02 	call	0x4ce	; 0x4ce <HCSR04_init>
    KEYPAD_init();
     f5e:	0e 94 ab 02 	call	0x556	; 0x556 <KEYPAD_init>
    uint16_t distance;
    uint8_t pressed_key;

    while (1)
    {
        ui_show_display();
     f62:	0e 94 80 03 	call	0x700	; 0x700 <ui_show_display>
     f66:	2f ef       	ldi	r18, 0xFF	; 255
     f68:	89 ef       	ldi	r24, 0xF9	; 249
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	21 50       	subi	r18, 0x01	; 1
     f6e:	80 40       	sbci	r24, 0x00	; 0
     f70:	90 40       	sbci	r25, 0x00	; 0
     f72:	e1 f7       	brne	.-8      	; 0xf6c <main+0x16>
     f74:	00 c0       	rjmp	.+0      	; 0xf76 <main+0x20>
     f76:	00 00       	nop
        _delay_ms(20);

        while ((pressed_key = KEYPAD_read()) == KEYPAD_NO_KEY);
     f78:	0e 94 b2 02 	call	0x564	; 0x564 <KEYPAD_read>
     f7c:	c8 2f       	mov	r28, r24
     f7e:	85 30       	cpi	r24, 0x05	; 5
     f80:	d9 f3       	breq	.-10     	; 0xf78 <main+0x22>
     f82:	2f ef       	ldi	r18, 0xFF	; 255
     f84:	89 ef       	ldi	r24, 0xF9	; 249
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	21 50       	subi	r18, 0x01	; 1
     f8a:	80 40       	sbci	r24, 0x00	; 0
     f8c:	90 40       	sbci	r25, 0x00	; 0
     f8e:	e1 f7       	brne	.-8      	; 0xf88 <main+0x32>
     f90:	00 c0       	rjmp	.+0      	; 0xf92 <main+0x3c>
     f92:	00 00       	nop
        _delay_ms(20);
        if (KEYPAD_read() == pressed_key)
     f94:	0e 94 b2 02 	call	0x564	; 0x564 <KEYPAD_read>
     f98:	c8 13       	cpse	r28, r24
     f9a:	e3 cf       	rjmp	.-58     	; 0xf62 <main+0xc>
        {
            ui_process_key_command(pressed_key);
     f9c:	8c 2f       	mov	r24, r28
     f9e:	0e 94 48 05 	call	0xa90	; 0xa90 <ui_process_key_command>
            while (KEYPAD_read() != KEYPAD_NO_KEY); // wait until the key is released
     fa2:	0e 94 b2 02 	call	0x564	; 0x564 <KEYPAD_read>
     fa6:	85 30       	cpi	r24, 0x05	; 5
     fa8:	e1 f7       	brne	.-8      	; 0xfa2 <main+0x4c>
     faa:	db cf       	rjmp	.-74     	; 0xf62 <main+0xc>

00000fac <__subsf3>:
     fac:	50 58       	subi	r21, 0x80	; 128

00000fae <__addsf3>:
     fae:	bb 27       	eor	r27, r27
     fb0:	aa 27       	eor	r26, r26
     fb2:	0e 94 ee 07 	call	0xfdc	; 0xfdc <__addsf3x>
     fb6:	0c 94 38 09 	jmp	0x1270	; 0x1270 <__fp_round>
     fba:	0e 94 2a 09 	call	0x1254	; 0x1254 <__fp_pscA>
     fbe:	38 f0       	brcs	.+14     	; 0xfce <__addsf3+0x20>
     fc0:	0e 94 31 09 	call	0x1262	; 0x1262 <__fp_pscB>
     fc4:	20 f0       	brcs	.+8      	; 0xfce <__addsf3+0x20>
     fc6:	39 f4       	brne	.+14     	; 0xfd6 <__addsf3+0x28>
     fc8:	9f 3f       	cpi	r25, 0xFF	; 255
     fca:	19 f4       	brne	.+6      	; 0xfd2 <__addsf3+0x24>
     fcc:	26 f4       	brtc	.+8      	; 0xfd6 <__addsf3+0x28>
     fce:	0c 94 27 09 	jmp	0x124e	; 0x124e <__fp_nan>
     fd2:	0e f4       	brtc	.+2      	; 0xfd6 <__addsf3+0x28>
     fd4:	e0 95       	com	r30
     fd6:	e7 fb       	bst	r30, 7
     fd8:	0c 94 21 09 	jmp	0x1242	; 0x1242 <__fp_inf>

00000fdc <__addsf3x>:
     fdc:	e9 2f       	mov	r30, r25
     fde:	0e 94 49 09 	call	0x1292	; 0x1292 <__fp_split3>
     fe2:	58 f3       	brcs	.-42     	; 0xfba <__addsf3+0xc>
     fe4:	ba 17       	cp	r27, r26
     fe6:	62 07       	cpc	r22, r18
     fe8:	73 07       	cpc	r23, r19
     fea:	84 07       	cpc	r24, r20
     fec:	95 07       	cpc	r25, r21
     fee:	20 f0       	brcs	.+8      	; 0xff8 <__addsf3x+0x1c>
     ff0:	79 f4       	brne	.+30     	; 0x1010 <__addsf3x+0x34>
     ff2:	a6 f5       	brtc	.+104    	; 0x105c <__addsf3x+0x80>
     ff4:	0c 94 6b 09 	jmp	0x12d6	; 0x12d6 <__fp_zero>
     ff8:	0e f4       	brtc	.+2      	; 0xffc <__addsf3x+0x20>
     ffa:	e0 95       	com	r30
     ffc:	0b 2e       	mov	r0, r27
     ffe:	ba 2f       	mov	r27, r26
    1000:	a0 2d       	mov	r26, r0
    1002:	0b 01       	movw	r0, r22
    1004:	b9 01       	movw	r22, r18
    1006:	90 01       	movw	r18, r0
    1008:	0c 01       	movw	r0, r24
    100a:	ca 01       	movw	r24, r20
    100c:	a0 01       	movw	r20, r0
    100e:	11 24       	eor	r1, r1
    1010:	ff 27       	eor	r31, r31
    1012:	59 1b       	sub	r21, r25
    1014:	99 f0       	breq	.+38     	; 0x103c <__addsf3x+0x60>
    1016:	59 3f       	cpi	r21, 0xF9	; 249
    1018:	50 f4       	brcc	.+20     	; 0x102e <__addsf3x+0x52>
    101a:	50 3e       	cpi	r21, 0xE0	; 224
    101c:	68 f1       	brcs	.+90     	; 0x1078 <__addsf3x+0x9c>
    101e:	1a 16       	cp	r1, r26
    1020:	f0 40       	sbci	r31, 0x00	; 0
    1022:	a2 2f       	mov	r26, r18
    1024:	23 2f       	mov	r18, r19
    1026:	34 2f       	mov	r19, r20
    1028:	44 27       	eor	r20, r20
    102a:	58 5f       	subi	r21, 0xF8	; 248
    102c:	f3 cf       	rjmp	.-26     	; 0x1014 <__addsf3x+0x38>
    102e:	46 95       	lsr	r20
    1030:	37 95       	ror	r19
    1032:	27 95       	ror	r18
    1034:	a7 95       	ror	r26
    1036:	f0 40       	sbci	r31, 0x00	; 0
    1038:	53 95       	inc	r21
    103a:	c9 f7       	brne	.-14     	; 0x102e <__addsf3x+0x52>
    103c:	7e f4       	brtc	.+30     	; 0x105c <__addsf3x+0x80>
    103e:	1f 16       	cp	r1, r31
    1040:	ba 0b       	sbc	r27, r26
    1042:	62 0b       	sbc	r22, r18
    1044:	73 0b       	sbc	r23, r19
    1046:	84 0b       	sbc	r24, r20
    1048:	ba f0       	brmi	.+46     	; 0x1078 <__addsf3x+0x9c>
    104a:	91 50       	subi	r25, 0x01	; 1
    104c:	a1 f0       	breq	.+40     	; 0x1076 <__addsf3x+0x9a>
    104e:	ff 0f       	add	r31, r31
    1050:	bb 1f       	adc	r27, r27
    1052:	66 1f       	adc	r22, r22
    1054:	77 1f       	adc	r23, r23
    1056:	88 1f       	adc	r24, r24
    1058:	c2 f7       	brpl	.-16     	; 0x104a <__addsf3x+0x6e>
    105a:	0e c0       	rjmp	.+28     	; 0x1078 <__addsf3x+0x9c>
    105c:	ba 0f       	add	r27, r26
    105e:	62 1f       	adc	r22, r18
    1060:	73 1f       	adc	r23, r19
    1062:	84 1f       	adc	r24, r20
    1064:	48 f4       	brcc	.+18     	; 0x1078 <__addsf3x+0x9c>
    1066:	87 95       	ror	r24
    1068:	77 95       	ror	r23
    106a:	67 95       	ror	r22
    106c:	b7 95       	ror	r27
    106e:	f7 95       	ror	r31
    1070:	9e 3f       	cpi	r25, 0xFE	; 254
    1072:	08 f0       	brcs	.+2      	; 0x1076 <__addsf3x+0x9a>
    1074:	b0 cf       	rjmp	.-160    	; 0xfd6 <__addsf3+0x28>
    1076:	93 95       	inc	r25
    1078:	88 0f       	add	r24, r24
    107a:	08 f0       	brcs	.+2      	; 0x107e <__addsf3x+0xa2>
    107c:	99 27       	eor	r25, r25
    107e:	ee 0f       	add	r30, r30
    1080:	97 95       	ror	r25
    1082:	87 95       	ror	r24
    1084:	08 95       	ret

00001086 <__divsf3>:
    1086:	0e 94 57 08 	call	0x10ae	; 0x10ae <__divsf3x>
    108a:	0c 94 38 09 	jmp	0x1270	; 0x1270 <__fp_round>
    108e:	0e 94 31 09 	call	0x1262	; 0x1262 <__fp_pscB>
    1092:	58 f0       	brcs	.+22     	; 0x10aa <__divsf3+0x24>
    1094:	0e 94 2a 09 	call	0x1254	; 0x1254 <__fp_pscA>
    1098:	40 f0       	brcs	.+16     	; 0x10aa <__divsf3+0x24>
    109a:	29 f4       	brne	.+10     	; 0x10a6 <__divsf3+0x20>
    109c:	5f 3f       	cpi	r21, 0xFF	; 255
    109e:	29 f0       	breq	.+10     	; 0x10aa <__divsf3+0x24>
    10a0:	0c 94 21 09 	jmp	0x1242	; 0x1242 <__fp_inf>
    10a4:	51 11       	cpse	r21, r1
    10a6:	0c 94 6c 09 	jmp	0x12d8	; 0x12d8 <__fp_szero>
    10aa:	0c 94 27 09 	jmp	0x124e	; 0x124e <__fp_nan>

000010ae <__divsf3x>:
    10ae:	0e 94 49 09 	call	0x1292	; 0x1292 <__fp_split3>
    10b2:	68 f3       	brcs	.-38     	; 0x108e <__divsf3+0x8>

000010b4 <__divsf3_pse>:
    10b4:	99 23       	and	r25, r25
    10b6:	b1 f3       	breq	.-20     	; 0x10a4 <__divsf3+0x1e>
    10b8:	55 23       	and	r21, r21
    10ba:	91 f3       	breq	.-28     	; 0x10a0 <__divsf3+0x1a>
    10bc:	95 1b       	sub	r25, r21
    10be:	55 0b       	sbc	r21, r21
    10c0:	bb 27       	eor	r27, r27
    10c2:	aa 27       	eor	r26, r26
    10c4:	62 17       	cp	r22, r18
    10c6:	73 07       	cpc	r23, r19
    10c8:	84 07       	cpc	r24, r20
    10ca:	38 f0       	brcs	.+14     	; 0x10da <__divsf3_pse+0x26>
    10cc:	9f 5f       	subi	r25, 0xFF	; 255
    10ce:	5f 4f       	sbci	r21, 0xFF	; 255
    10d0:	22 0f       	add	r18, r18
    10d2:	33 1f       	adc	r19, r19
    10d4:	44 1f       	adc	r20, r20
    10d6:	aa 1f       	adc	r26, r26
    10d8:	a9 f3       	breq	.-22     	; 0x10c4 <__divsf3_pse+0x10>
    10da:	35 d0       	rcall	.+106    	; 0x1146 <__divsf3_pse+0x92>
    10dc:	0e 2e       	mov	r0, r30
    10de:	3a f0       	brmi	.+14     	; 0x10ee <__divsf3_pse+0x3a>
    10e0:	e0 e8       	ldi	r30, 0x80	; 128
    10e2:	32 d0       	rcall	.+100    	; 0x1148 <__divsf3_pse+0x94>
    10e4:	91 50       	subi	r25, 0x01	; 1
    10e6:	50 40       	sbci	r21, 0x00	; 0
    10e8:	e6 95       	lsr	r30
    10ea:	00 1c       	adc	r0, r0
    10ec:	ca f7       	brpl	.-14     	; 0x10e0 <__divsf3_pse+0x2c>
    10ee:	2b d0       	rcall	.+86     	; 0x1146 <__divsf3_pse+0x92>
    10f0:	fe 2f       	mov	r31, r30
    10f2:	29 d0       	rcall	.+82     	; 0x1146 <__divsf3_pse+0x92>
    10f4:	66 0f       	add	r22, r22
    10f6:	77 1f       	adc	r23, r23
    10f8:	88 1f       	adc	r24, r24
    10fa:	bb 1f       	adc	r27, r27
    10fc:	26 17       	cp	r18, r22
    10fe:	37 07       	cpc	r19, r23
    1100:	48 07       	cpc	r20, r24
    1102:	ab 07       	cpc	r26, r27
    1104:	b0 e8       	ldi	r27, 0x80	; 128
    1106:	09 f0       	breq	.+2      	; 0x110a <__divsf3_pse+0x56>
    1108:	bb 0b       	sbc	r27, r27
    110a:	80 2d       	mov	r24, r0
    110c:	bf 01       	movw	r22, r30
    110e:	ff 27       	eor	r31, r31
    1110:	93 58       	subi	r25, 0x83	; 131
    1112:	5f 4f       	sbci	r21, 0xFF	; 255
    1114:	3a f0       	brmi	.+14     	; 0x1124 <__divsf3_pse+0x70>
    1116:	9e 3f       	cpi	r25, 0xFE	; 254
    1118:	51 05       	cpc	r21, r1
    111a:	78 f0       	brcs	.+30     	; 0x113a <__divsf3_pse+0x86>
    111c:	0c 94 21 09 	jmp	0x1242	; 0x1242 <__fp_inf>
    1120:	0c 94 6c 09 	jmp	0x12d8	; 0x12d8 <__fp_szero>
    1124:	5f 3f       	cpi	r21, 0xFF	; 255
    1126:	e4 f3       	brlt	.-8      	; 0x1120 <__divsf3_pse+0x6c>
    1128:	98 3e       	cpi	r25, 0xE8	; 232
    112a:	d4 f3       	brlt	.-12     	; 0x1120 <__divsf3_pse+0x6c>
    112c:	86 95       	lsr	r24
    112e:	77 95       	ror	r23
    1130:	67 95       	ror	r22
    1132:	b7 95       	ror	r27
    1134:	f7 95       	ror	r31
    1136:	9f 5f       	subi	r25, 0xFF	; 255
    1138:	c9 f7       	brne	.-14     	; 0x112c <__divsf3_pse+0x78>
    113a:	88 0f       	add	r24, r24
    113c:	91 1d       	adc	r25, r1
    113e:	96 95       	lsr	r25
    1140:	87 95       	ror	r24
    1142:	97 f9       	bld	r25, 7
    1144:	08 95       	ret
    1146:	e1 e0       	ldi	r30, 0x01	; 1
    1148:	66 0f       	add	r22, r22
    114a:	77 1f       	adc	r23, r23
    114c:	88 1f       	adc	r24, r24
    114e:	bb 1f       	adc	r27, r27
    1150:	62 17       	cp	r22, r18
    1152:	73 07       	cpc	r23, r19
    1154:	84 07       	cpc	r24, r20
    1156:	ba 07       	cpc	r27, r26
    1158:	20 f0       	brcs	.+8      	; 0x1162 <__divsf3_pse+0xae>
    115a:	62 1b       	sub	r22, r18
    115c:	73 0b       	sbc	r23, r19
    115e:	84 0b       	sbc	r24, r20
    1160:	ba 0b       	sbc	r27, r26
    1162:	ee 1f       	adc	r30, r30
    1164:	88 f7       	brcc	.-30     	; 0x1148 <__divsf3_pse+0x94>
    1166:	e0 95       	com	r30
    1168:	08 95       	ret

0000116a <__fixunssfsi>:
    116a:	0e 94 51 09 	call	0x12a2	; 0x12a2 <__fp_splitA>
    116e:	88 f0       	brcs	.+34     	; 0x1192 <__fixunssfsi+0x28>
    1170:	9f 57       	subi	r25, 0x7F	; 127
    1172:	98 f0       	brcs	.+38     	; 0x119a <__fixunssfsi+0x30>
    1174:	b9 2f       	mov	r27, r25
    1176:	99 27       	eor	r25, r25
    1178:	b7 51       	subi	r27, 0x17	; 23
    117a:	b0 f0       	brcs	.+44     	; 0x11a8 <__fixunssfsi+0x3e>
    117c:	e1 f0       	breq	.+56     	; 0x11b6 <__fixunssfsi+0x4c>
    117e:	66 0f       	add	r22, r22
    1180:	77 1f       	adc	r23, r23
    1182:	88 1f       	adc	r24, r24
    1184:	99 1f       	adc	r25, r25
    1186:	1a f0       	brmi	.+6      	; 0x118e <__fixunssfsi+0x24>
    1188:	ba 95       	dec	r27
    118a:	c9 f7       	brne	.-14     	; 0x117e <__fixunssfsi+0x14>
    118c:	14 c0       	rjmp	.+40     	; 0x11b6 <__fixunssfsi+0x4c>
    118e:	b1 30       	cpi	r27, 0x01	; 1
    1190:	91 f0       	breq	.+36     	; 0x11b6 <__fixunssfsi+0x4c>
    1192:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <__fp_zero>
    1196:	b1 e0       	ldi	r27, 0x01	; 1
    1198:	08 95       	ret
    119a:	0c 94 6b 09 	jmp	0x12d6	; 0x12d6 <__fp_zero>
    119e:	67 2f       	mov	r22, r23
    11a0:	78 2f       	mov	r23, r24
    11a2:	88 27       	eor	r24, r24
    11a4:	b8 5f       	subi	r27, 0xF8	; 248
    11a6:	39 f0       	breq	.+14     	; 0x11b6 <__fixunssfsi+0x4c>
    11a8:	b9 3f       	cpi	r27, 0xF9	; 249
    11aa:	cc f3       	brlt	.-14     	; 0x119e <__fixunssfsi+0x34>
    11ac:	86 95       	lsr	r24
    11ae:	77 95       	ror	r23
    11b0:	67 95       	ror	r22
    11b2:	b3 95       	inc	r27
    11b4:	d9 f7       	brne	.-10     	; 0x11ac <__fixunssfsi+0x42>
    11b6:	3e f4       	brtc	.+14     	; 0x11c6 <__fixunssfsi+0x5c>
    11b8:	90 95       	com	r25
    11ba:	80 95       	com	r24
    11bc:	70 95       	com	r23
    11be:	61 95       	neg	r22
    11c0:	7f 4f       	sbci	r23, 0xFF	; 255
    11c2:	8f 4f       	sbci	r24, 0xFF	; 255
    11c4:	9f 4f       	sbci	r25, 0xFF	; 255
    11c6:	08 95       	ret

000011c8 <__floatunsisf>:
    11c8:	e8 94       	clt
    11ca:	09 c0       	rjmp	.+18     	; 0x11de <__floatsisf+0x12>

000011cc <__floatsisf>:
    11cc:	97 fb       	bst	r25, 7
    11ce:	3e f4       	brtc	.+14     	; 0x11de <__floatsisf+0x12>
    11d0:	90 95       	com	r25
    11d2:	80 95       	com	r24
    11d4:	70 95       	com	r23
    11d6:	61 95       	neg	r22
    11d8:	7f 4f       	sbci	r23, 0xFF	; 255
    11da:	8f 4f       	sbci	r24, 0xFF	; 255
    11dc:	9f 4f       	sbci	r25, 0xFF	; 255
    11de:	99 23       	and	r25, r25
    11e0:	a9 f0       	breq	.+42     	; 0x120c <__floatsisf+0x40>
    11e2:	f9 2f       	mov	r31, r25
    11e4:	96 e9       	ldi	r25, 0x96	; 150
    11e6:	bb 27       	eor	r27, r27
    11e8:	93 95       	inc	r25
    11ea:	f6 95       	lsr	r31
    11ec:	87 95       	ror	r24
    11ee:	77 95       	ror	r23
    11f0:	67 95       	ror	r22
    11f2:	b7 95       	ror	r27
    11f4:	f1 11       	cpse	r31, r1
    11f6:	f8 cf       	rjmp	.-16     	; 0x11e8 <__floatsisf+0x1c>
    11f8:	fa f4       	brpl	.+62     	; 0x1238 <__floatsisf+0x6c>
    11fa:	bb 0f       	add	r27, r27
    11fc:	11 f4       	brne	.+4      	; 0x1202 <__floatsisf+0x36>
    11fe:	60 ff       	sbrs	r22, 0
    1200:	1b c0       	rjmp	.+54     	; 0x1238 <__floatsisf+0x6c>
    1202:	6f 5f       	subi	r22, 0xFF	; 255
    1204:	7f 4f       	sbci	r23, 0xFF	; 255
    1206:	8f 4f       	sbci	r24, 0xFF	; 255
    1208:	9f 4f       	sbci	r25, 0xFF	; 255
    120a:	16 c0       	rjmp	.+44     	; 0x1238 <__floatsisf+0x6c>
    120c:	88 23       	and	r24, r24
    120e:	11 f0       	breq	.+4      	; 0x1214 <__floatsisf+0x48>
    1210:	96 e9       	ldi	r25, 0x96	; 150
    1212:	11 c0       	rjmp	.+34     	; 0x1236 <__floatsisf+0x6a>
    1214:	77 23       	and	r23, r23
    1216:	21 f0       	breq	.+8      	; 0x1220 <__floatsisf+0x54>
    1218:	9e e8       	ldi	r25, 0x8E	; 142
    121a:	87 2f       	mov	r24, r23
    121c:	76 2f       	mov	r23, r22
    121e:	05 c0       	rjmp	.+10     	; 0x122a <__floatsisf+0x5e>
    1220:	66 23       	and	r22, r22
    1222:	71 f0       	breq	.+28     	; 0x1240 <__floatsisf+0x74>
    1224:	96 e8       	ldi	r25, 0x86	; 134
    1226:	86 2f       	mov	r24, r22
    1228:	70 e0       	ldi	r23, 0x00	; 0
    122a:	60 e0       	ldi	r22, 0x00	; 0
    122c:	2a f0       	brmi	.+10     	; 0x1238 <__floatsisf+0x6c>
    122e:	9a 95       	dec	r25
    1230:	66 0f       	add	r22, r22
    1232:	77 1f       	adc	r23, r23
    1234:	88 1f       	adc	r24, r24
    1236:	da f7       	brpl	.-10     	; 0x122e <__floatsisf+0x62>
    1238:	88 0f       	add	r24, r24
    123a:	96 95       	lsr	r25
    123c:	87 95       	ror	r24
    123e:	97 f9       	bld	r25, 7
    1240:	08 95       	ret

00001242 <__fp_inf>:
    1242:	97 f9       	bld	r25, 7
    1244:	9f 67       	ori	r25, 0x7F	; 127
    1246:	80 e8       	ldi	r24, 0x80	; 128
    1248:	70 e0       	ldi	r23, 0x00	; 0
    124a:	60 e0       	ldi	r22, 0x00	; 0
    124c:	08 95       	ret

0000124e <__fp_nan>:
    124e:	9f ef       	ldi	r25, 0xFF	; 255
    1250:	80 ec       	ldi	r24, 0xC0	; 192
    1252:	08 95       	ret

00001254 <__fp_pscA>:
    1254:	00 24       	eor	r0, r0
    1256:	0a 94       	dec	r0
    1258:	16 16       	cp	r1, r22
    125a:	17 06       	cpc	r1, r23
    125c:	18 06       	cpc	r1, r24
    125e:	09 06       	cpc	r0, r25
    1260:	08 95       	ret

00001262 <__fp_pscB>:
    1262:	00 24       	eor	r0, r0
    1264:	0a 94       	dec	r0
    1266:	12 16       	cp	r1, r18
    1268:	13 06       	cpc	r1, r19
    126a:	14 06       	cpc	r1, r20
    126c:	05 06       	cpc	r0, r21
    126e:	08 95       	ret

00001270 <__fp_round>:
    1270:	09 2e       	mov	r0, r25
    1272:	03 94       	inc	r0
    1274:	00 0c       	add	r0, r0
    1276:	11 f4       	brne	.+4      	; 0x127c <__fp_round+0xc>
    1278:	88 23       	and	r24, r24
    127a:	52 f0       	brmi	.+20     	; 0x1290 <__fp_round+0x20>
    127c:	bb 0f       	add	r27, r27
    127e:	40 f4       	brcc	.+16     	; 0x1290 <__fp_round+0x20>
    1280:	bf 2b       	or	r27, r31
    1282:	11 f4       	brne	.+4      	; 0x1288 <__fp_round+0x18>
    1284:	60 ff       	sbrs	r22, 0
    1286:	04 c0       	rjmp	.+8      	; 0x1290 <__fp_round+0x20>
    1288:	6f 5f       	subi	r22, 0xFF	; 255
    128a:	7f 4f       	sbci	r23, 0xFF	; 255
    128c:	8f 4f       	sbci	r24, 0xFF	; 255
    128e:	9f 4f       	sbci	r25, 0xFF	; 255
    1290:	08 95       	ret

00001292 <__fp_split3>:
    1292:	57 fd       	sbrc	r21, 7
    1294:	90 58       	subi	r25, 0x80	; 128
    1296:	44 0f       	add	r20, r20
    1298:	55 1f       	adc	r21, r21
    129a:	59 f0       	breq	.+22     	; 0x12b2 <__fp_splitA+0x10>
    129c:	5f 3f       	cpi	r21, 0xFF	; 255
    129e:	71 f0       	breq	.+28     	; 0x12bc <__fp_splitA+0x1a>
    12a0:	47 95       	ror	r20

000012a2 <__fp_splitA>:
    12a2:	88 0f       	add	r24, r24
    12a4:	97 fb       	bst	r25, 7
    12a6:	99 1f       	adc	r25, r25
    12a8:	61 f0       	breq	.+24     	; 0x12c2 <__fp_splitA+0x20>
    12aa:	9f 3f       	cpi	r25, 0xFF	; 255
    12ac:	79 f0       	breq	.+30     	; 0x12cc <__fp_splitA+0x2a>
    12ae:	87 95       	ror	r24
    12b0:	08 95       	ret
    12b2:	12 16       	cp	r1, r18
    12b4:	13 06       	cpc	r1, r19
    12b6:	14 06       	cpc	r1, r20
    12b8:	55 1f       	adc	r21, r21
    12ba:	f2 cf       	rjmp	.-28     	; 0x12a0 <__fp_split3+0xe>
    12bc:	46 95       	lsr	r20
    12be:	f1 df       	rcall	.-30     	; 0x12a2 <__fp_splitA>
    12c0:	08 c0       	rjmp	.+16     	; 0x12d2 <__fp_splitA+0x30>
    12c2:	16 16       	cp	r1, r22
    12c4:	17 06       	cpc	r1, r23
    12c6:	18 06       	cpc	r1, r24
    12c8:	99 1f       	adc	r25, r25
    12ca:	f1 cf       	rjmp	.-30     	; 0x12ae <__fp_splitA+0xc>
    12cc:	86 95       	lsr	r24
    12ce:	71 05       	cpc	r23, r1
    12d0:	61 05       	cpc	r22, r1
    12d2:	08 94       	sec
    12d4:	08 95       	ret

000012d6 <__fp_zero>:
    12d6:	e8 94       	clt

000012d8 <__fp_szero>:
    12d8:	bb 27       	eor	r27, r27
    12da:	66 27       	eor	r22, r22
    12dc:	77 27       	eor	r23, r23
    12de:	cb 01       	movw	r24, r22
    12e0:	97 f9       	bld	r25, 7
    12e2:	08 95       	ret

000012e4 <__mulsf3>:
    12e4:	0e 94 85 09 	call	0x130a	; 0x130a <__mulsf3x>
    12e8:	0c 94 38 09 	jmp	0x1270	; 0x1270 <__fp_round>
    12ec:	0e 94 2a 09 	call	0x1254	; 0x1254 <__fp_pscA>
    12f0:	38 f0       	brcs	.+14     	; 0x1300 <__mulsf3+0x1c>
    12f2:	0e 94 31 09 	call	0x1262	; 0x1262 <__fp_pscB>
    12f6:	20 f0       	brcs	.+8      	; 0x1300 <__mulsf3+0x1c>
    12f8:	95 23       	and	r25, r21
    12fa:	11 f0       	breq	.+4      	; 0x1300 <__mulsf3+0x1c>
    12fc:	0c 94 21 09 	jmp	0x1242	; 0x1242 <__fp_inf>
    1300:	0c 94 27 09 	jmp	0x124e	; 0x124e <__fp_nan>
    1304:	11 24       	eor	r1, r1
    1306:	0c 94 6c 09 	jmp	0x12d8	; 0x12d8 <__fp_szero>

0000130a <__mulsf3x>:
    130a:	0e 94 49 09 	call	0x1292	; 0x1292 <__fp_split3>
    130e:	70 f3       	brcs	.-36     	; 0x12ec <__mulsf3+0x8>

00001310 <__mulsf3_pse>:
    1310:	95 9f       	mul	r25, r21
    1312:	c1 f3       	breq	.-16     	; 0x1304 <__mulsf3+0x20>
    1314:	95 0f       	add	r25, r21
    1316:	50 e0       	ldi	r21, 0x00	; 0
    1318:	55 1f       	adc	r21, r21
    131a:	62 9f       	mul	r22, r18
    131c:	f0 01       	movw	r30, r0
    131e:	72 9f       	mul	r23, r18
    1320:	bb 27       	eor	r27, r27
    1322:	f0 0d       	add	r31, r0
    1324:	b1 1d       	adc	r27, r1
    1326:	63 9f       	mul	r22, r19
    1328:	aa 27       	eor	r26, r26
    132a:	f0 0d       	add	r31, r0
    132c:	b1 1d       	adc	r27, r1
    132e:	aa 1f       	adc	r26, r26
    1330:	64 9f       	mul	r22, r20
    1332:	66 27       	eor	r22, r22
    1334:	b0 0d       	add	r27, r0
    1336:	a1 1d       	adc	r26, r1
    1338:	66 1f       	adc	r22, r22
    133a:	82 9f       	mul	r24, r18
    133c:	22 27       	eor	r18, r18
    133e:	b0 0d       	add	r27, r0
    1340:	a1 1d       	adc	r26, r1
    1342:	62 1f       	adc	r22, r18
    1344:	73 9f       	mul	r23, r19
    1346:	b0 0d       	add	r27, r0
    1348:	a1 1d       	adc	r26, r1
    134a:	62 1f       	adc	r22, r18
    134c:	83 9f       	mul	r24, r19
    134e:	a0 0d       	add	r26, r0
    1350:	61 1d       	adc	r22, r1
    1352:	22 1f       	adc	r18, r18
    1354:	74 9f       	mul	r23, r20
    1356:	33 27       	eor	r19, r19
    1358:	a0 0d       	add	r26, r0
    135a:	61 1d       	adc	r22, r1
    135c:	23 1f       	adc	r18, r19
    135e:	84 9f       	mul	r24, r20
    1360:	60 0d       	add	r22, r0
    1362:	21 1d       	adc	r18, r1
    1364:	82 2f       	mov	r24, r18
    1366:	76 2f       	mov	r23, r22
    1368:	6a 2f       	mov	r22, r26
    136a:	11 24       	eor	r1, r1
    136c:	9f 57       	subi	r25, 0x7F	; 127
    136e:	50 40       	sbci	r21, 0x00	; 0
    1370:	9a f0       	brmi	.+38     	; 0x1398 <__mulsf3_pse+0x88>
    1372:	f1 f0       	breq	.+60     	; 0x13b0 <__mulsf3_pse+0xa0>
    1374:	88 23       	and	r24, r24
    1376:	4a f0       	brmi	.+18     	; 0x138a <__mulsf3_pse+0x7a>
    1378:	ee 0f       	add	r30, r30
    137a:	ff 1f       	adc	r31, r31
    137c:	bb 1f       	adc	r27, r27
    137e:	66 1f       	adc	r22, r22
    1380:	77 1f       	adc	r23, r23
    1382:	88 1f       	adc	r24, r24
    1384:	91 50       	subi	r25, 0x01	; 1
    1386:	50 40       	sbci	r21, 0x00	; 0
    1388:	a9 f7       	brne	.-22     	; 0x1374 <__mulsf3_pse+0x64>
    138a:	9e 3f       	cpi	r25, 0xFE	; 254
    138c:	51 05       	cpc	r21, r1
    138e:	80 f0       	brcs	.+32     	; 0x13b0 <__mulsf3_pse+0xa0>
    1390:	0c 94 21 09 	jmp	0x1242	; 0x1242 <__fp_inf>
    1394:	0c 94 6c 09 	jmp	0x12d8	; 0x12d8 <__fp_szero>
    1398:	5f 3f       	cpi	r21, 0xFF	; 255
    139a:	e4 f3       	brlt	.-8      	; 0x1394 <__mulsf3_pse+0x84>
    139c:	98 3e       	cpi	r25, 0xE8	; 232
    139e:	d4 f3       	brlt	.-12     	; 0x1394 <__mulsf3_pse+0x84>
    13a0:	86 95       	lsr	r24
    13a2:	77 95       	ror	r23
    13a4:	67 95       	ror	r22
    13a6:	b7 95       	ror	r27
    13a8:	f7 95       	ror	r31
    13aa:	e7 95       	ror	r30
    13ac:	9f 5f       	subi	r25, 0xFF	; 255
    13ae:	c1 f7       	brne	.-16     	; 0x13a0 <__mulsf3_pse+0x90>
    13b0:	fe 2b       	or	r31, r30
    13b2:	88 0f       	add	r24, r24
    13b4:	91 1d       	adc	r25, r1
    13b6:	96 95       	lsr	r25
    13b8:	87 95       	ror	r24
    13ba:	97 f9       	bld	r25, 7
    13bc:	08 95       	ret

000013be <__tablejump2__>:
    13be:	ee 0f       	add	r30, r30
    13c0:	ff 1f       	adc	r31, r31
    13c2:	05 90       	lpm	r0, Z+
    13c4:	f4 91       	lpm	r31, Z
    13c6:	e0 2d       	mov	r30, r0
    13c8:	09 94       	ijmp

000013ca <dtostrf>:
    13ca:	ef 92       	push	r14
    13cc:	0f 93       	push	r16
    13ce:	1f 93       	push	r17
    13d0:	cf 93       	push	r28
    13d2:	df 93       	push	r29
    13d4:	e8 01       	movw	r28, r16
    13d6:	47 fd       	sbrc	r20, 7
    13d8:	02 c0       	rjmp	.+4      	; 0x13de <dtostrf+0x14>
    13da:	34 e0       	ldi	r19, 0x04	; 4
    13dc:	01 c0       	rjmp	.+2      	; 0x13e0 <dtostrf+0x16>
    13de:	34 e1       	ldi	r19, 0x14	; 20
    13e0:	04 2e       	mov	r0, r20
    13e2:	00 0c       	add	r0, r0
    13e4:	55 0b       	sbc	r21, r21
    13e6:	57 ff       	sbrs	r21, 7
    13e8:	03 c0       	rjmp	.+6      	; 0x13f0 <dtostrf+0x26>
    13ea:	51 95       	neg	r21
    13ec:	41 95       	neg	r20
    13ee:	51 09       	sbc	r21, r1
    13f0:	e3 2e       	mov	r14, r19
    13f2:	02 2f       	mov	r16, r18
    13f4:	24 2f       	mov	r18, r20
    13f6:	ae 01       	movw	r20, r28
    13f8:	0e 94 16 0c 	call	0x182c	; 0x182c <dtoa_prf>
    13fc:	ce 01       	movw	r24, r28
    13fe:	df 91       	pop	r29
    1400:	cf 91       	pop	r28
    1402:	1f 91       	pop	r17
    1404:	0f 91       	pop	r16
    1406:	ef 90       	pop	r14
    1408:	08 95       	ret

0000140a <snprintf>:
    140a:	ae e0       	ldi	r26, 0x0E	; 14
    140c:	b0 e0       	ldi	r27, 0x00	; 0
    140e:	eb e0       	ldi	r30, 0x0B	; 11
    1410:	fa e0       	ldi	r31, 0x0A	; 10
    1412:	0c 94 06 0f 	jmp	0x1e0c	; 0x1e0c <__prologue_saves__+0x1c>
    1416:	0d 89       	ldd	r16, Y+21	; 0x15
    1418:	1e 89       	ldd	r17, Y+22	; 0x16
    141a:	8f 89       	ldd	r24, Y+23	; 0x17
    141c:	98 8d       	ldd	r25, Y+24	; 0x18
    141e:	26 e0       	ldi	r18, 0x06	; 6
    1420:	2c 83       	std	Y+4, r18	; 0x04
    1422:	1a 83       	std	Y+2, r17	; 0x02
    1424:	09 83       	std	Y+1, r16	; 0x01
    1426:	97 ff       	sbrs	r25, 7
    1428:	02 c0       	rjmp	.+4      	; 0x142e <snprintf+0x24>
    142a:	80 e0       	ldi	r24, 0x00	; 0
    142c:	90 e8       	ldi	r25, 0x80	; 128
    142e:	01 97       	sbiw	r24, 0x01	; 1
    1430:	9e 83       	std	Y+6, r25	; 0x06
    1432:	8d 83       	std	Y+5, r24	; 0x05
    1434:	ae 01       	movw	r20, r28
    1436:	45 5e       	subi	r20, 0xE5	; 229
    1438:	5f 4f       	sbci	r21, 0xFF	; 255
    143a:	69 8d       	ldd	r22, Y+25	; 0x19
    143c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    143e:	ce 01       	movw	r24, r28
    1440:	01 96       	adiw	r24, 0x01	; 1
    1442:	0e 94 35 0a 	call	0x146a	; 0x146a <vfprintf>
    1446:	4d 81       	ldd	r20, Y+5	; 0x05
    1448:	5e 81       	ldd	r21, Y+6	; 0x06
    144a:	57 fd       	sbrc	r21, 7
    144c:	0a c0       	rjmp	.+20     	; 0x1462 <snprintf+0x58>
    144e:	2f 81       	ldd	r18, Y+7	; 0x07
    1450:	38 85       	ldd	r19, Y+8	; 0x08
    1452:	42 17       	cp	r20, r18
    1454:	53 07       	cpc	r21, r19
    1456:	0c f4       	brge	.+2      	; 0x145a <snprintf+0x50>
    1458:	9a 01       	movw	r18, r20
    145a:	f8 01       	movw	r30, r16
    145c:	e2 0f       	add	r30, r18
    145e:	f3 1f       	adc	r31, r19
    1460:	10 82       	st	Z, r1
    1462:	2e 96       	adiw	r28, 0x0e	; 14
    1464:	e4 e0       	ldi	r30, 0x04	; 4
    1466:	0c 94 22 0f 	jmp	0x1e44	; 0x1e44 <__epilogue_restores__+0x1c>

0000146a <vfprintf>:
    146a:	ab e0       	ldi	r26, 0x0B	; 11
    146c:	b0 e0       	ldi	r27, 0x00	; 0
    146e:	eb e3       	ldi	r30, 0x3B	; 59
    1470:	fa e0       	ldi	r31, 0x0A	; 10
    1472:	0c 94 f8 0e 	jmp	0x1df0	; 0x1df0 <__prologue_saves__>
    1476:	6c 01       	movw	r12, r24
    1478:	7b 01       	movw	r14, r22
    147a:	8a 01       	movw	r16, r20
    147c:	fc 01       	movw	r30, r24
    147e:	17 82       	std	Z+7, r1	; 0x07
    1480:	16 82       	std	Z+6, r1	; 0x06
    1482:	83 81       	ldd	r24, Z+3	; 0x03
    1484:	81 ff       	sbrs	r24, 1
    1486:	cc c1       	rjmp	.+920    	; 0x1820 <vfprintf+0x3b6>
    1488:	ce 01       	movw	r24, r28
    148a:	01 96       	adiw	r24, 0x01	; 1
    148c:	3c 01       	movw	r6, r24
    148e:	f6 01       	movw	r30, r12
    1490:	93 81       	ldd	r25, Z+3	; 0x03
    1492:	f7 01       	movw	r30, r14
    1494:	93 fd       	sbrc	r25, 3
    1496:	85 91       	lpm	r24, Z+
    1498:	93 ff       	sbrs	r25, 3
    149a:	81 91       	ld	r24, Z+
    149c:	7f 01       	movw	r14, r30
    149e:	88 23       	and	r24, r24
    14a0:	09 f4       	brne	.+2      	; 0x14a4 <vfprintf+0x3a>
    14a2:	ba c1       	rjmp	.+884    	; 0x1818 <vfprintf+0x3ae>
    14a4:	85 32       	cpi	r24, 0x25	; 37
    14a6:	39 f4       	brne	.+14     	; 0x14b6 <vfprintf+0x4c>
    14a8:	93 fd       	sbrc	r25, 3
    14aa:	85 91       	lpm	r24, Z+
    14ac:	93 ff       	sbrs	r25, 3
    14ae:	81 91       	ld	r24, Z+
    14b0:	7f 01       	movw	r14, r30
    14b2:	85 32       	cpi	r24, 0x25	; 37
    14b4:	29 f4       	brne	.+10     	; 0x14c0 <vfprintf+0x56>
    14b6:	b6 01       	movw	r22, r12
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <fputc>
    14be:	e7 cf       	rjmp	.-50     	; 0x148e <vfprintf+0x24>
    14c0:	91 2c       	mov	r9, r1
    14c2:	21 2c       	mov	r2, r1
    14c4:	31 2c       	mov	r3, r1
    14c6:	ff e1       	ldi	r31, 0x1F	; 31
    14c8:	f3 15       	cp	r31, r3
    14ca:	d8 f0       	brcs	.+54     	; 0x1502 <vfprintf+0x98>
    14cc:	8b 32       	cpi	r24, 0x2B	; 43
    14ce:	79 f0       	breq	.+30     	; 0x14ee <vfprintf+0x84>
    14d0:	38 f4       	brcc	.+14     	; 0x14e0 <vfprintf+0x76>
    14d2:	80 32       	cpi	r24, 0x20	; 32
    14d4:	79 f0       	breq	.+30     	; 0x14f4 <vfprintf+0x8a>
    14d6:	83 32       	cpi	r24, 0x23	; 35
    14d8:	a1 f4       	brne	.+40     	; 0x1502 <vfprintf+0x98>
    14da:	23 2d       	mov	r18, r3
    14dc:	20 61       	ori	r18, 0x10	; 16
    14de:	1d c0       	rjmp	.+58     	; 0x151a <vfprintf+0xb0>
    14e0:	8d 32       	cpi	r24, 0x2D	; 45
    14e2:	61 f0       	breq	.+24     	; 0x14fc <vfprintf+0x92>
    14e4:	80 33       	cpi	r24, 0x30	; 48
    14e6:	69 f4       	brne	.+26     	; 0x1502 <vfprintf+0x98>
    14e8:	23 2d       	mov	r18, r3
    14ea:	21 60       	ori	r18, 0x01	; 1
    14ec:	16 c0       	rjmp	.+44     	; 0x151a <vfprintf+0xb0>
    14ee:	83 2d       	mov	r24, r3
    14f0:	82 60       	ori	r24, 0x02	; 2
    14f2:	38 2e       	mov	r3, r24
    14f4:	e3 2d       	mov	r30, r3
    14f6:	e4 60       	ori	r30, 0x04	; 4
    14f8:	3e 2e       	mov	r3, r30
    14fa:	2a c0       	rjmp	.+84     	; 0x1550 <vfprintf+0xe6>
    14fc:	f3 2d       	mov	r31, r3
    14fe:	f8 60       	ori	r31, 0x08	; 8
    1500:	1d c0       	rjmp	.+58     	; 0x153c <vfprintf+0xd2>
    1502:	37 fc       	sbrc	r3, 7
    1504:	2d c0       	rjmp	.+90     	; 0x1560 <vfprintf+0xf6>
    1506:	20 ed       	ldi	r18, 0xD0	; 208
    1508:	28 0f       	add	r18, r24
    150a:	2a 30       	cpi	r18, 0x0A	; 10
    150c:	40 f0       	brcs	.+16     	; 0x151e <vfprintf+0xb4>
    150e:	8e 32       	cpi	r24, 0x2E	; 46
    1510:	b9 f4       	brne	.+46     	; 0x1540 <vfprintf+0xd6>
    1512:	36 fc       	sbrc	r3, 6
    1514:	81 c1       	rjmp	.+770    	; 0x1818 <vfprintf+0x3ae>
    1516:	23 2d       	mov	r18, r3
    1518:	20 64       	ori	r18, 0x40	; 64
    151a:	32 2e       	mov	r3, r18
    151c:	19 c0       	rjmp	.+50     	; 0x1550 <vfprintf+0xe6>
    151e:	36 fe       	sbrs	r3, 6
    1520:	06 c0       	rjmp	.+12     	; 0x152e <vfprintf+0xc4>
    1522:	8a e0       	ldi	r24, 0x0A	; 10
    1524:	98 9e       	mul	r9, r24
    1526:	20 0d       	add	r18, r0
    1528:	11 24       	eor	r1, r1
    152a:	92 2e       	mov	r9, r18
    152c:	11 c0       	rjmp	.+34     	; 0x1550 <vfprintf+0xe6>
    152e:	ea e0       	ldi	r30, 0x0A	; 10
    1530:	2e 9e       	mul	r2, r30
    1532:	20 0d       	add	r18, r0
    1534:	11 24       	eor	r1, r1
    1536:	22 2e       	mov	r2, r18
    1538:	f3 2d       	mov	r31, r3
    153a:	f0 62       	ori	r31, 0x20	; 32
    153c:	3f 2e       	mov	r3, r31
    153e:	08 c0       	rjmp	.+16     	; 0x1550 <vfprintf+0xe6>
    1540:	8c 36       	cpi	r24, 0x6C	; 108
    1542:	21 f4       	brne	.+8      	; 0x154c <vfprintf+0xe2>
    1544:	83 2d       	mov	r24, r3
    1546:	80 68       	ori	r24, 0x80	; 128
    1548:	38 2e       	mov	r3, r24
    154a:	02 c0       	rjmp	.+4      	; 0x1550 <vfprintf+0xe6>
    154c:	88 36       	cpi	r24, 0x68	; 104
    154e:	41 f4       	brne	.+16     	; 0x1560 <vfprintf+0xf6>
    1550:	f7 01       	movw	r30, r14
    1552:	93 fd       	sbrc	r25, 3
    1554:	85 91       	lpm	r24, Z+
    1556:	93 ff       	sbrs	r25, 3
    1558:	81 91       	ld	r24, Z+
    155a:	7f 01       	movw	r14, r30
    155c:	81 11       	cpse	r24, r1
    155e:	b3 cf       	rjmp	.-154    	; 0x14c6 <vfprintf+0x5c>
    1560:	98 2f       	mov	r25, r24
    1562:	9f 7d       	andi	r25, 0xDF	; 223
    1564:	95 54       	subi	r25, 0x45	; 69
    1566:	93 30       	cpi	r25, 0x03	; 3
    1568:	28 f4       	brcc	.+10     	; 0x1574 <vfprintf+0x10a>
    156a:	0c 5f       	subi	r16, 0xFC	; 252
    156c:	1f 4f       	sbci	r17, 0xFF	; 255
    156e:	9f e3       	ldi	r25, 0x3F	; 63
    1570:	99 83       	std	Y+1, r25	; 0x01
    1572:	0d c0       	rjmp	.+26     	; 0x158e <vfprintf+0x124>
    1574:	83 36       	cpi	r24, 0x63	; 99
    1576:	31 f0       	breq	.+12     	; 0x1584 <vfprintf+0x11a>
    1578:	83 37       	cpi	r24, 0x73	; 115
    157a:	71 f0       	breq	.+28     	; 0x1598 <vfprintf+0x12e>
    157c:	83 35       	cpi	r24, 0x53	; 83
    157e:	09 f0       	breq	.+2      	; 0x1582 <vfprintf+0x118>
    1580:	59 c0       	rjmp	.+178    	; 0x1634 <vfprintf+0x1ca>
    1582:	21 c0       	rjmp	.+66     	; 0x15c6 <vfprintf+0x15c>
    1584:	f8 01       	movw	r30, r16
    1586:	80 81       	ld	r24, Z
    1588:	89 83       	std	Y+1, r24	; 0x01
    158a:	0e 5f       	subi	r16, 0xFE	; 254
    158c:	1f 4f       	sbci	r17, 0xFF	; 255
    158e:	88 24       	eor	r8, r8
    1590:	83 94       	inc	r8
    1592:	91 2c       	mov	r9, r1
    1594:	53 01       	movw	r10, r6
    1596:	13 c0       	rjmp	.+38     	; 0x15be <vfprintf+0x154>
    1598:	28 01       	movw	r4, r16
    159a:	f2 e0       	ldi	r31, 0x02	; 2
    159c:	4f 0e       	add	r4, r31
    159e:	51 1c       	adc	r5, r1
    15a0:	f8 01       	movw	r30, r16
    15a2:	a0 80       	ld	r10, Z
    15a4:	b1 80       	ldd	r11, Z+1	; 0x01
    15a6:	36 fe       	sbrs	r3, 6
    15a8:	03 c0       	rjmp	.+6      	; 0x15b0 <vfprintf+0x146>
    15aa:	69 2d       	mov	r22, r9
    15ac:	70 e0       	ldi	r23, 0x00	; 0
    15ae:	02 c0       	rjmp	.+4      	; 0x15b4 <vfprintf+0x14a>
    15b0:	6f ef       	ldi	r22, 0xFF	; 255
    15b2:	7f ef       	ldi	r23, 0xFF	; 255
    15b4:	c5 01       	movw	r24, r10
    15b6:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <strnlen>
    15ba:	4c 01       	movw	r8, r24
    15bc:	82 01       	movw	r16, r4
    15be:	f3 2d       	mov	r31, r3
    15c0:	ff 77       	andi	r31, 0x7F	; 127
    15c2:	3f 2e       	mov	r3, r31
    15c4:	16 c0       	rjmp	.+44     	; 0x15f2 <vfprintf+0x188>
    15c6:	28 01       	movw	r4, r16
    15c8:	22 e0       	ldi	r18, 0x02	; 2
    15ca:	42 0e       	add	r4, r18
    15cc:	51 1c       	adc	r5, r1
    15ce:	f8 01       	movw	r30, r16
    15d0:	a0 80       	ld	r10, Z
    15d2:	b1 80       	ldd	r11, Z+1	; 0x01
    15d4:	36 fe       	sbrs	r3, 6
    15d6:	03 c0       	rjmp	.+6      	; 0x15de <vfprintf+0x174>
    15d8:	69 2d       	mov	r22, r9
    15da:	70 e0       	ldi	r23, 0x00	; 0
    15dc:	02 c0       	rjmp	.+4      	; 0x15e2 <vfprintf+0x178>
    15de:	6f ef       	ldi	r22, 0xFF	; 255
    15e0:	7f ef       	ldi	r23, 0xFF	; 255
    15e2:	c5 01       	movw	r24, r10
    15e4:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <strnlen_P>
    15e8:	4c 01       	movw	r8, r24
    15ea:	f3 2d       	mov	r31, r3
    15ec:	f0 68       	ori	r31, 0x80	; 128
    15ee:	3f 2e       	mov	r3, r31
    15f0:	82 01       	movw	r16, r4
    15f2:	33 fc       	sbrc	r3, 3
    15f4:	1b c0       	rjmp	.+54     	; 0x162c <vfprintf+0x1c2>
    15f6:	82 2d       	mov	r24, r2
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	88 16       	cp	r8, r24
    15fc:	99 06       	cpc	r9, r25
    15fe:	b0 f4       	brcc	.+44     	; 0x162c <vfprintf+0x1c2>
    1600:	b6 01       	movw	r22, r12
    1602:	80 e2       	ldi	r24, 0x20	; 32
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <fputc>
    160a:	2a 94       	dec	r2
    160c:	f4 cf       	rjmp	.-24     	; 0x15f6 <vfprintf+0x18c>
    160e:	f5 01       	movw	r30, r10
    1610:	37 fc       	sbrc	r3, 7
    1612:	85 91       	lpm	r24, Z+
    1614:	37 fe       	sbrs	r3, 7
    1616:	81 91       	ld	r24, Z+
    1618:	5f 01       	movw	r10, r30
    161a:	b6 01       	movw	r22, r12
    161c:	90 e0       	ldi	r25, 0x00	; 0
    161e:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <fputc>
    1622:	21 10       	cpse	r2, r1
    1624:	2a 94       	dec	r2
    1626:	21 e0       	ldi	r18, 0x01	; 1
    1628:	82 1a       	sub	r8, r18
    162a:	91 08       	sbc	r9, r1
    162c:	81 14       	cp	r8, r1
    162e:	91 04       	cpc	r9, r1
    1630:	71 f7       	brne	.-36     	; 0x160e <vfprintf+0x1a4>
    1632:	e8 c0       	rjmp	.+464    	; 0x1804 <vfprintf+0x39a>
    1634:	84 36       	cpi	r24, 0x64	; 100
    1636:	11 f0       	breq	.+4      	; 0x163c <vfprintf+0x1d2>
    1638:	89 36       	cpi	r24, 0x69	; 105
    163a:	41 f5       	brne	.+80     	; 0x168c <vfprintf+0x222>
    163c:	f8 01       	movw	r30, r16
    163e:	37 fe       	sbrs	r3, 7
    1640:	07 c0       	rjmp	.+14     	; 0x1650 <vfprintf+0x1e6>
    1642:	60 81       	ld	r22, Z
    1644:	71 81       	ldd	r23, Z+1	; 0x01
    1646:	82 81       	ldd	r24, Z+2	; 0x02
    1648:	93 81       	ldd	r25, Z+3	; 0x03
    164a:	0c 5f       	subi	r16, 0xFC	; 252
    164c:	1f 4f       	sbci	r17, 0xFF	; 255
    164e:	08 c0       	rjmp	.+16     	; 0x1660 <vfprintf+0x1f6>
    1650:	60 81       	ld	r22, Z
    1652:	71 81       	ldd	r23, Z+1	; 0x01
    1654:	07 2e       	mov	r0, r23
    1656:	00 0c       	add	r0, r0
    1658:	88 0b       	sbc	r24, r24
    165a:	99 0b       	sbc	r25, r25
    165c:	0e 5f       	subi	r16, 0xFE	; 254
    165e:	1f 4f       	sbci	r17, 0xFF	; 255
    1660:	f3 2d       	mov	r31, r3
    1662:	ff 76       	andi	r31, 0x6F	; 111
    1664:	3f 2e       	mov	r3, r31
    1666:	97 ff       	sbrs	r25, 7
    1668:	09 c0       	rjmp	.+18     	; 0x167c <vfprintf+0x212>
    166a:	90 95       	com	r25
    166c:	80 95       	com	r24
    166e:	70 95       	com	r23
    1670:	61 95       	neg	r22
    1672:	7f 4f       	sbci	r23, 0xFF	; 255
    1674:	8f 4f       	sbci	r24, 0xFF	; 255
    1676:	9f 4f       	sbci	r25, 0xFF	; 255
    1678:	f0 68       	ori	r31, 0x80	; 128
    167a:	3f 2e       	mov	r3, r31
    167c:	2a e0       	ldi	r18, 0x0A	; 10
    167e:	30 e0       	ldi	r19, 0x00	; 0
    1680:	a3 01       	movw	r20, r6
    1682:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <__ultoa_invert>
    1686:	88 2e       	mov	r8, r24
    1688:	86 18       	sub	r8, r6
    168a:	45 c0       	rjmp	.+138    	; 0x1716 <vfprintf+0x2ac>
    168c:	85 37       	cpi	r24, 0x75	; 117
    168e:	31 f4       	brne	.+12     	; 0x169c <vfprintf+0x232>
    1690:	23 2d       	mov	r18, r3
    1692:	2f 7e       	andi	r18, 0xEF	; 239
    1694:	b2 2e       	mov	r11, r18
    1696:	2a e0       	ldi	r18, 0x0A	; 10
    1698:	30 e0       	ldi	r19, 0x00	; 0
    169a:	25 c0       	rjmp	.+74     	; 0x16e6 <vfprintf+0x27c>
    169c:	93 2d       	mov	r25, r3
    169e:	99 7f       	andi	r25, 0xF9	; 249
    16a0:	b9 2e       	mov	r11, r25
    16a2:	8f 36       	cpi	r24, 0x6F	; 111
    16a4:	c1 f0       	breq	.+48     	; 0x16d6 <vfprintf+0x26c>
    16a6:	18 f4       	brcc	.+6      	; 0x16ae <vfprintf+0x244>
    16a8:	88 35       	cpi	r24, 0x58	; 88
    16aa:	79 f0       	breq	.+30     	; 0x16ca <vfprintf+0x260>
    16ac:	b5 c0       	rjmp	.+362    	; 0x1818 <vfprintf+0x3ae>
    16ae:	80 37       	cpi	r24, 0x70	; 112
    16b0:	19 f0       	breq	.+6      	; 0x16b8 <vfprintf+0x24e>
    16b2:	88 37       	cpi	r24, 0x78	; 120
    16b4:	21 f0       	breq	.+8      	; 0x16be <vfprintf+0x254>
    16b6:	b0 c0       	rjmp	.+352    	; 0x1818 <vfprintf+0x3ae>
    16b8:	e9 2f       	mov	r30, r25
    16ba:	e0 61       	ori	r30, 0x10	; 16
    16bc:	be 2e       	mov	r11, r30
    16be:	b4 fe       	sbrs	r11, 4
    16c0:	0d c0       	rjmp	.+26     	; 0x16dc <vfprintf+0x272>
    16c2:	fb 2d       	mov	r31, r11
    16c4:	f4 60       	ori	r31, 0x04	; 4
    16c6:	bf 2e       	mov	r11, r31
    16c8:	09 c0       	rjmp	.+18     	; 0x16dc <vfprintf+0x272>
    16ca:	34 fe       	sbrs	r3, 4
    16cc:	0a c0       	rjmp	.+20     	; 0x16e2 <vfprintf+0x278>
    16ce:	29 2f       	mov	r18, r25
    16d0:	26 60       	ori	r18, 0x06	; 6
    16d2:	b2 2e       	mov	r11, r18
    16d4:	06 c0       	rjmp	.+12     	; 0x16e2 <vfprintf+0x278>
    16d6:	28 e0       	ldi	r18, 0x08	; 8
    16d8:	30 e0       	ldi	r19, 0x00	; 0
    16da:	05 c0       	rjmp	.+10     	; 0x16e6 <vfprintf+0x27c>
    16dc:	20 e1       	ldi	r18, 0x10	; 16
    16de:	30 e0       	ldi	r19, 0x00	; 0
    16e0:	02 c0       	rjmp	.+4      	; 0x16e6 <vfprintf+0x27c>
    16e2:	20 e1       	ldi	r18, 0x10	; 16
    16e4:	32 e0       	ldi	r19, 0x02	; 2
    16e6:	f8 01       	movw	r30, r16
    16e8:	b7 fe       	sbrs	r11, 7
    16ea:	07 c0       	rjmp	.+14     	; 0x16fa <vfprintf+0x290>
    16ec:	60 81       	ld	r22, Z
    16ee:	71 81       	ldd	r23, Z+1	; 0x01
    16f0:	82 81       	ldd	r24, Z+2	; 0x02
    16f2:	93 81       	ldd	r25, Z+3	; 0x03
    16f4:	0c 5f       	subi	r16, 0xFC	; 252
    16f6:	1f 4f       	sbci	r17, 0xFF	; 255
    16f8:	06 c0       	rjmp	.+12     	; 0x1706 <vfprintf+0x29c>
    16fa:	60 81       	ld	r22, Z
    16fc:	71 81       	ldd	r23, Z+1	; 0x01
    16fe:	80 e0       	ldi	r24, 0x00	; 0
    1700:	90 e0       	ldi	r25, 0x00	; 0
    1702:	0e 5f       	subi	r16, 0xFE	; 254
    1704:	1f 4f       	sbci	r17, 0xFF	; 255
    1706:	a3 01       	movw	r20, r6
    1708:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <__ultoa_invert>
    170c:	88 2e       	mov	r8, r24
    170e:	86 18       	sub	r8, r6
    1710:	fb 2d       	mov	r31, r11
    1712:	ff 77       	andi	r31, 0x7F	; 127
    1714:	3f 2e       	mov	r3, r31
    1716:	36 fe       	sbrs	r3, 6
    1718:	0d c0       	rjmp	.+26     	; 0x1734 <vfprintf+0x2ca>
    171a:	23 2d       	mov	r18, r3
    171c:	2e 7f       	andi	r18, 0xFE	; 254
    171e:	a2 2e       	mov	r10, r18
    1720:	89 14       	cp	r8, r9
    1722:	58 f4       	brcc	.+22     	; 0x173a <vfprintf+0x2d0>
    1724:	34 fe       	sbrs	r3, 4
    1726:	0b c0       	rjmp	.+22     	; 0x173e <vfprintf+0x2d4>
    1728:	32 fc       	sbrc	r3, 2
    172a:	09 c0       	rjmp	.+18     	; 0x173e <vfprintf+0x2d4>
    172c:	83 2d       	mov	r24, r3
    172e:	8e 7e       	andi	r24, 0xEE	; 238
    1730:	a8 2e       	mov	r10, r24
    1732:	05 c0       	rjmp	.+10     	; 0x173e <vfprintf+0x2d4>
    1734:	b8 2c       	mov	r11, r8
    1736:	a3 2c       	mov	r10, r3
    1738:	03 c0       	rjmp	.+6      	; 0x1740 <vfprintf+0x2d6>
    173a:	b8 2c       	mov	r11, r8
    173c:	01 c0       	rjmp	.+2      	; 0x1740 <vfprintf+0x2d6>
    173e:	b9 2c       	mov	r11, r9
    1740:	a4 fe       	sbrs	r10, 4
    1742:	0f c0       	rjmp	.+30     	; 0x1762 <vfprintf+0x2f8>
    1744:	fe 01       	movw	r30, r28
    1746:	e8 0d       	add	r30, r8
    1748:	f1 1d       	adc	r31, r1
    174a:	80 81       	ld	r24, Z
    174c:	80 33       	cpi	r24, 0x30	; 48
    174e:	21 f4       	brne	.+8      	; 0x1758 <vfprintf+0x2ee>
    1750:	9a 2d       	mov	r25, r10
    1752:	99 7e       	andi	r25, 0xE9	; 233
    1754:	a9 2e       	mov	r10, r25
    1756:	09 c0       	rjmp	.+18     	; 0x176a <vfprintf+0x300>
    1758:	a2 fe       	sbrs	r10, 2
    175a:	06 c0       	rjmp	.+12     	; 0x1768 <vfprintf+0x2fe>
    175c:	b3 94       	inc	r11
    175e:	b3 94       	inc	r11
    1760:	04 c0       	rjmp	.+8      	; 0x176a <vfprintf+0x300>
    1762:	8a 2d       	mov	r24, r10
    1764:	86 78       	andi	r24, 0x86	; 134
    1766:	09 f0       	breq	.+2      	; 0x176a <vfprintf+0x300>
    1768:	b3 94       	inc	r11
    176a:	a3 fc       	sbrc	r10, 3
    176c:	11 c0       	rjmp	.+34     	; 0x1790 <vfprintf+0x326>
    176e:	a0 fe       	sbrs	r10, 0
    1770:	06 c0       	rjmp	.+12     	; 0x177e <vfprintf+0x314>
    1772:	b2 14       	cp	r11, r2
    1774:	88 f4       	brcc	.+34     	; 0x1798 <vfprintf+0x32e>
    1776:	28 0c       	add	r2, r8
    1778:	92 2c       	mov	r9, r2
    177a:	9b 18       	sub	r9, r11
    177c:	0e c0       	rjmp	.+28     	; 0x179a <vfprintf+0x330>
    177e:	b2 14       	cp	r11, r2
    1780:	60 f4       	brcc	.+24     	; 0x179a <vfprintf+0x330>
    1782:	b6 01       	movw	r22, r12
    1784:	80 e2       	ldi	r24, 0x20	; 32
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <fputc>
    178c:	b3 94       	inc	r11
    178e:	f7 cf       	rjmp	.-18     	; 0x177e <vfprintf+0x314>
    1790:	b2 14       	cp	r11, r2
    1792:	18 f4       	brcc	.+6      	; 0x179a <vfprintf+0x330>
    1794:	2b 18       	sub	r2, r11
    1796:	02 c0       	rjmp	.+4      	; 0x179c <vfprintf+0x332>
    1798:	98 2c       	mov	r9, r8
    179a:	21 2c       	mov	r2, r1
    179c:	a4 fe       	sbrs	r10, 4
    179e:	10 c0       	rjmp	.+32     	; 0x17c0 <vfprintf+0x356>
    17a0:	b6 01       	movw	r22, r12
    17a2:	80 e3       	ldi	r24, 0x30	; 48
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <fputc>
    17aa:	a2 fe       	sbrs	r10, 2
    17ac:	17 c0       	rjmp	.+46     	; 0x17dc <vfprintf+0x372>
    17ae:	a1 fc       	sbrc	r10, 1
    17b0:	03 c0       	rjmp	.+6      	; 0x17b8 <vfprintf+0x34e>
    17b2:	88 e7       	ldi	r24, 0x78	; 120
    17b4:	90 e0       	ldi	r25, 0x00	; 0
    17b6:	02 c0       	rjmp	.+4      	; 0x17bc <vfprintf+0x352>
    17b8:	88 e5       	ldi	r24, 0x58	; 88
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	b6 01       	movw	r22, r12
    17be:	0c c0       	rjmp	.+24     	; 0x17d8 <vfprintf+0x36e>
    17c0:	8a 2d       	mov	r24, r10
    17c2:	86 78       	andi	r24, 0x86	; 134
    17c4:	59 f0       	breq	.+22     	; 0x17dc <vfprintf+0x372>
    17c6:	a1 fe       	sbrs	r10, 1
    17c8:	02 c0       	rjmp	.+4      	; 0x17ce <vfprintf+0x364>
    17ca:	8b e2       	ldi	r24, 0x2B	; 43
    17cc:	01 c0       	rjmp	.+2      	; 0x17d0 <vfprintf+0x366>
    17ce:	80 e2       	ldi	r24, 0x20	; 32
    17d0:	a7 fc       	sbrc	r10, 7
    17d2:	8d e2       	ldi	r24, 0x2D	; 45
    17d4:	b6 01       	movw	r22, r12
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <fputc>
    17dc:	89 14       	cp	r8, r9
    17de:	38 f4       	brcc	.+14     	; 0x17ee <vfprintf+0x384>
    17e0:	b6 01       	movw	r22, r12
    17e2:	80 e3       	ldi	r24, 0x30	; 48
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <fputc>
    17ea:	9a 94       	dec	r9
    17ec:	f7 cf       	rjmp	.-18     	; 0x17dc <vfprintf+0x372>
    17ee:	8a 94       	dec	r8
    17f0:	f3 01       	movw	r30, r6
    17f2:	e8 0d       	add	r30, r8
    17f4:	f1 1d       	adc	r31, r1
    17f6:	80 81       	ld	r24, Z
    17f8:	b6 01       	movw	r22, r12
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <fputc>
    1800:	81 10       	cpse	r8, r1
    1802:	f5 cf       	rjmp	.-22     	; 0x17ee <vfprintf+0x384>
    1804:	22 20       	and	r2, r2
    1806:	09 f4       	brne	.+2      	; 0x180a <vfprintf+0x3a0>
    1808:	42 ce       	rjmp	.-892    	; 0x148e <vfprintf+0x24>
    180a:	b6 01       	movw	r22, r12
    180c:	80 e2       	ldi	r24, 0x20	; 32
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <fputc>
    1814:	2a 94       	dec	r2
    1816:	f6 cf       	rjmp	.-20     	; 0x1804 <vfprintf+0x39a>
    1818:	f6 01       	movw	r30, r12
    181a:	86 81       	ldd	r24, Z+6	; 0x06
    181c:	97 81       	ldd	r25, Z+7	; 0x07
    181e:	02 c0       	rjmp	.+4      	; 0x1824 <vfprintf+0x3ba>
    1820:	8f ef       	ldi	r24, 0xFF	; 255
    1822:	9f ef       	ldi	r25, 0xFF	; 255
    1824:	2b 96       	adiw	r28, 0x0b	; 11
    1826:	e2 e1       	ldi	r30, 0x12	; 18
    1828:	0c 94 14 0f 	jmp	0x1e28	; 0x1e28 <__epilogue_restores__>

0000182c <dtoa_prf>:
    182c:	a9 e0       	ldi	r26, 0x09	; 9
    182e:	b0 e0       	ldi	r27, 0x00	; 0
    1830:	ec e1       	ldi	r30, 0x1C	; 28
    1832:	fc e0       	ldi	r31, 0x0C	; 12
    1834:	0c 94 fe 0e 	jmp	0x1dfc	; 0x1dfc <__prologue_saves__+0xc>
    1838:	6a 01       	movw	r12, r20
    183a:	12 2f       	mov	r17, r18
    183c:	b0 2e       	mov	r11, r16
    183e:	2b e3       	ldi	r18, 0x3B	; 59
    1840:	20 17       	cp	r18, r16
    1842:	20 f0       	brcs	.+8      	; 0x184c <dtoa_prf+0x20>
    1844:	ff 24       	eor	r15, r15
    1846:	f3 94       	inc	r15
    1848:	f0 0e       	add	r15, r16
    184a:	02 c0       	rjmp	.+4      	; 0x1850 <dtoa_prf+0x24>
    184c:	2c e3       	ldi	r18, 0x3C	; 60
    184e:	f2 2e       	mov	r15, r18
    1850:	0f 2d       	mov	r16, r15
    1852:	27 e0       	ldi	r18, 0x07	; 7
    1854:	ae 01       	movw	r20, r28
    1856:	4f 5f       	subi	r20, 0xFF	; 255
    1858:	5f 4f       	sbci	r21, 0xFF	; 255
    185a:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <__ftoa_engine>
    185e:	bc 01       	movw	r22, r24
    1860:	49 81       	ldd	r20, Y+1	; 0x01
    1862:	84 2f       	mov	r24, r20
    1864:	89 70       	andi	r24, 0x09	; 9
    1866:	81 30       	cpi	r24, 0x01	; 1
    1868:	31 f0       	breq	.+12     	; 0x1876 <dtoa_prf+0x4a>
    186a:	e1 fc       	sbrc	r14, 1
    186c:	06 c0       	rjmp	.+12     	; 0x187a <dtoa_prf+0x4e>
    186e:	e0 fe       	sbrs	r14, 0
    1870:	06 c0       	rjmp	.+12     	; 0x187e <dtoa_prf+0x52>
    1872:	90 e2       	ldi	r25, 0x20	; 32
    1874:	05 c0       	rjmp	.+10     	; 0x1880 <dtoa_prf+0x54>
    1876:	9d e2       	ldi	r25, 0x2D	; 45
    1878:	03 c0       	rjmp	.+6      	; 0x1880 <dtoa_prf+0x54>
    187a:	9b e2       	ldi	r25, 0x2B	; 43
    187c:	01 c0       	rjmp	.+2      	; 0x1880 <dtoa_prf+0x54>
    187e:	90 e0       	ldi	r25, 0x00	; 0
    1880:	5e 2d       	mov	r21, r14
    1882:	50 71       	andi	r21, 0x10	; 16
    1884:	43 ff       	sbrs	r20, 3
    1886:	3c c0       	rjmp	.+120    	; 0x1900 <dtoa_prf+0xd4>
    1888:	91 11       	cpse	r25, r1
    188a:	02 c0       	rjmp	.+4      	; 0x1890 <dtoa_prf+0x64>
    188c:	83 e0       	ldi	r24, 0x03	; 3
    188e:	01 c0       	rjmp	.+2      	; 0x1892 <dtoa_prf+0x66>
    1890:	84 e0       	ldi	r24, 0x04	; 4
    1892:	81 17       	cp	r24, r17
    1894:	18 f4       	brcc	.+6      	; 0x189c <dtoa_prf+0x70>
    1896:	21 2f       	mov	r18, r17
    1898:	28 1b       	sub	r18, r24
    189a:	01 c0       	rjmp	.+2      	; 0x189e <dtoa_prf+0x72>
    189c:	20 e0       	ldi	r18, 0x00	; 0
    189e:	51 11       	cpse	r21, r1
    18a0:	0b c0       	rjmp	.+22     	; 0x18b8 <dtoa_prf+0x8c>
    18a2:	f6 01       	movw	r30, r12
    18a4:	82 2f       	mov	r24, r18
    18a6:	30 e2       	ldi	r19, 0x20	; 32
    18a8:	88 23       	and	r24, r24
    18aa:	19 f0       	breq	.+6      	; 0x18b2 <dtoa_prf+0x86>
    18ac:	31 93       	st	Z+, r19
    18ae:	81 50       	subi	r24, 0x01	; 1
    18b0:	fb cf       	rjmp	.-10     	; 0x18a8 <dtoa_prf+0x7c>
    18b2:	c2 0e       	add	r12, r18
    18b4:	d1 1c       	adc	r13, r1
    18b6:	20 e0       	ldi	r18, 0x00	; 0
    18b8:	99 23       	and	r25, r25
    18ba:	29 f0       	breq	.+10     	; 0x18c6 <dtoa_prf+0x9a>
    18bc:	d6 01       	movw	r26, r12
    18be:	9c 93       	st	X, r25
    18c0:	f6 01       	movw	r30, r12
    18c2:	31 96       	adiw	r30, 0x01	; 1
    18c4:	6f 01       	movw	r12, r30
    18c6:	c6 01       	movw	r24, r12
    18c8:	03 96       	adiw	r24, 0x03	; 3
    18ca:	e2 fe       	sbrs	r14, 2
    18cc:	0a c0       	rjmp	.+20     	; 0x18e2 <dtoa_prf+0xb6>
    18ce:	3e e4       	ldi	r19, 0x4E	; 78
    18d0:	d6 01       	movw	r26, r12
    18d2:	3c 93       	st	X, r19
    18d4:	41 e4       	ldi	r20, 0x41	; 65
    18d6:	11 96       	adiw	r26, 0x01	; 1
    18d8:	4c 93       	st	X, r20
    18da:	11 97       	sbiw	r26, 0x01	; 1
    18dc:	12 96       	adiw	r26, 0x02	; 2
    18de:	3c 93       	st	X, r19
    18e0:	06 c0       	rjmp	.+12     	; 0x18ee <dtoa_prf+0xc2>
    18e2:	3e e6       	ldi	r19, 0x6E	; 110
    18e4:	f6 01       	movw	r30, r12
    18e6:	30 83       	st	Z, r19
    18e8:	41 e6       	ldi	r20, 0x61	; 97
    18ea:	41 83       	std	Z+1, r20	; 0x01
    18ec:	32 83       	std	Z+2, r19	; 0x02
    18ee:	fc 01       	movw	r30, r24
    18f0:	32 2f       	mov	r19, r18
    18f2:	40 e2       	ldi	r20, 0x20	; 32
    18f4:	33 23       	and	r19, r19
    18f6:	09 f4       	brne	.+2      	; 0x18fa <dtoa_prf+0xce>
    18f8:	42 c0       	rjmp	.+132    	; 0x197e <dtoa_prf+0x152>
    18fa:	41 93       	st	Z+, r20
    18fc:	31 50       	subi	r19, 0x01	; 1
    18fe:	fa cf       	rjmp	.-12     	; 0x18f4 <dtoa_prf+0xc8>
    1900:	42 ff       	sbrs	r20, 2
    1902:	44 c0       	rjmp	.+136    	; 0x198c <dtoa_prf+0x160>
    1904:	91 11       	cpse	r25, r1
    1906:	02 c0       	rjmp	.+4      	; 0x190c <dtoa_prf+0xe0>
    1908:	83 e0       	ldi	r24, 0x03	; 3
    190a:	01 c0       	rjmp	.+2      	; 0x190e <dtoa_prf+0xe2>
    190c:	84 e0       	ldi	r24, 0x04	; 4
    190e:	81 17       	cp	r24, r17
    1910:	18 f4       	brcc	.+6      	; 0x1918 <dtoa_prf+0xec>
    1912:	21 2f       	mov	r18, r17
    1914:	28 1b       	sub	r18, r24
    1916:	01 c0       	rjmp	.+2      	; 0x191a <dtoa_prf+0xee>
    1918:	20 e0       	ldi	r18, 0x00	; 0
    191a:	51 11       	cpse	r21, r1
    191c:	0b c0       	rjmp	.+22     	; 0x1934 <dtoa_prf+0x108>
    191e:	f6 01       	movw	r30, r12
    1920:	82 2f       	mov	r24, r18
    1922:	30 e2       	ldi	r19, 0x20	; 32
    1924:	88 23       	and	r24, r24
    1926:	19 f0       	breq	.+6      	; 0x192e <dtoa_prf+0x102>
    1928:	31 93       	st	Z+, r19
    192a:	81 50       	subi	r24, 0x01	; 1
    192c:	fb cf       	rjmp	.-10     	; 0x1924 <dtoa_prf+0xf8>
    192e:	c2 0e       	add	r12, r18
    1930:	d1 1c       	adc	r13, r1
    1932:	20 e0       	ldi	r18, 0x00	; 0
    1934:	99 23       	and	r25, r25
    1936:	29 f0       	breq	.+10     	; 0x1942 <dtoa_prf+0x116>
    1938:	d6 01       	movw	r26, r12
    193a:	9c 93       	st	X, r25
    193c:	f6 01       	movw	r30, r12
    193e:	31 96       	adiw	r30, 0x01	; 1
    1940:	6f 01       	movw	r12, r30
    1942:	c6 01       	movw	r24, r12
    1944:	03 96       	adiw	r24, 0x03	; 3
    1946:	e2 fe       	sbrs	r14, 2
    1948:	0b c0       	rjmp	.+22     	; 0x1960 <dtoa_prf+0x134>
    194a:	39 e4       	ldi	r19, 0x49	; 73
    194c:	d6 01       	movw	r26, r12
    194e:	3c 93       	st	X, r19
    1950:	3e e4       	ldi	r19, 0x4E	; 78
    1952:	11 96       	adiw	r26, 0x01	; 1
    1954:	3c 93       	st	X, r19
    1956:	11 97       	sbiw	r26, 0x01	; 1
    1958:	36 e4       	ldi	r19, 0x46	; 70
    195a:	12 96       	adiw	r26, 0x02	; 2
    195c:	3c 93       	st	X, r19
    195e:	07 c0       	rjmp	.+14     	; 0x196e <dtoa_prf+0x142>
    1960:	39 e6       	ldi	r19, 0x69	; 105
    1962:	f6 01       	movw	r30, r12
    1964:	30 83       	st	Z, r19
    1966:	3e e6       	ldi	r19, 0x6E	; 110
    1968:	31 83       	std	Z+1, r19	; 0x01
    196a:	36 e6       	ldi	r19, 0x66	; 102
    196c:	32 83       	std	Z+2, r19	; 0x02
    196e:	fc 01       	movw	r30, r24
    1970:	32 2f       	mov	r19, r18
    1972:	40 e2       	ldi	r20, 0x20	; 32
    1974:	33 23       	and	r19, r19
    1976:	19 f0       	breq	.+6      	; 0x197e <dtoa_prf+0x152>
    1978:	41 93       	st	Z+, r20
    197a:	31 50       	subi	r19, 0x01	; 1
    197c:	fb cf       	rjmp	.-10     	; 0x1974 <dtoa_prf+0x148>
    197e:	fc 01       	movw	r30, r24
    1980:	e2 0f       	add	r30, r18
    1982:	f1 1d       	adc	r31, r1
    1984:	10 82       	st	Z, r1
    1986:	8e ef       	ldi	r24, 0xFE	; 254
    1988:	9f ef       	ldi	r25, 0xFF	; 255
    198a:	a6 c0       	rjmp	.+332    	; 0x1ad8 <dtoa_prf+0x2ac>
    198c:	21 e0       	ldi	r18, 0x01	; 1
    198e:	30 e0       	ldi	r19, 0x00	; 0
    1990:	91 11       	cpse	r25, r1
    1992:	02 c0       	rjmp	.+4      	; 0x1998 <dtoa_prf+0x16c>
    1994:	20 e0       	ldi	r18, 0x00	; 0
    1996:	30 e0       	ldi	r19, 0x00	; 0
    1998:	16 16       	cp	r1, r22
    199a:	17 06       	cpc	r1, r23
    199c:	1c f4       	brge	.+6      	; 0x19a4 <dtoa_prf+0x178>
    199e:	fb 01       	movw	r30, r22
    19a0:	31 96       	adiw	r30, 0x01	; 1
    19a2:	02 c0       	rjmp	.+4      	; 0x19a8 <dtoa_prf+0x17c>
    19a4:	e1 e0       	ldi	r30, 0x01	; 1
    19a6:	f0 e0       	ldi	r31, 0x00	; 0
    19a8:	2e 0f       	add	r18, r30
    19aa:	3f 1f       	adc	r19, r31
    19ac:	bb 20       	and	r11, r11
    19ae:	21 f0       	breq	.+8      	; 0x19b8 <dtoa_prf+0x18c>
    19b0:	eb 2d       	mov	r30, r11
    19b2:	f0 e0       	ldi	r31, 0x00	; 0
    19b4:	31 96       	adiw	r30, 0x01	; 1
    19b6:	02 c0       	rjmp	.+4      	; 0x19bc <dtoa_prf+0x190>
    19b8:	e0 e0       	ldi	r30, 0x00	; 0
    19ba:	f0 e0       	ldi	r31, 0x00	; 0
    19bc:	2e 0f       	add	r18, r30
    19be:	3f 1f       	adc	r19, r31
    19c0:	e1 2f       	mov	r30, r17
    19c2:	f0 e0       	ldi	r31, 0x00	; 0
    19c4:	2e 17       	cp	r18, r30
    19c6:	3f 07       	cpc	r19, r31
    19c8:	1c f4       	brge	.+6      	; 0x19d0 <dtoa_prf+0x1a4>
    19ca:	12 1b       	sub	r17, r18
    19cc:	21 2f       	mov	r18, r17
    19ce:	01 c0       	rjmp	.+2      	; 0x19d2 <dtoa_prf+0x1a6>
    19d0:	20 e0       	ldi	r18, 0x00	; 0
    19d2:	8e 2d       	mov	r24, r14
    19d4:	88 71       	andi	r24, 0x18	; 24
    19d6:	59 f4       	brne	.+22     	; 0x19ee <dtoa_prf+0x1c2>
    19d8:	f6 01       	movw	r30, r12
    19da:	82 2f       	mov	r24, r18
    19dc:	30 e2       	ldi	r19, 0x20	; 32
    19de:	88 23       	and	r24, r24
    19e0:	19 f0       	breq	.+6      	; 0x19e8 <dtoa_prf+0x1bc>
    19e2:	31 93       	st	Z+, r19
    19e4:	81 50       	subi	r24, 0x01	; 1
    19e6:	fb cf       	rjmp	.-10     	; 0x19de <dtoa_prf+0x1b2>
    19e8:	c2 0e       	add	r12, r18
    19ea:	d1 1c       	adc	r13, r1
    19ec:	20 e0       	ldi	r18, 0x00	; 0
    19ee:	99 23       	and	r25, r25
    19f0:	29 f0       	breq	.+10     	; 0x19fc <dtoa_prf+0x1d0>
    19f2:	d6 01       	movw	r26, r12
    19f4:	9c 93       	st	X, r25
    19f6:	f6 01       	movw	r30, r12
    19f8:	31 96       	adiw	r30, 0x01	; 1
    19fa:	6f 01       	movw	r12, r30
    19fc:	51 11       	cpse	r21, r1
    19fe:	0b c0       	rjmp	.+22     	; 0x1a16 <dtoa_prf+0x1ea>
    1a00:	f6 01       	movw	r30, r12
    1a02:	82 2f       	mov	r24, r18
    1a04:	90 e3       	ldi	r25, 0x30	; 48
    1a06:	88 23       	and	r24, r24
    1a08:	19 f0       	breq	.+6      	; 0x1a10 <dtoa_prf+0x1e4>
    1a0a:	91 93       	st	Z+, r25
    1a0c:	81 50       	subi	r24, 0x01	; 1
    1a0e:	fb cf       	rjmp	.-10     	; 0x1a06 <dtoa_prf+0x1da>
    1a10:	c2 0e       	add	r12, r18
    1a12:	d1 1c       	adc	r13, r1
    1a14:	20 e0       	ldi	r18, 0x00	; 0
    1a16:	0f 2d       	mov	r16, r15
    1a18:	06 0f       	add	r16, r22
    1a1a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a1c:	34 2f       	mov	r19, r20
    1a1e:	30 71       	andi	r19, 0x10	; 16
    1a20:	44 ff       	sbrs	r20, 4
    1a22:	03 c0       	rjmp	.+6      	; 0x1a2a <dtoa_prf+0x1fe>
    1a24:	91 33       	cpi	r25, 0x31	; 49
    1a26:	09 f4       	brne	.+2      	; 0x1a2a <dtoa_prf+0x1fe>
    1a28:	01 50       	subi	r16, 0x01	; 1
    1a2a:	10 16       	cp	r1, r16
    1a2c:	24 f4       	brge	.+8      	; 0x1a36 <dtoa_prf+0x20a>
    1a2e:	09 30       	cpi	r16, 0x09	; 9
    1a30:	18 f0       	brcs	.+6      	; 0x1a38 <dtoa_prf+0x20c>
    1a32:	08 e0       	ldi	r16, 0x08	; 8
    1a34:	01 c0       	rjmp	.+2      	; 0x1a38 <dtoa_prf+0x20c>
    1a36:	01 e0       	ldi	r16, 0x01	; 1
    1a38:	ab 01       	movw	r20, r22
    1a3a:	77 ff       	sbrs	r23, 7
    1a3c:	02 c0       	rjmp	.+4      	; 0x1a42 <dtoa_prf+0x216>
    1a3e:	40 e0       	ldi	r20, 0x00	; 0
    1a40:	50 e0       	ldi	r21, 0x00	; 0
    1a42:	fb 01       	movw	r30, r22
    1a44:	e4 1b       	sub	r30, r20
    1a46:	f5 0b       	sbc	r31, r21
    1a48:	a1 e0       	ldi	r26, 0x01	; 1
    1a4a:	b0 e0       	ldi	r27, 0x00	; 0
    1a4c:	ac 0f       	add	r26, r28
    1a4e:	bd 1f       	adc	r27, r29
    1a50:	ea 0f       	add	r30, r26
    1a52:	fb 1f       	adc	r31, r27
    1a54:	8e e2       	ldi	r24, 0x2E	; 46
    1a56:	a8 2e       	mov	r10, r24
    1a58:	4b 01       	movw	r8, r22
    1a5a:	80 1a       	sub	r8, r16
    1a5c:	91 08       	sbc	r9, r1
    1a5e:	0b 2d       	mov	r16, r11
    1a60:	10 e0       	ldi	r17, 0x00	; 0
    1a62:	11 95       	neg	r17
    1a64:	01 95       	neg	r16
    1a66:	11 09       	sbc	r17, r1
    1a68:	4f 3f       	cpi	r20, 0xFF	; 255
    1a6a:	bf ef       	ldi	r27, 0xFF	; 255
    1a6c:	5b 07       	cpc	r21, r27
    1a6e:	21 f4       	brne	.+8      	; 0x1a78 <dtoa_prf+0x24c>
    1a70:	d6 01       	movw	r26, r12
    1a72:	ac 92       	st	X, r10
    1a74:	11 96       	adiw	r26, 0x01	; 1
    1a76:	6d 01       	movw	r12, r26
    1a78:	64 17       	cp	r22, r20
    1a7a:	75 07       	cpc	r23, r21
    1a7c:	2c f0       	brlt	.+10     	; 0x1a88 <dtoa_prf+0x25c>
    1a7e:	84 16       	cp	r8, r20
    1a80:	95 06       	cpc	r9, r21
    1a82:	14 f4       	brge	.+4      	; 0x1a88 <dtoa_prf+0x25c>
    1a84:	81 81       	ldd	r24, Z+1	; 0x01
    1a86:	01 c0       	rjmp	.+2      	; 0x1a8a <dtoa_prf+0x25e>
    1a88:	80 e3       	ldi	r24, 0x30	; 48
    1a8a:	41 50       	subi	r20, 0x01	; 1
    1a8c:	51 09       	sbc	r21, r1
    1a8e:	31 96       	adiw	r30, 0x01	; 1
    1a90:	d6 01       	movw	r26, r12
    1a92:	11 96       	adiw	r26, 0x01	; 1
    1a94:	7d 01       	movw	r14, r26
    1a96:	40 17       	cp	r20, r16
    1a98:	51 07       	cpc	r21, r17
    1a9a:	24 f0       	brlt	.+8      	; 0x1aa4 <dtoa_prf+0x278>
    1a9c:	d6 01       	movw	r26, r12
    1a9e:	8c 93       	st	X, r24
    1aa0:	67 01       	movw	r12, r14
    1aa2:	e2 cf       	rjmp	.-60     	; 0x1a68 <dtoa_prf+0x23c>
    1aa4:	64 17       	cp	r22, r20
    1aa6:	75 07       	cpc	r23, r21
    1aa8:	39 f4       	brne	.+14     	; 0x1ab8 <dtoa_prf+0x28c>
    1aaa:	96 33       	cpi	r25, 0x36	; 54
    1aac:	20 f4       	brcc	.+8      	; 0x1ab6 <dtoa_prf+0x28a>
    1aae:	95 33       	cpi	r25, 0x35	; 53
    1ab0:	19 f4       	brne	.+6      	; 0x1ab8 <dtoa_prf+0x28c>
    1ab2:	31 11       	cpse	r19, r1
    1ab4:	01 c0       	rjmp	.+2      	; 0x1ab8 <dtoa_prf+0x28c>
    1ab6:	81 e3       	ldi	r24, 0x31	; 49
    1ab8:	f6 01       	movw	r30, r12
    1aba:	80 83       	st	Z, r24
    1abc:	f7 01       	movw	r30, r14
    1abe:	82 2f       	mov	r24, r18
    1ac0:	90 e2       	ldi	r25, 0x20	; 32
    1ac2:	88 23       	and	r24, r24
    1ac4:	19 f0       	breq	.+6      	; 0x1acc <dtoa_prf+0x2a0>
    1ac6:	91 93       	st	Z+, r25
    1ac8:	81 50       	subi	r24, 0x01	; 1
    1aca:	fb cf       	rjmp	.-10     	; 0x1ac2 <dtoa_prf+0x296>
    1acc:	f7 01       	movw	r30, r14
    1ace:	e2 0f       	add	r30, r18
    1ad0:	f1 1d       	adc	r31, r1
    1ad2:	10 82       	st	Z, r1
    1ad4:	80 e0       	ldi	r24, 0x00	; 0
    1ad6:	90 e0       	ldi	r25, 0x00	; 0
    1ad8:	29 96       	adiw	r28, 0x09	; 9
    1ada:	ec e0       	ldi	r30, 0x0C	; 12
    1adc:	0c 94 1a 0f 	jmp	0x1e34	; 0x1e34 <__epilogue_restores__+0xc>

00001ae0 <__ftoa_engine>:
    1ae0:	28 30       	cpi	r18, 0x08	; 8
    1ae2:	08 f0       	brcs	.+2      	; 0x1ae6 <__ftoa_engine+0x6>
    1ae4:	27 e0       	ldi	r18, 0x07	; 7
    1ae6:	33 27       	eor	r19, r19
    1ae8:	da 01       	movw	r26, r20
    1aea:	99 0f       	add	r25, r25
    1aec:	31 1d       	adc	r19, r1
    1aee:	87 fd       	sbrc	r24, 7
    1af0:	91 60       	ori	r25, 0x01	; 1
    1af2:	00 96       	adiw	r24, 0x00	; 0
    1af4:	61 05       	cpc	r22, r1
    1af6:	71 05       	cpc	r23, r1
    1af8:	39 f4       	brne	.+14     	; 0x1b08 <__ftoa_engine+0x28>
    1afa:	32 60       	ori	r19, 0x02	; 2
    1afc:	2e 5f       	subi	r18, 0xFE	; 254
    1afe:	3d 93       	st	X+, r19
    1b00:	30 e3       	ldi	r19, 0x30	; 48
    1b02:	2a 95       	dec	r18
    1b04:	e1 f7       	brne	.-8      	; 0x1afe <__ftoa_engine+0x1e>
    1b06:	08 95       	ret
    1b08:	9f 3f       	cpi	r25, 0xFF	; 255
    1b0a:	30 f0       	brcs	.+12     	; 0x1b18 <__ftoa_engine+0x38>
    1b0c:	80 38       	cpi	r24, 0x80	; 128
    1b0e:	71 05       	cpc	r23, r1
    1b10:	61 05       	cpc	r22, r1
    1b12:	09 f0       	breq	.+2      	; 0x1b16 <__ftoa_engine+0x36>
    1b14:	3c 5f       	subi	r19, 0xFC	; 252
    1b16:	3c 5f       	subi	r19, 0xFC	; 252
    1b18:	3d 93       	st	X+, r19
    1b1a:	91 30       	cpi	r25, 0x01	; 1
    1b1c:	08 f0       	brcs	.+2      	; 0x1b20 <__ftoa_engine+0x40>
    1b1e:	80 68       	ori	r24, 0x80	; 128
    1b20:	91 1d       	adc	r25, r1
    1b22:	df 93       	push	r29
    1b24:	cf 93       	push	r28
    1b26:	1f 93       	push	r17
    1b28:	0f 93       	push	r16
    1b2a:	ff 92       	push	r15
    1b2c:	ef 92       	push	r14
    1b2e:	19 2f       	mov	r17, r25
    1b30:	98 7f       	andi	r25, 0xF8	; 248
    1b32:	96 95       	lsr	r25
    1b34:	e9 2f       	mov	r30, r25
    1b36:	96 95       	lsr	r25
    1b38:	96 95       	lsr	r25
    1b3a:	e9 0f       	add	r30, r25
    1b3c:	ff 27       	eor	r31, r31
    1b3e:	e0 53       	subi	r30, 0x30	; 48
    1b40:	ff 4f       	sbci	r31, 0xFF	; 255
    1b42:	99 27       	eor	r25, r25
    1b44:	33 27       	eor	r19, r19
    1b46:	ee 24       	eor	r14, r14
    1b48:	ff 24       	eor	r15, r15
    1b4a:	a7 01       	movw	r20, r14
    1b4c:	e7 01       	movw	r28, r14
    1b4e:	05 90       	lpm	r0, Z+
    1b50:	08 94       	sec
    1b52:	07 94       	ror	r0
    1b54:	28 f4       	brcc	.+10     	; 0x1b60 <__ftoa_engine+0x80>
    1b56:	36 0f       	add	r19, r22
    1b58:	e7 1e       	adc	r14, r23
    1b5a:	f8 1e       	adc	r15, r24
    1b5c:	49 1f       	adc	r20, r25
    1b5e:	51 1d       	adc	r21, r1
    1b60:	66 0f       	add	r22, r22
    1b62:	77 1f       	adc	r23, r23
    1b64:	88 1f       	adc	r24, r24
    1b66:	99 1f       	adc	r25, r25
    1b68:	06 94       	lsr	r0
    1b6a:	a1 f7       	brne	.-24     	; 0x1b54 <__ftoa_engine+0x74>
    1b6c:	05 90       	lpm	r0, Z+
    1b6e:	07 94       	ror	r0
    1b70:	28 f4       	brcc	.+10     	; 0x1b7c <__ftoa_engine+0x9c>
    1b72:	e7 0e       	add	r14, r23
    1b74:	f8 1e       	adc	r15, r24
    1b76:	49 1f       	adc	r20, r25
    1b78:	56 1f       	adc	r21, r22
    1b7a:	c1 1d       	adc	r28, r1
    1b7c:	77 0f       	add	r23, r23
    1b7e:	88 1f       	adc	r24, r24
    1b80:	99 1f       	adc	r25, r25
    1b82:	66 1f       	adc	r22, r22
    1b84:	06 94       	lsr	r0
    1b86:	a1 f7       	brne	.-24     	; 0x1b70 <__ftoa_engine+0x90>
    1b88:	05 90       	lpm	r0, Z+
    1b8a:	07 94       	ror	r0
    1b8c:	28 f4       	brcc	.+10     	; 0x1b98 <__ftoa_engine+0xb8>
    1b8e:	f8 0e       	add	r15, r24
    1b90:	49 1f       	adc	r20, r25
    1b92:	56 1f       	adc	r21, r22
    1b94:	c7 1f       	adc	r28, r23
    1b96:	d1 1d       	adc	r29, r1
    1b98:	88 0f       	add	r24, r24
    1b9a:	99 1f       	adc	r25, r25
    1b9c:	66 1f       	adc	r22, r22
    1b9e:	77 1f       	adc	r23, r23
    1ba0:	06 94       	lsr	r0
    1ba2:	a1 f7       	brne	.-24     	; 0x1b8c <__ftoa_engine+0xac>
    1ba4:	05 90       	lpm	r0, Z+
    1ba6:	07 94       	ror	r0
    1ba8:	20 f4       	brcc	.+8      	; 0x1bb2 <__ftoa_engine+0xd2>
    1baa:	49 0f       	add	r20, r25
    1bac:	56 1f       	adc	r21, r22
    1bae:	c7 1f       	adc	r28, r23
    1bb0:	d8 1f       	adc	r29, r24
    1bb2:	99 0f       	add	r25, r25
    1bb4:	66 1f       	adc	r22, r22
    1bb6:	77 1f       	adc	r23, r23
    1bb8:	88 1f       	adc	r24, r24
    1bba:	06 94       	lsr	r0
    1bbc:	a9 f7       	brne	.-22     	; 0x1ba8 <__ftoa_engine+0xc8>
    1bbe:	84 91       	lpm	r24, Z
    1bc0:	10 95       	com	r17
    1bc2:	17 70       	andi	r17, 0x07	; 7
    1bc4:	41 f0       	breq	.+16     	; 0x1bd6 <__ftoa_engine+0xf6>
    1bc6:	d6 95       	lsr	r29
    1bc8:	c7 95       	ror	r28
    1bca:	57 95       	ror	r21
    1bcc:	47 95       	ror	r20
    1bce:	f7 94       	ror	r15
    1bd0:	e7 94       	ror	r14
    1bd2:	1a 95       	dec	r17
    1bd4:	c1 f7       	brne	.-16     	; 0x1bc6 <__ftoa_engine+0xe6>
    1bd6:	e6 e7       	ldi	r30, 0x76	; 118
    1bd8:	f0 e0       	ldi	r31, 0x00	; 0
    1bda:	68 94       	set
    1bdc:	15 90       	lpm	r1, Z+
    1bde:	15 91       	lpm	r17, Z+
    1be0:	35 91       	lpm	r19, Z+
    1be2:	65 91       	lpm	r22, Z+
    1be4:	95 91       	lpm	r25, Z+
    1be6:	05 90       	lpm	r0, Z+
    1be8:	7f e2       	ldi	r23, 0x2F	; 47
    1bea:	73 95       	inc	r23
    1bec:	e1 18       	sub	r14, r1
    1bee:	f1 0a       	sbc	r15, r17
    1bf0:	43 0b       	sbc	r20, r19
    1bf2:	56 0b       	sbc	r21, r22
    1bf4:	c9 0b       	sbc	r28, r25
    1bf6:	d0 09       	sbc	r29, r0
    1bf8:	c0 f7       	brcc	.-16     	; 0x1bea <__ftoa_engine+0x10a>
    1bfa:	e1 0c       	add	r14, r1
    1bfc:	f1 1e       	adc	r15, r17
    1bfe:	43 1f       	adc	r20, r19
    1c00:	56 1f       	adc	r21, r22
    1c02:	c9 1f       	adc	r28, r25
    1c04:	d0 1d       	adc	r29, r0
    1c06:	7e f4       	brtc	.+30     	; 0x1c26 <__ftoa_engine+0x146>
    1c08:	70 33       	cpi	r23, 0x30	; 48
    1c0a:	11 f4       	brne	.+4      	; 0x1c10 <__ftoa_engine+0x130>
    1c0c:	8a 95       	dec	r24
    1c0e:	e6 cf       	rjmp	.-52     	; 0x1bdc <__ftoa_engine+0xfc>
    1c10:	e8 94       	clt
    1c12:	01 50       	subi	r16, 0x01	; 1
    1c14:	30 f0       	brcs	.+12     	; 0x1c22 <__ftoa_engine+0x142>
    1c16:	08 0f       	add	r16, r24
    1c18:	0a f4       	brpl	.+2      	; 0x1c1c <__ftoa_engine+0x13c>
    1c1a:	00 27       	eor	r16, r16
    1c1c:	02 17       	cp	r16, r18
    1c1e:	08 f4       	brcc	.+2      	; 0x1c22 <__ftoa_engine+0x142>
    1c20:	20 2f       	mov	r18, r16
    1c22:	23 95       	inc	r18
    1c24:	02 2f       	mov	r16, r18
    1c26:	7a 33       	cpi	r23, 0x3A	; 58
    1c28:	28 f0       	brcs	.+10     	; 0x1c34 <__ftoa_engine+0x154>
    1c2a:	79 e3       	ldi	r23, 0x39	; 57
    1c2c:	7d 93       	st	X+, r23
    1c2e:	2a 95       	dec	r18
    1c30:	e9 f7       	brne	.-6      	; 0x1c2c <__ftoa_engine+0x14c>
    1c32:	10 c0       	rjmp	.+32     	; 0x1c54 <__ftoa_engine+0x174>
    1c34:	7d 93       	st	X+, r23
    1c36:	2a 95       	dec	r18
    1c38:	89 f6       	brne	.-94     	; 0x1bdc <__ftoa_engine+0xfc>
    1c3a:	06 94       	lsr	r0
    1c3c:	97 95       	ror	r25
    1c3e:	67 95       	ror	r22
    1c40:	37 95       	ror	r19
    1c42:	17 95       	ror	r17
    1c44:	17 94       	ror	r1
    1c46:	e1 18       	sub	r14, r1
    1c48:	f1 0a       	sbc	r15, r17
    1c4a:	43 0b       	sbc	r20, r19
    1c4c:	56 0b       	sbc	r21, r22
    1c4e:	c9 0b       	sbc	r28, r25
    1c50:	d0 09       	sbc	r29, r0
    1c52:	98 f0       	brcs	.+38     	; 0x1c7a <__ftoa_engine+0x19a>
    1c54:	23 95       	inc	r18
    1c56:	7e 91       	ld	r23, -X
    1c58:	73 95       	inc	r23
    1c5a:	7a 33       	cpi	r23, 0x3A	; 58
    1c5c:	08 f0       	brcs	.+2      	; 0x1c60 <__ftoa_engine+0x180>
    1c5e:	70 e3       	ldi	r23, 0x30	; 48
    1c60:	7c 93       	st	X, r23
    1c62:	20 13       	cpse	r18, r16
    1c64:	b8 f7       	brcc	.-18     	; 0x1c54 <__ftoa_engine+0x174>
    1c66:	7e 91       	ld	r23, -X
    1c68:	70 61       	ori	r23, 0x10	; 16
    1c6a:	7d 93       	st	X+, r23
    1c6c:	30 f0       	brcs	.+12     	; 0x1c7a <__ftoa_engine+0x19a>
    1c6e:	83 95       	inc	r24
    1c70:	71 e3       	ldi	r23, 0x31	; 49
    1c72:	7d 93       	st	X+, r23
    1c74:	70 e3       	ldi	r23, 0x30	; 48
    1c76:	2a 95       	dec	r18
    1c78:	e1 f7       	brne	.-8      	; 0x1c72 <__ftoa_engine+0x192>
    1c7a:	11 24       	eor	r1, r1
    1c7c:	ef 90       	pop	r14
    1c7e:	ff 90       	pop	r15
    1c80:	0f 91       	pop	r16
    1c82:	1f 91       	pop	r17
    1c84:	cf 91       	pop	r28
    1c86:	df 91       	pop	r29
    1c88:	99 27       	eor	r25, r25
    1c8a:	87 fd       	sbrc	r24, 7
    1c8c:	90 95       	com	r25
    1c8e:	08 95       	ret

00001c90 <strnlen_P>:
    1c90:	fc 01       	movw	r30, r24
    1c92:	05 90       	lpm	r0, Z+
    1c94:	61 50       	subi	r22, 0x01	; 1
    1c96:	70 40       	sbci	r23, 0x00	; 0
    1c98:	01 10       	cpse	r0, r1
    1c9a:	d8 f7       	brcc	.-10     	; 0x1c92 <strnlen_P+0x2>
    1c9c:	80 95       	com	r24
    1c9e:	90 95       	com	r25
    1ca0:	8e 0f       	add	r24, r30
    1ca2:	9f 1f       	adc	r25, r31
    1ca4:	08 95       	ret

00001ca6 <strnlen>:
    1ca6:	fc 01       	movw	r30, r24
    1ca8:	61 50       	subi	r22, 0x01	; 1
    1caa:	70 40       	sbci	r23, 0x00	; 0
    1cac:	01 90       	ld	r0, Z+
    1cae:	01 10       	cpse	r0, r1
    1cb0:	d8 f7       	brcc	.-10     	; 0x1ca8 <strnlen+0x2>
    1cb2:	80 95       	com	r24
    1cb4:	90 95       	com	r25
    1cb6:	8e 0f       	add	r24, r30
    1cb8:	9f 1f       	adc	r25, r31
    1cba:	08 95       	ret

00001cbc <fputc>:
    1cbc:	0f 93       	push	r16
    1cbe:	1f 93       	push	r17
    1cc0:	cf 93       	push	r28
    1cc2:	df 93       	push	r29
    1cc4:	fb 01       	movw	r30, r22
    1cc6:	23 81       	ldd	r18, Z+3	; 0x03
    1cc8:	21 fd       	sbrc	r18, 1
    1cca:	03 c0       	rjmp	.+6      	; 0x1cd2 <fputc+0x16>
    1ccc:	8f ef       	ldi	r24, 0xFF	; 255
    1cce:	9f ef       	ldi	r25, 0xFF	; 255
    1cd0:	2c c0       	rjmp	.+88     	; 0x1d2a <fputc+0x6e>
    1cd2:	22 ff       	sbrs	r18, 2
    1cd4:	16 c0       	rjmp	.+44     	; 0x1d02 <fputc+0x46>
    1cd6:	46 81       	ldd	r20, Z+6	; 0x06
    1cd8:	57 81       	ldd	r21, Z+7	; 0x07
    1cda:	24 81       	ldd	r18, Z+4	; 0x04
    1cdc:	35 81       	ldd	r19, Z+5	; 0x05
    1cde:	42 17       	cp	r20, r18
    1ce0:	53 07       	cpc	r21, r19
    1ce2:	44 f4       	brge	.+16     	; 0x1cf4 <fputc+0x38>
    1ce4:	a0 81       	ld	r26, Z
    1ce6:	b1 81       	ldd	r27, Z+1	; 0x01
    1ce8:	9d 01       	movw	r18, r26
    1cea:	2f 5f       	subi	r18, 0xFF	; 255
    1cec:	3f 4f       	sbci	r19, 0xFF	; 255
    1cee:	31 83       	std	Z+1, r19	; 0x01
    1cf0:	20 83       	st	Z, r18
    1cf2:	8c 93       	st	X, r24
    1cf4:	26 81       	ldd	r18, Z+6	; 0x06
    1cf6:	37 81       	ldd	r19, Z+7	; 0x07
    1cf8:	2f 5f       	subi	r18, 0xFF	; 255
    1cfa:	3f 4f       	sbci	r19, 0xFF	; 255
    1cfc:	37 83       	std	Z+7, r19	; 0x07
    1cfe:	26 83       	std	Z+6, r18	; 0x06
    1d00:	14 c0       	rjmp	.+40     	; 0x1d2a <fputc+0x6e>
    1d02:	8b 01       	movw	r16, r22
    1d04:	ec 01       	movw	r28, r24
    1d06:	fb 01       	movw	r30, r22
    1d08:	00 84       	ldd	r0, Z+8	; 0x08
    1d0a:	f1 85       	ldd	r31, Z+9	; 0x09
    1d0c:	e0 2d       	mov	r30, r0
    1d0e:	09 95       	icall
    1d10:	89 2b       	or	r24, r25
    1d12:	e1 f6       	brne	.-72     	; 0x1ccc <fputc+0x10>
    1d14:	d8 01       	movw	r26, r16
    1d16:	16 96       	adiw	r26, 0x06	; 6
    1d18:	8d 91       	ld	r24, X+
    1d1a:	9c 91       	ld	r25, X
    1d1c:	17 97       	sbiw	r26, 0x07	; 7
    1d1e:	01 96       	adiw	r24, 0x01	; 1
    1d20:	17 96       	adiw	r26, 0x07	; 7
    1d22:	9c 93       	st	X, r25
    1d24:	8e 93       	st	-X, r24
    1d26:	16 97       	sbiw	r26, 0x06	; 6
    1d28:	ce 01       	movw	r24, r28
    1d2a:	df 91       	pop	r29
    1d2c:	cf 91       	pop	r28
    1d2e:	1f 91       	pop	r17
    1d30:	0f 91       	pop	r16
    1d32:	08 95       	ret

00001d34 <__ultoa_invert>:
    1d34:	fa 01       	movw	r30, r20
    1d36:	aa 27       	eor	r26, r26
    1d38:	28 30       	cpi	r18, 0x08	; 8
    1d3a:	51 f1       	breq	.+84     	; 0x1d90 <__ultoa_invert+0x5c>
    1d3c:	20 31       	cpi	r18, 0x10	; 16
    1d3e:	81 f1       	breq	.+96     	; 0x1da0 <__ultoa_invert+0x6c>
    1d40:	e8 94       	clt
    1d42:	6f 93       	push	r22
    1d44:	6e 7f       	andi	r22, 0xFE	; 254
    1d46:	6e 5f       	subi	r22, 0xFE	; 254
    1d48:	7f 4f       	sbci	r23, 0xFF	; 255
    1d4a:	8f 4f       	sbci	r24, 0xFF	; 255
    1d4c:	9f 4f       	sbci	r25, 0xFF	; 255
    1d4e:	af 4f       	sbci	r26, 0xFF	; 255
    1d50:	b1 e0       	ldi	r27, 0x01	; 1
    1d52:	3e d0       	rcall	.+124    	; 0x1dd0 <__ultoa_invert+0x9c>
    1d54:	b4 e0       	ldi	r27, 0x04	; 4
    1d56:	3c d0       	rcall	.+120    	; 0x1dd0 <__ultoa_invert+0x9c>
    1d58:	67 0f       	add	r22, r23
    1d5a:	78 1f       	adc	r23, r24
    1d5c:	89 1f       	adc	r24, r25
    1d5e:	9a 1f       	adc	r25, r26
    1d60:	a1 1d       	adc	r26, r1
    1d62:	68 0f       	add	r22, r24
    1d64:	79 1f       	adc	r23, r25
    1d66:	8a 1f       	adc	r24, r26
    1d68:	91 1d       	adc	r25, r1
    1d6a:	a1 1d       	adc	r26, r1
    1d6c:	6a 0f       	add	r22, r26
    1d6e:	71 1d       	adc	r23, r1
    1d70:	81 1d       	adc	r24, r1
    1d72:	91 1d       	adc	r25, r1
    1d74:	a1 1d       	adc	r26, r1
    1d76:	20 d0       	rcall	.+64     	; 0x1db8 <__ultoa_invert+0x84>
    1d78:	09 f4       	brne	.+2      	; 0x1d7c <__ultoa_invert+0x48>
    1d7a:	68 94       	set
    1d7c:	3f 91       	pop	r19
    1d7e:	2a e0       	ldi	r18, 0x0A	; 10
    1d80:	26 9f       	mul	r18, r22
    1d82:	11 24       	eor	r1, r1
    1d84:	30 19       	sub	r19, r0
    1d86:	30 5d       	subi	r19, 0xD0	; 208
    1d88:	31 93       	st	Z+, r19
    1d8a:	de f6       	brtc	.-74     	; 0x1d42 <__ultoa_invert+0xe>
    1d8c:	cf 01       	movw	r24, r30
    1d8e:	08 95       	ret
    1d90:	46 2f       	mov	r20, r22
    1d92:	47 70       	andi	r20, 0x07	; 7
    1d94:	40 5d       	subi	r20, 0xD0	; 208
    1d96:	41 93       	st	Z+, r20
    1d98:	b3 e0       	ldi	r27, 0x03	; 3
    1d9a:	0f d0       	rcall	.+30     	; 0x1dba <__ultoa_invert+0x86>
    1d9c:	c9 f7       	brne	.-14     	; 0x1d90 <__ultoa_invert+0x5c>
    1d9e:	f6 cf       	rjmp	.-20     	; 0x1d8c <__ultoa_invert+0x58>
    1da0:	46 2f       	mov	r20, r22
    1da2:	4f 70       	andi	r20, 0x0F	; 15
    1da4:	40 5d       	subi	r20, 0xD0	; 208
    1da6:	4a 33       	cpi	r20, 0x3A	; 58
    1da8:	18 f0       	brcs	.+6      	; 0x1db0 <__ultoa_invert+0x7c>
    1daa:	49 5d       	subi	r20, 0xD9	; 217
    1dac:	31 fd       	sbrc	r19, 1
    1dae:	40 52       	subi	r20, 0x20	; 32
    1db0:	41 93       	st	Z+, r20
    1db2:	02 d0       	rcall	.+4      	; 0x1db8 <__ultoa_invert+0x84>
    1db4:	a9 f7       	brne	.-22     	; 0x1da0 <__ultoa_invert+0x6c>
    1db6:	ea cf       	rjmp	.-44     	; 0x1d8c <__ultoa_invert+0x58>
    1db8:	b4 e0       	ldi	r27, 0x04	; 4
    1dba:	a6 95       	lsr	r26
    1dbc:	97 95       	ror	r25
    1dbe:	87 95       	ror	r24
    1dc0:	77 95       	ror	r23
    1dc2:	67 95       	ror	r22
    1dc4:	ba 95       	dec	r27
    1dc6:	c9 f7       	brne	.-14     	; 0x1dba <__ultoa_invert+0x86>
    1dc8:	00 97       	sbiw	r24, 0x00	; 0
    1dca:	61 05       	cpc	r22, r1
    1dcc:	71 05       	cpc	r23, r1
    1dce:	08 95       	ret
    1dd0:	9b 01       	movw	r18, r22
    1dd2:	ac 01       	movw	r20, r24
    1dd4:	0a 2e       	mov	r0, r26
    1dd6:	06 94       	lsr	r0
    1dd8:	57 95       	ror	r21
    1dda:	47 95       	ror	r20
    1ddc:	37 95       	ror	r19
    1dde:	27 95       	ror	r18
    1de0:	ba 95       	dec	r27
    1de2:	c9 f7       	brne	.-14     	; 0x1dd6 <__ultoa_invert+0xa2>
    1de4:	62 0f       	add	r22, r18
    1de6:	73 1f       	adc	r23, r19
    1de8:	84 1f       	adc	r24, r20
    1dea:	95 1f       	adc	r25, r21
    1dec:	a0 1d       	adc	r26, r0
    1dee:	08 95       	ret

00001df0 <__prologue_saves__>:
    1df0:	2f 92       	push	r2
    1df2:	3f 92       	push	r3
    1df4:	4f 92       	push	r4
    1df6:	5f 92       	push	r5
    1df8:	6f 92       	push	r6
    1dfa:	7f 92       	push	r7
    1dfc:	8f 92       	push	r8
    1dfe:	9f 92       	push	r9
    1e00:	af 92       	push	r10
    1e02:	bf 92       	push	r11
    1e04:	cf 92       	push	r12
    1e06:	df 92       	push	r13
    1e08:	ef 92       	push	r14
    1e0a:	ff 92       	push	r15
    1e0c:	0f 93       	push	r16
    1e0e:	1f 93       	push	r17
    1e10:	cf 93       	push	r28
    1e12:	df 93       	push	r29
    1e14:	cd b7       	in	r28, 0x3d	; 61
    1e16:	de b7       	in	r29, 0x3e	; 62
    1e18:	ca 1b       	sub	r28, r26
    1e1a:	db 0b       	sbc	r29, r27
    1e1c:	0f b6       	in	r0, 0x3f	; 63
    1e1e:	f8 94       	cli
    1e20:	de bf       	out	0x3e, r29	; 62
    1e22:	0f be       	out	0x3f, r0	; 63
    1e24:	cd bf       	out	0x3d, r28	; 61
    1e26:	09 94       	ijmp

00001e28 <__epilogue_restores__>:
    1e28:	2a 88       	ldd	r2, Y+18	; 0x12
    1e2a:	39 88       	ldd	r3, Y+17	; 0x11
    1e2c:	48 88       	ldd	r4, Y+16	; 0x10
    1e2e:	5f 84       	ldd	r5, Y+15	; 0x0f
    1e30:	6e 84       	ldd	r6, Y+14	; 0x0e
    1e32:	7d 84       	ldd	r7, Y+13	; 0x0d
    1e34:	8c 84       	ldd	r8, Y+12	; 0x0c
    1e36:	9b 84       	ldd	r9, Y+11	; 0x0b
    1e38:	aa 84       	ldd	r10, Y+10	; 0x0a
    1e3a:	b9 84       	ldd	r11, Y+9	; 0x09
    1e3c:	c8 84       	ldd	r12, Y+8	; 0x08
    1e3e:	df 80       	ldd	r13, Y+7	; 0x07
    1e40:	ee 80       	ldd	r14, Y+6	; 0x06
    1e42:	fd 80       	ldd	r15, Y+5	; 0x05
    1e44:	0c 81       	ldd	r16, Y+4	; 0x04
    1e46:	1b 81       	ldd	r17, Y+3	; 0x03
    1e48:	aa 81       	ldd	r26, Y+2	; 0x02
    1e4a:	b9 81       	ldd	r27, Y+1	; 0x01
    1e4c:	ce 0f       	add	r28, r30
    1e4e:	d1 1d       	adc	r29, r1
    1e50:	0f b6       	in	r0, 0x3f	; 63
    1e52:	f8 94       	cli
    1e54:	de bf       	out	0x3e, r29	; 62
    1e56:	0f be       	out	0x3f, r0	; 63
    1e58:	cd bf       	out	0x3d, r28	; 61
    1e5a:	ed 01       	movw	r28, r26
    1e5c:	08 95       	ret

00001e5e <_exit>:
    1e5e:	f8 94       	cli

00001e60 <__stop_program>:
    1e60:	ff cf       	rjmp	.-2      	; 0x1e60 <__stop_program>
